
/Users/bsatrom/Development/particle/workshops/spectra-workshop-2020/labs/lab3/target/1.4.0/argon/lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006270  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da290  000da290  0000a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  0001a32c  2**0
                  CONTENTS
  5 .data         00000068  2003e2c4  000da298  0000e2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c4  2003e330  2003e330  0001e330  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000da300  000da300  0001a300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da328  000da328  0001a328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001220a6  00000000  00000000  0001a32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016e58  00000000  00000000  0013c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000252ce  00000000  00000000  0015322a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003070  00000000  00000000  001784f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000055c0  00000000  00000000  0017b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f85f  00000000  00000000  00180b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039462  00000000  00000000  001c0387  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001094e4  00000000  00000000  001f97e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ec4c  00000000  00000000  00302cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fcb8 	bl	d99a6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fcd8 	bl	d99f2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2c4 	.word	0x2003e2c4
   d404c:	000da298 	.word	0x000da298
   d4050:	2003e32c 	.word	0x2003e32c
   d4054:	2003e330 	.word	0x2003e330
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fbdb 	bl	d8818 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da284 	.word	0x000da284
   d4084:	000da234 	.word	0x000da234

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8c6 	b.w	d4218 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9c3 	bl	d4418 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bb8d 	b.w	d87b4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bbed 	b.w	d5878 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f001 bbeb 	b.w	d5878 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f001 bbf1 	b.w	d5888 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f001 bbef 	b.w	d5888 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z12handle_clickyi>:

const unsigned long UPDATE_INTERVAL = 2000;
unsigned long lastUpdate = 0;

void handle_click(system_event_t event, int param)
{
   d40bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40be:	460d      	mov	r5, r1
   d40c0:	4616      	mov	r6, r2
   d40c2:	4604      	mov	r4, r0
    Serial.printlnf("got event %d with value %d", event, param);
   d40c4:	f004 faa4 	bl	d8610 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40c8:	4a0a      	ldr	r2, [pc, #40]	; (d40f4 <_Z12handle_clickyi+0x38>)
   d40ca:	9602      	str	r6, [sp, #8]
   d40cc:	e9cd 4500 	strd	r4, r5, [sp]
   d40d0:	2101      	movs	r1, #1
   d40d2:	f003 fcdb 	bl	d7a8c <_ZN5Print11printf_implEbPKcz>

    digitalWrite(D7, HIGH);
   d40d6:	2101      	movs	r1, #1
   d40d8:	2007      	movs	r0, #7
   d40da:	f004 fbec 	bl	d88b6 <digitalWrite>
    delay(500);
   d40de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d40e2:	f001 fc42 	bl	d596a <delay>
    digitalWrite(D7, LOW);
   d40e6:	2100      	movs	r1, #0
   d40e8:	2007      	movs	r0, #7
}
   d40ea:	b004      	add	sp, #16
   d40ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    Serial.printlnf("got event %d with value %d", event, param);

    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
   d40f0:	f004 bbe1 	b.w	d88b6 <digitalWrite>
   d40f4:	000d9af4 	.word	0x000d9af4

000d40f8 <_Z9toggleLed6String>:
    }
  }
}

int toggleLed(String args)
{
   d40f8:	b510      	push	{r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40fa:	4c10      	ldr	r4, [pc, #64]	; (d413c <_Z9toggleLed6String+0x44>)
    }
  }
}

int toggleLed(String args)
{
   d40fc:	ed2d 8b02 	vpush	{d8}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d4100:	ed9f 8a0f 	vldr	s16, [pc, #60]	; d4140 <_Z9toggleLed6String+0x48>
   d4104:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d4108:	eeb0 0a48 	vmov.f32	s0, s16
   d410c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d4110:	2100      	movs	r1, #0
   d4112:	4620      	mov	r0, r4
   d4114:	f000 fce0 	bl	d4ad8 <_ZN12ChainableLED11setColorHSBEhfff>

  delay(1000);
   d4118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d411c:	f001 fc25 	bl	d596a <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d4120:	eeb0 1a48 	vmov.f32	s2, s16
   d4124:	eef0 0a48 	vmov.f32	s1, s16
   d4128:	eeb0 0a48 	vmov.f32	s0, s16
   d412c:	4620      	mov	r0, r4
   d412e:	2100      	movs	r1, #0
   d4130:	f000 fcd2 	bl	d4ad8 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
}
   d4134:	ecbd 8b02 	vpop	{d8}
   d4138:	2001      	movs	r0, #1
   d413a:	bd10      	pop	{r4, pc}
   d413c:	2003e334 	.word	0x2003e334
   d4140:	00000000 	.word	0x00000000

000d4144 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4144:	b510      	push	{r4, lr}
   d4146:	4b03      	ldr	r3, [pc, #12]	; (d4154 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4148:	6003      	str	r3, [r0, #0]
   d414a:	4604      	mov	r4, r0
   d414c:	f000 fef4 	bl	d4f38 <_ZN10JsonWriterD1Ev>
   d4150:	4620      	mov	r0, r4
   d4152:	bd10      	pop	{r4, pc}
   d4154:	000d9aec 	.word	0x000d9aec

000d4158 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4158:	b510      	push	{r4, lr}
   d415a:	4604      	mov	r4, r0
   d415c:	f7ff fff2 	bl	d4144 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4160:	4620      	mov	r0, r4
   d4162:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4166:	f004 fc20 	bl	d89aa <_ZdlPvj>
   d416a:	4620      	mov	r0, r4
   d416c:	bd10      	pop	{r4, pc}
	...

000d4170 <_Z12configureBLEv>:
    delay(500);
    digitalWrite(D7, LOW);
}

void configureBLE()
{
   d4170:	b510      	push	{r4, lr}
   d4172:	b096      	sub	sp, #88	; 0x58
  BLE.addCharacteristic(uptimeCharacteristic);
   d4174:	f001 fef6 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4178:	4a23      	ldr	r2, [pc, #140]	; (d4208 <_Z12configureBLEv+0x98>)
   d417a:	4601      	mov	r1, r0
   d417c:	a80d      	add	r0, sp, #52	; 0x34
   d417e:	f002 fb33 	bl	d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4182:	a80d      	add	r0, sp, #52	; 0x34
   d4184:	f001 ffa4 	bl	d60d0 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(signalStrengthCharacteristic);
   d4188:	f001 feec 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d418c:	4a1f      	ldr	r2, [pc, #124]	; (d420c <_Z12configureBLEv+0x9c>)
   d418e:	4601      	mov	r1, r0
   d4190:	a80d      	add	r0, sp, #52	; 0x34
   d4192:	f002 fb29 	bl	d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4196:	a80d      	add	r0, sp, #52	; 0x34
   d4198:	f001 ff9a 	bl	d60d0 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(freeMemoryCharacteristic);
   d419c:	f001 fee2 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41a0:	4a1b      	ldr	r2, [pc, #108]	; (d4210 <_Z12configureBLEv+0xa0>)
   d41a2:	4601      	mov	r1, r0
   d41a4:	a80d      	add	r0, sp, #52	; 0x34
   d41a6:	f002 fb1f 	bl	d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41aa:	a80d      	add	r0, sp, #52	; 0x34
   d41ac:	f001 ff90 	bl	d60d0 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData advData;
   d41b0:	a80d      	add	r0, sp, #52	; 0x34
   d41b2:	f001 fdba 	bl	d5d2a <_ZN8particle18BleAdvertisingDataC1Ev>

  // Advertise our private service only
  advData.appendServiceUUID(serviceUuid);
   d41b6:	4917      	ldr	r1, [pc, #92]	; (d4214 <_Z12configureBLEv+0xa4>)
   d41b8:	a803      	add	r0, sp, #12
   d41ba:	f001 fc61 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41be:	a903      	add	r1, sp, #12
   d41c0:	a808      	add	r0, sp, #32
   d41c2:	f001 fc5d 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41c6:	a808      	add	r0, sp, #32
   d41c8:	f001 fc98 	bl	d5afc <_ZNK8particle7BleUuid4typeEv>
   d41cc:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41ce:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41d0:	b944      	cbnz	r4, d41e4 <_Z12configureBLEv+0x74>
            uint16_t uuid16 = tempUUID.shorted();
   d41d2:	f001 fcb0 	bl	d5b36 <_ZNK8particle7BleUuid7shortedEv>
   d41d6:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41d8:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d41da:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41de:	2103      	movs	r1, #3
   d41e0:	9400      	str	r4, [sp, #0]
   d41e2:	e006      	b.n	d41f2 <_Z12configureBLEv+0x82>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41e4:	f001 fca9 	bl	d5b3a <_ZNK8particle7BleUuid8rawBytesEv>
   d41e8:	2300      	movs	r3, #0
   d41ea:	9300      	str	r3, [sp, #0]
   d41ec:	4602      	mov	r2, r0
   d41ee:	2310      	movs	r3, #16
   d41f0:	2107      	movs	r1, #7
   d41f2:	a80d      	add	r0, sp, #52	; 0x34
   d41f4:	f001 fd52 	bl	d5c9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  // Continuously advertise when not connected
  BLE.advertise(&advData);
   d41f8:	f001 feb4 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41fc:	2200      	movs	r2, #0
   d41fe:	a90d      	add	r1, sp, #52	; 0x34
   d4200:	f001 ff23 	bl	d604a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4204:	b016      	add	sp, #88	; 0x58
   d4206:	bd10      	pop	{r4, pc}
   d4208:	2003e374 	.word	0x2003e374
   d420c:	2003e354 	.word	0x2003e354
   d4210:	2003e3a4 	.word	0x2003e3a4
   d4214:	2003e35c 	.word	0x2003e35c

000d4218 <setup>:

void setup()
{
   d4218:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d421a:	f004 f9f9 	bl	d8610 <_Z16_fetch_usbserialv>

  dht.begin();

  leds.init();
   d421e:	4c1e      	ldr	r4, [pc, #120]	; (d4298 <setup+0x80>)
  BLE.advertise(&advData);
}

void setup()
{
  Serial.begin(9600);
   d4220:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4224:	f004 f9e8 	bl	d85f8 <_ZN9USBSerial5beginEl>

  dht.begin();
   d4228:	481c      	ldr	r0, [pc, #112]	; (d429c <setup+0x84>)
   d422a:	f000 fd57 	bl	d4cdc <_ZN3DHT5beginEv>

  leds.init();
   d422e:	4620      	mov	r0, r4
   d4230:	f000 fbb2 	bl	d4998 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d4234:	ed9f 1a1a 	vldr	s2, [pc, #104]	; d42a0 <setup+0x88>
   d4238:	4620      	mov	r0, r4
   d423a:	eef0 0a41 	vmov.f32	s1, s2
   d423e:	eeb0 0a41 	vmov.f32	s0, s2
   d4242:	2100      	movs	r1, #0
   d4244:	f000 fc48 	bl	d4ad8 <_ZN12ChainableLED11setColorHSBEhfff>

  pinMode(A0, INPUT);
   d4248:	2100      	movs	r1, #0
   d424a:	2013      	movs	r0, #19
   d424c:	f004 fb22 	bl	d8894 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4250:	2300      	movs	r3, #0
   d4252:	2209      	movs	r2, #9
   d4254:	4913      	ldr	r1, [pc, #76]	; (d42a4 <setup+0x8c>)
   d4256:	4814      	ldr	r0, [pc, #80]	; (d42a8 <setup+0x90>)
   d4258:	f001 fa8e 	bl	d5778 <spark_variable>
   d425c:	2300      	movs	r3, #0
   d425e:	2209      	movs	r2, #9
   d4260:	4912      	ldr	r1, [pc, #72]	; (d42ac <setup+0x94>)
   d4262:	4813      	ldr	r0, [pc, #76]	; (d42b0 <setup+0x98>)
   d4264:	f001 fa88 	bl	d5778 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4268:	4a12      	ldr	r2, [pc, #72]	; (d42b4 <setup+0x9c>)
   d426a:	4913      	ldr	r1, [pc, #76]	; (d42b8 <setup+0xa0>)
   d426c:	4813      	ldr	r0, [pc, #76]	; (d42bc <setup+0xa4>)
   d426e:	f002 fc46 	bl	d6afe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("temp", temp_dbl);
  Particle.variable("humidity", humidity_dbl);

  Particle.function("toggleLed", toggleLed);

  Particle.publishVitals(10);
   d4272:	210a      	movs	r1, #10
   d4274:	4812      	ldr	r0, [pc, #72]	; (d42c0 <setup+0xa8>)
   d4276:	f002 fc59 	bl	d6b2c <_ZN10CloudClass13publishVitalsEm>

  configureBLE();
   d427a:	f7ff ff79 	bl	d4170 <_Z12configureBLEv>

  pinMode(D7, OUTPUT);
   d427e:	2101      	movs	r1, #1
   d4280:	2007      	movs	r0, #7
   d4282:	f004 fb07 	bl	d8894 <pinMode>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d4286:	2300      	movs	r3, #0
   d4288:	4a0e      	ldr	r2, [pc, #56]	; (d42c4 <setup+0xac>)
   d428a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   d428e:	2100      	movs	r1, #0
  System.on(button_click, handle_click);
}
   d4290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4294:	f001 ba28 	b.w	d56e8 <system_subscribe_event>
   d4298:	2003e334 	.word	0x2003e334
   d429c:	2003e390 	.word	0x2003e390
   d42a0:	00000000 	.word	0x00000000
   d42a4:	2003e388 	.word	0x2003e388
   d42a8:	000d9b0f 	.word	0x000d9b0f
   d42ac:	2003e380 	.word	0x2003e380
   d42b0:	000d9b14 	.word	0x000d9b14
   d42b4:	000d9b1d 	.word	0x000d9b1d
   d42b8:	000d40f9 	.word	0x000d40f9
   d42bc:	000d6ad3 	.word	0x000d6ad3
   d42c0:	2003e714 	.word	0x2003e714
   d42c4:	000d40bd 	.word	0x000d40bd

000d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42ca:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42cc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ce:	b17c      	cbz	r4, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42d0:	6863      	ldr	r3, [r4, #4]
   d42d2:	3b01      	subs	r3, #1
   d42d4:	6063      	str	r3, [r4, #4]
   d42d6:	b95b      	cbnz	r3, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42d8:	6823      	ldr	r3, [r4, #0]
   d42da:	4620      	mov	r0, r4
   d42dc:	689b      	ldr	r3, [r3, #8]
   d42de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42e0:	68a3      	ldr	r3, [r4, #8]
   d42e2:	3b01      	subs	r3, #1
   d42e4:	60a3      	str	r3, [r4, #8]
   d42e6:	b91b      	cbnz	r3, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e8:	6823      	ldr	r3, [r4, #0]
   d42ea:	4620      	mov	r0, r4
   d42ec:	68db      	ldr	r3, [r3, #12]
   d42ee:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42f0:	4628      	mov	r0, r5
   d42f2:	bd38      	pop	{r3, r4, r5, pc}

000d42f4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42f6:	460e      	mov	r6, r1
   d42f8:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d42fa:	2100      	movs	r1, #0
   d42fc:	4604      	mov	r4, r0
   d42fe:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4300:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4302:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4304:	4619      	mov	r1, r3
   d4306:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4308:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d430a:	f001 fbb9 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d430e:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4310:	4628      	mov	r0, r5
   d4312:	f001 fbb5 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4316:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4318:	9302      	str	r3, [sp, #8]
   d431a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	4620      	mov	r0, r4
   d4320:	9500      	str	r5, [sp, #0]
   d4322:	ab04      	add	r3, sp, #16
   d4324:	463a      	mov	r2, r7
   d4326:	4631      	mov	r1, r6
   d4328:	f002 f9ac 	bl	d6684 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d432c:	4620      	mov	r0, r4
   d432e:	b00f      	add	sp, #60	; 0x3c
   d4330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4334 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4334:	b570      	push	{r4, r5, r6, lr}
   d4336:	4604      	mov	r4, r0
   d4338:	460e      	mov	r6, r1
   d433a:	4615      	mov	r5, r2
		insertCheckSeparator();
   d433c:	f000 ff14 	bl	d5168 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4340:	2201      	movs	r2, #1
   d4342:	4631      	mov	r1, r6
   d4344:	4620      	mov	r0, r4
   d4346:	f000 fe83 	bl	d5050 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d434a:	4620      	mov	r0, r4
   d434c:	213a      	movs	r1, #58	; 0x3a
   d434e:	f000 fe21 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4352:	462a      	mov	r2, r5
   d4354:	4620      	mov	r0, r4
   d4356:	4902      	ldr	r1, [pc, #8]	; (d4360 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d4358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d435c:	f000 be6a 	b.w	d5034 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4360:	000d9b6f 	.word	0x000d9b6f

000d4364 <_Z18createEventPayloadiid>:

  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
   d4364:	b530      	push	{r4, r5, lr}
   d4366:	ed2d 8b02 	vpush	{d8}
   d436a:	eeb0 8a40 	vmov.f32	s16, s0
   d436e:	eef0 8a60 	vmov.f32	s17, s1
   d4372:	b0d3      	sub	sp, #332	; 0x14c
   d4374:	4605      	mov	r5, r0
   d4376:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4378:	f44f 7280 	mov.w	r2, #256	; 0x100
   d437c:	a912      	add	r1, sp, #72	; 0x48
   d437e:	a806      	add	r0, sp, #24
   d4380:	f000 fdf6 	bl	d4f70 <_ZN10JsonWriterC1EPcj>
   d4384:	4b1e      	ldr	r3, [pc, #120]	; (d4400 <_Z18createEventPayloadiid+0x9c>)
   d4386:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4388:	227d      	movs	r2, #125	; 0x7d
   d438a:	217b      	movs	r1, #123	; 0x7b
   d438c:	a806      	add	r0, sp, #24
   d438e:	f000 fe0f 	bl	d4fb0 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4392:	462a      	mov	r2, r5
   d4394:	a806      	add	r0, sp, #24
   d4396:	491b      	ldr	r1, [pc, #108]	; (d4404 <_Z18createEventPayloadiid+0xa0>)
   d4398:	f7ff ffcc 	bl	d4334 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d439c:	4622      	mov	r2, r4
   d439e:	491a      	ldr	r1, [pc, #104]	; (d4408 <_Z18createEventPayloadiid+0xa4>)
   d43a0:	a806      	add	r0, sp, #24
   d43a2:	f7ff ffc7 	bl	d4334 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d43a6:	a806      	add	r0, sp, #24
   d43a8:	f000 fede 	bl	d5168 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d43ac:	2201      	movs	r2, #1
   d43ae:	a806      	add	r0, sp, #24
   d43b0:	4916      	ldr	r1, [pc, #88]	; (d440c <_Z18createEventPayloadiid+0xa8>)
   d43b2:	f000 fe4d 	bl	d5050 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d43b6:	213a      	movs	r1, #58	; 0x3a
   d43b8:	a806      	add	r0, sp, #24
   d43ba:	f000 fdeb 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d43be:	eeb0 0a48 	vmov.f32	s0, s16
   d43c2:	eef0 0a68 	vmov.f32	s1, s17
   d43c6:	a806      	add	r0, sp, #24
   d43c8:	f000 feda 	bl	d5180 <_ZN10JsonWriter11insertValueEd>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d43cc:	a806      	add	r0, sp, #24
   d43ce:	f000 fe00 	bl	d4fd2 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d43d2:	9b07      	ldr	r3, [sp, #28]
   d43d4:	9303      	str	r3, [sp, #12]
   d43d6:	4b0e      	ldr	r3, [pc, #56]	; (d4410 <_Z18createEventPayloadiid+0xac>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43d8:	9a03      	ldr	r2, [sp, #12]
   d43da:	781b      	ldrb	r3, [r3, #0]
   d43dc:	490d      	ldr	r1, [pc, #52]	; (d4414 <_Z18createEventPayloadiid+0xb0>)
   d43de:	f88d 3000 	strb.w	r3, [sp]
   d43e2:	a804      	add	r0, sp, #16
   d43e4:	233c      	movs	r3, #60	; 0x3c
   d43e6:	f002 fcaf 	bl	d6d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43ea:	a805      	add	r0, sp, #20
   d43ec:	f7ff ff6c 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
  JsonWriterStatic<256> jw;
   d43f0:	a806      	add	r0, sp, #24
   d43f2:	f7ff fea7 	bl	d4144 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d43f6:	b053      	add	sp, #332	; 0x14c
   d43f8:	ecbd 8b02 	vpop	{d8}
   d43fc:	bd30      	pop	{r4, r5, pc}
   d43fe:	bf00      	nop
   d4400:	000d9aec 	.word	0x000d9aec
   d4404:	000d9b0f 	.word	0x000d9b0f
   d4408:	000d9b14 	.word	0x000d9b14
   d440c:	000d9b27 	.word	0x000d9b27
   d4410:	2003e370 	.word	0x2003e370
   d4414:	000d9b2d 	.word	0x000d9b2d

000d4418 <loop>:
  pinMode(D7, OUTPUT);
  System.on(button_click, handle_click);
}

void loop()
{
   d4418:	b570      	push	{r4, r5, r6, lr}
   d441a:	b08c      	sub	sp, #48	; 0x30
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d441c:	f000 ffa4 	bl	d5368 <HAL_Timer_Get_Milli_Seconds>
   d4420:	4604      	mov	r4, r0
  unsigned long currentMillis = millis();

  int range;

  range = ultrasonic.MeasureInCentimeters();
   d4422:	4871      	ldr	r0, [pc, #452]	; (d45e8 <loop+0x1d0>)
   d4424:	f000 f9d8 	bl	d47d8 <_ZN10Ultrasonic20MeasureInCentimetersEv>
  if (range != lastRange)
   d4428:	4b70      	ldr	r3, [pc, #448]	; (d45ec <loop+0x1d4>)
   d442a:	681a      	ldr	r2, [r3, #0]
   d442c:	4290      	cmp	r0, r2
{
  unsigned long currentMillis = millis();

  int range;

  range = ultrasonic.MeasureInCentimeters();
   d442e:	4601      	mov	r1, r0
  if (range != lastRange)
   d4430:	d00c      	beq.n	d444c <loop+0x34>
  {
    lastRange = range;
   d4432:	6018      	str	r0, [r3, #0]

    Mesh.publish("distance", String(range));
   d4434:	220a      	movs	r2, #10
   d4436:	a808      	add	r0, sp, #32
   d4438:	f003 fc7f 	bl	d7d3a <_ZN6StringC1Eih>
   d443c:	9a08      	ldr	r2, [sp, #32]
   d443e:	496c      	ldr	r1, [pc, #432]	; (d45f0 <loop+0x1d8>)
   d4440:	486c      	ldr	r0, [pc, #432]	; (d45f4 <loop+0x1dc>)
   d4442:	f003 f941 	bl	d76c8 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4446:	a808      	add	r0, sp, #32
   d4448:	f003 fbf2 	bl	d7c30 <_ZN6StringD1Ev>
  }

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
   d444c:	4d6a      	ldr	r5, [pc, #424]	; (d45f8 <loop+0x1e0>)
   d444e:	682b      	ldr	r3, [r5, #0]
   d4450:	1ae4      	subs	r4, r4, r3
   d4452:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   d4456:	f0c0 80b6 	bcc.w	d45c6 <loop+0x1ae>
   d445a:	f000 ff85 	bl	d5368 <HAL_Timer_Get_Milli_Seconds>
  {
    lastUpdate = millis();
   d445e:	6028      	str	r0, [r5, #0]

    temp = dht.getTempFarenheit();
   d4460:	4866      	ldr	r0, [pc, #408]	; (d45fc <loop+0x1e4>)
   d4462:	4c67      	ldr	r4, [pc, #412]	; (d4600 <loop+0x1e8>)
    humidity = dht.getHumidity();
   d4464:	4d67      	ldr	r5, [pc, #412]	; (d4604 <loop+0x1ec>)

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
   d4466:	f000 fd23 	bl	d4eb0 <_ZN3DHT16getTempFarenheitEv>
   d446a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    humidity = dht.getHumidity();
   d446e:	4863      	ldr	r0, [pc, #396]	; (d45fc <loop+0x1e4>)

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
   d4470:	ed84 0a00 	vstr	s0, [r4]
    humidity = dht.getHumidity();
   d4474:	f000 fd3e 	bl	d4ef4 <_ZN3DHT11getHumidityEv>
   d4478:	eefd 7ac0 	vcvt.s32.f32	s15, s0

    temp_dbl = temp;
   d447c:	6820      	ldr	r0, [r4, #0]
  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
    humidity = dht.getHumidity();
   d447e:	edc5 7a00 	vstr	s15, [r5]
   d4482:	ee17 6a90 	vmov	r6, s15

    temp_dbl = temp;
   d4486:	f004 fd49 	bl	d8f1c <__aeabi_i2d>
   d448a:	4b5f      	ldr	r3, [pc, #380]	; (d4608 <loop+0x1f0>)
   d448c:	e9c3 0100 	strd	r0, r1, [r3]
    humidity_dbl = humidity;
   d4490:	4630      	mov	r0, r6
   d4492:	f004 fd43 	bl	d8f1c <__aeabi_i2d>
   d4496:	4b5d      	ldr	r3, [pc, #372]	; (d460c <loop+0x1f4>)

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d4498:	4e5d      	ldr	r6, [pc, #372]	; (d4610 <loop+0x1f8>)

    temp = dht.getTempFarenheit();
    humidity = dht.getHumidity();

    temp_dbl = temp;
    humidity_dbl = humidity;
   d449a:	e9c3 0100 	strd	r0, r1, [r3]

    Serial.printlnf("Temp: %f", temp);
   d449e:	f004 f8b7 	bl	d8610 <_Z16_fetch_usbserialv>
   d44a2:	6823      	ldr	r3, [r4, #0]
   d44a4:	4a5b      	ldr	r2, [pc, #364]	; (d4614 <loop+0x1fc>)
   d44a6:	2101      	movs	r1, #1
   d44a8:	f003 faf0 	bl	d7a8c <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %f", humidity);
   d44ac:	f004 f8b0 	bl	d8610 <_Z16_fetch_usbserialv>
   d44b0:	682b      	ldr	r3, [r5, #0]
   d44b2:	4a59      	ldr	r2, [pc, #356]	; (d4618 <loop+0x200>)
   d44b4:	2101      	movs	r1, #1
   d44b6:	f003 fae9 	bl	d7a8c <_ZN5Print11printf_implEbPKcz>

    double lightAnalogVal = analogRead(A0);
   d44ba:	2013      	movs	r0, #19
   d44bc:	f004 fa14 	bl	d88e8 <analogRead>
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d44c0:	f004 fd2c 	bl	d8f1c <__aeabi_i2d>
   d44c4:	ed9f 3b42 	vldr	d3, [pc, #264]	; d45d0 <loop+0x1b8>
   d44c8:	ed9f 4b43 	vldr	d4, [pc, #268]	; d45d8 <loop+0x1c0>
   d44cc:	eeb0 1a43 	vmov.f32	s2, s6
   d44d0:	eef0 1a63 	vmov.f32	s3, s7
   d44d4:	ed9f 2b42 	vldr	d2, [pc, #264]	; d45e0 <loop+0x1c8>
   d44d8:	ec41 0b10 	vmov	d0, r0, r1
   d44dc:	f001 f9fc 	bl	d58d8 <_Z3mapddddd>

    createEventPayload(temp, humidity, currentLightLevel);
   d44e0:	6829      	ldr	r1, [r5, #0]
   d44e2:	6820      	ldr	r0, [r4, #0]

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d44e4:	ed86 0b00 	vstr	d0, [r6]

    createEventPayload(temp, humidity, currentLightLevel);
   d44e8:	f7ff ff3c 	bl	d4364 <_Z18createEventPayloadiid>

    if (currentLightLevel > 50)
   d44ec:	ed96 0b00 	vldr	d0, [r6]
   d44f0:	2200      	movs	r2, #0
   d44f2:	ec51 0b10 	vmov	r0, r1, d0
   d44f6:	4b49      	ldr	r3, [pc, #292]	; (d461c <loop+0x204>)
   d44f8:	ed8d 0b02 	vstr	d0, [sp, #8]
   d44fc:	f005 f804 	bl	d9508 <__aeabi_dcmpgt>
   d4500:	ed9d 0b02 	vldr	d0, [sp, #8]
   d4504:	b198      	cbz	r0, d452e <loop+0x116>
    {
      Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   d4506:	2106      	movs	r1, #6
   d4508:	a808      	add	r0, sp, #32
   d450a:	f003 fc29 	bl	d7d60 <_ZN6StringC1Edi>
   d450e:	4b44      	ldr	r3, [pc, #272]	; (d4620 <loop+0x208>)
   d4510:	9a08      	ldr	r2, [sp, #32]
   d4512:	781b      	ldrb	r3, [r3, #0]
   d4514:	f88d 3000 	strb.w	r3, [sp]
   d4518:	4942      	ldr	r1, [pc, #264]	; (d4624 <loop+0x20c>)
   d451a:	233c      	movs	r3, #60	; 0x3c
   d451c:	a806      	add	r0, sp, #24
   d451e:	f002 fc13 	bl	d6d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4522:	a807      	add	r0, sp, #28
   d4524:	f7ff fed0 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4528:	a808      	add	r0, sp, #32
   d452a:	f003 fb81 	bl	d7c30 <_ZN6StringD1Ev>
    }

    if (BLE.connected())
   d452e:	f001 fd19 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4532:	f001 fda7 	bl	d6084 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4536:	2800      	cmp	r0, #0
   d4538:	d045      	beq.n	d45c6 <loop+0x1ae>
    {
      uint8_t uptime = (uint8_t)DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_UPTIME);
   d453a:	2006      	movs	r0, #6
   d453c:	f000 f92a 	bl	d4794 <_ZN17DiagnosticsHelper8getValueEt>
   d4540:	a90c      	add	r1, sp, #48	; 0x30
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4542:	2300      	movs	r3, #0
   d4544:	f801 0d19 	strb.w	r0, [r1, #-25]!
   d4548:	2201      	movs	r2, #1
   d454a:	4837      	ldr	r0, [pc, #220]	; (d4628 <loop+0x210>)
   d454c:	f001 fc56 	bl	d5dfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      uptimeCharacteristic.setValue(uptime);

      uint8_t signalStrength = (uint8_t)(DiagnosticsHelper::getValue(DIAG_ID_NETWORK_SIGNAL_STRENGTH) >> 8);
   d4550:	2021      	movs	r0, #33	; 0x21
   d4552:	f000 f91f 	bl	d4794 <_ZN17DiagnosticsHelper8getValueEt>
   d4556:	a90c      	add	r1, sp, #48	; 0x30
   d4558:	1200      	asrs	r0, r0, #8
   d455a:	f801 0d18 	strb.w	r0, [r1, #-24]!
   d455e:	2300      	movs	r3, #0
   d4560:	2201      	movs	r2, #1
   d4562:	4832      	ldr	r0, [pc, #200]	; (d462c <loop+0x214>)
   d4564:	f001 fc4a 	bl	d5dfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      signalStrengthCharacteristic.setValue(signalStrength);

      int32_t usedRAM = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_USED_RAM);
   d4568:	201a      	movs	r0, #26
   d456a:	f000 f913 	bl	d4794 <_ZN17DiagnosticsHelper8getValueEt>
   d456e:	4604      	mov	r4, r0
      int32_t totalRAM = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_TOTAL_RAM);
   d4570:	2019      	movs	r0, #25
   d4572:	f000 f90f 	bl	d4794 <_ZN17DiagnosticsHelper8getValueEt>
      int32_t freeMem = (totalRAM - usedRAM);
   d4576:	a90c      	add	r1, sp, #48	; 0x30
   d4578:	1b00      	subs	r0, r0, r4
   d457a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d457e:	2300      	movs	r3, #0
   d4580:	2204      	movs	r2, #4
   d4582:	482b      	ldr	r0, [pc, #172]	; (d4630 <loop+0x218>)
   d4584:	f001 fc3a 	bl	d5dfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      freeMemoryCharacteristic.setValue(freeMem);

      Serial.printlnf("Uptime: %d", uptime);
   d4588:	f004 f842 	bl	d8610 <_Z16_fetch_usbserialv>
   d458c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4590:	4a28      	ldr	r2, [pc, #160]	; (d4634 <loop+0x21c>)
   d4592:	2101      	movs	r1, #1
   d4594:	f003 fa7a 	bl	d7a8c <_ZN5Print11printf_implEbPKcz>
      Serial.print("Strength: ");
   d4598:	f004 f83a 	bl	d8610 <_Z16_fetch_usbserialv>
   d459c:	4926      	ldr	r1, [pc, #152]	; (d4638 <loop+0x220>)
   d459e:	f003 f9fd 	bl	d799c <_ZN5Print5printEPKc>
      Serial.println(signalStrength);
   d45a2:	f004 f835 	bl	d8610 <_Z16_fetch_usbserialv>
   d45a6:	220a      	movs	r2, #10
   d45a8:	f89d 1018 	ldrb.w	r1, [sp, #24]
   d45ac:	f003 fa38 	bl	d7a20 <_ZN5Print7printlnEhi>
      Serial.print("free memory: ");
   d45b0:	f004 f82e 	bl	d8610 <_Z16_fetch_usbserialv>
   d45b4:	4921      	ldr	r1, [pc, #132]	; (d463c <loop+0x224>)
   d45b6:	f003 f9f1 	bl	d799c <_ZN5Print5printEPKc>
      Serial.println(freeMem);
   d45ba:	f004 f829 	bl	d8610 <_Z16_fetch_usbserialv>
   d45be:	220a      	movs	r2, #10
   d45c0:	9908      	ldr	r1, [sp, #32]
   d45c2:	f003 fa59 	bl	d7a78 <_ZN5Print7printlnEli>
    }
  }
}
   d45c6:	b00c      	add	sp, #48	; 0x30
   d45c8:	bd70      	pop	{r4, r5, r6, pc}
   d45ca:	bf00      	nop
   d45cc:	f3af 8000 	nop.w
	...
   d45dc:	40590000 	.word	0x40590000
   d45e0:	00000000 	.word	0x00000000
   d45e4:	40affe00 	.word	0x40affe00
   d45e8:	2003e3ac 	.word	0x2003e3ac
   d45ec:	2003e3b0 	.word	0x2003e3b0
   d45f0:	000d9b36 	.word	0x000d9b36
   d45f4:	2003e3dc 	.word	0x2003e3dc
   d45f8:	2003e348 	.word	0x2003e348
   d45fc:	2003e390 	.word	0x2003e390
   d4600:	2003e34c 	.word	0x2003e34c
   d4604:	2003e350 	.word	0x2003e350
   d4608:	2003e388 	.word	0x2003e388
   d460c:	2003e380 	.word	0x2003e380
   d4610:	2003e340 	.word	0x2003e340
   d4614:	000d9b3f 	.word	0x000d9b3f
   d4618:	000d9b48 	.word	0x000d9b48
   d461c:	40490000 	.word	0x40490000
   d4620:	2003e370 	.word	0x2003e370
   d4624:	000d9b55 	.word	0x000d9b55
   d4628:	2003e374 	.word	0x2003e374
   d462c:	2003e354 	.word	0x2003e354
   d4630:	2003e3a4 	.word	0x2003e3a4
   d4634:	000d9b67 	.word	0x000d9b67
   d4638:	000d9b72 	.word	0x000d9b72
   d463c:	000d9b7d 	.word	0x000d9b7d

000d4640 <_GLOBAL__sub_I_dht>:
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4644:	4b39      	ldr	r3, [pc, #228]	; (d472c <_GLOBAL__sub_I_dht+0xec>)
#include "JsonParserGeneratorRK.h"
#include "DiagnosticsHelperRK.h"
#include "Grove-Ultrasonic-Ranger.h"

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d4646:	4d3a      	ldr	r5, [pc, #232]	; (d4730 <_GLOBAL__sub_I_dht+0xf0>)
   d4648:	4e3a      	ldr	r6, [pc, #232]	; (d4734 <_GLOBAL__sub_I_dht+0xf4>)
int count = 0;

Ultrasonic ultrasonic(D4);

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d464a:	4f3b      	ldr	r7, [pc, #236]	; (d4738 <_GLOBAL__sub_I_dht+0xf8>)

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d464c:	f8df 9118 	ldr.w	r9, [pc, #280]	; d4768 <_GLOBAL__sub_I_dht+0x128>
   d4650:	f8df 8118 	ldr.w	r8, [pc, #280]	; d476c <_GLOBAL__sub_I_dht+0x12c>
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4654:	b08f      	sub	sp, #60	; 0x3c
   d4656:	2401      	movs	r4, #1
   d4658:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d465a:	f000 fe8d 	bl	d5378 <HAL_Pin_Map>
#include "Grove_ChainableLED.h"
#include "JsonParserGeneratorRK.h"
#include "DiagnosticsHelperRK.h"
#include "Grove-Ultrasonic-Ranger.h"

DHT dht(D2);
   d465e:	2206      	movs	r2, #6
   d4660:	2102      	movs	r1, #2
   d4662:	4836      	ldr	r0, [pc, #216]	; (d473c <_GLOBAL__sub_I_dht+0xfc>)
   d4664:	f000 fb34 	bl	d4cd0 <_ZN3DHTC1Ehh>
ChainableLED leds(A4, A5, 1);
   d4668:	4623      	mov	r3, r4
   d466a:	220e      	movs	r2, #14
   d466c:	210f      	movs	r1, #15
   d466e:	4628      	mov	r0, r5
   d4670:	f000 f8d8 	bl	d4824 <_ZN12ChainableLEDC1Ehhh>
   d4674:	4632      	mov	r2, r6
   d4676:	4932      	ldr	r1, [pc, #200]	; (d4740 <_GLOBAL__sub_I_dht+0x100>)
   d4678:	4628      	mov	r0, r5
   d467a:	f004 f991 	bl	d89a0 <__aeabi_atexit>

SYSTEM_THREAD(ENABLED);
   d467e:	4620      	mov	r0, r4
   d4680:	2100      	movs	r1, #0
   d4682:	f001 f839 	bl	d56f8 <system_thread_set_state>

int lastRange = 0;
unsigned char buffer[64];
int count = 0;

Ultrasonic ultrasonic(D4);
   d4686:	2104      	movs	r1, #4
   d4688:	482e      	ldr	r0, [pc, #184]	; (d4744 <_GLOBAL__sub_I_dht+0x104>)
   d468a:	f000 f8a3 	bl	d47d4 <_ZN10UltrasonicC1Ei>

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d468e:	492e      	ldr	r1, [pc, #184]	; (d4748 <_GLOBAL__sub_I_dht+0x108>)
   d4690:	4638      	mov	r0, r7

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4692:	ac09      	add	r4, sp, #36	; 0x24
int count = 0;

Ultrasonic ultrasonic(D4);

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4694:	f001 fadf 	bl	d5c56 <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4698:	492c      	ldr	r1, [pc, #176]	; (d474c <_GLOBAL__sub_I_dht+0x10c>)
   d469a:	a804      	add	r0, sp, #16
   d469c:	2500      	movs	r5, #0
   d469e:	f001 fada 	bl	d5c56 <_ZN8particle7BleUuidC1EPKc>
   d46a2:	4639      	mov	r1, r7
   d46a4:	4620      	mov	r0, r4
   d46a6:	f001 f9eb 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
   d46aa:	ab04      	add	r3, sp, #16
   d46ac:	9502      	str	r5, [sp, #8]
   d46ae:	e88d 0030 	stmia.w	sp, {r4, r5}
   d46b2:	2210      	movs	r2, #16
   d46b4:	4926      	ldr	r1, [pc, #152]	; (d4750 <_GLOBAL__sub_I_dht+0x110>)
   d46b6:	4648      	mov	r0, r9
   d46b8:	f7ff fe1c 	bl	d42f4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d46bc:	4632      	mov	r2, r6
   d46be:	4641      	mov	r1, r8
   d46c0:	4648      	mov	r0, r9
   d46c2:	f004 f96d 	bl	d89a0 <__aeabi_atexit>
BleCharacteristic signalStrengthCharacteristic("strength", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
   d46c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d4770 <_GLOBAL__sub_I_dht+0x130>
   d46ca:	4922      	ldr	r1, [pc, #136]	; (d4754 <_GLOBAL__sub_I_dht+0x114>)
   d46cc:	a804      	add	r0, sp, #16
   d46ce:	f001 fac2 	bl	d5c56 <_ZN8particle7BleUuidC1EPKc>
   d46d2:	4639      	mov	r1, r7
   d46d4:	4620      	mov	r0, r4
   d46d6:	f001 f9d3 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
   d46da:	ab04      	add	r3, sp, #16
   d46dc:	9502      	str	r5, [sp, #8]
   d46de:	e88d 0030 	stmia.w	sp, {r4, r5}
   d46e2:	2210      	movs	r2, #16
   d46e4:	491c      	ldr	r1, [pc, #112]	; (d4758 <_GLOBAL__sub_I_dht+0x118>)
   d46e6:	4648      	mov	r0, r9
   d46e8:	f7ff fe04 	bl	d42f4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d46ec:	4632      	mov	r2, r6
   d46ee:	4641      	mov	r1, r8
   d46f0:	4648      	mov	r0, r9
   d46f2:	f004 f955 	bl	d89a0 <__aeabi_atexit>
BleCharacteristic freeMemoryCharacteristic("freeMemory", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   d46f6:	4919      	ldr	r1, [pc, #100]	; (d475c <_GLOBAL__sub_I_dht+0x11c>)
   d46f8:	a804      	add	r0, sp, #16
   d46fa:	f001 faac 	bl	d5c56 <_ZN8particle7BleUuidC1EPKc>
   d46fe:	4639      	mov	r1, r7
   d4700:	4f17      	ldr	r7, [pc, #92]	; (d4760 <_GLOBAL__sub_I_dht+0x120>)
   d4702:	4620      	mov	r0, r4
   d4704:	f001 f9bc 	bl	d5a80 <_ZN8particle7BleUuidC1ERKS0_>
   d4708:	ab04      	add	r3, sp, #16
   d470a:	9502      	str	r5, [sp, #8]
   d470c:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4710:	2210      	movs	r2, #16
   d4712:	4914      	ldr	r1, [pc, #80]	; (d4764 <_GLOBAL__sub_I_dht+0x124>)
   d4714:	4638      	mov	r0, r7
   d4716:	f7ff fded 	bl	d42f4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d471a:	4632      	mov	r2, r6
   d471c:	4641      	mov	r1, r8
   d471e:	4638      	mov	r0, r7
   d4720:	f004 f93e 	bl	d89a0 <__aeabi_atexit>
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4724:	b00f      	add	sp, #60	; 0x3c
   d4726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d472a:	bf00      	nop
   d472c:	2003e370 	.word	0x2003e370
   d4730:	2003e334 	.word	0x2003e334
   d4734:	2003e330 	.word	0x2003e330
   d4738:	2003e35c 	.word	0x2003e35c
   d473c:	2003e390 	.word	0x2003e390
   d4740:	000d483f 	.word	0x000d483f
   d4744:	2003e3ac 	.word	0x2003e3ac
   d4748:	000d9b8b 	.word	0x000d9b8b
   d474c:	000d9bb0 	.word	0x000d9bb0
   d4750:	000d9bd5 	.word	0x000d9bd5
   d4754:	000d9bdc 	.word	0x000d9bdc
   d4758:	000d9c01 	.word	0x000d9c01
   d475c:	000d9c0a 	.word	0x000d9c0a
   d4760:	2003e3a4 	.word	0x2003e3a4
   d4764:	000d9c2f 	.word	0x000d9c2f
   d4768:	2003e374 	.word	0x2003e374
   d476c:	000d60d1 	.word	0x000d60d1
   d4770:	2003e354 	.word	0x2003e354

000d4774 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d4774:	b538      	push	{r3, r4, r5, lr}
   d4776:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d4778:	68c0      	ldr	r0, [r0, #12]
   d477a:	1883      	adds	r3, r0, r2
   d477c:	2b0a      	cmp	r3, #10
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d477e:	4615      	mov	r5, r2
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d4780:	d805      	bhi.n	d478e <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   d4782:	4420      	add	r0, r4
   d4784:	f005 f90f 	bl	d99a6 <memcpy>
                d->offset += size;
   d4788:	68e3      	ldr	r3, [r4, #12]
   d478a:	441d      	add	r5, r3
   d478c:	60e5      	str	r5, [r4, #12]
            }
            return true;
        }
   d478e:	2001      	movs	r0, #1
   d4790:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4794 <_ZN17DiagnosticsHelper8getValueEt>:

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d4794:	b510      	push	{r4, lr}
   d4796:	b088      	sub	sp, #32
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d4798:	2400      	movs	r4, #0
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d479a:	ab04      	add	r3, sp, #16
   d479c:	2201      	movs	r2, #1

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d479e:	f8ad 000e 	strh.w	r0, [sp, #14]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47a2:	9300      	str	r3, [sp, #0]
   d47a4:	9401      	str	r4, [sp, #4]
   d47a6:	4b09      	ldr	r3, [pc, #36]	; (d47cc <_ZN17DiagnosticsHelper8getValueEt+0x38>)
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d47a8:	f8ad 4016 	strh.w	r4, [sp, #22]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47ac:	4611      	mov	r1, r2
   d47ae:	f10d 000e 	add.w	r0, sp, #14
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d47b2:	f8ad 4018 	strh.w	r4, [sp, #24]
   d47b6:	9407      	str	r4, [sp, #28]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47b8:	f000 ffb6 	bl	d5728 <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   d47bc:	9b07      	ldr	r3, [sp, #28]
   d47be:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   d47c0:	bf0c      	ite	eq
   d47c2:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   d47c6:	4620      	movne	r0, r4
    }
}
   d47c8:	b008      	add	sp, #32
   d47ca:	bd10      	pop	{r4, pc}
   d47cc:	000d4775 	.word	0x000d4775

000d47d0 <_GLOBAL__sub_I__ZN17DiagnosticsHelper8getValueEt>:
   d47d0:	f000 bdd2 	b.w	d5378 <HAL_Pin_Map>

000d47d4 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   d47d4:	6001      	str	r1, [r0, #0]
}
   d47d6:	4770      	bx	lr

000d47d8 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   d47d8:	b510      	push	{r4, lr}
   d47da:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   d47dc:	2101      	movs	r1, #1
   d47de:	8800      	ldrh	r0, [r0, #0]
   d47e0:	f004 f858 	bl	d8894 <pinMode>
	digitalWrite(_pin, LOW);
   d47e4:	2100      	movs	r1, #0
   d47e6:	8820      	ldrh	r0, [r4, #0]
   d47e8:	f004 f865 	bl	d88b6 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d47ec:	2002      	movs	r0, #2
   d47ee:	f000 fdb3 	bl	d5358 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   d47f2:	2101      	movs	r1, #1
   d47f4:	8820      	ldrh	r0, [r4, #0]
   d47f6:	f004 f85e 	bl	d88b6 <digitalWrite>
   d47fa:	2005      	movs	r0, #5
   d47fc:	f000 fdac 	bl	d5358 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   d4800:	8820      	ldrh	r0, [r4, #0]
   d4802:	2100      	movs	r1, #0
   d4804:	f004 f857 	bl	d88b6 <digitalWrite>
	pinMode(_pin,INPUT);
   d4808:	8820      	ldrh	r0, [r4, #0]
   d480a:	2100      	movs	r1, #0
   d480c:	f004 f842 	bl	d8894 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   d4810:	2101      	movs	r1, #1
   d4812:	8820      	ldrh	r0, [r4, #0]
   d4814:	f004 f87f 	bl	d8916 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   d4818:	233a      	movs	r3, #58	; 0x3a
   d481a:	fb90 f0f3 	sdiv	r0, r0, r3
   d481e:	bd10      	pop	{r4, pc}

000d4820 <_GLOBAL__sub_I__ZN10UltrasonicC2Ei>:
   d4820:	f000 bdaa 	b.w	d5378 <HAL_Pin_Map>

000d4824 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4824:	b510      	push	{r4, lr}
   d4826:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4828:	7001      	strb	r1, [r0, #0]
   d482a:	7042      	strb	r2, [r0, #1]
   d482c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d482e:	2101      	movs	r1, #1
   d4830:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4834:	f005 f892 	bl	d995c <calloc>
   d4838:	6060      	str	r0, [r4, #4]
}
   d483a:	4620      	mov	r0, r4
   d483c:	bd10      	pop	{r4, pc}

000d483e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d483e:	b510      	push	{r4, lr}
   d4840:	4604      	mov	r4, r0
{
    free(_led_state);
   d4842:	6840      	ldr	r0, [r0, #4]
   d4844:	f001 f820 	bl	d5888 <free>
}
   d4848:	4620      	mov	r0, r4
   d484a:	bd10      	pop	{r4, pc}

000d484c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d484c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d484e:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4850:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4852:	7800      	ldrb	r0, [r0, #0]
   d4854:	f004 f82f 	bl	d88b6 <digitalWrite>
   d4858:	2014      	movs	r0, #20
   d485a:	f000 fd7d 	bl	d5358 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d485e:	7820      	ldrb	r0, [r4, #0]
   d4860:	2101      	movs	r1, #1
   d4862:	f004 f828 	bl	d88b6 <digitalWrite>
   d4866:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d486c:	f000 bd74 	b.w	d5358 <HAL_Delay_Microseconds>

000d4870 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4870:	b570      	push	{r4, r5, r6, lr}
   d4872:	4606      	mov	r6, r0
   d4874:	460d      	mov	r5, r1
   d4876:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4878:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d487c:	bf14      	ite	ne
   d487e:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4880:	2100      	moveq	r1, #0
   d4882:	7870      	ldrb	r0, [r6, #1]
   d4884:	f004 f817 	bl	d88b6 <digitalWrite>
   d4888:	3c01      	subs	r4, #1
        clk();
   d488a:	4630      	mov	r0, r6
   d488c:	f7ff ffde 	bl	d484c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4890:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4892:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d4896:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4898:	d1ee      	bne.n	d4878 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d489a:	bd70      	pop	{r4, r5, r6, pc}

000d489c <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d489c:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d48a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48a2:	460d      	mov	r5, r1
   d48a4:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d48a6:	bf14      	ite	ne
   d48a8:	21c0      	movne	r1, #192	; 0xc0
   d48aa:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d48ac:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d48ae:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d48b0:	bf58      	it	pl
   d48b2:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d48b6:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d48b8:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d48ba:	bf58      	it	pl
   d48bc:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d48c0:	0670      	lsls	r0, r6, #25
   d48c2:	bf58      	it	pl
   d48c4:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d48c8:	062a      	lsls	r2, r5, #24
   d48ca:	bf58      	it	pl
   d48cc:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d48d0:	066b      	lsls	r3, r5, #25
   d48d2:	bf58      	it	pl
   d48d4:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d48d8:	4620      	mov	r0, r4
   d48da:	f7ff ffc9 	bl	d4870 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d48de:	4639      	mov	r1, r7
   d48e0:	4620      	mov	r0, r4
   d48e2:	f7ff ffc5 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d48e6:	4631      	mov	r1, r6
   d48e8:	4620      	mov	r0, r4
   d48ea:	f7ff ffc1 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d48ee:	4629      	mov	r1, r5
   d48f0:	4620      	mov	r0, r4
}
   d48f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d48f6:	f7ff bfbb 	b.w	d4870 <_ZN12ChainableLED8sendByteEh>

000d48fa <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d48fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48fe:	4604      	mov	r4, r0
   d4900:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4902:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4904:	4691      	mov	r9, r2
   d4906:	469a      	mov	sl, r3
   d4908:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d490c:	f7ff ffb0 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4910:	2100      	movs	r1, #0
   d4912:	4620      	mov	r0, r4
   d4914:	f7ff ffac 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4918:	2100      	movs	r1, #0
   d491a:	4620      	mov	r0, r4
   d491c:	f7ff ffa8 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4920:	2100      	movs	r1, #0
   d4922:	4620      	mov	r0, r4
   d4924:	f7ff ffa4 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d4928:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d492a:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d492e:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d4930:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4934:	78a2      	ldrb	r2, [r4, #2]
   d4936:	b2f3      	uxtb	r3, r6
   d4938:	429a      	cmp	r2, r3
   d493a:	d91b      	bls.n	d4974 <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d493c:	42ab      	cmp	r3, r5
   d493e:	d10d      	bne.n	d495c <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4940:	6861      	ldr	r1, [r4, #4]
   d4942:	fb15 f207 	smulbb	r2, r5, r7
   d4946:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d494a:	6862      	ldr	r2, [r4, #4]
   d494c:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4950:	2202      	movs	r2, #2
   d4952:	fb17 2205 	smlabb	r2, r7, r5, r2
   d4956:	6861      	ldr	r1, [r4, #4]
   d4958:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d495c:	6860      	ldr	r0, [r4, #4]
   d495e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d4962:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d4964:	5c41      	ldrb	r1, [r0, r1]
   d4966:	7893      	ldrb	r3, [r2, #2]
   d4968:	7852      	ldrb	r2, [r2, #1]
   d496a:	4620      	mov	r0, r4
   d496c:	f7ff ff96 	bl	d489c <_ZN12ChainableLED9sendColorEhhh>
   d4970:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4972:	e7df      	b.n	d4934 <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d4974:	4620      	mov	r0, r4
   d4976:	2100      	movs	r1, #0
   d4978:	f7ff ff7a 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d497c:	4620      	mov	r0, r4
   d497e:	2100      	movs	r1, #0
   d4980:	f7ff ff76 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4984:	4620      	mov	r0, r4
   d4986:	2100      	movs	r1, #0
   d4988:	f7ff ff72 	bl	d4870 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d498c:	4620      	mov	r0, r4
   d498e:	2100      	movs	r1, #0
}
   d4990:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d4994:	f7ff bf6c 	b.w	d4870 <_ZN12ChainableLED8sendByteEh>

000d4998 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d4998:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d499a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d499c:	2101      	movs	r1, #1
   d499e:	7800      	ldrb	r0, [r0, #0]
   d49a0:	f003 ff78 	bl	d8894 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d49a4:	2101      	movs	r1, #1
   d49a6:	7860      	ldrb	r0, [r4, #1]
   d49a8:	f003 ff74 	bl	d8894 <pinMode>
   d49ac:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d49ae:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d49b0:	78a3      	ldrb	r3, [r4, #2]
   d49b2:	b2e9      	uxtb	r1, r5
   d49b4:	428b      	cmp	r3, r1
   d49b6:	f105 0501 	add.w	r5, r5, #1
   d49ba:	d906      	bls.n	d49ca <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d49bc:	2300      	movs	r3, #0
   d49be:	9600      	str	r6, [sp, #0]
   d49c0:	461a      	mov	r2, r3
   d49c2:	4620      	mov	r0, r4
   d49c4:	f7ff ff99 	bl	d48fa <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d49c8:	e7f2      	b.n	d49b0 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d49ca:	b002      	add	sp, #8
   d49cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d49d0 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d49d2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d49d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d49da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49de:	ed2d 8b04 	vpush	{d8-d9}
   d49e2:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d49e6:	bf48      	it	mi
   d49e8:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49ec:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d49f0:	eef4 8ae7 	vcmpe.f32	s17, s15
   d49f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d49f8:	bfc4      	itt	gt
   d49fa:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d49fe:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4a02:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d4a06:	ee18 0a90 	vmov	r0, s17
   d4a0a:	f004 fa99 	bl	d8f40 <__aeabi_f2d>
   d4a0e:	a32f      	add	r3, pc, #188	; (adr r3, d4acc <_Z7hue2rgbfff+0xfc>)
   d4a10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a14:	4604      	mov	r4, r0
   d4a16:	460d      	mov	r5, r1
   d4a18:	f004 fd58 	bl	d94cc <__aeabi_dcmplt>
   d4a1c:	b160      	cbz	r0, d4a38 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d4a1e:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4a22:	ee17 0a90 	vmov	r0, s15
   d4a26:	f004 fa8b 	bl	d8f40 <__aeabi_f2d>
   d4a2a:	2200      	movs	r2, #0
   d4a2c:	4b26      	ldr	r3, [pc, #152]	; (d4ac8 <_Z7hue2rgbfff+0xf8>)
   d4a2e:	f004 fadb 	bl	d8fe8 <__aeabi_dmul>
   d4a32:	4622      	mov	r2, r4
   d4a34:	462b      	mov	r3, r5
   d4a36:	e025      	b.n	d4a84 <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d4a38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4a3c:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a44:	d42f      	bmi.n	d4aa6 <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d4a46:	a31e      	add	r3, pc, #120	; (adr r3, d4ac0 <_Z7hue2rgbfff+0xf0>)
   d4a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	4629      	mov	r1, r5
   d4a50:	f004 fd3c 	bl	d94cc <__aeabi_dcmplt>
   d4a54:	b350      	cbz	r0, d4aac <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d4a56:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4a5a:	ee17 0a90 	vmov	r0, s15
   d4a5e:	f004 fa6f 	bl	d8f40 <__aeabi_f2d>
   d4a62:	4622      	mov	r2, r4
   d4a64:	4606      	mov	r6, r0
   d4a66:	460f      	mov	r7, r1
   d4a68:	462b      	mov	r3, r5
   d4a6a:	a115      	add	r1, pc, #84	; (adr r1, d4ac0 <_Z7hue2rgbfff+0xf0>)
   d4a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4a70:	f004 f906 	bl	d8c80 <__aeabi_dsub>
   d4a74:	4602      	mov	r2, r0
   d4a76:	460b      	mov	r3, r1
   d4a78:	4630      	mov	r0, r6
   d4a7a:	4639      	mov	r1, r7
   d4a7c:	f004 fab4 	bl	d8fe8 <__aeabi_dmul>
   d4a80:	4b11      	ldr	r3, [pc, #68]	; (d4ac8 <_Z7hue2rgbfff+0xf8>)
   d4a82:	2200      	movs	r2, #0
   d4a84:	f004 fab0 	bl	d8fe8 <__aeabi_dmul>
   d4a88:	4604      	mov	r4, r0
   d4a8a:	ee18 0a10 	vmov	r0, s16
   d4a8e:	460d      	mov	r5, r1
   d4a90:	f004 fa56 	bl	d8f40 <__aeabi_f2d>
   d4a94:	4602      	mov	r2, r0
   d4a96:	460b      	mov	r3, r1
   d4a98:	4620      	mov	r0, r4
   d4a9a:	4629      	mov	r1, r5
   d4a9c:	f004 f8f2 	bl	d8c84 <__adddf3>
   d4aa0:	f004 fd5c 	bl	d955c <__aeabi_d2f>
   d4aa4:	e004      	b.n	d4ab0 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d4aa6:	ee19 0a10 	vmov	r0, s18
   d4aaa:	e001      	b.n	d4ab0 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d4aac:	ee18 0a10 	vmov	r0, s16
}
   d4ab0:	ecbd 8b04 	vpop	{d8-d9}
   d4ab4:	ee00 0a10 	vmov	s0, r0
   d4ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4aba:	bf00      	nop
   d4abc:	f3af 8000 	nop.w
   d4ac0:	55555555 	.word	0x55555555
   d4ac4:	3fe55555 	.word	0x3fe55555
   d4ac8:	40180000 	.word	0x40180000
   d4acc:	55555555 	.word	0x55555555
   d4ad0:	3fc55555 	.word	0x3fc55555
   d4ad4:	00000000 	.word	0x00000000

000d4ad8 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4adc:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4ae0:	eef5 0a40 	vcmp.f32	s1, #0.0
   d4ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4ae8:	b083      	sub	sp, #12
   d4aea:	4680      	mov	r8, r0
   d4aec:	4689      	mov	r9, r1
   d4aee:	eef0 9a40 	vmov.f32	s19, s0
   d4af2:	eeb0 9a60 	vmov.f32	s18, s1
   d4af6:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4afa:	d06e      	beq.n	d4bda <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4afc:	ee11 0a10 	vmov	r0, s2
   d4b00:	f004 fa1e 	bl	d8f40 <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d4b04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4b08:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b10:	4606      	mov	r6, r0
   d4b12:	460f      	mov	r7, r1
   d4b14:	d510      	bpl.n	d4b38 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d4b16:	ee19 0a10 	vmov	r0, s18
   d4b1a:	f004 fa11 	bl	d8f40 <__aeabi_f2d>
   d4b1e:	2200      	movs	r2, #0
   d4b20:	4b4d      	ldr	r3, [pc, #308]	; (d4c58 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d4b22:	f004 f8af 	bl	d8c84 <__adddf3>
   d4b26:	4632      	mov	r2, r6
   d4b28:	463b      	mov	r3, r7
   d4b2a:	f004 fa5d 	bl	d8fe8 <__aeabi_dmul>
   d4b2e:	f004 fd15 	bl	d955c <__aeabi_d2f>
   d4b32:	ee08 0a90 	vmov	s17, r0
   d4b36:	e003      	b.n	d4b40 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d4b38:	ee79 8a08 	vadd.f32	s17, s18, s16
   d4b3c:	eee9 8a48 	vfms.f32	s17, s18, s16
   d4b40:	ee19 0a90 	vmov	r0, s19
   d4b44:	f004 f9fc 	bl	d8f40 <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d4b48:	4632      	mov	r2, r6
   d4b4a:	463b      	mov	r3, r7
   d4b4c:	4604      	mov	r4, r0
   d4b4e:	460d      	mov	r5, r1
   d4b50:	4630      	mov	r0, r6
   d4b52:	4639      	mov	r1, r7
   d4b54:	f004 f896 	bl	d8c84 <__adddf3>
   d4b58:	4606      	mov	r6, r0
   d4b5a:	ee18 0a90 	vmov	r0, s17
   d4b5e:	460f      	mov	r7, r1
   d4b60:	f004 f9ee 	bl	d8f40 <__aeabi_f2d>
   d4b64:	4602      	mov	r2, r0
   d4b66:	460b      	mov	r3, r1
   d4b68:	4630      	mov	r0, r6
   d4b6a:	4639      	mov	r1, r7
   d4b6c:	f004 f888 	bl	d8c80 <__aeabi_dsub>
   d4b70:	f004 fcf4 	bl	d955c <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4b74:	a334      	add	r3, pc, #208	; (adr r3, d4c48 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4b76:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d4b7a:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4b7e:	4629      	mov	r1, r5
   d4b80:	4620      	mov	r0, r4
   d4b82:	f004 f87f 	bl	d8c84 <__adddf3>
   d4b86:	f004 fce9 	bl	d955c <__aeabi_d2f>
   d4b8a:	eef0 0a68 	vmov.f32	s1, s17
   d4b8e:	ee01 0a10 	vmov	s2, r0
   d4b92:	eeb0 0a49 	vmov.f32	s0, s18
   d4b96:	f7ff ff1b 	bl	d49d0 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d4b9a:	eeb0 1a69 	vmov.f32	s2, s19
   d4b9e:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4ba2:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d4ba6:	eeb0 0a49 	vmov.f32	s0, s18
   d4baa:	f7ff ff11 	bl	d49d0 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4bae:	a326      	add	r3, pc, #152	; (adr r3, d4c48 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d4bb8:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4bbc:	f004 f860 	bl	d8c80 <__aeabi_dsub>
   d4bc0:	f004 fccc 	bl	d955c <__aeabi_d2f>
   d4bc4:	eef0 0a68 	vmov.f32	s1, s17
   d4bc8:	ee01 0a10 	vmov	s2, r0
   d4bcc:	eeb0 0a49 	vmov.f32	s0, s18
   d4bd0:	f7ff fefe 	bl	d49d0 <_Z7hue2rgbfff>
   d4bd4:	eef0 8a40 	vmov.f32	s17, s0
   d4bd8:	e003      	b.n	d4be2 <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d4bda:	eef0 8a41 	vmov.f32	s17, s2
   d4bde:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d4be2:	ee19 0a90 	vmov	r0, s19
   d4be6:	f004 f9ab 	bl	d8f40 <__aeabi_f2d>
   d4bea:	a319      	add	r3, pc, #100	; (adr r3, d4c50 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bf0:	f004 f9fa 	bl	d8fe8 <__aeabi_dmul>
   d4bf4:	f004 fc92 	bl	d951c <__aeabi_d2uiz>
   d4bf8:	b2c5      	uxtb	r5, r0
   d4bfa:	ee18 0a10 	vmov	r0, s16
   d4bfe:	f004 f99f 	bl	d8f40 <__aeabi_f2d>
   d4c02:	a313      	add	r3, pc, #76	; (adr r3, d4c50 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c08:	f004 f9ee 	bl	d8fe8 <__aeabi_dmul>
   d4c0c:	f004 fc86 	bl	d951c <__aeabi_d2uiz>
   d4c10:	b2c4      	uxtb	r4, r0
   d4c12:	ee18 0a90 	vmov	r0, s17
   d4c16:	f004 f993 	bl	d8f40 <__aeabi_f2d>
   d4c1a:	a30d      	add	r3, pc, #52	; (adr r3, d4c50 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c20:	f004 f9e2 	bl	d8fe8 <__aeabi_dmul>
   d4c24:	f004 fc7a 	bl	d951c <__aeabi_d2uiz>
   d4c28:	b2c0      	uxtb	r0, r0
   d4c2a:	9000      	str	r0, [sp, #0]
   d4c2c:	462b      	mov	r3, r5
   d4c2e:	4622      	mov	r2, r4
   d4c30:	4649      	mov	r1, r9
   d4c32:	4640      	mov	r0, r8
   d4c34:	f7ff fe61 	bl	d48fa <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d4c38:	b003      	add	sp, #12
   d4c3a:	ecbd 8b04 	vpop	{d8-d9}
   d4c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c42:	bf00      	nop
   d4c44:	f3af 8000 	nop.w
   d4c48:	55555555 	.word	0x55555555
   d4c4c:	3fd55555 	.word	0x3fd55555
   d4c50:	00000000 	.word	0x00000000
   d4c54:	406fe000 	.word	0x406fe000
   d4c58:	3ff00000 	.word	0x3ff00000

000d4c5c <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d4c5c:	f000 bb8c 	b.w	d5378 <HAL_Pin_Map>

000d4c60 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c60:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c62:	6803      	ldr	r3, [r0, #0]
   d4c64:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c66:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c68:	d904      	bls.n	d4c74 <nrf_gpio_pin_port_decode+0x14>
   d4c6a:	4a07      	ldr	r2, [pc, #28]	; (d4c88 <nrf_gpio_pin_port_decode+0x28>)
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	200a      	movs	r0, #10
   d4c70:	f000 fd1a 	bl	d56a8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4c74:	6823      	ldr	r3, [r4, #0]
   d4c76:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4c78:	bf83      	ittte	hi
   d4c7a:	f003 031f 	andhi.w	r3, r3, #31
   d4c7e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4c80:	4802      	ldrhi	r0, [pc, #8]	; (d4c8c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4c82:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4c86:	bd10      	pop	{r4, pc}
   d4c88:	000d5359 	.word	0x000d5359
   d4c8c:	50000300 	.word	0x50000300

000d4c90 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4c90:	b507      	push	{r0, r1, r2, lr}
   d4c92:	ab02      	add	r3, sp, #8
   d4c94:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c98:	4618      	mov	r0, r3
   d4c9a:	f7ff ffe1 	bl	d4c60 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4c9e:	9a01      	ldr	r2, [sp, #4]
   d4ca0:	2301      	movs	r3, #1
   d4ca2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4ca4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4ca8:	b003      	add	sp, #12
   d4caa:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cae <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4cae:	b507      	push	{r0, r1, r2, lr}
   d4cb0:	ab02      	add	r3, sp, #8
   d4cb2:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4cb6:	4618      	mov	r0, r3
   d4cb8:	f7ff ffd2 	bl	d4c60 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4cbc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4cc0:	9801      	ldr	r0, [sp, #4]
   d4cc2:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4cc6:	f000 0001 	and.w	r0, r0, #1
   d4cca:	b003      	add	sp, #12
   d4ccc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cd0 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d4cd0:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d4cd2:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d4cd4:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d4cd6:	7402      	strb	r2, [r0, #16]
}
   d4cd8:	4770      	bx	lr
	...

000d4cdc <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d4cdc:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d4cde:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d4ce0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d4ce2:	7980      	ldrb	r0, [r0, #6]
   d4ce4:	f003 fdd6 	bl	d8894 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ce8:	4a07      	ldr	r2, [pc, #28]	; (d4d08 <_ZN3DHT5beginEv+0x2c>)
   d4cea:	79a3      	ldrb	r3, [r4, #6]
   d4cec:	6812      	ldr	r2, [r2, #0]
   d4cee:	011b      	lsls	r3, r3, #4
   d4cf0:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4cf2:	5cd0      	ldrb	r0, [r2, r3]
   d4cf4:	784b      	ldrb	r3, [r1, #1]
   d4cf6:	f003 031f 	and.w	r3, r3, #31
   d4cfa:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4cfe:	f7ff ffc7 	bl	d4c90 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d4d02:	2300      	movs	r3, #0
   d4d04:	60e3      	str	r3, [r4, #12]
   d4d06:	bd10      	pop	{r4, pc}
   d4d08:	2003e3b4 	.word	0x2003e3b4

000d4d0c <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d10:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d12:	f000 fb29 	bl	d5368 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d4d16:	68e3      	ldr	r3, [r4, #12]
   d4d18:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4d1a:	bf84      	itt	hi
   d4d1c:	2300      	movhi	r3, #0
   d4d1e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4d20:	7c23      	ldrb	r3, [r4, #16]
   d4d22:	b933      	cbnz	r3, d4d32 <_ZN3DHT4readEv+0x26>
   d4d24:	68e3      	ldr	r3, [r4, #12]
   d4d26:	1ac0      	subs	r0, r0, r3
   d4d28:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4d2c:	d201      	bcs.n	d4d32 <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4d2e:	2001      	movs	r0, #1
   d4d30:	e0a8      	b.n	d4e84 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4d32:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4d34:	4e55      	ldr	r6, [pc, #340]	; (d4e8c <_ZN3DHT4readEv+0x180>)
   d4d36:	7425      	strb	r5, [r4, #16]
   d4d38:	f000 fb16 	bl	d5368 <HAL_Timer_Get_Milli_Seconds>
   d4d3c:	79a3      	ldrb	r3, [r4, #6]
   d4d3e:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4d40:	60e0      	str	r0, [r4, #12]
   d4d42:	011b      	lsls	r3, r3, #4
   d4d44:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4d46:	7125      	strb	r5, [r4, #4]
   d4d48:	70e5      	strb	r5, [r4, #3]
   d4d4a:	70a5      	strb	r5, [r4, #2]
   d4d4c:	7065      	strb	r5, [r4, #1]
   d4d4e:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4d50:	5cd0      	ldrb	r0, [r2, r3]
   d4d52:	784b      	ldrb	r3, [r1, #1]
   d4d54:	f003 031f 	and.w	r3, r3, #31
   d4d58:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4d5c:	f7ff ff98 	bl	d4c90 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4d60:	20fa      	movs	r0, #250	; 0xfa
   d4d62:	f000 fe02 	bl	d596a <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4d66:	2101      	movs	r1, #1
   d4d68:	79a0      	ldrb	r0, [r4, #6]
   d4d6a:	f003 fd93 	bl	d8894 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4d6e:	79a3      	ldrb	r3, [r4, #6]
   d4d70:	6832      	ldr	r2, [r6, #0]
   d4d72:	011b      	lsls	r3, r3, #4
   d4d74:	18d1      	adds	r1, r2, r3
   d4d76:	5cd2      	ldrb	r2, [r2, r3]
   d4d78:	784b      	ldrb	r3, [r1, #1]
   d4d7a:	a802      	add	r0, sp, #8
   d4d7c:	f003 031f 	and.w	r3, r3, #31
   d4d80:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4d84:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4d88:	f7ff ff6a 	bl	d4c60 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4d8c:	9b01      	ldr	r3, [sp, #4]
   d4d8e:	f04f 0801 	mov.w	r8, #1
   d4d92:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4d96:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4d9a:	2014      	movs	r0, #20
   d4d9c:	f000 fde5 	bl	d596a <delay>
	noInterrupts();
   d4da0:	f002 f9d4 	bl	d714c <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4da4:	79a3      	ldrb	r3, [r4, #6]
   d4da6:	6832      	ldr	r2, [r6, #0]
   d4da8:	011b      	lsls	r3, r3, #4
   d4daa:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4dac:	5cd0      	ldrb	r0, [r2, r3]
   d4dae:	784b      	ldrb	r3, [r1, #1]
   d4db0:	f003 031f 	and.w	r3, r3, #31
   d4db4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4db8:	f7ff ff6a 	bl	d4c90 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4dbc:	2028      	movs	r0, #40	; 0x28
   d4dbe:	f000 facb 	bl	d5358 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4dc2:	4629      	mov	r1, r5
   d4dc4:	79a0      	ldrb	r0, [r4, #6]
   d4dc6:	f003 fd65 	bl	d8894 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d4dca:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d4dcc:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4dd0:	79a3      	ldrb	r3, [r4, #6]
   d4dd2:	6832      	ldr	r2, [r6, #0]
   d4dd4:	011b      	lsls	r3, r3, #4
   d4dd6:	18d1      	adds	r1, r2, r3
   d4dd8:	f812 a003 	ldrb.w	sl, [r2, r3]
   d4ddc:	784b      	ldrb	r3, [r1, #1]
   d4dde:	f003 031f 	and.w	r3, r3, #31
   d4de2:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4de6:	4650      	mov	r0, sl
   d4de8:	f7ff ff61 	bl	d4cae <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4dec:	4650      	mov	r0, sl
   d4dee:	f7ff ff5e 	bl	d4cae <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d4df2:	4580      	cmp	r8, r0
   d4df4:	fa5f f98b 	uxtb.w	r9, fp
   d4df8:	d108      	bne.n	d4e0c <_ZN3DHT4readEv+0x100>
   d4dfa:	2001      	movs	r0, #1
   d4dfc:	f10b 0b01 	add.w	fp, fp, #1
   d4e00:	f000 faaa 	bl	d5358 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4e04:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d4e08:	d1e2      	bne.n	d4dd0 <_ZN3DHT4readEv+0xc4>
   d4e0a:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4e0c:	79a3      	ldrb	r3, [r4, #6]
   d4e0e:	6832      	ldr	r2, [r6, #0]
   d4e10:	011b      	lsls	r3, r3, #4
   d4e12:	18d1      	adds	r1, r2, r3
   d4e14:	f812 8003 	ldrb.w	r8, [r2, r3]
   d4e18:	784b      	ldrb	r3, [r1, #1]
   d4e1a:	f003 031f 	and.w	r3, r3, #31
   d4e1e:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4e22:	4640      	mov	r0, r8
   d4e24:	f7ff ff43 	bl	d4cae <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4e28:	4640      	mov	r0, r8
   d4e2a:	f7ff ff40 	bl	d4cae <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4e2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4e32:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4e36:	d014      	beq.n	d4e62 <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4e38:	2d03      	cmp	r5, #3
   d4e3a:	d90e      	bls.n	d4e5a <_ZN3DHT4readEv+0x14e>
   d4e3c:	07eb      	lsls	r3, r5, #31
   d4e3e:	d40c      	bmi.n	d4e5a <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4e40:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4e42:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4e44:	5ca3      	ldrb	r3, [r4, r2]
   d4e46:	005b      	lsls	r3, r3, #1
   d4e48:	b2db      	uxtb	r3, r3
   d4e4a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4e4c:	7a21      	ldrb	r1, [r4, #8]
   d4e4e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4e50:	bf3c      	itt	cc
   d4e52:	f043 0301 	orrcc.w	r3, r3, #1
   d4e56:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4e58:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4e5a:	3501      	adds	r5, #1
   d4e5c:	b2ed      	uxtb	r5, r5
   d4e5e:	2d55      	cmp	r5, #85	; 0x55
   d4e60:	d1b4      	bne.n	d4dcc <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4e62:	f002 f975 	bl	d7150 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4e66:	2f27      	cmp	r7, #39	; 0x27
   d4e68:	d90b      	bls.n	d4e82 <_ZN3DHT4readEv+0x176>
   d4e6a:	7822      	ldrb	r2, [r4, #0]
   d4e6c:	7863      	ldrb	r3, [r4, #1]
   d4e6e:	7921      	ldrb	r1, [r4, #4]
   d4e70:	4413      	add	r3, r2
   d4e72:	78a2      	ldrb	r2, [r4, #2]
   d4e74:	4413      	add	r3, r2
   d4e76:	78e2      	ldrb	r2, [r4, #3]
   d4e78:	4413      	add	r3, r2
   d4e7a:	b2db      	uxtb	r3, r3
   d4e7c:	4299      	cmp	r1, r3
   d4e7e:	f43f af56 	beq.w	d4d2e <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4e82:	2000      	movs	r0, #0

}
   d4e84:	b003      	add	sp, #12
   d4e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e8a:	bf00      	nop
   d4e8c:	2003e3b4 	.word	0x2003e3b4

000d4e90 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4e90:	b510      	push	{r4, lr}
   d4e92:	4604      	mov	r4, r0
	float f;

	if (read())
   d4e94:	f7ff ff3a 	bl	d4d0c <_ZN3DHT4readEv>
   d4e98:	b128      	cbz	r0, d4ea6 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4e9a:	78a3      	ldrb	r3, [r4, #2]
   d4e9c:	ee00 3a10 	vmov	s0, r3
   d4ea0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4ea4:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4ea6:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4eac <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4eaa:	bd10      	pop	{r4, pc}
   d4eac:	7fc00000 	.word	0x7fc00000

000d4eb0 <_ZN3DHT16getTempFarenheitEv>:
{
	return readTemperature();
}

float DHT::getTempFarenheit()
{
   d4eb0:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4eb2:	f7ff ffed 	bl	d4e90 <_ZN3DHT15readTemperatureEv>
   d4eb6:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4eba:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4ebe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d4ec2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4ec6:	eddf 7a02 	vldr	s15, [pc, #8]	; d4ed0 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4eca:	ee30 0a27 	vadd.f32	s0, s0, s15
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	42000000 	.word	0x42000000

000d4ed4 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4ed4:	b510      	push	{r4, lr}
   d4ed6:	4604      	mov	r4, r0
	float f;

	if (read())
   d4ed8:	f7ff ff18 	bl	d4d0c <_ZN3DHT4readEv>
   d4edc:	b128      	cbz	r0, d4eea <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4ede:	7823      	ldrb	r3, [r4, #0]
   d4ee0:	ee00 3a10 	vmov	s0, r3
   d4ee4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4ee8:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4eea:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ef0 <_ZN3DHT12readHumidityEv+0x1c>
}
   d4eee:	bd10      	pop	{r4, pc}
   d4ef0:	7fc00000 	.word	0x7fc00000

000d4ef4 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4ef4:	f7ff bfee 	b.w	d4ed4 <_ZN3DHT12readHumidityEv>

000d4ef8 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4ef8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4efa:	f000 fa3d 	bl	d5378 <HAL_Pin_Map>
   d4efe:	4b01      	ldr	r3, [pc, #4]	; (d4f04 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4f00:	6018      	str	r0, [r3, #0]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	2003e3b4 	.word	0x2003e3b4

000d4f08 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4f08:	b510      	push	{r4, lr}
   d4f0a:	4b05      	ldr	r3, [pc, #20]	; (d4f20 <_ZN10JsonBufferD1Ev+0x18>)
   d4f0c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4f0e:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4f10:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4f12:	b91b      	cbnz	r3, d4f1c <_ZN10JsonBufferD1Ev+0x14>
   d4f14:	6840      	ldr	r0, [r0, #4]
   d4f16:	b108      	cbz	r0, d4f1c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4f18:	f000 fcb6 	bl	d5888 <free>
	}
}
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	bd10      	pop	{r4, pc}
   d4f20:	000d9c44 	.word	0x000d9c44

000d4f24 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4f24:	b510      	push	{r4, lr}
   d4f26:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4f28:	f7ff ffee 	bl	d4f08 <_ZN10JsonBufferD1Ev>
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	2114      	movs	r1, #20
   d4f30:	f003 fd3b 	bl	d89aa <_ZdlPvj>
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4f38:	b510      	push	{r4, lr}
   d4f3a:	4b03      	ldr	r3, [pc, #12]	; (d4f48 <_ZN10JsonWriterD1Ev+0x10>)
   d4f3c:	6003      	str	r3, [r0, #0]
   d4f3e:	4604      	mov	r4, r0
   d4f40:	f7ff ffe2 	bl	d4f08 <_ZN10JsonBufferD1Ev>

}
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}
   d4f48:	000d9c54 	.word	0x000d9c54

000d4f4c <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4f4c:	b510      	push	{r4, lr}
   d4f4e:	4604      	mov	r4, r0

}
   d4f50:	f7ff fff2 	bl	d4f38 <_ZN10JsonWriterD1Ev>
   d4f54:	4620      	mov	r0, r4
   d4f56:	2130      	movs	r1, #48	; 0x30
   d4f58:	f003 fd27 	bl	d89aa <_ZdlPvj>
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	bd10      	pop	{r4, pc}

000d4f60 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4f60:	2300      	movs	r3, #0
   d4f62:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4f64:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = false;
   d4f66:	7603      	strb	r3, [r0, #24]
	context[contextIndex].terminator = 0;
   d4f68:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4f6a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4f6e:	4770      	bx	lr

000d4f70 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f70:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f72:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f74:	60c3      	str	r3, [r0, #12]
   d4f76:	2301      	movs	r3, #1
   d4f78:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f7a:	4b05      	ldr	r3, [pc, #20]	; (d4f90 <_ZN10JsonWriterC1EPcj+0x20>)
   d4f7c:	6003      	str	r3, [r0, #0]
   d4f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f82:	6041      	str	r1, [r0, #4]
   d4f84:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f86:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4f88:	f7ff ffea 	bl	d4f60 <_ZN10JsonWriter4initEv>
}
   d4f8c:	bd10      	pop	{r4, pc}
   d4f8e:	bf00      	nop
   d4f90:	000d9c54 	.word	0x000d9c54

000d4f94 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4f94:	68c3      	ldr	r3, [r0, #12]
   d4f96:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4f98:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d4f9a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4f9c:	bf3f      	itttt	cc
   d4f9e:	6842      	ldrcc	r2, [r0, #4]
   d4fa0:	1c5c      	addcc	r4, r3, #1
   d4fa2:	60c4      	strcc	r4, [r0, #12]
   d4fa4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4fa6:	bf24      	itt	cs
   d4fa8:	2301      	movcs	r3, #1
   d4faa:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d4fae:	bd10      	pop	{r4, pc}

000d4fb0 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4fb0:	b538      	push	{r3, r4, r5, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4fb2:	6944      	ldr	r4, [r0, #20]
   d4fb4:	1c65      	adds	r5, r4, #1
   d4fb6:	2d08      	cmp	r5, #8
   d4fb8:	d809      	bhi.n	d4fce <_ZN10JsonWriter18startObjectOrArrayEcc+0x1e>
   d4fba:	eb00 0344 	add.w	r3, r0, r4, lsl #1
		return false;
	}
	contextIndex++;

	context[contextIndex].isFirst = true;
   d4fbe:	2401      	movs	r4, #1

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	contextIndex++;
   d4fc0:	6145      	str	r5, [r0, #20]

	context[contextIndex].isFirst = true;
   d4fc2:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4fc4:	76da      	strb	r2, [r3, #27]

	insertChar(startChar);
   d4fc6:	f7ff ffe5 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
	return true;
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd38      	pop	{r3, r4, r5, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4fce:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4fd0:	bd38      	pop	{r3, r4, r5, pc}

000d4fd2 <_ZN10JsonWriter19finishObjectOrArrayEv>:


void JsonWriter::finishObjectOrArray() {
   d4fd2:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4fd4:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4fd6:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4fd8:	b143      	cbz	r3, d4fec <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4fda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4fde:	7e59      	ldrb	r1, [r3, #25]
   d4fe0:	b109      	cbz	r1, d4fe6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4fe2:	f7ff ffd7 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4fe6:	6963      	ldr	r3, [r4, #20]
   d4fe8:	3b01      	subs	r3, #1
   d4fea:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d4fec:	68a3      	ldr	r3, [r4, #8]
   d4fee:	68e0      	ldr	r0, [r4, #12]
   d4ff0:	6861      	ldr	r1, [r4, #4]
   d4ff2:	4298      	cmp	r0, r3
   d4ff4:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4ff8:	bf2a      	itet	cs
   d4ffa:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4ffc:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4ffe:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5002:	bd10      	pop	{r4, pc}

000d5004 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5004:	b570      	push	{r4, r5, r6, lr}
   d5006:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5008:	68c0      	ldr	r0, [r0, #12]
   d500a:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d500c:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d500e:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5010:	4613      	mov	r3, r2
   d5012:	4430      	add	r0, r6
   d5014:	460a      	mov	r2, r1
   d5016:	4629      	mov	r1, r5
   d5018:	f000 fc46 	bl	d58a8 <vsnprintf>
	if (count <= spaceAvailable) {
   d501c:	4285      	cmp	r5, r0
		offset += count;
   d501e:	bf2d      	iteet	cs
   d5020:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5022:	68a3      	ldrcc	r3, [r4, #8]
   d5024:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5026:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5028:	bf36      	itet	cc
   d502a:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d502c:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d502e:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5032:	bd70      	pop	{r4, r5, r6, pc}

000d5034 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5034:	b40e      	push	{r1, r2, r3}
   d5036:	b503      	push	{r0, r1, lr}
   d5038:	aa03      	add	r2, sp, #12
   d503a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d503e:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5040:	f7ff ffe0 	bl	d5004 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5044:	b002      	add	sp, #8
   d5046:	f85d eb04 	ldr.w	lr, [sp], #4
   d504a:	b003      	add	sp, #12
   d504c:	4770      	bx	lr
	...

000d5050 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5054:	4604      	mov	r4, r0
   d5056:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5058:	4617      	mov	r7, r2
   d505a:	b112      	cbz	r2, d5062 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d505c:	2122      	movs	r1, #34	; 0x22
   d505e:	f7ff ff99 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5062:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5064:	5d71      	ldrb	r1, [r6, r5]
   d5066:	eb06 0805 	add.w	r8, r6, r5
   d506a:	2900      	cmp	r1, #0
   d506c:	d071      	beq.n	d5152 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d506e:	68e2      	ldr	r2, [r4, #12]
   d5070:	68a3      	ldr	r3, [r4, #8]
   d5072:	429a      	cmp	r2, r3
   d5074:	d26d      	bcs.n	d5152 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5076:	060b      	lsls	r3, r1, #24
   d5078:	d533      	bpl.n	d50e2 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d507a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d507e:	2be0      	cmp	r3, #224	; 0xe0
   d5080:	d117      	bne.n	d50b2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5082:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5086:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d508a:	2a80      	cmp	r2, #128	; 0x80
   d508c:	d111      	bne.n	d50b2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d508e:	f105 0802 	add.w	r8, r5, #2
   d5092:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5096:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d509a:	2880      	cmp	r0, #128	; 0x80
   d509c:	d109      	bne.n	d50b2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d509e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d50a2:	019b      	lsls	r3, r3, #6
   d50a4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d50a8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d50ac:	431a      	orrs	r2, r3
   d50ae:	b292      	uxth	r2, r2
   d50b0:	e011      	b.n	d50d6 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d50b2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d50b6:	2bc0      	cmp	r3, #192	; 0xc0
   d50b8:	d146      	bne.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d50ba:	f105 0801 	add.w	r8, r5, #1
   d50be:	f816 3008 	ldrb.w	r3, [r6, r8]
   d50c2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d50c6:	2a80      	cmp	r2, #128	; 0x80
   d50c8:	d13e      	bne.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d50ca:	0189      	lsls	r1, r1, #6
   d50cc:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d50d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d50d4:	431a      	orrs	r2, r3
   d50d6:	4923      	ldr	r1, [pc, #140]	; (d5164 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d50d8:	4620      	mov	r0, r4
   d50da:	f7ff ffab 	bl	d5034 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d50de:	4645      	mov	r5, r8
   d50e0:	e035      	b.n	d514e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d50e2:	290c      	cmp	r1, #12
   d50e4:	d018      	beq.n	d5118 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d50e6:	d80b      	bhi.n	d5100 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d50e8:	2909      	cmp	r1, #9
   d50ea:	d021      	beq.n	d5130 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d50ec:	290a      	cmp	r1, #10
   d50ee:	d019      	beq.n	d5124 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d50f0:	2908      	cmp	r1, #8
   d50f2:	d129      	bne.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d50f4:	215c      	movs	r1, #92	; 0x5c
   d50f6:	4620      	mov	r0, r4
   d50f8:	f7ff ff4c 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d50fc:	2162      	movs	r1, #98	; 0x62
   d50fe:	e023      	b.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5100:	2922      	cmp	r1, #34	; 0x22
   d5102:	d01b      	beq.n	d513c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5104:	295c      	cmp	r1, #92	; 0x5c
   d5106:	d019      	beq.n	d513c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5108:	290d      	cmp	r1, #13
   d510a:	d11d      	bne.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d510c:	215c      	movs	r1, #92	; 0x5c
   d510e:	4620      	mov	r0, r4
   d5110:	f7ff ff40 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5114:	2172      	movs	r1, #114	; 0x72
   d5116:	e017      	b.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5118:	215c      	movs	r1, #92	; 0x5c
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ff3a 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5120:	2166      	movs	r1, #102	; 0x66
   d5122:	e011      	b.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5124:	215c      	movs	r1, #92	; 0x5c
   d5126:	4620      	mov	r0, r4
   d5128:	f7ff ff34 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d512c:	216e      	movs	r1, #110	; 0x6e
   d512e:	e00b      	b.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5130:	215c      	movs	r1, #92	; 0x5c
   d5132:	4620      	mov	r0, r4
   d5134:	f7ff ff2e 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5138:	2174      	movs	r1, #116	; 0x74
   d513a:	e005      	b.n	d5148 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d513c:	215c      	movs	r1, #92	; 0x5c
   d513e:	4620      	mov	r0, r4
   d5140:	f7ff ff28 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5144:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff ff23 	bl	d4f94 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d514e:	3501      	adds	r5, #1
   d5150:	e788      	b.n	d5064 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5152:	b12f      	cbz	r7, d5160 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5154:	4620      	mov	r0, r4
   d5156:	2122      	movs	r1, #34	; 0x22
	}

}
   d5158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d515c:	f7ff bf1a 	b.w	d4f94 <_ZN10JsonWriter10insertCharEc>
   d5160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5164:	000d9c65 	.word	0x000d9c65

000d5168 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5168:	6942      	ldr	r2, [r0, #20]
   d516a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d516e:	7e1a      	ldrb	r2, [r3, #24]
   d5170:	b112      	cbz	r2, d5178 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5172:	2200      	movs	r2, #0
   d5174:	761a      	strb	r2, [r3, #24]
   d5176:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5178:	212c      	movs	r1, #44	; 0x2c
   d517a:	f7ff bf0b 	b.w	d4f94 <_ZN10JsonWriter10insertCharEc>
	...

000d5180 <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d5180:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d5182:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d5184:	2a00      	cmp	r2, #0
   d5186:	db07      	blt.n	d5198 <_ZN10JsonWriter11insertValueEd+0x18>
		insertsprintf("%.*lf", floatPlaces, value);
   d5188:	ed8d 0b00 	vstr	d0, [sp]
   d518c:	4906      	ldr	r1, [pc, #24]	; (d51a8 <_ZN10JsonWriter11insertValueEd+0x28>)
   d518e:	f7ff ff51 	bl	d5034 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d5192:	b003      	add	sp, #12
   d5194:	f85d fb04 	ldr.w	pc, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d5198:	ec53 2b10 	vmov	r2, r3, d0
   d519c:	4903      	ldr	r1, [pc, #12]	; (d51ac <_ZN10JsonWriter11insertValueEd+0x2c>)
	}
}
   d519e:	b003      	add	sp, #12
   d51a0:	f85d eb04 	ldr.w	lr, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d51a4:	f7ff bf46 	b.w	d5034 <_ZN10JsonWriter13insertsprintfEPKcz>
   d51a8:	000d9c7c 	.word	0x000d9c7c
   d51ac:	000d9c82 	.word	0x000d9c82

000d51b0 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d51b0:	f000 b8e2 	b.w	d5378 <HAL_Pin_Map>

000d51b4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <hal_ble_stack_init+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	689b      	ldr	r3, [r3, #8]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030278 	.word	0x00030278

000d51c4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <hal_ble_gap_set_advertising_data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030278 	.word	0x00030278

000d51d4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <hal_ble_gap_set_scan_response_data+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030278 	.word	0x00030278

000d51e4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <hal_ble_gap_start_advertising+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030278 	.word	0x00030278

000d51f4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b03      	ldr	r3, [pc, #12]	; (d5204 <hal_ble_gap_disconnect+0x10>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d51fe:	9301      	str	r3, [sp, #4]
   d5200:	bd08      	pop	{r3, pc}
   d5202:	0000      	.short	0x0000
   d5204:	00030278 	.word	0x00030278

000d5208 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b03      	ldr	r3, [pc, #12]	; (d5218 <hal_ble_gatt_server_add_service+0x10>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5212:	9301      	str	r3, [sp, #4]
   d5214:	bd08      	pop	{r3, pc}
   d5216:	0000      	.short	0x0000
   d5218:	00030278 	.word	0x00030278

000d521c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b03      	ldr	r3, [pc, #12]	; (d522c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5226:	9301      	str	r3, [sp, #4]
   d5228:	bd08      	pop	{r3, pc}
   d522a:	0000      	.short	0x0000
   d522c:	00030278 	.word	0x00030278

000d5230 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b03      	ldr	r3, [pc, #12]	; (d5240 <hal_ble_gatt_client_write_with_response+0x10>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d523a:	9301      	str	r3, [sp, #4]
   d523c:	bd08      	pop	{r3, pc}
   d523e:	0000      	.short	0x0000
   d5240:	00030278 	.word	0x00030278

000d5244 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b03      	ldr	r3, [pc, #12]	; (d5254 <hal_ble_gatt_client_write_without_response+0x10>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d524e:	9301      	str	r3, [sp, #4]
   d5250:	bd08      	pop	{r3, pc}
   d5252:	0000      	.short	0x0000
   d5254:	00030278 	.word	0x00030278

000d5258 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b03      	ldr	r3, [pc, #12]	; (d5268 <hal_ble_gatt_server_add_characteristic+0x10>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5262:	9301      	str	r3, [sp, #4]
   d5264:	bd08      	pop	{r3, pc}
   d5266:	0000      	.short	0x0000
   d5268:	00030278 	.word	0x00030278

000d526c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b03      	ldr	r3, [pc, #12]	; (d527c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5276:	9301      	str	r3, [sp, #4]
   d5278:	bd08      	pop	{r3, pc}
   d527a:	0000      	.short	0x0000
   d527c:	00030278 	.word	0x00030278

000d5280 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b03      	ldr	r3, [pc, #12]	; (d5290 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d528a:	9301      	str	r3, [sp, #4]
   d528c:	bd08      	pop	{r3, pc}
   d528e:	0000      	.short	0x0000
   d5290:	00030278 	.word	0x00030278

000d5294 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b03      	ldr	r3, [pc, #12]	; (d52a4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d529e:	9301      	str	r3, [sp, #4]
   d52a0:	bd08      	pop	{r3, pc}
   d52a2:	0000      	.short	0x0000
   d52a4:	00030278 	.word	0x00030278

000d52a8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <os_thread_create+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	685b      	ldr	r3, [r3, #4]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030248 	.word	0x00030248

000d52b8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <os_thread_is_current+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	689b      	ldr	r3, [r3, #8]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030248 	.word	0x00030248

000d52c8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <os_thread_join+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	691b      	ldr	r3, [r3, #16]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030248 	.word	0x00030248

000d52d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <os_thread_cleanup+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	695b      	ldr	r3, [r3, #20]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030248 	.word	0x00030248

000d52e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <os_mutex_create+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030248 	.word	0x00030248

000d52f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <os_mutex_recursive_create+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030248 	.word	0x00030248

000d5308 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <os_mutex_recursive_lock+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030248 	.word	0x00030248

000d5318 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <os_mutex_recursive_unlock+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030248 	.word	0x00030248

000d5328 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <os_thread_exit+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030248 	.word	0x00030248

000d5338 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_RNG_GetRandomNumber+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	685b      	ldr	r3, [r3, #4]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030218 	.word	0x00030218

000d5348 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_Delay_Milliseconds+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	689b      	ldr	r3, [r3, #8]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030218 	.word	0x00030218

000d5358 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_Delay_Microseconds+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	68db      	ldr	r3, [r3, #12]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030218 	.word	0x00030218

000d5368 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	695b      	ldr	r3, [r3, #20]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030218 	.word	0x00030218

000d5378 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_Pin_Map+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	681b      	ldr	r3, [r3, #0]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003022c 	.word	0x0003022c

000d5388 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_Validate_Pin_Function+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	685b      	ldr	r3, [r3, #4]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003022c 	.word	0x0003022c

000d5398 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_Pin_Mode+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	689b      	ldr	r3, [r3, #8]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003022c 	.word	0x0003022c

000d53a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_Get_Pin_Mode+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	68db      	ldr	r3, [r3, #12]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003022c 	.word	0x0003022c

000d53b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_GPIO_Write+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	691b      	ldr	r3, [r3, #16]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003022c 	.word	0x0003022c

000d53c8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_Interrupts_Enable_All+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6a1b      	ldr	r3, [r3, #32]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003022c 	.word	0x0003022c

000d53d8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_Interrupts_Disable_All+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003022c 	.word	0x0003022c

000d53e8 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_ADC_Read+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003022c 	.word	0x0003022c

000d53f8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_Pulse_In+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003022c 	.word	0x0003022c

000d5408 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <HAL_I2C_Write_Data+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6a1b      	ldr	r3, [r3, #32]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030228 	.word	0x00030228

000d5418 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_I2C_Available_Data+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030228 	.word	0x00030228

000d5428 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_I2C_Read_Data+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030228 	.word	0x00030228

000d5438 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_I2C_Peek_Data+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030228 	.word	0x00030228

000d5448 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_I2C_Flush_Data+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030228 	.word	0x00030228

000d5458 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_I2C_Is_Enabled+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030228 	.word	0x00030228

000d5468 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_I2C_Init+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030228 	.word	0x00030228

000d5478 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <if_name_to_index+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	691b      	ldr	r3, [r3, #16]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003026c 	.word	0x0003026c

000d5488 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <if_index_to_name+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	695b      	ldr	r3, [r3, #20]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003026c 	.word	0x0003026c

000d5498 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <if_get_by_index+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	699b      	ldr	r3, [r3, #24]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003026c 	.word	0x0003026c

000d54a8 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <if_get_addrs+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003026c 	.word	0x0003026c

000d54b8 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <if_free_if_addrs+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	0003026c 	.word	0x0003026c

000d54c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <inet_inet_ntop+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	695b      	ldr	r3, [r3, #20]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030264 	.word	0x00030264

000d54d8 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <inet_inet_pton+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	699b      	ldr	r3, [r3, #24]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030264 	.word	0x00030264

000d54e8 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <inet_htonl+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6a1b      	ldr	r3, [r3, #32]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030264 	.word	0x00030264

000d54f8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <inet_ntohs+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030264 	.word	0x00030264

000d5508 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <inet_htons+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030264 	.word	0x00030264

000d5518 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <netdb_freeaddrinfo+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	689b      	ldr	r3, [r3, #8]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030268 	.word	0x00030268

000d5528 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <netdb_getaddrinfo+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	68db      	ldr	r3, [r3, #12]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030268 	.word	0x00030268

000d5538 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <sock_bind+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	685b      	ldr	r3, [r3, #4]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030238 	.word	0x00030238

000d5548 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <sock_setsockopt+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	699b      	ldr	r3, [r3, #24]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030238 	.word	0x00030238

000d5558 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <sock_close+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	69db      	ldr	r3, [r3, #28]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030238 	.word	0x00030238

000d5568 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <sock_recvfrom+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030238 	.word	0x00030238

000d5578 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <sock_sendto+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030238 	.word	0x00030238

000d5588 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <sock_socket+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030238 	.word	0x00030238

000d5598 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_SPI_Init+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030230 	.word	0x00030230

000d55a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_SPI_Is_Enabled+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a1b      	ldr	r3, [r3, #32]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030230 	.word	0x00030230

000d55b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <HAL_USART_Init+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	681b      	ldr	r3, [r3, #0]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	0003023c 	.word	0x0003023c

000d55c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <HAL_USART_Write_Data+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	68db      	ldr	r3, [r3, #12]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	0003023c 	.word	0x0003023c

000d55d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <HAL_USART_Available_Data+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	691b      	ldr	r3, [r3, #16]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	0003023c 	.word	0x0003023c

000d55e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <HAL_USART_Read_Data+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	695b      	ldr	r3, [r3, #20]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	0003023c 	.word	0x0003023c

000d55f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <HAL_USART_Peek_Data+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	699b      	ldr	r3, [r3, #24]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	0003023c 	.word	0x0003023c

000d5608 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <HAL_USART_Flush_Data+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	69db      	ldr	r3, [r3, #28]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003023c 	.word	0x0003023c

000d5618 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <HAL_USART_Is_Enabled+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	6a1b      	ldr	r3, [r3, #32]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003023c 	.word	0x0003023c

000d5628 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <HAL_USART_Available_Data_For_Write+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	0003023c 	.word	0x0003023c

000d5638 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <HAL_USB_USART_Init+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	681b      	ldr	r3, [r3, #0]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	0003024c 	.word	0x0003024c

000d5648 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <HAL_USB_USART_Begin+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	685b      	ldr	r3, [r3, #4]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003024c 	.word	0x0003024c

000d5658 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <HAL_USB_USART_Available_Data+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	691b      	ldr	r3, [r3, #16]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003024c 	.word	0x0003024c

000d5668 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	695b      	ldr	r3, [r3, #20]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	0003024c 	.word	0x0003024c

000d5678 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <HAL_USB_USART_Receive_Data+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	699b      	ldr	r3, [r3, #24]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003024c 	.word	0x0003024c

000d5688 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <HAL_USB_USART_Send_Data+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	69db      	ldr	r3, [r3, #28]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	0003024c 	.word	0x0003024c

000d5698 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <HAL_USB_USART_Flush_Data+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	6a1b      	ldr	r3, [r3, #32]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003024c 	.word	0x0003024c

000d56a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <panic_+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030260 	.word	0x00030260

000d56b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <log_message+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030260 	.word	0x00030260

000d56c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <set_system_mode+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	685b      	ldr	r3, [r3, #4]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030220 	.word	0x00030220

000d56d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <system_delay_ms+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	695b      	ldr	r3, [r3, #20]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030220 	.word	0x00030220

000d56e8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <system_subscribe_event+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6a1b      	ldr	r3, [r3, #32]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030220 	.word	0x00030220

000d56f8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <system_thread_set_state+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030220 	.word	0x00030220

000d5708 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <application_thread_current+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030220 	.word	0x00030220

000d5718 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <application_thread_invoke+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030220 	.word	0x00030220

000d5728 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b03      	ldr	r3, [pc, #12]	; (d5738 <system_format_diag_data+0x10>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d5732:	9301      	str	r3, [sp, #4]
   d5734:	bd08      	pop	{r3, pc}
   d5736:	0000      	.short	0x0000
   d5738:	00030220 	.word	0x00030220

000d573c <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b03      	ldr	r3, [pc, #12]	; (d574c <system_ctrl_set_app_request_handler+0x10>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5746:	9301      	str	r3, [sp, #4]
   d5748:	bd08      	pop	{r3, pc}
   d574a:	0000      	.short	0x0000
   d574c:	00030220 	.word	0x00030220

000d5750 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b03      	ldr	r3, [pc, #12]	; (d5760 <system_ctrl_set_result+0x10>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d575a:	9301      	str	r3, [sp, #4]
   d575c:	bd08      	pop	{r3, pc}
   d575e:	0000      	.short	0x0000
   d5760:	00030220 	.word	0x00030220

000d5764 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b03      	ldr	r3, [pc, #12]	; (d5774 <system_invoke_event_handler+0x10>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d576e:	9301      	str	r3, [sp, #4]
   d5770:	bd08      	pop	{r3, pc}
   d5772:	0000      	.short	0x0000
   d5774:	00030220 	.word	0x00030220

000d5778 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <spark_variable+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	681b      	ldr	r3, [r3, #0]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030244 	.word	0x00030244

000d5788 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <spark_function+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	685b      	ldr	r3, [r3, #4]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030244 	.word	0x00030244

000d5798 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <spark_cloud_flag_connected+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	695b      	ldr	r3, [r3, #20]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030244 	.word	0x00030244

000d57a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <spark_send_event+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6a1b      	ldr	r3, [r3, #32]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030244 	.word	0x00030244

000d57b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030244 	.word	0x00030244

000d57c8 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <spark_publish_vitals+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030244 	.word	0x00030244

000d57d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <network_connect+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	685b      	ldr	r3, [r3, #4]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030240 	.word	0x00030240

000d57e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <network_connecting+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	689b      	ldr	r3, [r3, #8]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030240 	.word	0x00030240

000d57f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <network_disconnect+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	68db      	ldr	r3, [r3, #12]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030240 	.word	0x00030240

000d5808 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <network_ready+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	691b      	ldr	r3, [r3, #16]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030240 	.word	0x00030240

000d5818 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <network_on+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	695b      	ldr	r3, [r3, #20]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030240 	.word	0x00030240

000d5828 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <network_off+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	699b      	ldr	r3, [r3, #24]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030240 	.word	0x00030240

000d5838 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <network_listen+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	69db      	ldr	r3, [r3, #28]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030240 	.word	0x00030240

000d5848 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <network_listening+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6a1b      	ldr	r3, [r3, #32]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030240 	.word	0x00030240

000d5858 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <network_set_listen_timeout+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030240 	.word	0x00030240

000d5868 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <network_get_listen_timeout+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	00030240 	.word	0x00030240

000d5878 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <malloc+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	681b      	ldr	r3, [r3, #0]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003021c 	.word	0x0003021c

000d5888 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <free+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	685b      	ldr	r3, [r3, #4]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003021c 	.word	0x0003021c

000d5898 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <realloc+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	689b      	ldr	r3, [r3, #8]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003021c 	.word	0x0003021c

000d58a8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <vsnprintf+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003021c 	.word	0x0003021c

000d58b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <abort+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003021c 	.word	0x0003021c

000d58c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <_malloc_r+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	0003021c 	.word	0x0003021c

000d58d8 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d58d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58dc:	ed2d 8b02 	vpush	{d8}
   d58e0:	eeb0 8a44 	vmov.f32	s16, s8
   d58e4:	eef0 8a64 	vmov.f32	s17, s9
   d58e8:	ec55 4b11 	vmov	r4, r5, d1
   d58ec:	ec57 6b12 	vmov	r6, r7, d2
   d58f0:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d58f2:	ee11 2a10 	vmov	r2, s2
   d58f6:	462b      	mov	r3, r5
   d58f8:	ee12 0a10 	vmov	r0, s4
   d58fc:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d58fe:	ed8d 0b00 	vstr	d0, [sp]
   d5902:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d5906:	f003 fdd7 	bl	d94b8 <__aeabi_dcmpeq>
   d590a:	ed9d 0b00 	vldr	d0, [sp]
   d590e:	bb38      	cbnz	r0, d5960 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5910:	ec51 0b10 	vmov	r0, r1, d0
   d5914:	4622      	mov	r2, r4
   d5916:	462b      	mov	r3, r5
   d5918:	f003 f9b2 	bl	d8c80 <__aeabi_dsub>
   d591c:	4652      	mov	r2, sl
   d591e:	4680      	mov	r8, r0
   d5920:	4689      	mov	r9, r1
   d5922:	465b      	mov	r3, fp
   d5924:	ec51 0b18 	vmov	r0, r1, d8
   d5928:	f003 f9aa 	bl	d8c80 <__aeabi_dsub>
   d592c:	4602      	mov	r2, r0
   d592e:	460b      	mov	r3, r1
   d5930:	4640      	mov	r0, r8
   d5932:	4649      	mov	r1, r9
   d5934:	f003 fb58 	bl	d8fe8 <__aeabi_dmul>
   d5938:	4622      	mov	r2, r4
   d593a:	4680      	mov	r8, r0
   d593c:	4689      	mov	r9, r1
   d593e:	462b      	mov	r3, r5
   d5940:	4630      	mov	r0, r6
   d5942:	4639      	mov	r1, r7
   d5944:	f003 f99c 	bl	d8c80 <__aeabi_dsub>
   d5948:	4602      	mov	r2, r0
   d594a:	460b      	mov	r3, r1
   d594c:	4640      	mov	r0, r8
   d594e:	4649      	mov	r1, r9
   d5950:	f003 fc74 	bl	d923c <__aeabi_ddiv>
   d5954:	4652      	mov	r2, sl
   d5956:	465b      	mov	r3, fp
   d5958:	f003 f994 	bl	d8c84 <__adddf3>
   d595c:	ec41 0b10 	vmov	d0, r0, r1
}
   d5960:	b003      	add	sp, #12
   d5962:	ecbd 8b02 	vpop	{d8}
   d5966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d596a <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d596a:	2100      	movs	r1, #0
   d596c:	f7ff beb4 	b.w	d56d8 <system_delay_ms>

000d5970 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5970:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5972:	6883      	ldr	r3, [r0, #8]
   d5974:	4604      	mov	r4, r0
   d5976:	b90b      	cbnz	r3, d597c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5978:	f003 f833 	bl	d89e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d597c:	68c3      	ldr	r3, [r0, #12]
   d597e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5980:	68a3      	ldr	r3, [r4, #8]
   d5982:	b11b      	cbz	r3, d598c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5984:	2203      	movs	r2, #3
   d5986:	4621      	mov	r1, r4
   d5988:	4620      	mov	r0, r4
   d598a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d598c:	4620      	mov	r0, r4
   d598e:	2110      	movs	r1, #16
}
   d5990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5994:	f003 b809 	b.w	d89aa <_ZdlPvj>

000d5998 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5998:	4770      	bx	lr

000d599a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d599a:	2000      	movs	r0, #0
   d599c:	4770      	bx	lr

000d599e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d599e:	4770      	bx	lr

000d59a0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d59a0:	2000      	movs	r0, #0
   d59a2:	4770      	bx	lr

000d59a4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59a4:	4770      	bx	lr

000d59a6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d59a6:	2000      	movs	r0, #0
   d59a8:	4770      	bx	lr

000d59aa <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59aa:	b510      	push	{r4, lr}
   d59ac:	2114      	movs	r1, #20
   d59ae:	4604      	mov	r4, r0
   d59b0:	f002 fffb 	bl	d89aa <_ZdlPvj>
   d59b4:	4620      	mov	r0, r4
   d59b6:	bd10      	pop	{r4, pc}

000d59b8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d59b8:	b510      	push	{r4, lr}
   d59ba:	2114      	movs	r1, #20
   d59bc:	4604      	mov	r4, r0
   d59be:	f002 fff4 	bl	d89aa <_ZdlPvj>
   d59c2:	4620      	mov	r0, r4
   d59c4:	bd10      	pop	{r4, pc}

000d59c6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d59c6:	b510      	push	{r4, lr}
   d59c8:	2114      	movs	r1, #20
   d59ca:	4604      	mov	r4, r0
   d59cc:	f002 ffed 	bl	d89aa <_ZdlPvj>
   d59d0:	4620      	mov	r0, r4
   d59d2:	bd10      	pop	{r4, pc}

000d59d4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d59d4:	f7fe bb65 	b.w	d40a2 <_ZdlPv>

000d59d8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d59d8:	f7fe bb63 	b.w	d40a2 <_ZdlPv>

000d59dc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d59dc:	f7fe bb61 	b.w	d40a2 <_ZdlPv>

000d59e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d59e0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d59e2:	200a      	movs	r0, #10
   d59e4:	4a02      	ldr	r2, [pc, #8]	; (d59f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100+0x10>)
   d59e6:	2100      	movs	r1, #0
   d59e8:	f7ff fe5e 	bl	d56a8 <panic_>
    }
}
   d59ec:	bd08      	pop	{r3, pc}
   d59ee:	bf00      	nop
   d59f0:	000d5359 	.word	0x000d5359

000d59f4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d59f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d59f8:	b2da      	uxtb	r2, r3
   d59fa:	2a09      	cmp	r2, #9
   d59fc:	d801      	bhi.n	d5a02 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d59fe:	4618      	mov	r0, r3
   d5a00:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5a02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5a06:	2b05      	cmp	r3, #5
   d5a08:	d801      	bhi.n	d5a0e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5a0a:	3857      	subs	r0, #87	; 0x57
   d5a0c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5a0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5a12:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5a14:	bf94      	ite	ls
   d5a16:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5a18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5a1c:	4770      	bx	lr
	...

000d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a20:	b510      	push	{r4, lr}
            locked_(false) {
   d5a22:	2300      	movs	r3, #0
   d5a24:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5a26:	4b04      	ldr	r3, [pc, #16]	; (d5a38 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a28:	4604      	mov	r4, r0
   d5a2a:	6818      	ldr	r0, [r3, #0]
   d5a2c:	f7ff fc6c 	bl	d5308 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5a30:	2301      	movs	r3, #1
   d5a32:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}
   d5a38:	2003e3c4 	.word	0x2003e3c4

000d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5a3c:	b510      	push	{r4, lr}
        if (locked_) {
   d5a3e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5a40:	4604      	mov	r4, r0
        if (locked_) {
   d5a42:	b11b      	cbz	r3, d5a4c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5a44:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5a46:	6818      	ldr	r0, [r3, #0]
   d5a48:	f7ff fc66 	bl	d5318 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	bd10      	pop	{r4, pc}
   d5a50:	2003e3c4 	.word	0x2003e3c4

000d5a54 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5a54:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5a56:	7982      	ldrb	r2, [r0, #6]
   d5a58:	798b      	ldrb	r3, [r1, #6]
   d5a5a:	429a      	cmp	r2, r3
   d5a5c:	d106      	bne.n	d5a6c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5a5e:	2206      	movs	r2, #6
   d5a60:	f003 ff92 	bl	d9988 <memcmp>
   d5a64:	fab0 f080 	clz	r0, r0
   d5a68:	0940      	lsrs	r0, r0, #5
   d5a6a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5a6c:	2000      	movs	r0, #0
}
   d5a6e:	bd08      	pop	{r3, pc}

000d5a70 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5a70:	b510      	push	{r4, lr}
        : uuid_() {
   d5a72:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5a74:	4604      	mov	r4, r0
        : uuid_() {
   d5a76:	2100      	movs	r1, #0
   d5a78:	f003 ffbb 	bl	d99f2 <memset>
}
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	bd10      	pop	{r4, pc}

000d5a80 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d5a80:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d5a82:	4603      	mov	r3, r0
   d5a84:	f101 0214 	add.w	r2, r1, #20
   d5a88:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a8c:	f843 4b04 	str.w	r4, [r3], #4
   d5a90:	4291      	cmp	r1, r2
   d5a92:	d1f9      	bne.n	d5a88 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d5a94:	bd10      	pop	{r4, pc}

000d5a96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d5a96:	b570      	push	{r4, r5, r6, lr}
   d5a98:	460c      	mov	r4, r1
   d5a9a:	4605      	mov	r5, r0
   d5a9c:	4616      	mov	r6, r2
        : BleUuid() {
   d5a9e:	f7ff ffe7 	bl	d5a70 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d5aa2:	b92c      	cbnz	r4, d5ab0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5aa4:	2210      	movs	r2, #16
   d5aa6:	4621      	mov	r1, r4
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	f003 ffa2 	bl	d99f2 <memset>
   d5aae:	e016      	b.n	d5ade <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d5ab0:	2e01      	cmp	r6, #1
   d5ab2:	d109      	bne.n	d5ac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5ab4:	462b      	mov	r3, r5
   d5ab6:	f104 0210 	add.w	r2, r4, #16
   d5aba:	f854 1b04 	ldr.w	r1, [r4], #4
   d5abe:	f843 1b04 	str.w	r1, [r3], #4
   d5ac2:	4294      	cmp	r4, r2
   d5ac4:	d1f9      	bne.n	d5aba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d5ac6:	e008      	b.n	d5ada <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5ac8:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d5aca:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d5acc:	5ce1      	ldrb	r1, [r4, r3]
   d5ace:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5ad2:	3b01      	subs	r3, #1
   d5ad4:	b2db      	uxtb	r3, r3
   d5ad6:	2bff      	cmp	r3, #255	; 0xff
   d5ad8:	d1f8      	bne.n	d5acc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5ada:	2301      	movs	r3, #1
   d5adc:	742b      	strb	r3, [r5, #16]
    }
}
   d5ade:	4628      	mov	r0, r5
   d5ae0:	bd70      	pop	{r4, r5, r6, pc}

000d5ae2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5ae2:	b538      	push	{r3, r4, r5, lr}
   d5ae4:	4604      	mov	r4, r0
   d5ae6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5ae8:	461a      	mov	r2, r3
   d5aea:	f7ff ffd4 	bl	d5a96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d5aee:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5af0:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5af2:	0a2d      	lsrs	r5, r5, #8
   d5af4:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5af6:	7423      	strb	r3, [r4, #16]
}
   d5af8:	4620      	mov	r0, r4
   d5afa:	bd38      	pop	{r3, r4, r5, pc}

000d5afc <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d5afc:	7c03      	ldrb	r3, [r0, #16]
   d5afe:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d5b02:	bf14      	ite	ne
   d5b04:	2001      	movne	r0, #1
   d5b06:	2000      	moveq	r0, #0
   d5b08:	4770      	bx	lr

000d5b0a <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d5b0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b0c:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5b0e:	f7ff fff5 	bl	d5afc <_ZNK8particle7BleUuid4typeEv>
   d5b12:	b908      	cbnz	r0, d5b18 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d5b14:	8820      	ldrh	r0, [r4, #0]
   d5b16:	e009      	b.n	d5b2c <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d5b18:	2210      	movs	r2, #16
   d5b1a:	2100      	movs	r1, #0
   d5b1c:	4668      	mov	r0, sp
   d5b1e:	f003 ff68 	bl	d99f2 <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d5b22:	2210      	movs	r2, #16
   d5b24:	4669      	mov	r1, sp
   d5b26:	4620      	mov	r0, r4
   d5b28:	f003 ff2e 	bl	d9988 <memcmp>
   d5b2c:	3000      	adds	r0, #0
   d5b2e:	bf18      	it	ne
   d5b30:	2001      	movne	r0, #1
    }
}
   d5b32:	b004      	add	sp, #16
   d5b34:	bd10      	pop	{r4, pc}

000d5b36 <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d5b36:	8800      	ldrh	r0, [r0, #0]
   d5b38:	4770      	bx	lr

000d5b3a <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d5b3a:	4770      	bx	lr

000d5b3c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5b3c:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d5b3e:	4603      	mov	r3, r0
   d5b40:	f101 0214 	add.w	r2, r1, #20
   d5b44:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b48:	f843 4b04 	str.w	r4, [r3], #4
   d5b4c:	4291      	cmp	r1, r2
   d5b4e:	d1f9      	bne.n	d5b44 <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d5b50:	bd10      	pop	{r4, pc}

000d5b52 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5b52:	b510      	push	{r4, lr}
    if (uuid128) {
   d5b54:	b151      	cbz	r1, d5b6c <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5b56:	4603      	mov	r3, r0
   d5b58:	f101 0210 	add.w	r2, r1, #16
   d5b5c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b60:	f843 4b04 	str.w	r4, [r3], #4
   d5b64:	4291      	cmp	r1, r2
   d5b66:	d1f9      	bne.n	d5b5c <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5b68:	2301      	movs	r3, #1
   d5b6a:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d5b6c:	bd10      	pop	{r4, pc}

000d5b6e <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5b6e:	b510      	push	{r4, lr}
   d5b70:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5b72:	f7ff ffc3 	bl	d5afc <_ZNK8particle7BleUuid4typeEv>
   d5b76:	b928      	cbnz	r0, d5b84 <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d5b78:	8808      	ldrh	r0, [r1, #0]
   d5b7a:	8823      	ldrh	r3, [r4, #0]
   d5b7c:	1a1b      	subs	r3, r3, r0
   d5b7e:	4258      	negs	r0, r3
   d5b80:	4158      	adcs	r0, r3
   d5b82:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5b84:	2210      	movs	r2, #16
   d5b86:	4620      	mov	r0, r4
   d5b88:	f003 fefe 	bl	d9988 <memcmp>
   d5b8c:	fab0 f080 	clz	r0, r0
   d5b90:	0940      	lsrs	r0, r0, #5
    }
}
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d5b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5b96:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5b98:	460e      	mov	r6, r1
   d5b9a:	b919      	cbnz	r1, d5ba4 <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5b9c:	2210      	movs	r2, #16
   d5b9e:	f003 ff28 	bl	d99f2 <memset>
   d5ba2:	e051      	b.n	d5c48 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5ba4:	2124      	movs	r1, #36	; 0x24
   d5ba6:	4630      	mov	r0, r6
   d5ba8:	f003 ff85 	bl	d9ab6 <strnlen>
   d5bac:	2804      	cmp	r0, #4
   d5bae:	d002      	beq.n	d5bb6 <_ZN8particle7BleUuid9constructEPKc+0x22>
   d5bb0:	2700      	movs	r7, #0
   d5bb2:	2410      	movs	r4, #16
   d5bb4:	e03b      	b.n	d5c2e <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5bb6:	7830      	ldrb	r0, [r6, #0]
   d5bb8:	f7ff ff1c 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5bbc:	1e04      	subs	r4, r0, #0
   d5bbe:	db47      	blt.n	d5c50 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5bc0:	7870      	ldrb	r0, [r6, #1]
   d5bc2:	f7ff ff17 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5bc6:	2800      	cmp	r0, #0
   d5bc8:	db42      	blt.n	d5c50 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5bca:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5bce:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5bd2:	78b0      	ldrb	r0, [r6, #2]
   d5bd4:	f7ff ff0e 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5bd8:	1e04      	subs	r4, r0, #0
   d5bda:	db39      	blt.n	d5c50 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5bdc:	78f0      	ldrb	r0, [r6, #3]
   d5bde:	f7ff ff09 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5be2:	2800      	cmp	r0, #0
   d5be4:	db34      	blt.n	d5c50 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5be6:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d5bea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5bee:	b2c0      	uxtb	r0, r0
   d5bf0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d5bf4:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d5bf6:	2300      	movs	r3, #0
   d5bf8:	e027      	b.n	d5c4a <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5bfa:	b32c      	cbz	r4, d5c48 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d5bfc:	5df0      	ldrb	r0, [r6, r7]
   d5bfe:	f7ff fef9 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5c02:	0603      	lsls	r3, r0, #24
   d5c04:	d412      	bmi.n	d5c2c <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d5c06:	3c01      	subs	r4, #1
   d5c08:	0100      	lsls	r0, r0, #4
   d5c0a:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5c0c:	2124      	movs	r1, #36	; 0x24
   d5c0e:	4630      	mov	r0, r6
   d5c10:	f003 ff51 	bl	d9ab6 <strnlen>
   d5c14:	3701      	adds	r7, #1
   d5c16:	4287      	cmp	r7, r0
   d5c18:	d208      	bcs.n	d5c2c <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d5c1a:	5df0      	ldrb	r0, [r6, r7]
   d5c1c:	f7ff feea 	bl	d59f4 <_ZN8particle11hexToNibbleEc>
   d5c20:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5c22:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d5c24:	bfa2      	ittt	ge
   d5c26:	5d2b      	ldrbge	r3, [r5, r4]
   d5c28:	4318      	orrge	r0, r3
   d5c2a:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5c2c:	3701      	adds	r7, #1
   d5c2e:	2124      	movs	r1, #36	; 0x24
   d5c30:	4630      	mov	r0, r6
   d5c32:	f003 ff40 	bl	d9ab6 <strnlen>
   d5c36:	4287      	cmp	r7, r0
   d5c38:	d3df      	bcc.n	d5bfa <_ZN8particle7BleUuid9constructEPKc+0x66>
   d5c3a:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d5c3c:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5c3e:	42a5      	cmp	r5, r4
   d5c40:	d002      	beq.n	d5c48 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d5c42:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5c46:	e7fa      	b.n	d5c3e <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5c48:	2301      	movs	r3, #1
   d5c4a:	742b      	strb	r3, [r5, #16]
}
   d5c4c:	b003      	add	sp, #12
   d5c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d5c50:	2300      	movs	r3, #0
   d5c52:	802b      	strh	r3, [r5, #0]
   d5c54:	e7cf      	b.n	d5bf6 <_ZN8particle7BleUuid9constructEPKc+0x62>

000d5c56 <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d5c56:	b538      	push	{r3, r4, r5, lr}
   d5c58:	4604      	mov	r4, r0
   d5c5a:	460d      	mov	r5, r1
        : BleUuid() {
   d5c5c:	f7ff ff08 	bl	d5a70 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5c60:	4620      	mov	r0, r4
   d5c62:	4629      	mov	r1, r5
   d5c64:	f7ff ff96 	bl	d5b94 <_ZN8particle7BleUuid9constructEPKc>
}
   d5c68:	4620      	mov	r0, r4
   d5c6a:	bd38      	pop	{r3, r4, r5, pc}

000d5c6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5c6e:	b18b      	cbz	r3, d5c94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5c70:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5c72:	1ce5      	adds	r5, r4, #3
   d5c74:	428d      	cmp	r5, r1
   d5c76:	d80f      	bhi.n	d5c98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5c78:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5c7a:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5c7c:	5d87      	ldrb	r7, [r0, r6]
   d5c7e:	4297      	cmp	r7, r2
   d5c80:	d105      	bne.n	d5c8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5c82:	442e      	add	r6, r5
   d5c84:	42b1      	cmp	r1, r6
   d5c86:	d307      	bcc.n	d5c98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5c88:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5c8a:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5c8e:	3501      	adds	r5, #1
   d5c90:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5c92:	e7ee      	b.n	d5c72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5c94:	4618      	mov	r0, r3
   d5c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c98:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5ca0:	4604      	mov	r4, r0
   d5ca2:	460e      	mov	r6, r1
   d5ca4:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5ca6:	4617      	mov	r7, r2
   d5ca8:	2a00      	cmp	r2, #0
   d5caa:	d03a      	beq.n	d5d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5cac:	460a      	mov	r2, r1
   d5cae:	ab01      	add	r3, sp, #4
   d5cb0:	6a01      	ldr	r1, [r0, #32]
   d5cb2:	f7ff ffdb 	bl	d5c6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5cb6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5cba:	6a22      	ldr	r2, [r4, #32]
   d5cbc:	bb03      	cbnz	r3, d5d00 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5cbe:	b1f8      	cbz	r0, d5d00 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5cc0:	1c96      	adds	r6, r2, #2
   d5cc2:	442e      	add	r6, r5
   d5cc4:	1a36      	subs	r6, r6, r0
   d5cc6:	2e1f      	cmp	r6, #31
   d5cc8:	d82b      	bhi.n	d5d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5cca:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5cce:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5cd2:	ebc8 0202 	rsb	r2, r8, r2
   d5cd6:	1a12      	subs	r2, r2, r0
   d5cd8:	eb00 0108 	add.w	r1, r0, r8
   d5cdc:	eb05 0009 	add.w	r0, r5, r9
   d5ce0:	b292      	uxth	r2, r2
   d5ce2:	4421      	add	r1, r4
   d5ce4:	4420      	add	r0, r4
   d5ce6:	f003 fe69 	bl	d99bc <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5cea:	1c6b      	adds	r3, r5, #1
   d5cec:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5cf0:	462a      	mov	r2, r5
   d5cf2:	4639      	mov	r1, r7
   d5cf4:	eb04 0009 	add.w	r0, r4, r9
   d5cf8:	f003 fe55 	bl	d99a6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5cfc:	6226      	str	r6, [r4, #32]
   d5cfe:	e010      	b.n	d5d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5d00:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5d02:	182b      	adds	r3, r5, r0
   d5d04:	2b1f      	cmp	r3, #31
   d5d06:	d80c      	bhi.n	d5d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5d08:	1c6b      	adds	r3, r5, #1
   d5d0a:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d0c:	4422      	add	r2, r4
   d5d0e:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d10:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d12:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d14:	4420      	add	r0, r4
   d5d16:	462a      	mov	r2, r5
   d5d18:	f003 fe45 	bl	d99a6 <memcpy>
        selfLen_ += len;
   d5d1c:	6a22      	ldr	r2, [r4, #32]
   d5d1e:	442a      	add	r2, r5
   d5d20:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5d22:	6a20      	ldr	r0, [r4, #32]
}
   d5d24:	b003      	add	sp, #12
   d5d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d2a <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5d2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5d2c:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5d2e:	4603      	mov	r3, r0
   d5d30:	f100 021f 	add.w	r2, r0, #31
   d5d34:	2000      	movs	r0, #0
   d5d36:	f803 0b01 	strb.w	r0, [r3], #1
   d5d3a:	4293      	cmp	r3, r2
   d5d3c:	f04f 0100 	mov.w	r1, #0
   d5d40:	d1f9      	bne.n	d5d36 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5d42:	aa04      	add	r2, sp, #16
   d5d44:	2306      	movs	r3, #6
   d5d46:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5d4a:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5d4c:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5d4e:	9100      	str	r1, [sp, #0]
   d5d50:	4620      	mov	r0, r4
   d5d52:	4619      	mov	r1, r3
   d5d54:	f7ff ffa2 	bl	d5c9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5d58:	4620      	mov	r0, r4
   d5d5a:	b004      	add	sp, #16
   d5d5c:	bd10      	pop	{r4, pc}

000d5d5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5d60:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5d62:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5d64:	ab01      	add	r3, sp, #4
   d5d66:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5d68:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5d6a:	f7ff ff7f 	bl	d5c6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5d6e:	4605      	mov	r5, r0
   d5d70:	b178      	cbz	r0, d5d92 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5d72:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5d74:	6a22      	ldr	r2, [r4, #32]
   d5d76:	1829      	adds	r1, r5, r0
   d5d78:	1a12      	subs	r2, r2, r0
   d5d7a:	1b52      	subs	r2, r2, r5
   d5d7c:	4421      	add	r1, r4
   d5d7e:	4420      	add	r0, r4
   d5d80:	f003 fe11 	bl	d99a6 <memcpy>
        selfLen_ -= len;
   d5d84:	6a23      	ldr	r3, [r4, #32]
   d5d86:	1b5d      	subs	r5, r3, r5
   d5d88:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5d8a:	4631      	mov	r1, r6
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	f7ff ffe6 	bl	d5d5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5d92:	b002      	add	sp, #8
   d5d94:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d98 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5d98:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5d9a:	2500      	movs	r5, #0
   d5d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5da0:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5da2:	8043      	strh	r3, [r0, #2]
   d5da4:	220e      	movs	r2, #14
   d5da6:	4629      	mov	r1, r5
   d5da8:	7005      	strb	r5, [r0, #0]
   d5daa:	7105      	strb	r5, [r0, #4]
   d5dac:	3006      	adds	r0, #6
   d5dae:	f003 fe20 	bl	d99f2 <memset>
   d5db2:	f104 0014 	add.w	r0, r4, #20
   d5db6:	f7ff fe5b 	bl	d5a70 <_ZN8particle7BleUuidC1Ev>
   d5dba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5dbe:	f7ff fe57 	bl	d5a70 <_ZN8particle7BleUuidC1Ev>
   d5dc2:	4904      	ldr	r1, [pc, #16]	; (d5dd4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5dc4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5dc8:	f001 ff79 	bl	d7cbe <_ZN6StringC1EPK19__FlashStringHelper>
   d5dcc:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5dce:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd38      	pop	{r3, r4, r5, pc}
   d5dd4:	000d9fbc 	.word	0x000d9fbc

000d5dd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5dd8:	b510      	push	{r4, lr}
   d5dda:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ddc:	69c2      	ldr	r2, [r0, #28]
   d5dde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5de2:	4293      	cmp	r3, r2
   d5de4:	4618      	mov	r0, r3
   d5de6:	d006      	beq.n	d5df6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5de8:	6804      	ldr	r4, [r0, #0]
   d5dea:	8824      	ldrh	r4, [r4, #0]
   d5dec:	428c      	cmp	r4, r1
   d5dee:	f103 0308 	add.w	r3, r3, #8
   d5df2:	d1f6      	bne.n	d5de2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5df4:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5df6:	2000      	movs	r0, #0
    }
   d5df8:	bd10      	pop	{r4, pc}
	...

000d5dfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5e00:	4680      	mov	r8, r0
   d5e02:	461e      	mov	r6, r3
    if (buf == nullptr || len == 0) {
   d5e04:	460f      	mov	r7, r1
   d5e06:	2900      	cmp	r1, #0
   d5e08:	d047      	beq.n	d5e9a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5e0a:	2a00      	cmp	r2, #0
   d5e0c:	d045      	beq.n	d5e9a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5e0e:	6805      	ldr	r5, [r0, #0]
   d5e10:	2af4      	cmp	r2, #244	; 0xf4
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5e12:	782b      	ldrb	r3, [r5, #0]
   d5e14:	bf28      	it	cs
   d5e16:	22f4      	movcs	r2, #244	; 0xf4
   d5e18:	4614      	mov	r4, r2
   d5e1a:	b33b      	cbz	r3, d5e6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
        int ret = 0;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d5e1c:	792b      	ldrb	r3, [r5, #4]
   d5e1e:	0798      	lsls	r0, r3, #30
   d5e20:	d506      	bpl.n	d5e30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5e22:	2300      	movs	r3, #0
   d5e24:	89a8      	ldrh	r0, [r5, #12]
   d5e26:	f7ff f9f9 	bl	d521c <hal_ble_gatt_server_set_characteristic_value>
   d5e2a:	2800      	cmp	r0, #0
   d5e2c:	da01      	bge.n	d5e32 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5e2e:	e043      	b.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = 0;
   d5e30:	2000      	movs	r0, #0
   d5e32:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
   d5e36:	792a      	ldrb	r2, [r5, #4]
   d5e38:	06d3      	lsls	r3, r2, #27
   d5e3a:	d50a      	bpl.n	d5e52 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x56>
            if (type == BleTxRxType::AUTO || type == BleTxRxType::NACK) {
   d5e3c:	f016 03fd 	ands.w	r3, r6, #253	; 0xfd
   d5e40:	d107      	bne.n	d5e52 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x56>
                return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5e42:	89a8      	ldrh	r0, [r5, #12]
   d5e44:	4622      	mov	r2, r4
   d5e46:	4639      	mov	r1, r7
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5e48:	b002      	add	sp, #8
   d5e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
            if (type == BleTxRxType::AUTO || type == BleTxRxType::NACK) {
                return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5e4e:	f7ff ba17 	b.w	d5280 <hal_ble_gatt_server_notify_characteristic_value>
            }
        }
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE) {
   d5e52:	2e01      	cmp	r6, #1
   d5e54:	d130      	bne.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
   d5e56:	0691      	lsls	r1, r2, #26
   d5e58:	d52e      	bpl.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5e5a:	89a8      	ldrh	r0, [r5, #12]
   d5e5c:	2300      	movs	r3, #0
   d5e5e:	4622      	mov	r2, r4
   d5e60:	4639      	mov	r1, r7
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5e62:	b002      	add	sp, #8
   d5e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            if (type == BleTxRxType::AUTO || type == BleTxRxType::NACK) {
                return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
            }
        }
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5e68:	f7ff ba14 	b.w	d5294 <hal_ble_gatt_server_indicate_characteristic_value>
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5e6c:	8868      	ldrh	r0, [r5, #2]
   d5e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5e72:	4298      	cmp	r0, r3
   d5e74:	d013      	beq.n	d5e9e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa2>
        // If the peer characteristic has WRITE and WRITE_WITHOUT_RSP properties, sends the data without response required by default.
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
   d5e76:	792b      	ldrb	r3, [r5, #4]
   d5e78:	075a      	lsls	r2, r3, #29
   d5e7a:	d509      	bpl.n	d5e90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x94>
            if (type == BleTxRxType::AUTO || type == BleTxRxType::NACK) {
   d5e7c:	f016 02fd 	ands.w	r2, r6, #253	; 0xfd
   d5e80:	d106      	bne.n	d5e90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x94>
                return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5e82:	89a9      	ldrh	r1, [r5, #12]
   d5e84:	9200      	str	r2, [sp, #0]
   d5e86:	4623      	mov	r3, r4
   d5e88:	463a      	mov	r2, r7
   d5e8a:	f7ff f9db 	bl	d5244 <hal_ble_gatt_client_write_without_response>
   d5e8e:	e013      	b.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
            }
        }
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
   d5e90:	2e01      	cmp	r6, #1
   d5e92:	d107      	bne.n	d5ea4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa8>
   d5e94:	071b      	lsls	r3, r3, #28
   d5e96:	d408      	bmi.n	d5eaa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xae>
   d5e98:	e004      	b.n	d5ea4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa8>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5e9a:	4809      	ldr	r0, [pc, #36]	; (d5ec0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc4>)
   d5e9c:	e00c      	b.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5e9e:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5ea2:	e009      	b.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
            }
        }
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5ea4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5ea8:	e006      	b.n	d5eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>
            if (type == BleTxRxType::AUTO || type == BleTxRxType::NACK) {
                return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
            }
        }
        if (type == BleTxRxType::ACK && (impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5eaa:	2300      	movs	r3, #0
   d5eac:	89a9      	ldrh	r1, [r5, #12]
   d5eae:	9300      	str	r3, [sp, #0]
   d5eb0:	463a      	mov	r2, r7
   d5eb2:	4623      	mov	r3, r4
   d5eb4:	f7ff f9bc 	bl	d5230 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5eb8:	b002      	add	sp, #8
   d5eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ebe:	bf00      	nop
   d5ec0:	fffffef2 	.word	0xfffffef2

000d5ec4 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5ec4:	b510      	push	{r4, lr}
    return impl()->address();
   d5ec6:	680a      	ldr	r2, [r1, #0]
   d5ec8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5ecc:	6003      	str	r3, [r0, #0]
   d5ece:	6853      	ldr	r3, [r2, #4]
   d5ed0:	6043      	str	r3, [r0, #4]
}
   d5ed2:	bd10      	pop	{r4, pc}

000d5ed4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ed6:	6802      	ldr	r2, [r0, #0]
   d5ed8:	680b      	ldr	r3, [r1, #0]
   d5eda:	8812      	ldrh	r2, [r2, #0]
   d5edc:	881b      	ldrh	r3, [r3, #0]
   d5ede:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ee0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ee2:	d10c      	bne.n	d5efe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5ee4:	4601      	mov	r1, r0
   d5ee6:	4668      	mov	r0, sp
   d5ee8:	f7ff ffec 	bl	d5ec4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5eec:	4621      	mov	r1, r4
   d5eee:	a802      	add	r0, sp, #8
   d5ef0:	f7ff ffe8 	bl	d5ec4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5ef4:	a902      	add	r1, sp, #8
   d5ef6:	4668      	mov	r0, sp
   d5ef8:	f7ff fdac 	bl	d5a54 <_ZNK8particle10BleAddresseqERKS0_>
   d5efc:	b900      	cbnz	r0, d5f00 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5efe:	2000      	movs	r0, #0
}
   d5f00:	b004      	add	sp, #16
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5f04:	b510      	push	{r4, lr}
   d5f06:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5f08:	2034      	movs	r0, #52	; 0x34
   d5f0a:	f7fe f8c6 	bl	d409a <_Znwj>
   d5f0e:	4601      	mov	r1, r0
   d5f10:	b168      	cbz	r0, d5f2e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5f12:	2300      	movs	r3, #0
   d5f14:	6003      	str	r3, [r0, #0]
   d5f16:	6043      	str	r3, [r0, #4]
   d5f18:	6083      	str	r3, [r0, #8]
   d5f1a:	60c3      	str	r3, [r0, #12]
   d5f1c:	6103      	str	r3, [r0, #16]
   d5f1e:	6143      	str	r3, [r0, #20]
   d5f20:	6183      	str	r3, [r0, #24]
   d5f22:	61c3      	str	r3, [r0, #28]
   d5f24:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5f26:	6243      	str	r3, [r0, #36]	; 0x24
   d5f28:	6283      	str	r3, [r0, #40]	; 0x28
   d5f2a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5f2c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f2e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5f30:	b919      	cbnz	r1, d5f3a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5f32:	4a0a      	ldr	r2, [pc, #40]	; (d5f5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5f34:	200a      	movs	r0, #10
   d5f36:	f7ff fbb7 	bl	d56a8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5f3a:	2000      	movs	r0, #0
   d5f3c:	f7ff f93a 	bl	d51b4 <hal_ble_stack_init>
   d5f40:	b120      	cbz	r0, d5f4c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5f42:	4a06      	ldr	r2, [pc, #24]	; (d5f5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5f44:	2100      	movs	r1, #0
   d5f46:	200a      	movs	r0, #10
   d5f48:	f7ff fbae 	bl	d56a8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5f4c:	2200      	movs	r2, #0
   d5f4e:	6821      	ldr	r1, [r4, #0]
   d5f50:	4803      	ldr	r0, [pc, #12]	; (d5f60 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5f52:	f7ff f98b 	bl	d526c <hal_ble_set_callback_on_periph_link_events>
}
   d5f56:	4620      	mov	r0, r4
   d5f58:	bd10      	pop	{r4, pc}
   d5f5a:	bf00      	nop
   d5f5c:	000d5359 	.word	0x000d5359
   d5f60:	000d6331 	.word	0x000d6331

000d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5f64:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5f66:	4c0a      	ldr	r4, [pc, #40]	; (d5f90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5f68:	6823      	ldr	r3, [r4, #0]
   d5f6a:	07db      	lsls	r3, r3, #31
   d5f6c:	d40e      	bmi.n	d5f8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7fe f89b 	bl	d40aa <__cxa_guard_acquire>
   d5f74:	b150      	cbz	r0, d5f8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5f76:	4807      	ldr	r0, [pc, #28]	; (d5f94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f78:	f7ff ffc4 	bl	d5f04 <_ZN8particle14BleLocalDeviceC1Ev>
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	f7fe f899 	bl	d40b4 <__cxa_guard_release>
   d5f82:	4a05      	ldr	r2, [pc, #20]	; (d5f98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5f84:	4905      	ldr	r1, [pc, #20]	; (d5f9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5f86:	4803      	ldr	r0, [pc, #12]	; (d5f94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f88:	f002 fd0a 	bl	d89a0 <__aeabi_atexit>
    return instance;
}
   d5f8c:	4801      	ldr	r0, [pc, #4]	; (d5f94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f8e:	bd10      	pop	{r4, pc}
   d5f90:	2003e3bc 	.word	0x2003e3bc
   d5f94:	2003e3b8 	.word	0x2003e3b8
   d5f98:	2003e330 	.word	0x2003e330
   d5f9c:	000d6145 	.word	0x000d6145

000d5fa0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5fa0:	b570      	push	{r4, r5, r6, lr}
   d5fa2:	4604      	mov	r4, r0
   d5fa4:	b08c      	sub	sp, #48	; 0x30
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d5fa6:	a803      	add	r0, sp, #12
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5fa8:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d5faa:	f7ff fd39 	bl	d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>
    switch (event->type) {
   d5fae:	6823      	ldr	r3, [r4, #0]
   d5fb0:	3b09      	subs	r3, #9
   d5fb2:	2b01      	cmp	r3, #1
   d5fb4:	d819      	bhi.n	d5fea <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5fb6:	f7ff ffd5 	bl	d5f64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5fba:	88a1      	ldrh	r1, [r4, #4]
   d5fbc:	6800      	ldr	r0, [r0, #0]
   d5fbe:	f7ff ff0b 	bl	d5dd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5fc2:	4602      	mov	r2, r0
   d5fc4:	b958      	cbnz	r0, d5fde <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3e>
                LOG(ERROR, "Peer device is missing!");
   d5fc6:	2320      	movs	r3, #32
   d5fc8:	9304      	str	r3, [sp, #16]
   d5fca:	4b0a      	ldr	r3, [pc, #40]	; (d5ff4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d5fcc:	9005      	str	r0, [sp, #20]
   d5fce:	9300      	str	r3, [sp, #0]
   d5fd0:	aa04      	add	r2, sp, #16
   d5fd2:	4603      	mov	r3, r0
   d5fd4:	4908      	ldr	r1, [pc, #32]	; (d5ff8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d5fd6:	2032      	movs	r0, #50	; 0x32
   d5fd8:	f7ff fb6e 	bl	d56b8 <log_message>
                break;
   d5fdc:	e005      	b.n	d5fea <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
            }
            if (impl->callback_) {
   d5fde:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5fe0:	b11d      	cbz	r5, d5fea <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5fe2:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5fe4:	68e1      	ldr	r1, [r4, #12]
   d5fe6:	6920      	ldr	r0, [r4, #16]
   d5fe8:	47a8      	blx	r5
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d5fea:	a803      	add	r0, sp, #12
   d5fec:	f7ff fd26 	bl	d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default: {
            break;
        }
    }
}
   d5ff0:	b00c      	add	sp, #48	; 0x30
   d5ff2:	bd70      	pop	{r4, r5, r6, pc}
   d5ff4:	000d9d36 	.word	0x000d9d36
   d5ff8:	000d9cec 	.word	0x000d9cec

000d5ffc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5ffc:	4608      	mov	r0, r1
   d5ffe:	b909      	cbnz	r1, d6004 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6000:	460a      	mov	r2, r1
   d6002:	e001      	b.n	d6008 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6004:	6a09      	ldr	r1, [r1, #32]
   d6006:	2200      	movs	r2, #0
   d6008:	f7ff b8dc 	b.w	d51c4 <hal_ble_gap_set_advertising_data>

000d600c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d600c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d600e:	460c      	mov	r4, r1
   d6010:	b911      	cbnz	r1, d6018 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6012:	460a      	mov	r2, r1
   d6014:	4608      	mov	r0, r1
   d6016:	e006      	b.n	d6026 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6018:	2101      	movs	r1, #1
   d601a:	4620      	mov	r0, r4
   d601c:	f7ff fe9f 	bl	d5d5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6020:	6a21      	ldr	r1, [r4, #32]
   d6022:	2200      	movs	r2, #0
   d6024:	4620      	mov	r0, r4
    }
}
   d6026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d602a:	f7ff b8d3 	b.w	d51d4 <hal_ble_gap_set_scan_response_data>

000d602e <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d602e:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6030:	a801      	add	r0, sp, #4
   d6032:	f7ff fcf5 	bl	d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d6036:	2000      	movs	r0, #0
   d6038:	f7ff f8d4 	bl	d51e4 <hal_ble_gap_start_advertising>
   d603c:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d603e:	a801      	add	r0, sp, #4
   d6040:	f7ff fcfc 	bl	d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d6044:	4620      	mov	r0, r4
   d6046:	b002      	add	sp, #8
   d6048:	bd10      	pop	{r4, pc}

000d604a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d604a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d604c:	4605      	mov	r5, r0
   d604e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6050:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6052:	4616      	mov	r6, r2
    WiringBleLock lk;
   d6054:	f7ff fce4 	bl	d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d6058:	4621      	mov	r1, r4
   d605a:	4628      	mov	r0, r5
   d605c:	f7ff ffce 	bl	d5ffc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6060:	2800      	cmp	r0, #0
   d6062:	db08      	blt.n	d6076 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d6064:	4631      	mov	r1, r6
   d6066:	4628      	mov	r0, r5
   d6068:	f7ff ffd0 	bl	d600c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d606c:	2800      	cmp	r0, #0
   d606e:	db02      	blt.n	d6076 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d6070:	4628      	mov	r0, r5
   d6072:	f7ff ffdc 	bl	d602e <_ZNK8particle14BleLocalDevice9advertiseEv>
   d6076:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d6078:	a801      	add	r0, sp, #4
   d607a:	f7ff fcdf 	bl	d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d607e:	4620      	mov	r0, r4
   d6080:	b002      	add	sp, #8
   d6082:	bd70      	pop	{r4, r5, r6, pc}

000d6084 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d6084:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d6086:	69d8      	ldr	r0, [r3, #28]
}
   d6088:	2800      	cmp	r0, #0
   d608a:	bfd4      	ite	le
   d608c:	2000      	movle	r0, #0
   d608e:	2001      	movgt	r0, #1
   d6090:	4770      	bx	lr

000d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6092:	680b      	ldr	r3, [r1, #0]
   d6094:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6096:	b113      	cbz	r3, d609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6098:	685a      	ldr	r2, [r3, #4]
   d609a:	3201      	adds	r2, #1
   d609c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d609e:	4770      	bx	lr

000d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d60a0:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60a2:	f851 3b04 	ldr.w	r3, [r1], #4
   d60a6:	4604      	mov	r4, r0
   d60a8:	f840 3b04 	str.w	r3, [r0], #4
   d60ac:	f7ff fff1 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d60b0:	6823      	ldr	r3, [r4, #0]
   d60b2:	b90b      	cbnz	r3, d60b8 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d60b4:	f7ff fc94 	bl	d59e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d60b8:	4620      	mov	r0, r4
   d60ba:	bd10      	pop	{r4, pc}

000d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d60bc:	b510      	push	{r4, lr}
   d60be:	f851 3b04 	ldr.w	r3, [r1], #4
   d60c2:	4604      	mov	r4, r0
   d60c4:	f840 3b04 	str.w	r3, [r0], #4
   d60c8:	f7ff ffe3 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d60cc:	4620      	mov	r0, r4
   d60ce:	bd10      	pop	{r4, pc}

000d60d0 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d60d0:	b510      	push	{r4, lr}
   d60d2:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60d4:	3004      	adds	r0, #4
   d60d6:	f7fe f8f7 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d60da:	4620      	mov	r0, r4
   d60dc:	bd10      	pop	{r4, pc}

000d60de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60de:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d60e0:	6804      	ldr	r4, [r0, #0]
   d60e2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60e4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d60e6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d60ea:	42a6      	cmp	r6, r4
   d60ec:	d004      	beq.n	d60f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d60ee:	1d20      	adds	r0, r4, #4
   d60f0:	f7fe f8ea 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60f4:	3408      	adds	r4, #8
   d60f6:	e7f8      	b.n	d60ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60f8:	6828      	ldr	r0, [r5, #0]
   d60fa:	f7ff fbc5 	bl	d5888 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d60fe:	4628      	mov	r0, r5
   d6100:	bd70      	pop	{r4, r5, r6, pc}

000d6102 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6102:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6104:	6804      	ldr	r4, [r0, #0]
   d6106:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6108:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d610a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d610e:	42a6      	cmp	r6, r4
   d6110:	d004      	beq.n	d611c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6112:	1d20      	adds	r0, r4, #4
   d6114:	f7fe f8d8 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6118:	3408      	adds	r4, #8
   d611a:	e7f8      	b.n	d610e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d611c:	6828      	ldr	r0, [r5, #0]
   d611e:	f7ff fbb3 	bl	d5888 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6122:	4628      	mov	r0, r5
   d6124:	bd70      	pop	{r4, r5, r6, pc}

000d6126 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6126:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6128:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d612a:	f104 0018 	add.w	r0, r4, #24
   d612e:	f7ff ffe8 	bl	d6102 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6132:	f104 000c 	add.w	r0, r4, #12
   d6136:	f7ff ffd2 	bl	d60de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d613a:	4620      	mov	r0, r4
   d613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6140:	f7fd bfaf 	b.w	d40a2 <_ZdlPv>

000d6144 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6146:	6804      	ldr	r4, [r0, #0]
   d6148:	4607      	mov	r7, r0
   d614a:	b1c4      	cbz	r4, d617e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d614c:	69a5      	ldr	r5, [r4, #24]
   d614e:	69e3      	ldr	r3, [r4, #28]
   d6150:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6154:	42ae      	cmp	r6, r5
   d6156:	d004      	beq.n	d6162 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6158:	1d28      	adds	r0, r5, #4
   d615a:	f7fe f8b5 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d615e:	3508      	adds	r5, #8
   d6160:	e7f8      	b.n	d6154 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6162:	69a0      	ldr	r0, [r4, #24]
   d6164:	f7ff fb90 	bl	d5888 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6168:	f104 000c 	add.w	r0, r4, #12
   d616c:	f7ff ffc9 	bl	d6102 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6170:	4620      	mov	r0, r4
   d6172:	f7ff ffb4 	bl	d60de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6176:	2134      	movs	r1, #52	; 0x34
   d6178:	4620      	mov	r0, r4
   d617a:	f002 fc16 	bl	d89aa <_ZdlPvj>
   d617e:	4638      	mov	r0, r7
   d6180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6184 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6184:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6186:	2500      	movs	r5, #0
   d6188:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d618a:	6045      	str	r5, [r0, #4]
   d618c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d618e:	2024      	movs	r0, #36	; 0x24
   d6190:	f7fd ff83 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6194:	4604      	mov	r4, r0
   d6196:	b178      	cbz	r0, d61b8 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6198:	4603      	mov	r3, r0
   d619a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d619e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d61a2:	f8c0 5002 	str.w	r5, [r0, #2]
   d61a6:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d61a8:	7285      	strb	r5, [r0, #10]
   d61aa:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61ac:	60c5      	str	r5, [r0, #12]
   d61ae:	6105      	str	r5, [r0, #16]
   d61b0:	6145      	str	r5, [r0, #20]
   d61b2:	6185      	str	r5, [r0, #24]
   d61b4:	61c5      	str	r5, [r0, #28]
   d61b6:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d61b8:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d61ba:	2014      	movs	r0, #20
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	f7fd ff6c 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d61c2:	4603      	mov	r3, r0
   d61c4:	b128      	cbz	r0, d61d2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d61c6:	2201      	movs	r2, #1
   d61c8:	6042      	str	r2, [r0, #4]
   d61ca:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d61cc:	4a08      	ldr	r2, [pc, #32]	; (d61f0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d61ce:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d61d0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d61d2:	a802      	add	r0, sp, #8
   d61d4:	6872      	ldr	r2, [r6, #4]
   d61d6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d61da:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d61dc:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d61de:	f7fe f873 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d61e2:	6833      	ldr	r3, [r6, #0]
   d61e4:	b90b      	cbnz	r3, d61ea <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d61e6:	f7ff fbfb 	bl	d59e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
}
   d61ea:	4630      	mov	r0, r6
   d61ec:	b002      	add	sp, #8
   d61ee:	bd70      	pop	{r4, r5, r6, pc}
   d61f0:	000d9cc8 	.word	0x000d9cc8

000d61f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d61f4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d61f6:	b570      	push	{r4, r5, r6, lr}
   d61f8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d61fa:	d91a      	bls.n	d6232 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d61fc:	4290      	cmp	r0, r2
   d61fe:	d219      	bcs.n	d6234 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6200:	f1a1 0608 	sub.w	r6, r1, #8
   d6204:	1a51      	subs	r1, r2, r1
   d6206:	3904      	subs	r1, #4
   d6208:	1f15      	subs	r5, r2, #4
   d620a:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d620c:	1f2b      	subs	r3, r5, #4
   d620e:	429e      	cmp	r6, r3
   d6210:	d025      	beq.n	d625e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6212:	2c04      	cmp	r4, #4
   d6214:	d007      	beq.n	d6226 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6216:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d621a:	f844 3c04 	str.w	r3, [r4, #-4]
   d621e:	4629      	mov	r1, r5
   d6220:	4620      	mov	r0, r4
   d6222:	f7ff ff36 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6226:	4628      	mov	r0, r5
   d6228:	f7fe f84e 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d622c:	3d08      	subs	r5, #8
   d622e:	3c08      	subs	r4, #8
   d6230:	e7ec      	b.n	d620c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6232:	d014      	beq.n	d625e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6234:	1d0c      	adds	r4, r1, #4
   d6236:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6238:	1f23      	subs	r3, r4, #4
   d623a:	429d      	cmp	r5, r3
   d623c:	d00f      	beq.n	d625e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d623e:	2e04      	cmp	r6, #4
   d6240:	d007      	beq.n	d6252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6242:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6246:	f846 3c04 	str.w	r3, [r6, #-4]
   d624a:	4621      	mov	r1, r4
   d624c:	4630      	mov	r0, r6
   d624e:	f7ff ff20 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6252:	4620      	mov	r0, r4
   d6254:	f7fe f838 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6258:	3408      	adds	r4, #8
   d625a:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d625c:	e7ec      	b.n	d6238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d625e:	bd70      	pop	{r4, r5, r6, pc}

000d6260 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6264:	6804      	ldr	r4, [r0, #0]
   d6266:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6268:	4605      	mov	r5, r0
   d626a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d626c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6270:	42a7      	cmp	r7, r4
   d6272:	d018      	beq.n	d62a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d6274:	4641      	mov	r1, r8
   d6276:	4620      	mov	r0, r4
   d6278:	f7ff fe2c 	bl	d5ed4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d627c:	4606      	mov	r6, r0
   d627e:	b908      	cbnz	r0, d6284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6280:	3408      	adds	r4, #8
   d6282:	e7f5      	b.n	d6270 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6284:	b18c      	cbz	r4, d62aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6286:	1d20      	adds	r0, r4, #4
   d6288:	f7fe f81e 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d628c:	682b      	ldr	r3, [r5, #0]
   d628e:	686a      	ldr	r2, [r5, #4]
   d6290:	f104 0108 	add.w	r1, r4, #8
   d6294:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6298:	4620      	mov	r0, r4
   d629a:	f7ff ffab 	bl	d61f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d629e:	686b      	ldr	r3, [r5, #4]
   d62a0:	3b01      	subs	r3, #1
   d62a2:	606b      	str	r3, [r5, #4]
    return true;
   d62a4:	e002      	b.n	d62ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d62a6:	2600      	movs	r6, #0
   d62a8:	e000      	b.n	d62ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d62aa:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d62ac:	4630      	mov	r0, r6
   d62ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d62b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d62b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d62b4:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62b6:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d62ba:	6847      	ldr	r7, [r0, #4]
   d62bc:	9300      	str	r3, [sp, #0]
   d62be:	a801      	add	r0, sp, #4
   d62c0:	f7ff fee7 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d62c4:	6866      	ldr	r6, [r4, #4]
   d62c6:	68a3      	ldr	r3, [r4, #8]
   d62c8:	429e      	cmp	r6, r3
   d62ca:	db14      	blt.n	d62f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d62cc:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d62ce:	2e00      	cmp	r6, #0
   d62d0:	dd0b      	ble.n	d62ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d62d2:	00f0      	lsls	r0, r6, #3
   d62d4:	f7ff fad0 	bl	d5878 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d62d8:	4605      	mov	r5, r0
   d62da:	b318      	cbz	r0, d6324 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d62dc:	e894 0006 	ldmia.w	r4, {r1, r2}
   d62e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d62e4:	f7ff ff86 	bl	d61f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d62e8:	e000      	b.n	d62ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d62ea:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d62ec:	6820      	ldr	r0, [r4, #0]
   d62ee:	f7ff facb 	bl	d5888 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d62f2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d62f4:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d62f6:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d62f8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d62fa:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d62fe:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6302:	4629      	mov	r1, r5
   d6304:	f105 0008 	add.w	r0, r5, #8
   d6308:	f7ff ff74 	bl	d61f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d630c:	b135      	cbz	r5, d631c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d630e:	9b00      	ldr	r3, [sp, #0]
   d6310:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6314:	a901      	add	r1, sp, #4
   d6316:	1d28      	adds	r0, r5, #4
   d6318:	f7ff febb 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d631c:	6863      	ldr	r3, [r4, #4]
   d631e:	3301      	adds	r3, #1
   d6320:	6063      	str	r3, [r4, #4]
   d6322:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6324:	a801      	add	r0, sp, #4
   d6326:	f7fd ffcf 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d632a:	4628      	mov	r0, r5
   d632c:	b003      	add	sp, #12
   d632e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6330 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6334:	4604      	mov	r4, r0
   d6336:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6338:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d633a:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d633c:	f7ff fb70 	bl	d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6340:	6823      	ldr	r3, [r4, #0]
   d6342:	2b03      	cmp	r3, #3
   d6344:	d002      	beq.n	d634c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6346:	2b04      	cmp	r3, #4
   d6348:	d042      	beq.n	d63d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d634a:	e087      	b.n	d645c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d634c:	a804      	add	r0, sp, #16
   d634e:	f7ff ff19 	bl	d6184 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6352:	9b04      	ldr	r3, [sp, #16]
   d6354:	8922      	ldrh	r2, [r4, #8]
   d6356:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6358:	6862      	ldr	r2, [r4, #4]
   d635a:	9904      	ldr	r1, [sp, #16]
   d635c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6360:	f8c1 3002 	str.w	r3, [r1, #2]
   d6364:	6853      	ldr	r3, [r2, #4]
   d6366:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d636a:	a807      	add	r0, sp, #28
   d636c:	9b04      	ldr	r3, [sp, #16]
   d636e:	9306      	str	r3, [sp, #24]
   d6370:	a905      	add	r1, sp, #20
   d6372:	f7ff fe8e 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6376:	a906      	add	r1, sp, #24
   d6378:	f105 0018 	add.w	r0, r5, #24
   d637c:	f7ff ff99 	bl	d62b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6380:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6382:	a807      	add	r0, sp, #28
   d6384:	f7fd ffa0 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6388:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d638a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d638c:	b974      	cbnz	r4, d63ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d638e:	4b36      	ldr	r3, [pc, #216]	; (d6468 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6390:	9300      	str	r3, [sp, #0]
   d6392:	aa06      	add	r2, sp, #24
   d6394:	4623      	mov	r3, r4
   d6396:	4935      	ldr	r1, [pc, #212]	; (d646c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6398:	9407      	str	r4, [sp, #28]
   d639a:	2032      	movs	r0, #50	; 0x32
   d639c:	f7ff f98c 	bl	d56b8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d63a0:	9b04      	ldr	r3, [sp, #16]
   d63a2:	4621      	mov	r1, r4
   d63a4:	8818      	ldrh	r0, [r3, #0]
   d63a6:	f7fe ff25 	bl	d51f4 <hal_ble_gap_disconnect>
   d63aa:	e00d      	b.n	d63c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d63ac:	4a30      	ldr	r2, [pc, #192]	; (d6470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d63ae:	9200      	str	r2, [sp, #0]
   d63b0:	2300      	movs	r3, #0
   d63b2:	aa06      	add	r2, sp, #24
   d63b4:	492d      	ldr	r1, [pc, #180]	; (d646c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d63b6:	9307      	str	r3, [sp, #28]
   d63b8:	2001      	movs	r0, #1
   d63ba:	f7ff f97d 	bl	d56b8 <log_message>
                if (impl->connectedCb_) {
   d63be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d63c0:	b113      	cbz	r3, d63c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d63c2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d63c4:	a804      	add	r0, sp, #16
   d63c6:	4798      	blx	r3
   d63c8:	a805      	add	r0, sp, #20
   d63ca:	f7fd ff7d 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63ce:	e045      	b.n	d645c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d63d0:	8921      	ldrh	r1, [r4, #8]
   d63d2:	4628      	mov	r0, r5
   d63d4:	f7ff fd00 	bl	d5dd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d63d8:	4607      	mov	r7, r0
   d63da:	2800      	cmp	r0, #0
   d63dc:	d03e      	beq.n	d645c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d63de:	6804      	ldr	r4, [r0, #0]
   d63e0:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d63e2:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d63e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d63e8:	8022      	strh	r2, [r4, #0]
   d63ea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d63ee:	4299      	cmp	r1, r3
   d63f0:	d003      	beq.n	d63fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d63f2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d63f6:	8042      	strh	r2, [r0, #2]
   d63f8:	e7f9      	b.n	d63ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d63fa:	68e6      	ldr	r6, [r4, #12]
   d63fc:	6923      	ldr	r3, [r4, #16]
   d63fe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6402:	45b0      	cmp	r8, r6
   d6404:	d004      	beq.n	d6410 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d6406:	1d30      	adds	r0, r6, #4
   d6408:	f7fd ff5e 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d640c:	3608      	adds	r6, #8
   d640e:	e7f8      	b.n	d6402 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6410:	2300      	movs	r3, #0
   d6412:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6414:	69a6      	ldr	r6, [r4, #24]
   d6416:	69e3      	ldr	r3, [r4, #28]
   d6418:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d641c:	45b0      	cmp	r8, r6
   d641e:	d004      	beq.n	d642a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6420:	1d30      	adds	r0, r6, #4
   d6422:	f7fd ff51 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6426:	3608      	adds	r6, #8
   d6428:	e7f8      	b.n	d641c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d642a:	2300      	movs	r3, #0
   d642c:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d642e:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6430:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6432:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6434:	b113      	cbz	r3, d643c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6436:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6438:	4638      	mov	r0, r7
   d643a:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d643c:	2320      	movs	r3, #32
   d643e:	4a0d      	ldr	r2, [pc, #52]	; (d6474 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6440:	9306      	str	r3, [sp, #24]
   d6442:	9200      	str	r2, [sp, #0]
   d6444:	2300      	movs	r3, #0
   d6446:	4909      	ldr	r1, [pc, #36]	; (d646c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6448:	9307      	str	r3, [sp, #28]
   d644a:	2001      	movs	r0, #1
   d644c:	aa06      	add	r2, sp, #24
   d644e:	f7ff f933 	bl	d56b8 <log_message>
                    impl->peers_.removeOne(*peer);
   d6452:	4639      	mov	r1, r7
   d6454:	f105 0018 	add.w	r0, r5, #24
   d6458:	f7ff ff02 	bl	d6260 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d645c:	a803      	add	r0, sp, #12
   d645e:	f7ff faed 	bl	d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6462:	b00e      	add	sp, #56	; 0x38
   d6464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6468:	000d9d4e 	.word	0x000d9d4e
   d646c:	000d9cec 	.word	0x000d9cec
   d6470:	000d9d74 	.word	0x000d9d74
   d6474:	000d9d91 	.word	0x000d9d91

000d6478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6478:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d647c:	4606      	mov	r6, r0
   d647e:	460c      	mov	r4, r1
   d6480:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6482:	d914      	bls.n	d64ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6484:	4290      	cmp	r0, r2
   d6486:	d213      	bcs.n	d64b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6488:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d648c:	1a6c      	subs	r4, r5, r1
   d648e:	f1a1 0708 	sub.w	r7, r1, #8
   d6492:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6494:	42af      	cmp	r7, r5
   d6496:	d018      	beq.n	d64ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6498:	b11c      	cbz	r4, d64a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d649a:	4629      	mov	r1, r5
   d649c:	4620      	mov	r0, r4
   d649e:	f7ff fe0d 	bl	d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d64a2:	1d28      	adds	r0, r5, #4
   d64a4:	f7fd ff10 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d64a8:	3d08      	subs	r5, #8
   d64aa:	3c08      	subs	r4, #8
   d64ac:	e7f2      	b.n	d6494 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d64ae:	d00c      	beq.n	d64ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d64b0:	42ac      	cmp	r4, r5
   d64b2:	d00a      	beq.n	d64ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d64b4:	b11e      	cbz	r6, d64be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d64b6:	4621      	mov	r1, r4
   d64b8:	4630      	mov	r0, r6
   d64ba:	f7ff fdff 	bl	d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d64be:	1d20      	adds	r0, r4, #4
   d64c0:	f7fd ff02 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d64c4:	3408      	adds	r4, #8
   d64c6:	3608      	adds	r6, #8
   d64c8:	e7f2      	b.n	d64b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d64ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d64cc:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d64ce:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d64d0:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d64d2:	dd0b      	ble.n	d64ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d64d4:	00f0      	lsls	r0, r6, #3
   d64d6:	f7ff f9cf 	bl	d5878 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d64da:	4604      	mov	r4, r0
   d64dc:	b170      	cbz	r0, d64fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d64de:	e895 0006 	ldmia.w	r5, {r1, r2}
   d64e2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d64e6:	f7ff ffc7 	bl	d6478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d64ea:	e000      	b.n	d64ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d64ec:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d64ee:	6828      	ldr	r0, [r5, #0]
   d64f0:	f7ff f9ca 	bl	d5888 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d64f4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d64f6:	60ae      	str	r6, [r5, #8]
        return true;
   d64f8:	2001      	movs	r0, #1
   d64fa:	bd70      	pop	{r4, r5, r6, pc}
    }
   d64fc:	bd70      	pop	{r4, r5, r6, pc}

000d64fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d64fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6500:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6502:	6845      	ldr	r5, [r0, #4]
   d6504:	4668      	mov	r0, sp
   d6506:	f7ff fdd9 	bl	d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d650a:	6861      	ldr	r1, [r4, #4]
   d650c:	68a3      	ldr	r3, [r4, #8]
   d650e:	4299      	cmp	r1, r3
   d6510:	db05      	blt.n	d651e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6512:	3101      	adds	r1, #1
   d6514:	4620      	mov	r0, r4
   d6516:	f7ff ffd9 	bl	d64cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d651a:	4606      	mov	r6, r0
   d651c:	b198      	cbz	r0, d6546 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d651e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6520:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6522:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6526:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d652a:	4629      	mov	r1, r5
   d652c:	f105 0008 	add.w	r0, r5, #8
   d6530:	f7ff ffa2 	bl	d6478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6534:	b11d      	cbz	r5, d653e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6536:	4669      	mov	r1, sp
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff fdbf 	bl	d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d653e:	6863      	ldr	r3, [r4, #4]
   d6540:	3301      	adds	r3, #1
   d6542:	6063      	str	r3, [r4, #4]
   d6544:	2601      	movs	r6, #1
   d6546:	a801      	add	r0, sp, #4
   d6548:	f7fd febe 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d654c:	4630      	mov	r0, r6
   d654e:	b002      	add	sp, #8
   d6550:	bd70      	pop	{r4, r5, r6, pc}

000d6552 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6552:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6556:	4606      	mov	r6, r0
   d6558:	460c      	mov	r4, r1
   d655a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d655c:	d914      	bls.n	d6588 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d655e:	4290      	cmp	r0, r2
   d6560:	d213      	bcs.n	d658a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6562:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6566:	1a6c      	subs	r4, r5, r1
   d6568:	f1a1 0708 	sub.w	r7, r1, #8
   d656c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d656e:	42af      	cmp	r7, r5
   d6570:	d018      	beq.n	d65a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6572:	b11c      	cbz	r4, d657c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6574:	4629      	mov	r1, r5
   d6576:	4620      	mov	r0, r4
   d6578:	f7ff fd92 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d657c:	1d28      	adds	r0, r5, #4
   d657e:	f7fd fea3 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6582:	3d08      	subs	r5, #8
   d6584:	3c08      	subs	r4, #8
   d6586:	e7f2      	b.n	d656e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6588:	d00c      	beq.n	d65a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d658a:	42ac      	cmp	r4, r5
   d658c:	d00a      	beq.n	d65a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d658e:	b11e      	cbz	r6, d6598 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6590:	4621      	mov	r1, r4
   d6592:	4630      	mov	r0, r6
   d6594:	f7ff fd84 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6598:	1d20      	adds	r0, r4, #4
   d659a:	f7fd fe95 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d659e:	3408      	adds	r4, #8
   d65a0:	3608      	adds	r6, #8
   d65a2:	e7f2      	b.n	d658a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d65a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d65a6:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d65a8:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d65aa:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d65ac:	dd0b      	ble.n	d65c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d65ae:	00f0      	lsls	r0, r6, #3
   d65b0:	f7ff f962 	bl	d5878 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d65b4:	4604      	mov	r4, r0
   d65b6:	b170      	cbz	r0, d65d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d65b8:	e895 0006 	ldmia.w	r5, {r1, r2}
   d65bc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d65c0:	f7ff ffc7 	bl	d6552 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d65c4:	e000      	b.n	d65c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d65c6:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d65c8:	6828      	ldr	r0, [r5, #0]
   d65ca:	f7ff f95d 	bl	d5888 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d65ce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d65d0:	60ae      	str	r6, [r5, #8]
        return true;
   d65d2:	2001      	movs	r0, #1
   d65d4:	bd70      	pop	{r4, r5, r6, pc}
    }
   d65d6:	bd70      	pop	{r4, r5, r6, pc}

000d65d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d65d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d65da:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d65dc:	6845      	ldr	r5, [r0, #4]
   d65de:	4668      	mov	r0, sp
   d65e0:	f7ff fd5e 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65e4:	6861      	ldr	r1, [r4, #4]
   d65e6:	68a3      	ldr	r3, [r4, #8]
   d65e8:	4299      	cmp	r1, r3
   d65ea:	db05      	blt.n	d65f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d65ec:	3101      	adds	r1, #1
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7ff ffd9 	bl	d65a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d65f4:	4606      	mov	r6, r0
   d65f6:	b198      	cbz	r0, d6620 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d65f8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d65fa:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6600:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6604:	4629      	mov	r1, r5
   d6606:	f105 0008 	add.w	r0, r5, #8
   d660a:	f7ff ffa2 	bl	d6552 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d660e:	b11d      	cbz	r5, d6618 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6610:	4669      	mov	r1, sp
   d6612:	4628      	mov	r0, r5
   d6614:	f7ff fd44 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6618:	6863      	ldr	r3, [r4, #4]
   d661a:	3301      	adds	r3, #1
   d661c:	6063      	str	r3, [r4, #4]
   d661e:	2601      	movs	r6, #1
   d6620:	a801      	add	r0, sp, #4
   d6622:	f7fd fe51 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6626:	4630      	mov	r0, r6
   d6628:	b002      	add	sp, #8
   d662a:	bd70      	pop	{r4, r5, r6, pc}

000d662c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6630:	6840      	ldr	r0, [r0, #4]
   d6632:	b108      	cbz	r0, d6638 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6634:	f7fd fd35 	bl	d40a2 <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6638:	4620      	mov	r0, r4
   d663a:	bd10      	pop	{r4, pc}

000d663c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d663c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d663e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6640:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6642:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6646:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d664a:	f001 faf1 	bl	d7c30 <_ZN6StringD1Ev>
   d664e:	4668      	mov	r0, sp
   d6650:	f7ff ffec 	bl	d662c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6654:	b003      	add	sp, #12
   d6656:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d665c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d665c:	b538      	push	{r3, r4, r5, lr}
   d665e:	2300      	movs	r3, #0
   d6660:	4604      	mov	r4, r0
   d6662:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6664:	2014      	movs	r0, #20
   d6666:	460d      	mov	r5, r1
   d6668:	f7fd fd17 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d666c:	b128      	cbz	r0, d667a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d666e:	2301      	movs	r3, #1
   d6670:	6043      	str	r3, [r0, #4]
   d6672:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6674:	4b02      	ldr	r3, [pc, #8]	; (d6680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6676:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6678:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d667a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d667c:	4620      	mov	r0, r4
   d667e:	bd38      	pop	{r3, r4, r5, pc}
   d6680:	000d9c90 	.word	0x000d9c90

000d6684 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6688:	b088      	sub	sp, #32
   d668a:	4605      	mov	r5, r0
   d668c:	461e      	mov	r6, r3
   d668e:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6690:	2300      	movs	r3, #0
   d6692:	460f      	mov	r7, r1
   d6694:	4690      	mov	r8, r2
   d6696:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6698:	9305      	str	r3, [sp, #20]
   d669a:	f7fd fcfe 	bl	d409a <_Znwj>
   d669e:	f8cd d018 	str.w	sp, [sp, #24]
   d66a2:	4604      	mov	r4, r0
   d66a4:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d66a6:	b1b0      	cbz	r0, d66d6 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d66a8:	f7ff fb76 	bl	d5d98 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d66ac:	4639      	mov	r1, r7
   d66ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d66b2:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d66b6:	f001 fb2f 	bl	d7d18 <_ZN6StringaSEPKc>
        callback_ = callback;
   d66ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d66bc:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d66be:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d66c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d66c2:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d66c4:	f104 0014 	add.w	r0, r4, #20
   d66c8:	f7ff fa38 	bl	d5b3c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d66cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   d66ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d66d2:	f7ff fa33 	bl	d5b3c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d66d6:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d66d8:	2600      	movs	r6, #0
   d66da:	ab01      	add	r3, sp, #4
   d66dc:	aa02      	add	r2, sp, #8
   d66de:	a803      	add	r0, sp, #12
   d66e0:	9607      	str	r6, [sp, #28]
   d66e2:	f7ff ffbb 	bl	d665c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d66e6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d66e8:	9a05      	ldr	r2, [sp, #20]
   d66ea:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d66ec:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d66ee:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d66f0:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d66f2:	f7fd fde9 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d66f6:	a806      	add	r0, sp, #24
   d66f8:	f7ff ff98 	bl	d662c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d66fc:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d66fe:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6700:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6702:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6704:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6706:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6708:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d670a:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d670c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6710:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6712:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6714:	f7fd fdd8 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6718:	a805      	add	r0, sp, #20
   d671a:	f7fd fdd5 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d671e:	6829      	ldr	r1, [r5, #0]
   d6720:	b919      	cbnz	r1, d672a <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d6722:	4a03      	ldr	r2, [pc, #12]	; (d6730 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d6724:	200a      	movs	r0, #10
   d6726:	f7fe ffbf 	bl	d56a8 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d672a:	b008      	add	sp, #32
   d672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6730:	000d5359 	.word	0x000d5359

000d6734 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6734:	b510      	push	{r4, lr}
   d6736:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6738:	6840      	ldr	r0, [r0, #4]
   d673a:	b108      	cbz	r0, d6740 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d673c:	f7fd fcb1 	bl	d40a2 <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6740:	4620      	mov	r0, r4
   d6742:	bd10      	pop	{r4, pc}

000d6744 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6744:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6746:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6748:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d674a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d674e:	4668      	mov	r0, sp
   d6750:	f7ff fff0 	bl	d6734 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6754:	b003      	add	sp, #12
   d6756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d675c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d675c:	b538      	push	{r3, r4, r5, lr}
   d675e:	2300      	movs	r3, #0
   d6760:	4604      	mov	r4, r0
   d6762:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6764:	2014      	movs	r0, #20
   d6766:	460d      	mov	r5, r1
   d6768:	f7fd fc97 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d676c:	b128      	cbz	r0, d677a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d676e:	2301      	movs	r3, #1
   d6770:	6043      	str	r3, [r0, #4]
   d6772:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6774:	4b02      	ldr	r3, [pc, #8]	; (d6780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6776:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6778:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d677a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d677c:	4620      	mov	r0, r4
   d677e:	bd38      	pop	{r3, r4, r5, pc}
   d6780:	000d9cac 	.word	0x000d9cac

000d6784 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6784:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6786:	2600      	movs	r6, #0
   d6788:	b087      	sub	sp, #28
   d678a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d678c:	6046      	str	r6, [r0, #4]
   d678e:	4604      	mov	r4, r0
   d6790:	2018      	movs	r0, #24
   d6792:	460f      	mov	r7, r1
   d6794:	f7fd fc81 	bl	d409a <_Znwj>
   d6798:	f8cd d010 	str.w	sp, [sp, #16]
   d679c:	4605      	mov	r5, r0
   d679e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d67a0:	b138      	cbz	r0, d67b2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d67a2:	f7ff f965 	bl	d5a70 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d67a6:	4639      	mov	r1, r7
   d67a8:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d67aa:	82ae      	strh	r6, [r5, #20]
   d67ac:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d67ae:	f7ff f9c5 	bl	d5b3c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d67b2:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d67b4:	4629      	mov	r1, r5
   d67b6:	9305      	str	r3, [sp, #20]
   d67b8:	aa02      	add	r2, sp, #8
   d67ba:	ab01      	add	r3, sp, #4
   d67bc:	a803      	add	r0, sp, #12
   d67be:	f7ff ffcd 	bl	d675c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d67c2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d67c4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d67c6:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d67c8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d67ca:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d67cc:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d67ce:	f7fd fd7b 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d67d2:	a804      	add	r0, sp, #16
   d67d4:	f7ff ffae 	bl	d6734 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d67d8:	6823      	ldr	r3, [r4, #0]
   d67da:	b90b      	cbnz	r3, d67e0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d67dc:	f7ff f900 	bl	d59e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
}
   d67e0:	4620      	mov	r0, r4
   d67e2:	b007      	add	sp, #28
   d67e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d67e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67ec:	4617      	mov	r7, r2
   d67ee:	b09f      	sub	sp, #124	; 0x7c
   d67f0:	4680      	mov	r8, r0
    WiringBleLock lk;
   d67f2:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d67f4:	460e      	mov	r6, r1
    WiringBleLock lk;
   d67f6:	f7ff f913 	bl	d5a20 <_ZN8particle3ble13WiringBleLockC1Ev>
   d67fa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d67fc:	7923      	ldrb	r3, [r4, #4]
   d67fe:	2b00      	cmp	r3, #0
   d6800:	f000 80f3 	beq.w	d69ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6804:	6833      	ldr	r3, [r6, #0]
   d6806:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6808:	691b      	ldr	r3, [r3, #16]
   d680a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d680e:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6810:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d6814:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6818:	9b03      	ldr	r3, [sp, #12]
   d681a:	42ab      	cmp	r3, r5
   d681c:	d023      	beq.n	d6866 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d681e:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6822:	4650      	mov	r0, sl
   d6824:	f109 0114 	add.w	r1, r9, #20
   d6828:	f7ff f9a1 	bl	d5b6e <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d682c:	2800      	cmp	r0, #0
   d682e:	f000 80e1 	beq.w	d69f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d6832:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6836:	4658      	mov	r0, fp
   d6838:	f7ff f999 	bl	d5b6e <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d683c:	2800      	cmp	r0, #0
   d683e:	f000 80d9 	beq.w	d69f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6842:	6823      	ldr	r3, [r4, #0]
   d6844:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d6848:	f8d9 3000 	ldr.w	r3, [r9]
   d684c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d6850:	4299      	cmp	r1, r3
   d6852:	f040 80cf 	bne.w	d69f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6856:	2320      	movs	r3, #32
   d6858:	4a6b      	ldr	r2, [pc, #428]	; (d6a08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d685a:	9313      	str	r3, [sp, #76]	; 0x4c
   d685c:	2300      	movs	r3, #0
   d685e:	9200      	str	r2, [sp, #0]
   d6860:	9314      	str	r3, [sp, #80]	; 0x50
   d6862:	aa13      	add	r2, sp, #76	; 0x4c
   d6864:	e0bd      	b.n	d69e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d6866:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d686a:	4628      	mov	r0, r5
   d686c:	f7ff f94d 	bl	d5b0a <_ZNK8particle7BleUuid7isValidEv>
   d6870:	b918      	cbnz	r0, d687a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6872:	4966      	ldr	r1, [pc, #408]	; (d6a0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6874:	4628      	mov	r0, r5
   d6876:	f7ff f96c 	bl	d5b52 <_ZN8particle7BleUuidaSEPKh>
   d687a:	6833      	ldr	r3, [r6, #0]
   d687c:	f8d3 9000 	ldr.w	r9, [r3]
   d6880:	685b      	ldr	r3, [r3, #4]
   d6882:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6886:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6888:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d688a:	d008      	beq.n	d689e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d688c:	f8d9 0000 	ldr.w	r0, [r9]
   d6890:	f7ff f96d 	bl	d5b6e <_ZNK8particle7BleUuideqERKS0_>
   d6894:	2800      	cmp	r0, #0
   d6896:	d137      	bne.n	d6908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6898:	f109 0908 	add.w	r9, r9, #8
   d689c:	e7f3      	b.n	d6886 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d689e:	a806      	add	r0, sp, #24
   d68a0:	f7ff ff70 	bl	d6784 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d68a4:	aa13      	add	r2, sp, #76	; 0x4c
   d68a6:	462b      	mov	r3, r5
   d68a8:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d68ac:	4696      	mov	lr, r2
   d68ae:	6818      	ldr	r0, [r3, #0]
   d68b0:	6859      	ldr	r1, [r3, #4]
   d68b2:	4615      	mov	r5, r2
   d68b4:	c503      	stmia	r5!, {r0, r1}
   d68b6:	3308      	adds	r3, #8
   d68b8:	4563      	cmp	r3, ip
   d68ba:	462a      	mov	r2, r5
   d68bc:	d1f7      	bne.n	d68ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d68be:	6818      	ldr	r0, [r3, #0]
   d68c0:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d68c2:	9a06      	ldr	r2, [sp, #24]
   d68c4:	2300      	movs	r3, #0
   d68c6:	3214      	adds	r2, #20
   d68c8:	4671      	mov	r1, lr
   d68ca:	2001      	movs	r0, #1
   d68cc:	f7fe fc9c 	bl	d5208 <hal_ble_gatt_server_add_service>
   d68d0:	2800      	cmp	r0, #0
   d68d2:	d17e      	bne.n	d69d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d68d4:	6835      	ldr	r5, [r6, #0]
   d68d6:	a906      	add	r1, sp, #24
   d68d8:	a80b      	add	r0, sp, #44	; 0x2c
   d68da:	f7ff fbef 	bl	d60bc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d68de:	4628      	mov	r0, r5
   d68e0:	a90b      	add	r1, sp, #44	; 0x2c
   d68e2:	f7ff fe0c 	bl	d64fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d68e6:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68e8:	a80c      	add	r0, sp, #48	; 0x30
   d68ea:	f7fd fced 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68ee:	2d00      	cmp	r5, #0
   d68f0:	d06f      	beq.n	d69d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d68f2:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d68f4:	6853      	ldr	r3, [r2, #4]
   d68f6:	6812      	ldr	r2, [r2, #0]
   d68f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d68fc:	3b01      	subs	r3, #1
   d68fe:	a807      	add	r0, sp, #28
   d6900:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6904:	f7fd fce0 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            charImpl.context_ = nullptr;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d6908:	f104 0514 	add.w	r5, r4, #20
   d690c:	4628      	mov	r0, r5
   d690e:	f7ff f8fc 	bl	d5b0a <_ZNK8particle7BleUuid7isValidEv>
   d6912:	b968      	cbnz	r0, d6930 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6914:	4b3e      	ldr	r3, [pc, #248]	; (d6a10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6916:	493d      	ldr	r1, [pc, #244]	; (d6a0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6918:	881a      	ldrh	r2, [r3, #0]
   d691a:	3201      	adds	r2, #1
   d691c:	b292      	uxth	r2, r2
   d691e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6920:	a813      	add	r0, sp, #76	; 0x4c
   d6922:	2301      	movs	r3, #1
   d6924:	f7ff f8dd 	bl	d5ae2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6928:	a913      	add	r1, sp, #76	; 0x4c
   d692a:	4628      	mov	r0, r5
   d692c:	f7ff f906 	bl	d5b3c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6930:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6934:	4652      	mov	r2, sl
   d6936:	2100      	movs	r1, #0
   d6938:	a813      	add	r0, sp, #76	; 0x4c
   d693a:	f003 f85a 	bl	d99f2 <memset>
    charInit.version = BLE_API_VERSION;
   d693e:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6940:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d6942:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d6946:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d694a:	462b      	mov	r3, r5
   d694c:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d6950:	4615      	mov	r5, r2
   d6952:	6818      	ldr	r0, [r3, #0]
   d6954:	6859      	ldr	r1, [r3, #4]
   d6956:	4696      	mov	lr, r2
   d6958:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d695c:	3308      	adds	r3, #8
   d695e:	4563      	cmp	r3, ip
   d6960:	4672      	mov	r2, lr
   d6962:	d1f6      	bne.n	d6952 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d6964:	6818      	ldr	r0, [r3, #0]
   d6966:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d696a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d696c:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d6970:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6974:	682b      	ldr	r3, [r5, #0]
   d6976:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d697a:	7923      	ldrb	r3, [r4, #4]
   d697c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d6980:	f8d9 3000 	ldr.w	r3, [r9]
   d6984:	8a9b      	ldrh	r3, [r3, #20]
   d6986:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d698a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d698c:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d698e:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6990:	4b20      	ldr	r3, [pc, #128]	; (d6a14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d6992:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6994:	1da1      	adds	r1, r4, #6
   d6996:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d6998:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d699a:	f7fe fc5d 	bl	d5258 <hal_ble_gatt_server_add_characteristic>
   d699e:	bb20      	cbnz	r0, d69ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d69a0:	2301      	movs	r3, #1
   d69a2:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d69a4:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d69a6:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d69a8:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d69aa:	a80b      	add	r0, sp, #44	; 0x2c
   d69ac:	f7ff fb78 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69b0:	4620      	mov	r0, r4
   d69b2:	a90b      	add	r1, sp, #44	; 0x2c
   d69b4:	f7ff fe10 	bl	d65d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d69b8:	4604      	mov	r4, r0
   d69ba:	a80c      	add	r0, sp, #48	; 0x30
   d69bc:	f7fd fc84 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69c0:	b99c      	cbnz	r4, d69ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d69c2:	2320      	movs	r3, #32
   d69c4:	930b      	str	r3, [sp, #44]	; 0x2c
   d69c6:	4b14      	ldr	r3, [pc, #80]	; (d6a18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d69c8:	9300      	str	r3, [sp, #0]
   d69ca:	940c      	str	r4, [sp, #48]	; 0x30
   d69cc:	4623      	mov	r3, r4
   d69ce:	aa0b      	add	r2, sp, #44	; 0x2c
   d69d0:	e007      	b.n	d69e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d69d2:	4639      	mov	r1, r7
   d69d4:	4640      	mov	r0, r8
   d69d6:	f7ff fb63 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69da:	a807      	add	r0, sp, #28
   d69dc:	f7fd fc74 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69e0:	e00a      	b.n	d69f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d69e2:	490e      	ldr	r1, [pc, #56]	; (d6a1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d69e4:	2032      	movs	r0, #50	; 0x32
   d69e6:	f7fe fe67 	bl	d56b8 <log_message>
            return characteristic;
   d69ea:	4639      	mov	r1, r7
   d69ec:	4640      	mov	r0, r8
   d69ee:	f7ff fb57 	bl	d60a0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69f2:	e001      	b.n	d69f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d69f4:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d69f6:	e70f      	b.n	d6818 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d69f8:	a805      	add	r0, sp, #20
   d69fa:	f7ff f81f 	bl	d5a3c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d69fe:	4640      	mov	r0, r8
   d6a00:	b01f      	add	sp, #124	; 0x7c
   d6a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a06:	bf00      	nop
   d6a08:	000d9e61 	.word	0x000d9e61
   d6a0c:	000d9cdc 	.word	0x000d9cdc
   d6a10:	2003e3c0 	.word	0x2003e3c0
   d6a14:	000d5fa1 	.word	0x000d5fa1
   d6a18:	000d9e3a 	.word	0x000d9e3a
   d6a1c:	000d9cec 	.word	0x000d9cec

000d6a20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a20:	4802      	ldr	r0, [pc, #8]	; (d6a2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6a22:	2300      	movs	r3, #0
   d6a24:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6a26:	f7fe bc67 	b.w	d52f8 <os_mutex_recursive_create>
   d6a2a:	bf00      	nop
   d6a2c:	2003e3c4 	.word	0x2003e3c4

000d6a30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6a30:	4770      	bx	lr

000d6a32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6a32:	2000      	movs	r0, #0
   d6a34:	4770      	bx	lr

000d6a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6a36:	b510      	push	{r4, lr}
   d6a38:	2110      	movs	r1, #16
   d6a3a:	4604      	mov	r4, r0
   d6a3c:	f001 ffb5 	bl	d89aa <_ZdlPvj>
   d6a40:	4620      	mov	r0, r4
   d6a42:	bd10      	pop	{r4, pc}

000d6a44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6a44:	b508      	push	{r3, lr}
      { delete this; }
   d6a46:	b108      	cbz	r0, d6a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6a48:	f7ff fff5 	bl	d6a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6a4c:	bd08      	pop	{r3, pc}

000d6a4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a52:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a54:	b113      	cbz	r3, d6a5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a56:	2203      	movs	r2, #3
   d6a58:	4601      	mov	r1, r0
   d6a5a:	4798      	blx	r3
    }
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6a60:	2200      	movs	r2, #0
   d6a62:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6a64:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6a66:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6a6a:	8082      	strh	r2, [r0, #4]
   d6a6c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6a70:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a72:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a74:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6a76:	680c      	ldr	r4, [r1, #0]
   d6a78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a7a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6a7c:	bd10      	pop	{r4, pc}

000d6a7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6a7e:	b510      	push	{r4, lr}
   d6a80:	4604      	mov	r4, r0
    free((void*)msg_);
   d6a82:	6800      	ldr	r0, [r0, #0]
   d6a84:	f7fe ff00 	bl	d5888 <free>
}
   d6a88:	4620      	mov	r0, r4
   d6a8a:	bd10      	pop	{r4, pc}

000d6a8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6a8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6a8e:	68c4      	ldr	r4, [r0, #12]
   d6a90:	b1f4      	cbz	r4, d6ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6a92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6a94:	2b02      	cmp	r3, #2
   d6a96:	d103      	bne.n	d6aa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6a98:	f104 000c 	add.w	r0, r4, #12
   d6a9c:	f7ff ffef 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6aa0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6aa2:	b135      	cbz	r5, d6ab2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6aa4:	4628      	mov	r0, r5
   d6aa6:	f7ff ffd2 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
   d6aaa:	2110      	movs	r1, #16
   d6aac:	4628      	mov	r0, r5
   d6aae:	f001 ff7c 	bl	d89aa <_ZdlPvj>
   d6ab2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6ab4:	b135      	cbz	r5, d6ac4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6ab6:	4628      	mov	r0, r5
   d6ab8:	f7ff ffc9 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
   d6abc:	2110      	movs	r1, #16
   d6abe:	4628      	mov	r0, r5
   d6ac0:	f001 ff73 	bl	d89aa <_ZdlPvj>
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	2114      	movs	r1, #20
   d6ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6acc:	f001 bf6d 	b.w	d89aa <_ZdlPvj>
   d6ad0:	bd38      	pop	{r3, r4, r5, pc}

000d6ad2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6ad2:	b510      	push	{r4, lr}
   d6ad4:	b088      	sub	sp, #32
   d6ad6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6ad8:	4668      	mov	r0, sp
   d6ada:	f001 f8f0 	bl	d7cbe <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6ade:	4669      	mov	r1, sp
   d6ae0:	a804      	add	r0, sp, #16
   d6ae2:	f001 f90e 	bl	d7d02 <_ZN6StringC1ERKS_>
   d6ae6:	a804      	add	r0, sp, #16
   d6ae8:	47a0      	blx	r4
   d6aea:	4604      	mov	r4, r0
   d6aec:	a804      	add	r0, sp, #16
   d6aee:	f001 f89f 	bl	d7c30 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6af2:	4668      	mov	r0, sp
   d6af4:	f001 f89c 	bl	d7c30 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d6af8:	4620      	mov	r0, r4
   d6afa:	b008      	add	sp, #32
   d6afc:	bd10      	pop	{r4, pc}

000d6afe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6afe:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6b00:	2410      	movs	r4, #16
   d6b02:	b085      	sub	sp, #20
   d6b04:	4607      	mov	r7, r0
   d6b06:	460e      	mov	r6, r1
   d6b08:	4615      	mov	r5, r2
   d6b0a:	2100      	movs	r1, #0
   d6b0c:	4622      	mov	r2, r4
   d6b0e:	4668      	mov	r0, sp
   d6b10:	f002 ff6f 	bl	d99f2 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6b14:	2200      	movs	r2, #0
   d6b16:	4669      	mov	r1, sp
   d6b18:	4610      	mov	r0, r2
         size = sizeof(*this);
   d6b1a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6b1e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6b20:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6b22:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6b24:	f7fe fe30 	bl	d5788 <spark_function>
}
   d6b28:	b005      	add	sp, #20
   d6b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b2c <_ZN10CloudClass13publishVitalsEm>:
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d6b2c:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d6b2e:	2100      	movs	r1, #0
   d6b30:	f7fe be4a 	b.w	d57c8 <spark_publish_vitals>

000d6b34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6b34:	b513      	push	{r0, r1, r4, lr}
   d6b36:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6b38:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6b3c:	2300      	movs	r3, #0
   d6b3e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6b40:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6b42:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6b44:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b46:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6b48:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6b4a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b4c:	f7fd fbbc 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b50:	4620      	mov	r0, r4
   d6b52:	b002      	add	sp, #8
   d6b54:	bd10      	pop	{r4, pc}

000d6b56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b58:	460c      	mov	r4, r1
   d6b5a:	ad02      	add	r5, sp, #8
   d6b5c:	f854 3b04 	ldr.w	r3, [r4], #4
   d6b60:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6b64:	4606      	mov	r6, r0
   d6b66:	460f      	mov	r7, r1
   d6b68:	a801      	add	r0, sp, #4
   d6b6a:	4621      	mov	r1, r4
   d6b6c:	f7ff fa91 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6b70:	4629      	mov	r1, r5
   d6b72:	4630      	mov	r0, r6
   d6b74:	f7ff ffde 	bl	d6b34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b78:	a801      	add	r0, sp, #4
   d6b7a:	f7fd fba5 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b7e:	4620      	mov	r0, r4
   d6b80:	f7fd fba2 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6b84:	4638      	mov	r0, r7
   d6b86:	2108      	movs	r1, #8
   d6b88:	f001 ff0f 	bl	d89aa <_ZdlPvj>
        return p;
    }
   d6b8c:	4630      	mov	r0, r6
   d6b8e:	b003      	add	sp, #12
   d6b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b92 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6b92:	b513      	push	{r0, r1, r4, lr}
   d6b94:	460b      	mov	r3, r1
   d6b96:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b98:	c803      	ldmia	r0, {r0, r1}
   d6b9a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6ba2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6ba6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6baa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6bae:	b002      	add	sp, #8
   d6bb0:	bd10      	pop	{r4, pc}
	...

000d6bb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6bb4:	b538      	push	{r3, r4, r5, lr}
   d6bb6:	2300      	movs	r3, #0
   d6bb8:	4604      	mov	r4, r0
   d6bba:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6bbc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6bbe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6bc0:	f7fd fa6b 	bl	d409a <_Znwj>
   d6bc4:	b128      	cbz	r0, d6bd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6bc6:	2301      	movs	r3, #1
   d6bc8:	6043      	str	r3, [r0, #4]
   d6bca:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6bcc:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6bce:	6003      	str	r3, [r0, #0]
   d6bd0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6bd2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	bd38      	pop	{r3, r4, r5, pc}
   d6bd8:	000d9e94 	.word	0x000d9e94

000d6bdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6bdc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6bde:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6be0:	b90a      	cbnz	r2, d6be6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6be2:	f001 fefe 	bl	d89e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6be6:	68c3      	ldr	r3, [r0, #12]
    }
   d6be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6bec:	4718      	bx	r3

000d6bee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6bee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6bf0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6bf2:	f100 0110 	add.w	r1, r0, #16
   d6bf6:	f7ff fff1 	bl	d6bdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6bfa:	bd08      	pop	{r3, pc}

000d6bfc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6bfc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6bfe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6c00:	b90a      	cbnz	r2, d6c06 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6c02:	f001 feee 	bl	d89e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c06:	68c3      	ldr	r3, [r0, #12]
    }
   d6c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c0c:	4718      	bx	r3

000d6c0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c0e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6c10:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6c12:	f100 0110 	add.w	r1, r0, #16
   d6c16:	f7ff fff1 	bl	d6bfc <_ZNKSt8functionIFvRKbEEclES1_>
   d6c1a:	bd08      	pop	{r3, pc}

000d6c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6c1c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6c1e:	2300      	movs	r3, #0
   d6c20:	6083      	str	r3, [r0, #8]
   d6c22:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6c24:	4604      	mov	r4, r0
   d6c26:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6c28:	b12b      	cbz	r3, d6c36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6c2a:	2202      	movs	r2, #2
   d6c2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6c2e:	68eb      	ldr	r3, [r5, #12]
   d6c30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6c32:	68ab      	ldr	r3, [r5, #8]
   d6c34:	60a3      	str	r3, [r4, #8]
	}
    }
   d6c36:	4620      	mov	r0, r4
   d6c38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c3e:	b089      	sub	sp, #36	; 0x24
   d6c40:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6c42:	4668      	mov	r0, sp
   d6c44:	f7ff ff0c 	bl	d6a60 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6c48:	2300      	movs	r3, #0
   d6c4a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6c4e:	f04f 0202 	mov.w	r2, #2
   d6c52:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6c56:	2b00      	cmp	r3, #0
   d6c58:	d103      	bne.n	d6c62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6c5a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6c5e:	2900      	cmp	r1, #0
   d6c60:	d1f7      	bne.n	d6c52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6c62:	d002      	beq.n	d6c6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6c64:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c68:	e063      	b.n	d6d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6c6a:	f114 050c 	adds.w	r5, r4, #12
   d6c6e:	d003      	beq.n	d6c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6c70:	4669      	mov	r1, sp
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7ff fef4 	bl	d6a60 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6c78:	f3bf 8f5f 	dmb	sy
   d6c7c:	2301      	movs	r3, #1
   d6c7e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6c80:	2000      	movs	r0, #0
   d6c82:	f104 0308 	add.w	r3, r4, #8
   d6c86:	f3bf 8f5f 	dmb	sy
   d6c8a:	e853 6f00 	ldrex	r6, [r3]
   d6c8e:	e843 0200 	strex	r2, r0, [r3]
   d6c92:	2a00      	cmp	r2, #0
   d6c94:	d1f9      	bne.n	d6c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6c96:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6c9a:	2e00      	cmp	r6, #0
   d6c9c:	d049      	beq.n	d6d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6c9e:	f7fe fd33 	bl	d5708 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6ca2:	b120      	cbz	r0, d6cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6ca4:	4629      	mov	r1, r5
   d6ca6:	4630      	mov	r0, r6
   d6ca8:	f7ff ff98 	bl	d6bdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6cac:	e03a      	b.n	d6d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6cae:	4631      	mov	r1, r6
   d6cb0:	a802      	add	r0, sp, #8
   d6cb2:	f7ff ffb3 	bl	d6c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6cb6:	68e0      	ldr	r0, [r4, #12]
   d6cb8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6cbc:	b108      	cbz	r0, d6cc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6cbe:	f002 fed7 	bl	d9a70 <strdup>
   d6cc2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6cc4:	2010      	movs	r0, #16
   d6cc6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6cca:	f7fd f9e6 	bl	d409a <_Znwj>
   d6cce:	4605      	mov	r5, r0
   d6cd0:	b1e8      	cbz	r0, d6d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cd2:	2700      	movs	r7, #0
   d6cd4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cd6:	2018      	movs	r0, #24
   d6cd8:	f7fd f9df 	bl	d409a <_Znwj>
   d6cdc:	4604      	mov	r4, r0
   d6cde:	b188      	cbz	r0, d6d04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ce0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ce2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ce4:	a802      	add	r0, sp, #8
   d6ce6:	f7ff ff54 	bl	d6b92 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cea:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6cec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cf0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6cf2:	9204      	str	r2, [sp, #16]
   d6cf4:	a906      	add	r1, sp, #24
   d6cf6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cf8:	60e3      	str	r3, [r4, #12]
   d6cfa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6cfe:	9205      	str	r2, [sp, #20]
   d6d00:	f7ff feae 	bl	d6a60 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6d04:	4b0d      	ldr	r3, [pc, #52]	; (d6d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6d06:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6d08:	4b0d      	ldr	r3, [pc, #52]	; (d6d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d0a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6d0c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6d0e:	a806      	add	r0, sp, #24
   d6d10:	f7ff feb5 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d14:	a802      	add	r0, sp, #8
   d6d16:	f7ff fe9a 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6d1a:	2200      	movs	r2, #0
   d6d1c:	4629      	mov	r1, r5
   d6d1e:	4809      	ldr	r0, [pc, #36]	; (d6d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6d20:	f7fe fcfa 	bl	d5718 <application_thread_invoke>
   d6d24:	4630      	mov	r0, r6
   d6d26:	f7ff fe92 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6d2a:	2110      	movs	r1, #16
   d6d2c:	4630      	mov	r0, r6
   d6d2e:	f001 fe3c 	bl	d89aa <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6d32:	4668      	mov	r0, sp
   d6d34:	f7ff fea3 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
    }
   d6d38:	b009      	add	sp, #36	; 0x24
   d6d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d3c:	000d6bef 	.word	0x000d6bef
   d6d40:	000d6e65 	.word	0x000d6e65
   d6d44:	000d5971 	.word	0x000d5971

000d6d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d4c:	b08b      	sub	sp, #44	; 0x2c
   d6d4e:	4606      	mov	r6, r0
   d6d50:	460f      	mov	r7, r1
   d6d52:	4690      	mov	r8, r2
   d6d54:	4699      	mov	r9, r3
   d6d56:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6d5a:	f7fe fd1d 	bl	d5798 <spark_cloud_flag_connected>
   d6d5e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d6d60:	4683      	mov	fp, r0
   d6d62:	bb30      	cbnz	r0, d6db2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6d64:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6d68:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6d6a:	a905      	add	r1, sp, #20
   d6d6c:	4628      	mov	r0, r5
   d6d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6d72:	f7ff fe75 	bl	d6a60 <_ZN8particle5ErrorC1EOS0_>
   d6d76:	2014      	movs	r0, #20
   d6d78:	f7fd f98f 	bl	d409a <_Znwj>
   d6d7c:	4604      	mov	r4, r0
   d6d7e:	b158      	cbz	r0, d6d98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6d80:	2302      	movs	r3, #2
   d6d82:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6d84:	2301      	movs	r3, #1
   d6d86:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6d88:	f8c0 b004 	str.w	fp, [r0, #4]
   d6d8c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6d90:	4629      	mov	r1, r5
   d6d92:	300c      	adds	r0, #12
   d6d94:	f7ff fe64 	bl	d6a60 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6d98:	4630      	mov	r0, r6
   d6d9a:	4621      	mov	r1, r4
   d6d9c:	f840 4b04 	str.w	r4, [r0], #4
   d6da0:	f7ff ff08 	bl	d6bb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6da4:	4628      	mov	r0, r5
   d6da6:	f7ff fe6a 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6daa:	a805      	add	r0, sp, #20
   d6dac:	f7ff fe67 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
   d6db0:	e052      	b.n	d6e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6db2:	2400      	movs	r4, #0
   d6db4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6db6:	2014      	movs	r0, #20
   d6db8:	606c      	str	r4, [r5, #4]
   d6dba:	60ac      	str	r4, [r5, #8]
   d6dbc:	9307      	str	r3, [sp, #28]
   d6dbe:	f7fd f96c 	bl	d409a <_Znwj>
   d6dc2:	4601      	mov	r1, r0
   d6dc4:	b118      	cbz	r0, d6dce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6dc6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6dc8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6dca:	6044      	str	r4, [r0, #4]
   d6dcc:	6084      	str	r4, [r0, #8]
   d6dce:	a804      	add	r0, sp, #16
   d6dd0:	9103      	str	r1, [sp, #12]
   d6dd2:	f7ff feef 	bl	d6bb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6dd6:	4b22      	ldr	r3, [pc, #136]	; (d6e60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6dd8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6dda:	2008      	movs	r0, #8
   d6ddc:	f7fd f95d 	bl	d409a <_Znwj>
   d6de0:	4604      	mov	r4, r0
   d6de2:	b128      	cbz	r0, d6df0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6de4:	9b03      	ldr	r3, [sp, #12]
   d6de6:	f840 3b04 	str.w	r3, [r0], #4
   d6dea:	a904      	add	r1, sp, #16
   d6dec:	f7ff f951 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6df0:	9500      	str	r5, [sp, #0]
   d6df2:	fa5f f38a 	uxtb.w	r3, sl
   d6df6:	464a      	mov	r2, r9
   d6df8:	4641      	mov	r1, r8
   d6dfa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6dfc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6dfe:	f7fe fcd3 	bl	d57a8 <spark_send_event>
   d6e02:	b920      	cbnz	r0, d6e0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6e04:	9b03      	ldr	r3, [sp, #12]
   d6e06:	785b      	ldrb	r3, [r3, #1]
   d6e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6e0c:	b183      	cbz	r3, d6e30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6e0e:	9b03      	ldr	r3, [sp, #12]
   d6e10:	9305      	str	r3, [sp, #20]
   d6e12:	a904      	add	r1, sp, #16
   d6e14:	a806      	add	r0, sp, #24
   d6e16:	f7ff f93c 	bl	d6092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6e1a:	a905      	add	r1, sp, #20
   d6e1c:	4630      	mov	r0, r6
   d6e1e:	f7ff fe89 	bl	d6b34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6e22:	a806      	add	r0, sp, #24
   d6e24:	f7fd fa50 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e28:	a804      	add	r0, sp, #16
   d6e2a:	f7fd fa4d 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e2e:	e013      	b.n	d6e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6e30:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6e34:	a905      	add	r1, sp, #20
   d6e36:	a803      	add	r0, sp, #12
   d6e38:	9205      	str	r2, [sp, #20]
   d6e3a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e3e:	f7ff fefd 	bl	d6c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6e42:	a805      	add	r0, sp, #20
   d6e44:	f7ff fe1b 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6e48:	a805      	add	r0, sp, #20
   d6e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6e4c:	f7ff fe83 	bl	d6b56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6e50:	a806      	add	r0, sp, #24
   d6e52:	f7fd fa39 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e56:	e7da      	b.n	d6e0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6e58:	4630      	mov	r0, r6
   d6e5a:	b00b      	add	sp, #44	; 0x2c
   d6e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e60:	000d6fd5 	.word	0x000d6fd5

000d6e64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6e64:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e68:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6e6a:	d006      	beq.n	d6e7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6e6c:	2a03      	cmp	r2, #3
   d6e6e:	d017      	beq.n	d6ea0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6e70:	2a01      	cmp	r2, #1
   d6e72:	d122      	bne.n	d6eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6e74:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6e76:	6003      	str	r3, [r0, #0]
	      break;
   d6e78:	e01f      	b.n	d6eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6e7a:	2018      	movs	r0, #24
   d6e7c:	680e      	ldr	r6, [r1, #0]
   d6e7e:	f7fd f90c 	bl	d409a <_Znwj>
   d6e82:	4605      	mov	r5, r0
   d6e84:	b150      	cbz	r0, d6e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6e86:	4631      	mov	r1, r6
   d6e88:	f7ff fec8 	bl	d6c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6e8c:	6930      	ldr	r0, [r6, #16]
   d6e8e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6e92:	b108      	cbz	r0, d6e98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6e94:	f002 fdec 	bl	d9a70 <strdup>
   d6e98:	6128      	str	r0, [r5, #16]
   d6e9a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6e9c:	6025      	str	r5, [r4, #0]
   d6e9e:	e00c      	b.n	d6eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6ea0:	6804      	ldr	r4, [r0, #0]
   d6ea2:	b154      	cbz	r4, d6eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6ea4:	f104 0010 	add.w	r0, r4, #16
   d6ea8:	f7ff fde9 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6eac:	4620      	mov	r0, r4
   d6eae:	f7ff fdce 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6eb2:	2118      	movs	r1, #24
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	f001 fd78 	bl	d89aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6eba:	2000      	movs	r0, #0
   d6ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ebe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ebe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ec0:	2300      	movs	r3, #0
   d6ec2:	6083      	str	r3, [r0, #8]
   d6ec4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ec6:	4604      	mov	r4, r0
   d6ec8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6eca:	b12b      	cbz	r3, d6ed8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ecc:	2202      	movs	r2, #2
   d6ece:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ed0:	68eb      	ldr	r3, [r5, #12]
   d6ed2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6ed4:	68ab      	ldr	r3, [r5, #8]
   d6ed6:	60a3      	str	r3, [r4, #8]
	}
    }
   d6ed8:	4620      	mov	r0, r4
   d6eda:	bd38      	pop	{r3, r4, r5, pc}

000d6edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6edc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6ede:	b570      	push	{r4, r5, r6, lr}
   d6ee0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ee2:	d006      	beq.n	d6ef2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6ee4:	2a03      	cmp	r2, #3
   d6ee6:	d011      	beq.n	d6f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6ee8:	2a01      	cmp	r2, #1
   d6eea:	d118      	bne.n	d6f1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6eec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6eee:	6003      	str	r3, [r0, #0]
	      break;
   d6ef0:	e015      	b.n	d6f1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6ef2:	2014      	movs	r0, #20
   d6ef4:	680e      	ldr	r6, [r1, #0]
   d6ef6:	f7fd f8d0 	bl	d409a <_Znwj>
   d6efa:	4605      	mov	r5, r0
   d6efc:	b120      	cbz	r0, d6f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6efe:	4631      	mov	r1, r6
   d6f00:	f7ff ffdd 	bl	d6ebe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6f04:	7c33      	ldrb	r3, [r6, #16]
   d6f06:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f08:	6025      	str	r5, [r4, #0]
   d6f0a:	e008      	b.n	d6f1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f0c:	6804      	ldr	r4, [r0, #0]
   d6f0e:	b134      	cbz	r4, d6f1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f10:	4620      	mov	r0, r4
   d6f12:	f7ff fd9c 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f16:	2114      	movs	r1, #20
   d6f18:	4620      	mov	r0, r4
   d6f1a:	f001 fd46 	bl	d89aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6f1e:	2000      	movs	r0, #0
   d6f20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6f24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6f24:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6f26:	2300      	movs	r3, #0
   d6f28:	b087      	sub	sp, #28
   d6f2a:	460c      	mov	r4, r1
   d6f2c:	f3bf 8f5f 	dmb	sy
   d6f30:	e850 6f00 	ldrex	r6, [r0]
   d6f34:	e840 3200 	strex	r2, r3, [r0]
   d6f38:	2a00      	cmp	r2, #0
   d6f3a:	d1f9      	bne.n	d6f30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6f3c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6f40:	2e00      	cmp	r6, #0
   d6f42:	d03f      	beq.n	d6fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6f44:	4618      	mov	r0, r3
   d6f46:	f7fe fbdf 	bl	d5708 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6f4a:	4607      	mov	r7, r0
   d6f4c:	b120      	cbz	r0, d6f58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6f4e:	4621      	mov	r1, r4
   d6f50:	4630      	mov	r0, r6
   d6f52:	f7ff fe53 	bl	d6bfc <_ZNKSt8functionIFvRKbEEclES1_>
   d6f56:	e02e      	b.n	d6fb6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6f58:	4631      	mov	r1, r6
   d6f5a:	a801      	add	r0, sp, #4
   d6f5c:	f7ff ffaf 	bl	d6ebe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6f60:	7823      	ldrb	r3, [r4, #0]
   d6f62:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6f66:	2010      	movs	r0, #16
   d6f68:	f7fd f897 	bl	d409a <_Znwj>
   d6f6c:	4605      	mov	r5, r0
   d6f6e:	b1d0      	cbz	r0, d6fa6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f70:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f72:	2014      	movs	r0, #20
   d6f74:	f7fd f891 	bl	d409a <_Znwj>
   d6f78:	4604      	mov	r4, r0
   d6f7a:	b178      	cbz	r0, d6f9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f7c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6f7e:	4601      	mov	r1, r0
   d6f80:	a801      	add	r0, sp, #4
   d6f82:	f7ff fe06 	bl	d6b92 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f86:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6f88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f8a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f8c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6f8e:	9203      	str	r2, [sp, #12]
   d6f90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f92:	60e3      	str	r3, [r4, #12]
   d6f94:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6f98:	9204      	str	r2, [sp, #16]
   d6f9a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6f9c:	4b0a      	ldr	r3, [pc, #40]	; (d6fc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6f9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6fa0:	4b0a      	ldr	r3, [pc, #40]	; (d6fcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fa2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6fa4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fa6:	a801      	add	r0, sp, #4
   d6fa8:	f7ff fd51 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6fac:	2200      	movs	r2, #0
   d6fae:	4629      	mov	r1, r5
   d6fb0:	4807      	ldr	r0, [pc, #28]	; (d6fd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6fb2:	f7fe fbb1 	bl	d5718 <application_thread_invoke>
   d6fb6:	4630      	mov	r0, r6
   d6fb8:	f7ff fd49 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6fbc:	2110      	movs	r1, #16
   d6fbe:	4630      	mov	r0, r6
   d6fc0:	f001 fcf3 	bl	d89aa <_ZdlPvj>
        }
    }
   d6fc4:	b007      	add	sp, #28
   d6fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6fc8:	000d6c0f 	.word	0x000d6c0f
   d6fcc:	000d6edd 	.word	0x000d6edd
   d6fd0:	000d5971 	.word	0x000d5971

000d6fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6fd4:	b530      	push	{r4, r5, lr}
   d6fd6:	b085      	sub	sp, #20
   d6fd8:	4604      	mov	r4, r0
   d6fda:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6fdc:	4668      	mov	r0, sp
   d6fde:	4611      	mov	r1, r2
   d6fe0:	f7ff fdb9 	bl	d6b56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6fe4:	b17c      	cbz	r4, d7006 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6fe6:	b224      	sxth	r4, r4
   d6fe8:	4628      	mov	r0, r5
   d6fea:	b10d      	cbz	r5, d6ff0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6fec:	f002 fd40 	bl	d9a70 <strdup>
   d6ff0:	9002      	str	r0, [sp, #8]
   d6ff2:	a902      	add	r1, sp, #8
   d6ff4:	4668      	mov	r0, sp
   d6ff6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6ffa:	f7ff fe1f 	bl	d6c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6ffe:	a802      	add	r0, sp, #8
   d7000:	f7ff fd3d 	bl	d6a7e <_ZN8particle5ErrorD1Ev>
   d7004:	e01d      	b.n	d7042 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7006:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7008:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d700c:	f04f 0201 	mov.w	r2, #1
   d7010:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7014:	42a3      	cmp	r3, r4
   d7016:	d103      	bne.n	d7020 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7018:	e8c0 2f41 	strexb	r1, r2, [r0]
   d701c:	2900      	cmp	r1, #0
   d701e:	d1f7      	bne.n	d7010 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7020:	d002      	beq.n	d7028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7022:	f88d 3008 	strb.w	r3, [sp, #8]
   d7026:	e00c      	b.n	d7042 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7028:	f110 010c 	adds.w	r1, r0, #12
   d702c:	f04f 0301 	mov.w	r3, #1
   d7030:	bf18      	it	ne
   d7032:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7034:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7038:	3004      	adds	r0, #4
   d703a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d703e:	f7ff ff71 	bl	d6f24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7042:	a801      	add	r0, sp, #4
   d7044:	f7fd f940 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7048:	b005      	add	sp, #20
   d704a:	bd30      	pop	{r4, r5, pc}

000d704c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d704c:	2200      	movs	r2, #0
   d704e:	4611      	mov	r1, r2
   d7050:	6840      	ldr	r0, [r0, #4]
   d7052:	f7fe bbf9 	b.w	d5848 <network_listening>

000d7056 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7056:	2200      	movs	r2, #0
   d7058:	4611      	mov	r1, r2
   d705a:	6840      	ldr	r0, [r0, #4]
   d705c:	f7fe bc04 	b.w	d5868 <network_get_listen_timeout>

000d7060 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7060:	2200      	movs	r2, #0
   d7062:	6840      	ldr	r0, [r0, #4]
   d7064:	f7fe bbf8 	b.w	d5858 <network_set_listen_timeout>

000d7068 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7068:	2200      	movs	r2, #0
   d706a:	f081 0101 	eor.w	r1, r1, #1
   d706e:	6840      	ldr	r0, [r0, #4]
   d7070:	f7fe bbe2 	b.w	d5838 <network_listen>

000d7074 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7074:	2300      	movs	r3, #0
   d7076:	461a      	mov	r2, r3
   d7078:	4619      	mov	r1, r3
   d707a:	6840      	ldr	r0, [r0, #4]
   d707c:	f7fe bbd4 	b.w	d5828 <network_off>

000d7080 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7080:	2300      	movs	r3, #0
   d7082:	461a      	mov	r2, r3
   d7084:	4619      	mov	r1, r3
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7fe bbc6 	b.w	d5818 <network_on>

000d708c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d708c:	2200      	movs	r2, #0
   d708e:	4611      	mov	r1, r2
   d7090:	6840      	ldr	r0, [r0, #4]
   d7092:	f7fe bbb9 	b.w	d5808 <network_ready>

000d7096 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7096:	2200      	movs	r2, #0
   d7098:	4611      	mov	r1, r2
   d709a:	6840      	ldr	r0, [r0, #4]
   d709c:	f7fe bba4 	b.w	d57e8 <network_connecting>

000d70a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d70a0:	2200      	movs	r2, #0
   d70a2:	2102      	movs	r1, #2
   d70a4:	6840      	ldr	r0, [r0, #4]
   d70a6:	f7fe bba7 	b.w	d57f8 <network_disconnect>

000d70aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d70aa:	2300      	movs	r3, #0
   d70ac:	461a      	mov	r2, r3
   d70ae:	6840      	ldr	r0, [r0, #4]
   d70b0:	f7fe bb92 	b.w	d57d8 <network_connect>

000d70b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d70b4:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d70b6:	2203      	movs	r2, #3
   d70b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d70ba:	4a02      	ldr	r2, [pc, #8]	; (d70c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d70bc:	601a      	str	r2, [r3, #0]
   d70be:	4770      	bx	lr
   d70c0:	2003e3c8 	.word	0x2003e3c8
   d70c4:	000d9eb0 	.word	0x000d9eb0

000d70c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d70c8:	4770      	bx	lr

000d70ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d70ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70cc:	4606      	mov	r6, r0
   d70ce:	4615      	mov	r5, r2
   d70d0:	460c      	mov	r4, r1
   d70d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d70d4:	42bc      	cmp	r4, r7
   d70d6:	d006      	beq.n	d70e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d70d8:	6833      	ldr	r3, [r6, #0]
   d70da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d70de:	689b      	ldr	r3, [r3, #8]
   d70e0:	4630      	mov	r0, r6
   d70e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d70e4:	e7f6      	b.n	d70d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d70e6:	4628      	mov	r0, r5
   d70e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d70ea:	2200      	movs	r2, #0
   d70ec:	7c00      	ldrb	r0, [r0, #16]
   d70ee:	f7fe b98b 	b.w	d5408 <HAL_I2C_Write_Data>

000d70f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d70f2:	2100      	movs	r1, #0
   d70f4:	7c00      	ldrb	r0, [r0, #16]
   d70f6:	f7fe b98f 	b.w	d5418 <HAL_I2C_Available_Data>

000d70fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d70fa:	2100      	movs	r1, #0
   d70fc:	7c00      	ldrb	r0, [r0, #16]
   d70fe:	f7fe b993 	b.w	d5428 <HAL_I2C_Read_Data>

000d7102 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7102:	2100      	movs	r1, #0
   d7104:	7c00      	ldrb	r0, [r0, #16]
   d7106:	f7fe b997 	b.w	d5438 <HAL_I2C_Peek_Data>

000d710a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d710a:	2100      	movs	r1, #0
   d710c:	7c00      	ldrb	r0, [r0, #16]
   d710e:	f7fe b99b 	b.w	d5448 <HAL_I2C_Flush_Data>

000d7112 <_ZN7TwoWireD0Ev>:
   d7112:	b510      	push	{r4, lr}
   d7114:	2114      	movs	r1, #20
   d7116:	4604      	mov	r4, r0
   d7118:	f001 fc47 	bl	d89aa <_ZdlPvj>
   d711c:	4620      	mov	r0, r4
   d711e:	bd10      	pop	{r4, pc}

000d7120 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7120:	b510      	push	{r4, lr}
   d7122:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7128:	4608      	mov	r0, r1
   d712a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d712c:	2100      	movs	r1, #0
   d712e:	4b04      	ldr	r3, [pc, #16]	; (d7140 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7130:	7420      	strb	r0, [r4, #16]
   d7132:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7134:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7136:	f7fe f997 	bl	d5468 <HAL_I2C_Init>

}
   d713a:	4620      	mov	r0, r4
   d713c:	bd10      	pop	{r4, pc}
   d713e:	bf00      	nop
   d7140:	000d9ee4 	.word	0x000d9ee4

000d7144 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7144:	2100      	movs	r1, #0
   d7146:	7c00      	ldrb	r0, [r0, #16]
   d7148:	f7fe b986 	b.w	d5458 <HAL_I2C_Is_Enabled>

000d714c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d714c:	f7fe b944 	b.w	d53d8 <HAL_Interrupts_Disable_All>

000d7150 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d7150:	f7fe b93a 	b.w	d53c8 <HAL_Interrupts_Enable_All>

000d7154 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7154:	4770      	bx	lr

000d7156 <_ZN9IPAddressD0Ev>:
   d7156:	b510      	push	{r4, lr}
   d7158:	2118      	movs	r1, #24
   d715a:	4604      	mov	r4, r0
   d715c:	f001 fc25 	bl	d89aa <_ZdlPvj>
   d7160:	4620      	mov	r0, r4
   d7162:	bd10      	pop	{r4, pc}

000d7164 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7164:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7166:	7d03      	ldrb	r3, [r0, #20]
   d7168:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d716a:	b08d      	sub	sp, #52	; 0x34
   d716c:	460e      	mov	r6, r1
   d716e:	f100 0704 	add.w	r7, r0, #4
   d7172:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7176:	d002      	beq.n	d717e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7178:	f100 0508 	add.w	r5, r0, #8
   d717c:	e018      	b.n	d71b0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d717e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7180:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7182:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7186:	232f      	movs	r3, #47	; 0x2f
   d7188:	462a      	mov	r2, r5
   d718a:	200a      	movs	r0, #10
   d718c:	f7fe f99c 	bl	d54c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7190:	4628      	mov	r0, r5
   d7192:	f002 fc88 	bl	d9aa6 <strlen>
   d7196:	6833      	ldr	r3, [r6, #0]
   d7198:	4602      	mov	r2, r0
   d719a:	68db      	ldr	r3, [r3, #12]
   d719c:	4629      	mov	r1, r5
   d719e:	4630      	mov	r0, r6
   d71a0:	4798      	blx	r3
   d71a2:	e00f      	b.n	d71c4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d71a4:	b124      	cbz	r4, d71b0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d71a6:	212e      	movs	r1, #46	; 0x2e
   d71a8:	4630      	mov	r0, r6
   d71aa:	f000 fbfb 	bl	d79a4 <_ZN5Print5printEc>
   d71ae:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d71b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d71b4:	220a      	movs	r2, #10
   d71b6:	4630      	mov	r0, r6
   d71b8:	f000 fc30 	bl	d7a1c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d71bc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d71be:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d71c0:	d1f0      	bne.n	d71a4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d71c2:	4620      	mov	r0, r4
    }
    return n;
}
   d71c4:	b00d      	add	sp, #52	; 0x34
   d71c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71c8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d71c8:	b510      	push	{r4, lr}
   d71ca:	4b05      	ldr	r3, [pc, #20]	; (d71e0 <_ZN9IPAddressC1Ev+0x18>)
   d71cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d71ce:	2211      	movs	r2, #17
   d71d0:	f840 3b04 	str.w	r3, [r0], #4
   d71d4:	2100      	movs	r1, #0
   d71d6:	f002 fc0c 	bl	d99f2 <memset>
{
    clear();
}
   d71da:	4620      	mov	r0, r4
   d71dc:	bd10      	pop	{r4, pc}
   d71de:	bf00      	nop
   d71e0:	000d9f0c 	.word	0x000d9f0c

000d71e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d71e4:	4603      	mov	r3, r0
   d71e6:	4a07      	ldr	r2, [pc, #28]	; (d7204 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d71e8:	b510      	push	{r4, lr}
   d71ea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d71ee:	f101 0210 	add.w	r2, r1, #16
   d71f2:	f851 4b04 	ldr.w	r4, [r1], #4
   d71f6:	f843 4b04 	str.w	r4, [r3], #4
   d71fa:	4291      	cmp	r1, r2
   d71fc:	d1f9      	bne.n	d71f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d71fe:	780a      	ldrb	r2, [r1, #0]
   d7200:	701a      	strb	r2, [r3, #0]
}
   d7202:	bd10      	pop	{r4, pc}
   d7204:	000d9f0c 	.word	0x000d9f0c

000d7208 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7208:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d720a:	2b04      	cmp	r3, #4
   d720c:	d101      	bne.n	d7212 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d720e:	6840      	ldr	r0, [r0, #4]
   d7210:	e008      	b.n	d7224 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7212:	2b06      	cmp	r3, #6
   d7214:	d10a      	bne.n	d722c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7216:	6843      	ldr	r3, [r0, #4]
   d7218:	b953      	cbnz	r3, d7230 <_ZNK9IPAddresscvbEv+0x28>
   d721a:	6883      	ldr	r3, [r0, #8]
   d721c:	b943      	cbnz	r3, d7230 <_ZNK9IPAddresscvbEv+0x28>
   d721e:	68c3      	ldr	r3, [r0, #12]
   d7220:	b933      	cbnz	r3, d7230 <_ZNK9IPAddresscvbEv+0x28>
   d7222:	6900      	ldr	r0, [r0, #16]
   d7224:	3000      	adds	r0, #0
   d7226:	bf18      	it	ne
   d7228:	2001      	movne	r0, #1
   d722a:	4770      	bx	lr
    } else {
        return false;
   d722c:	2000      	movs	r0, #0
   d722e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7230:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7232:	4770      	bx	lr

000d7234 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7234:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7236:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d723a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d723e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7242:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7246:	2304      	movs	r3, #4
   d7248:	6041      	str	r1, [r0, #4]
   d724a:	7503      	strb	r3, [r0, #20]
   d724c:	bd10      	pop	{r4, pc}

000d724e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d724e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7250:	780d      	ldrb	r5, [r1, #0]
   d7252:	788b      	ldrb	r3, [r1, #2]
   d7254:	784a      	ldrb	r2, [r1, #1]
   d7256:	78c9      	ldrb	r1, [r1, #3]
   d7258:	9100      	str	r1, [sp, #0]
   d725a:	4629      	mov	r1, r5
   d725c:	f7ff ffea 	bl	d7234 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7260:	b003      	add	sp, #12
   d7262:	bd30      	pop	{r4, r5, pc}

000d7264 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d7264:	6800      	ldr	r0, [r0, #0]
   d7266:	f7fe b84f 	b.w	d5308 <os_mutex_recursive_lock>
	...

000d726c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d726c:	4b01      	ldr	r3, [pc, #4]	; (d7274 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d726e:	4a02      	ldr	r2, [pc, #8]	; (d7278 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7270:	601a      	str	r2, [r3, #0]
   d7272:	4770      	bx	lr
   d7274:	2003e3d0 	.word	0x2003e3d0
   d7278:	000d9f8b 	.word	0x000d9f8b

000d727c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d727c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d727e:	2301      	movs	r3, #1
   d7280:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7282:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7284:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d7286:	b10b      	cbz	r3, d728c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d7288:	68c0      	ldr	r0, [r0, #12]
   d728a:	e006      	b.n	d729a <_ZN6Thread3runEPv+0x1e>
   d728c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d728e:	b128      	cbz	r0, d729c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7290:	6883      	ldr	r3, [r0, #8]
   d7292:	b90b      	cbnz	r3, d7298 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d7294:	f001 fba5 	bl	d89e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7298:	68c3      	ldr	r3, [r0, #12]
   d729a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d729c:	2301      	movs	r3, #1
   d729e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d72a0:	2000      	movs	r0, #0
    }
   d72a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d72a6:	f7fe b83f 	b.w	d5328 <os_thread_exit>

000d72aa <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72aa:	2200      	movs	r2, #0
   d72ac:	4611      	mov	r1, r2
   d72ae:	6840      	ldr	r0, [r0, #4]
   d72b0:	f7fe baca 	b.w	d5848 <network_listening>

000d72b4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d72b4:	2200      	movs	r2, #0
   d72b6:	4611      	mov	r1, r2
   d72b8:	6840      	ldr	r0, [r0, #4]
   d72ba:	f7fe bad5 	b.w	d5868 <network_get_listen_timeout>

000d72be <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d72be:	2200      	movs	r2, #0
   d72c0:	6840      	ldr	r0, [r0, #4]
   d72c2:	f7fe bac9 	b.w	d5858 <network_set_listen_timeout>

000d72c6 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d72c6:	2200      	movs	r2, #0
   d72c8:	f081 0101 	eor.w	r1, r1, #1
   d72cc:	6840      	ldr	r0, [r0, #4]
   d72ce:	f7fe bab3 	b.w	d5838 <network_listen>

000d72d2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d72d2:	2300      	movs	r3, #0
   d72d4:	461a      	mov	r2, r3
   d72d6:	2101      	movs	r1, #1
   d72d8:	6840      	ldr	r0, [r0, #4]
   d72da:	f7fe baa5 	b.w	d5828 <network_off>

000d72de <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d72de:	2300      	movs	r3, #0
   d72e0:	461a      	mov	r2, r3
   d72e2:	4619      	mov	r1, r3
   d72e4:	6840      	ldr	r0, [r0, #4]
   d72e6:	f7fe ba97 	b.w	d5818 <network_on>

000d72ea <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d72ea:	2200      	movs	r2, #0
   d72ec:	4611      	mov	r1, r2
   d72ee:	6840      	ldr	r0, [r0, #4]
   d72f0:	f7fe ba8a 	b.w	d5808 <network_ready>

000d72f4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72f4:	2200      	movs	r2, #0
   d72f6:	4611      	mov	r1, r2
   d72f8:	6840      	ldr	r0, [r0, #4]
   d72fa:	f7fe ba75 	b.w	d57e8 <network_connecting>

000d72fe <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72fe:	2200      	movs	r2, #0
   d7300:	2102      	movs	r1, #2
   d7302:	6840      	ldr	r0, [r0, #4]
   d7304:	f7fe ba78 	b.w	d57f8 <network_disconnect>

000d7308 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7308:	2300      	movs	r3, #0
   d730a:	461a      	mov	r2, r3
   d730c:	6840      	ldr	r0, [r0, #4]
   d730e:	f7fe ba63 	b.w	d57d8 <network_connect>

000d7312 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7312:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7314:	4605      	mov	r5, r0
   d7316:	b188      	cbz	r0, d733c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7318:	6804      	ldr	r4, [r0, #0]
   d731a:	b14c      	cbz	r4, d7330 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d731c:	68a3      	ldr	r3, [r4, #8]
   d731e:	b11b      	cbz	r3, d7328 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7320:	2203      	movs	r2, #3
   d7322:	4621      	mov	r1, r4
   d7324:	4620      	mov	r0, r4
   d7326:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7328:	2110      	movs	r1, #16
   d732a:	4620      	mov	r0, r4
   d732c:	f001 fb3d 	bl	d89aa <_ZdlPvj>
   d7330:	4628      	mov	r0, r5
   d7332:	2114      	movs	r1, #20
      }
   d7334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7338:	f001 bb37 	b.w	d89aa <_ZdlPvj>
   d733c:	bd38      	pop	{r3, r4, r5, pc}

000d733e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d733e:	b110      	cbz	r0, d7346 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7340:	6803      	ldr	r3, [r0, #0]
   d7342:	685b      	ldr	r3, [r3, #4]
   d7344:	4718      	bx	r3
   d7346:	4770      	bx	lr

000d7348 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7348:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d734a:	6803      	ldr	r3, [r0, #0]
   d734c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d734e:	b1bb      	cbz	r3, d7380 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7350:	6858      	ldr	r0, [r3, #4]
   d7352:	f7fd ffb1 	bl	d52b8 <os_thread_is_current>
   d7356:	b978      	cbnz	r0, d7378 <_ZN6ThreadD1Ev+0x30>
   d7358:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d735a:	7c5a      	ldrb	r2, [r3, #17]
   d735c:	b912      	cbnz	r2, d7364 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d735e:	6858      	ldr	r0, [r3, #4]
   d7360:	f7fd ffb2 	bl	d52c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7364:	6823      	ldr	r3, [r4, #0]
   d7366:	6858      	ldr	r0, [r3, #4]
   d7368:	f7fd ffb6 	bl	d52d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d736c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d736e:	2300      	movs	r3, #0
   d7370:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7372:	b128      	cbz	r0, d7380 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7374:	f7ff ffcd 	bl	d7312 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7378:	6820      	ldr	r0, [r4, #0]
   d737a:	b108      	cbz	r0, d7380 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d737c:	f7ff ffc9 	bl	d7312 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7380:	4620      	mov	r0, r4
   d7382:	bd10      	pop	{r4, pc}

000d7384 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7384:	b538      	push	{r3, r4, r5, lr}
   d7386:	4b0c      	ldr	r3, [pc, #48]	; (d73b8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7388:	6003      	str	r3, [r0, #0]
   d738a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d738c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7390:	b108      	cbz	r0, d7396 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7392:	f7fc fe88 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7396:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d739a:	b135      	cbz	r5, d73aa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d739c:	4628      	mov	r0, r5
   d739e:	f7ff ffd3 	bl	d7348 <_ZN6ThreadD1Ev>
   d73a2:	2104      	movs	r1, #4
   d73a4:	4628      	mov	r0, r5
   d73a6:	f001 fb00 	bl	d89aa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73aa:	68a0      	ldr	r0, [r4, #8]
   d73ac:	b108      	cbz	r0, d73b2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d73ae:	f7ff ffc6 	bl	d733e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d73b2:	4620      	mov	r0, r4
   d73b4:	bd38      	pop	{r3, r4, r5, pc}
   d73b6:	bf00      	nop
   d73b8:	000d9ffc 	.word	0x000d9ffc

000d73bc <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d73bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73c0:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d73c2:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d73c4:	460d      	mov	r5, r1
   d73c6:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d73c8:	f002 fb6d 	bl	d9aa6 <strlen>
   d73cc:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d73d0:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d73d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d73d4:	b1ab      	cbz	r3, d7402 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d73d6:	2140      	movs	r1, #64	; 0x40
   d73d8:	4620      	mov	r0, r4
   d73da:	f002 fb6c 	bl	d9ab6 <strnlen>

        if (event_name_length < filter_length)
   d73de:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d73e0:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d73e2:	d30b      	bcc.n	d73fc <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d73e4:	4629      	mov	r1, r5
   d73e6:	4620      	mov	r0, r4
   d73e8:	f002 face 	bl	d9988 <memcmp>
        if (0 == cmp)
   d73ec:	b930      	cbnz	r0, d73fc <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d73ee:	9000      	str	r0, [sp, #0]
   d73f0:	4643      	mov	r3, r8
   d73f2:	462a      	mov	r2, r5
   d73f4:	4621      	mov	r1, r4
   d73f6:	2058      	movs	r0, #88	; 0x58
   d73f8:	f7fe f9b4 	bl	d5764 <system_invoke_event_handler>
   d73fc:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d73fe:	42b4      	cmp	r4, r6
   d7400:	d1e7      	bne.n	d73d2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d7402:	b002      	add	sp, #8
   d7404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7408 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d7408:	b530      	push	{r4, r5, lr}
   d740a:	b08d      	sub	sp, #52	; 0x34
   d740c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d740e:	2211      	movs	r2, #17
   d7410:	2100      	movs	r1, #0
   d7412:	a801      	add	r0, sp, #4
   d7414:	f002 faed 	bl	d99f2 <memset>
    addr.v = 6;
   d7418:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d741a:	aa01      	add	r2, sp, #4
   d741c:	4909      	ldr	r1, [pc, #36]	; (d7444 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d741e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d7422:	200a      	movs	r0, #10
   d7424:	f7fe f858 	bl	d54d8 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7428:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d742a:	a901      	add	r1, sp, #4
   d742c:	a806      	add	r0, sp, #24
   d742e:	f7ff fed9 	bl	d71e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7434:	3404      	adds	r4, #4
   d7436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7438:	682b      	ldr	r3, [r5, #0]
   d743a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d743c:	2000      	movs	r0, #0
   d743e:	b00d      	add	sp, #52	; 0x34
   d7440:	bd30      	pop	{r4, r5, pc}
   d7442:	bf00      	nop
   d7444:	000da028 	.word	0x000da028

000d7448 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d7448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d744c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d744e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d7452:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7454:	4630      	mov	r0, r6
   d7456:	f7ff ff05 	bl	d7264 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d745a:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d745c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7460:	f7fd ff5a 	bl	d5318 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d7464:	2c00      	cmp	r4, #0
   d7466:	d063      	beq.n	d7530 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d7468:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d746c:	b163      	cbz	r3, d7488 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d746e:	6823      	ldr	r3, [r4, #0]
   d7470:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d7474:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d7476:	4620      	mov	r0, r4
   d7478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d747c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d7480:	47b8      	blx	r7
        if (len > 0) {
   d7482:	1e04      	subs	r4, r0, #0
   d7484:	dc13      	bgt.n	d74ae <_ZN5spark11MeshPublish4pollEv+0x66>
   d7486:	e056      	b.n	d7536 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d7488:	492d      	ldr	r1, [pc, #180]	; (d7540 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d748a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d748e:	f001 faa6 	bl	d89de <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7492:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d7496:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d749a:	b113      	cbz	r3, d74a2 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d749c:	4618      	mov	r0, r3
   d749e:	f7fc fe02 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   d74a2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d74a6:	2b00      	cmp	r3, #0
   d74a8:	d1e1      	bne.n	d746e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d74aa:	4826      	ldr	r0, [pc, #152]	; (d7544 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d74ac:	e044      	b.n	d7538 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d74ae:	2320      	movs	r3, #32
   d74b0:	4a25      	ldr	r2, [pc, #148]	; (d7548 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d74b2:	9302      	str	r3, [sp, #8]
   d74b4:	9200      	str	r2, [sp, #0]
   d74b6:	2300      	movs	r3, #0
   d74b8:	9401      	str	r4, [sp, #4]
   d74ba:	aa02      	add	r2, sp, #8
   d74bc:	4923      	ldr	r1, [pc, #140]	; (d754c <_ZN5spark11MeshPublish4pollEv+0x104>)
   d74be:	9303      	str	r3, [sp, #12]
   d74c0:	2001      	movs	r0, #1
   d74c2:	f7fe f8f9 	bl	d56b8 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d74c6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d74ca:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d74cc:	781b      	ldrb	r3, [r3, #0]
   d74ce:	bb6b      	cbnz	r3, d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d74d0:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d74d2:	4621      	mov	r1, r4
   d74d4:	4638      	mov	r0, r7
   d74d6:	f002 faee 	bl	d9ab6 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d74da:	b338      	cbz	r0, d752c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d74dc:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d74de:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d74e0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d74e4:	dd22      	ble.n	d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d74e6:	5c3b      	ldrb	r3, [r7, r0]
   d74e8:	bb03      	cbnz	r3, d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d74ea:	3c01      	subs	r4, #1
   d74ec:	d00e      	beq.n	d750c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d74ee:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d74f2:	4621      	mov	r1, r4
   d74f4:	4640      	mov	r0, r8
   d74f6:	f002 fade 	bl	d9ab6 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d74fa:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d74fc:	2c00      	cmp	r4, #0
   d74fe:	dd15      	ble.n	d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d7500:	f818 3000 	ldrb.w	r3, [r8, r0]
   d7504:	b993      	cbnz	r3, d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d7506:	2c01      	cmp	r4, #1
   d7508:	d002      	beq.n	d7510 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d750a:	e00f      	b.n	d752c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d750c:	f8df 8044 	ldr.w	r8, [pc, #68]	; d7554 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d7510:	4630      	mov	r0, r6
   d7512:	f7ff fea7 	bl	d7264 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d7516:	4642      	mov	r2, r8
   d7518:	4639      	mov	r1, r7
   d751a:	1d28      	adds	r0, r5, #4
   d751c:	f7ff ff4e 	bl	d73bc <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d7520:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7524:	f7fd fef8 	bl	d5318 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d7528:	2000      	movs	r0, #0
   d752a:	e005      	b.n	d7538 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d752c:	4808      	ldr	r0, [pc, #32]	; (d7550 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d752e:	e003      	b.n	d7538 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d7530:	2064      	movs	r0, #100	; 0x64
   d7532:	f7fd ff09 	bl	d5348 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d7536:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d7538:	b00a      	add	sp, #40	; 0x28
   d753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d753e:	bf00      	nop
   d7540:	000da1cc 	.word	0x000da1cc
   d7544:	fffffefc 	.word	0xfffffefc
   d7548:	000da03c 	.word	0x000da03c
   d754c:	000da035 	.word	0x000da035
   d7550:	fffffee8 	.word	0xfffffee8
   d7554:	000d9fbc 	.word	0x000d9fbc

000d7558 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d7558:	b510      	push	{r4, lr}
   d755a:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d755c:	f3bf 8f5f 	dmb	sy
   d7560:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d7564:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d7568:	b91b      	cbnz	r3, d7572 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d756a:	4620      	mov	r0, r4
   d756c:	f7ff ff6c 	bl	d7448 <_ZN5spark11MeshPublish4pollEv>
   d7570:	e7f4      	b.n	d755c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d7572:	bd10      	pop	{r4, pc}

000d7574 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d7574:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7576:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7578:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d757a:	b144      	cbz	r4, d758e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d757c:	4620      	mov	r0, r4
   d757e:	f7ff fee3 	bl	d7348 <_ZN6ThreadD1Ev>
   d7582:	4620      	mov	r0, r4
   d7584:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d7586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d758a:	f001 ba0e 	b.w	d89aa <_ZdlPvj>
   d758e:	bd10      	pop	{r4, pc}

000d7590 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d7590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7594:	4605      	mov	r5, r0
   d7596:	b08a      	sub	sp, #40	; 0x28
   d7598:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d759c:	f7ff fe62 	bl	d7264 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d75a0:	682c      	ldr	r4, [r5, #0]
   d75a2:	2c00      	cmp	r4, #0
   d75a4:	d17b      	bne.n	d769e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d75a6:	204c      	movs	r0, #76	; 0x4c
   d75a8:	f7fc fd77 	bl	d409a <_Znwj>
   d75ac:	4606      	mov	r6, r0
   d75ae:	2800      	cmp	r0, #0
   d75b0:	d073      	beq.n	d769a <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d75b2:	f000 fea1 	bl	d82f8 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d75b6:	4622      	mov	r2, r4
   d75b8:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d75bc:	4630      	mov	r0, r6
   d75be:	f000 fecb 	bl	d8358 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d75c2:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d75c4:	483a      	ldr	r0, [pc, #232]	; (d76b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d75c6:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d75ca:	f7fd ff55 	bl	d5478 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d75ce:	6833      	ldr	r3, [r6, #0]
   d75d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d75d4:	6a1b      	ldr	r3, [r3, #32]
   d75d6:	f249 0169 	movw	r1, #36969	; 0x9069
   d75da:	4630      	mov	r0, r6
   d75dc:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d75de:	a804      	add	r0, sp, #16
   d75e0:	f7ff fdf2 	bl	d71c8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d75e4:	a804      	add	r0, sp, #16
   d75e6:	f7ff ff0f 	bl	d7408 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d75ea:	2800      	cmp	r0, #0
   d75ec:	db4a      	blt.n	d7684 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d75ee:	a904      	add	r1, sp, #16
   d75f0:	4630      	mov	r0, r6
   d75f2:	f000 ff1d 	bl	d8430 <_ZN3UDP13joinMulticastERK9IPAddress>
   d75f6:	2800      	cmp	r0, #0
   d75f8:	db44      	blt.n	d7684 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75fa:	f3bf 8f5f 	dmb	sy
   d75fe:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d7602:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d7606:	492b      	ldr	r1, [pc, #172]	; (d76b4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7608:	2004      	movs	r0, #4
   d760a:	f001 f9d9 	bl	d89c0 <_ZnwjRKSt9nothrow_t>
   d760e:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d7612:	4607      	mov	r7, r0
   d7614:	b348      	cbz	r0, d766a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d7616:	4927      	ldr	r1, [pc, #156]	; (d76b4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7618:	2014      	movs	r0, #20
   d761a:	f001 f9d1 	bl	d89c0 <_ZnwjRKSt9nothrow_t>
   d761e:	b128      	cbz	r0, d762c <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7620:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7622:	6004      	str	r4, [r0, #0]
   d7624:	6044      	str	r4, [r0, #4]
   d7626:	6084      	str	r4, [r0, #8]
   d7628:	60c4      	str	r4, [r0, #12]
   d762a:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d762c:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d762e:	b1b0      	cbz	r0, d765e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d7630:	4b21      	ldr	r3, [pc, #132]	; (d76b8 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d7632:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7634:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7636:	4921      	ldr	r1, [pc, #132]	; (d76bc <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d7638:	60dd      	str	r5, [r3, #12]
   d763a:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d763c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d7640:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7644:	2203      	movs	r2, #3
   d7646:	4b1e      	ldr	r3, [pc, #120]	; (d76c0 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d7648:	3004      	adds	r0, #4
   d764a:	f7fd fe2d 	bl	d52a8 <os_thread_create>
   d764e:	b930      	cbnz	r0, d765e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d7650:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d7652:	7c1b      	ldrb	r3, [r3, #16]
   d7654:	b94b      	cbnz	r3, d766a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d7656:	2001      	movs	r0, #1
   d7658:	f7fd fe76 	bl	d5348 <HAL_Delay_Milliseconds>
   d765c:	e7f8      	b.n	d7650 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d765e:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7660:	2300      	movs	r3, #0
   d7662:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7664:	b108      	cbz	r0, d766a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d7666:	f7ff fe54 	bl	d7312 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d766a:	4639      	mov	r1, r7
   d766c:	4640      	mov	r0, r8
   d766e:	f7ff ff81 	bl	d7574 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d7672:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d7676:	b13b      	cbz	r3, d7688 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7678:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d767a:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d767c:	b130      	cbz	r0, d768c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d767e:	f7ff fe5e 	bl	d733e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7682:	e00c      	b.n	d769e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d7684:	4604      	mov	r4, r0
   d7686:	e003      	b.n	d7690 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d7688:	4c0e      	ldr	r4, [pc, #56]	; (d76c4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d768a:	e001      	b.n	d7690 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d768c:	4604      	mov	r4, r0
   d768e:	e007      	b.n	d76a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7690:	b136      	cbz	r6, d76a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d7692:	4630      	mov	r0, r6
   d7694:	f7ff fe53 	bl	d733e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7698:	e002      	b.n	d76a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d769a:	4c0a      	ldr	r4, [pc, #40]	; (d76c4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d769c:	e000      	b.n	d76a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d769e:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d76a0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d76a4:	f7fd fe38 	bl	d5318 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d76a8:	4620      	mov	r0, r4
   d76aa:	b00a      	add	sp, #40	; 0x28
   d76ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d76b0:	000da04c 	.word	0x000da04c
   d76b4:	000da1cc 	.word	0x000da1cc
   d76b8:	000d7559 	.word	0x000d7559
   d76bc:	000da050 	.word	0x000da050
   d76c0:	000d727d 	.word	0x000d727d
   d76c4:	fffffefc 	.word	0xfffffefc

000d76c8 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d76c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76cc:	4605      	mov	r5, r0
   d76ce:	b08c      	sub	sp, #48	; 0x30
   d76d0:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d76d2:	460f      	mov	r7, r1
   d76d4:	b109      	cbz	r1, d76da <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d76d6:	780b      	ldrb	r3, [r1, #0]
   d76d8:	b90b      	cbnz	r3, d76de <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d76da:	4c35      	ldr	r4, [pc, #212]	; (d77b0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d76dc:	e064      	b.n	d77a8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d76de:	4608      	mov	r0, r1
   d76e0:	f002 f9e1 	bl	d9aa6 <strlen>
   d76e4:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d76e6:	2e00      	cmp	r6, #0
   d76e8:	d05c      	beq.n	d77a4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d76ea:	4630      	mov	r0, r6
   d76ec:	f002 f9db 	bl	d9aa6 <strlen>
   d76f0:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d76f2:	f108 0302 	add.w	r3, r8, #2
   d76f6:	4423      	add	r3, r4
   d76f8:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d76fc:	d84f      	bhi.n	d779e <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d76fe:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d7702:	f7ff fdaf 	bl	d7264 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d7706:	4628      	mov	r0, r5
   d7708:	f7ff ff42 	bl	d7590 <_ZN5spark11MeshPublish13initializeUdpEv>
   d770c:	2800      	cmp	r0, #0
   d770e:	db40      	blt.n	d7792 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d7710:	4668      	mov	r0, sp
   d7712:	f7ff fd59 	bl	d71c8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d7716:	4668      	mov	r0, sp
   d7718:	f7ff fe76 	bl	d7408 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d771c:	2800      	cmp	r0, #0
   d771e:	db38      	blt.n	d7792 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7720:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d7724:	f8da 3000 	ldr.w	r3, [sl]
   d7728:	f10d 0c04 	add.w	ip, sp, #4
   d772c:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d7730:	4b20      	ldr	r3, [pc, #128]	; (d77b4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d7732:	9306      	str	r3, [sp, #24]
   d7734:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7738:	f10d 0e1c 	add.w	lr, sp, #28
   d773c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d7740:	f8dc 3000 	ldr.w	r3, [ip]
   d7744:	f88e 3000 	strb.w	r3, [lr]
   d7748:	f249 0269 	movw	r2, #36969	; 0x9069
   d774c:	a906      	add	r1, sp, #24
   d774e:	4650      	mov	r0, sl
   d7750:	47c8      	blx	r9
   d7752:	2800      	cmp	r0, #0
   d7754:	db1d      	blt.n	d7792 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d7756:	2300      	movs	r3, #0
   d7758:	6828      	ldr	r0, [r5, #0]
   d775a:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d775e:	6803      	ldr	r3, [r0, #0]
   d7760:	2201      	movs	r2, #1
   d7762:	68db      	ldr	r3, [r3, #12]
   d7764:	a906      	add	r1, sp, #24
   d7766:	4798      	blx	r3
   d7768:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d776a:	6803      	ldr	r3, [r0, #0]
   d776c:	f108 0201 	add.w	r2, r8, #1
   d7770:	68db      	ldr	r3, [r3, #12]
   d7772:	4639      	mov	r1, r7
   d7774:	4798      	blx	r3
    if (dataLen > 0) {
   d7776:	b12c      	cbz	r4, d7784 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d7778:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d777a:	6803      	ldr	r3, [r0, #0]
   d777c:	4622      	mov	r2, r4
   d777e:	68db      	ldr	r3, [r3, #12]
   d7780:	4631      	mov	r1, r6
   d7782:	4798      	blx	r3
   d7784:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d7786:	6803      	ldr	r3, [r0, #0]
   d7788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d778a:	4798      	blx	r3
   d778c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d7790:	e000      	b.n	d7794 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d7792:	4604      	mov	r4, r0
   d7794:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7798:	f7fd fdbe 	bl	d5318 <os_mutex_recursive_unlock>
   d779c:	e004      	b.n	d77a8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d779e:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d77a2:	e001      	b.n	d77a8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d77a4:	4634      	mov	r4, r6
   d77a6:	e7a4      	b.n	d76f2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	b00c      	add	sp, #48	; 0x30
   d77ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77b0:	fffffef2 	.word	0xfffffef2
   d77b4:	000d9f0c 	.word	0x000d9f0c

000d77b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d77b8:	b538      	push	{r3, r4, r5, lr}
   d77ba:	4c0e      	ldr	r4, [pc, #56]	; (d77f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d77bc:	4b0e      	ldr	r3, [pc, #56]	; (d77f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d77be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d77c0:	2500      	movs	r5, #0
   d77c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d77c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d77c8:	6063      	str	r3, [r4, #4]
   d77ca:	60a5      	str	r5, [r4, #8]
   d77cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d77d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d77d4:	f7fd fd90 	bl	d52f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d77d8:	4b08      	ldr	r3, [pc, #32]	; (d77fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d77da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d77de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d77e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d77e4:	4620      	mov	r0, r4
   d77e6:	4a06      	ldr	r2, [pc, #24]	; (d7800 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d77e8:	4906      	ldr	r1, [pc, #24]	; (d7804 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d77ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d77ee:	f001 b8d7 	b.w	d89a0 <__aeabi_atexit>
   d77f2:	bf00      	nop
   d77f4:	2003e3d4 	.word	0x2003e3d4
   d77f8:	000da060 	.word	0x000da060
   d77fc:	000d9ffc 	.word	0x000d9ffc
   d7800:	2003e330 	.word	0x2003e330
   d7804:	000d7385 	.word	0x000d7385

000d7808 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7808:	2300      	movs	r3, #0
   d780a:	461a      	mov	r2, r3
   d780c:	6840      	ldr	r0, [r0, #4]
   d780e:	f7fd bfe3 	b.w	d57d8 <network_connect>

000d7812 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7812:	2200      	movs	r2, #0
   d7814:	2102      	movs	r1, #2
   d7816:	6840      	ldr	r0, [r0, #4]
   d7818:	f7fd bfee 	b.w	d57f8 <network_disconnect>

000d781c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d781c:	2200      	movs	r2, #0
   d781e:	4611      	mov	r1, r2
   d7820:	6840      	ldr	r0, [r0, #4]
   d7822:	f7fd bfe1 	b.w	d57e8 <network_connecting>

000d7826 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7826:	2200      	movs	r2, #0
   d7828:	4611      	mov	r1, r2
   d782a:	6840      	ldr	r0, [r0, #4]
   d782c:	f7fd bfec 	b.w	d5808 <network_ready>

000d7830 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7830:	2300      	movs	r3, #0
   d7832:	461a      	mov	r2, r3
   d7834:	4619      	mov	r1, r3
   d7836:	6840      	ldr	r0, [r0, #4]
   d7838:	f7fd bfee 	b.w	d5818 <network_on>

000d783c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d783c:	2300      	movs	r3, #0
   d783e:	461a      	mov	r2, r3
   d7840:	4619      	mov	r1, r3
   d7842:	6840      	ldr	r0, [r0, #4]
   d7844:	f7fd bff0 	b.w	d5828 <network_off>

000d7848 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7848:	2200      	movs	r2, #0
   d784a:	f081 0101 	eor.w	r1, r1, #1
   d784e:	6840      	ldr	r0, [r0, #4]
   d7850:	f7fd bff2 	b.w	d5838 <network_listen>

000d7854 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7854:	2200      	movs	r2, #0
   d7856:	6840      	ldr	r0, [r0, #4]
   d7858:	f7fd bffe 	b.w	d5858 <network_set_listen_timeout>

000d785c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d785c:	2200      	movs	r2, #0
   d785e:	4611      	mov	r1, r2
   d7860:	6840      	ldr	r0, [r0, #4]
   d7862:	f7fe b801 	b.w	d5868 <network_get_listen_timeout>

000d7866 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7866:	2200      	movs	r2, #0
   d7868:	4611      	mov	r1, r2
   d786a:	6840      	ldr	r0, [r0, #4]
   d786c:	f7fd bfec 	b.w	d5848 <network_listening>

000d7870 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7874:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7876:	b095      	sub	sp, #84	; 0x54
   d7878:	4616      	mov	r6, r2
   d787a:	460d      	mov	r5, r1
   d787c:	4607      	mov	r7, r0
    IPAddress addr;
   d787e:	f7ff fca3 	bl	d71c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7882:	4621      	mov	r1, r4
   d7884:	2220      	movs	r2, #32
   d7886:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7888:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d788a:	f002 f8b2 	bl	d99f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d788e:	2340      	movs	r3, #64	; 0x40
   d7890:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7892:	4621      	mov	r1, r4
   d7894:	466b      	mov	r3, sp
   d7896:	aa0c      	add	r2, sp, #48	; 0x30
   d7898:	4630      	mov	r0, r6
   d789a:	f7fd fe45 	bl	d5528 <netdb_getaddrinfo>
    if (!r) {
   d789e:	4604      	mov	r4, r0
   d78a0:	2800      	cmp	r0, #0
   d78a2:	d144      	bne.n	d792e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d78a4:	4602      	mov	r2, r0
   d78a6:	2101      	movs	r1, #1
   d78a8:	6868      	ldr	r0, [r5, #4]
   d78aa:	f7fd ffad 	bl	d5808 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d78b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78b2:	4622      	mov	r2, r4
   d78b4:	6868      	ldr	r0, [r5, #4]
   d78b6:	f7fd ffa7 	bl	d5808 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d78ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d78be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d78c0:	2e00      	cmp	r6, #0
   d78c2:	d034      	beq.n	d792e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d78c4:	2900      	cmp	r1, #0
   d78c6:	d132      	bne.n	d792e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d78c8:	6873      	ldr	r3, [r6, #4]
   d78ca:	2b02      	cmp	r3, #2
   d78cc:	d002      	beq.n	d78d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d78ce:	2b0a      	cmp	r3, #10
   d78d0:	d009      	beq.n	d78e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d78d2:	e02a      	b.n	d792a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d78d4:	f1b8 0f00 	cmp.w	r8, #0
   d78d8:	d027      	beq.n	d792a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d78da:	6971      	ldr	r1, [r6, #20]
   d78dc:	4638      	mov	r0, r7
   d78de:	3104      	adds	r1, #4
   d78e0:	f7ff fcb5 	bl	d724e <_ZN9IPAddressaSEPKh>
   d78e4:	e020      	b.n	d7928 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d78e6:	f1b9 0f00 	cmp.w	r9, #0
   d78ea:	d01e      	beq.n	d792a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d78ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d78ee:	2211      	movs	r2, #17
   d78f0:	a801      	add	r0, sp, #4
   d78f2:	f002 f87e 	bl	d99f2 <memset>
                    a.v = 6;
   d78f6:	2306      	movs	r3, #6
   d78f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d78fc:	ad01      	add	r5, sp, #4
   d78fe:	f104 0308 	add.w	r3, r4, #8
   d7902:	3418      	adds	r4, #24
   d7904:	6818      	ldr	r0, [r3, #0]
   d7906:	6859      	ldr	r1, [r3, #4]
   d7908:	462a      	mov	r2, r5
   d790a:	c203      	stmia	r2!, {r0, r1}
   d790c:	3308      	adds	r3, #8
   d790e:	42a3      	cmp	r3, r4
   d7910:	4615      	mov	r5, r2
   d7912:	d1f7      	bne.n	d7904 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7914:	a901      	add	r1, sp, #4
   d7916:	a806      	add	r0, sp, #24
   d7918:	ad07      	add	r5, sp, #28
   d791a:	f7ff fc63 	bl	d71e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d791e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7920:	1d3c      	adds	r4, r7, #4
   d7922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7924:	682b      	ldr	r3, [r5, #0]
   d7926:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7928:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d792a:	69f6      	ldr	r6, [r6, #28]
   d792c:	e7c8      	b.n	d78c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d792e:	9800      	ldr	r0, [sp, #0]
   d7930:	f7fd fdf2 	bl	d5518 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7934:	4638      	mov	r0, r7
   d7936:	b015      	add	sp, #84	; 0x54
   d7938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d793c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d793c:	4b02      	ldr	r3, [pc, #8]	; (d7948 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d793e:	4a03      	ldr	r2, [pc, #12]	; (d794c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7940:	601a      	str	r2, [r3, #0]
   d7942:	2200      	movs	r2, #0
   d7944:	605a      	str	r2, [r3, #4]
   d7946:	4770      	bx	lr
   d7948:	2003e5a8 	.word	0x2003e5a8
   d794c:	000da060 	.word	0x000da060

000d7950 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7952:	4606      	mov	r6, r0
   d7954:	460d      	mov	r5, r1
   d7956:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7958:	2400      	movs	r4, #0
  while (size--) {
   d795a:	42bd      	cmp	r5, r7
   d795c:	d00c      	beq.n	d7978 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d795e:	6833      	ldr	r3, [r6, #0]
   d7960:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7964:	689b      	ldr	r3, [r3, #8]
   d7966:	4630      	mov	r0, r6
   d7968:	4798      	blx	r3
     if (chunk>=0)
   d796a:	2800      	cmp	r0, #0
   d796c:	db01      	blt.n	d7972 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d796e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7970:	e7f3      	b.n	d795a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7972:	2c00      	cmp	r4, #0
   d7974:	bf08      	it	eq
   d7976:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7978:	4620      	mov	r0, r4
   d797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d797c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d797c:	b570      	push	{r4, r5, r6, lr}
   d797e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7980:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7982:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7984:	b149      	cbz	r1, d799a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7986:	f002 f88e 	bl	d9aa6 <strlen>
   d798a:	682b      	ldr	r3, [r5, #0]
   d798c:	4602      	mov	r2, r0
   d798e:	4621      	mov	r1, r4
   d7990:	4628      	mov	r0, r5
   d7992:	68db      	ldr	r3, [r3, #12]
    }
   d7994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7998:	4718      	bx	r3
    }
   d799a:	bd70      	pop	{r4, r5, r6, pc}

000d799c <_ZN5Print5printEPKc>:
   d799c:	b508      	push	{r3, lr}
   d799e:	f7ff ffed 	bl	d797c <_ZN5Print5writeEPKc>
   d79a2:	bd08      	pop	{r3, pc}

000d79a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d79a4:	6803      	ldr	r3, [r0, #0]
   d79a6:	689b      	ldr	r3, [r3, #8]
   d79a8:	4718      	bx	r3

000d79aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d79aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d79ac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d79ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d79b0:	f7ff fff8 	bl	d79a4 <_ZN5Print5printEc>
  n += print('\n');
   d79b4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d79b6:	4604      	mov	r4, r0
  n += print('\n');
   d79b8:	4628      	mov	r0, r5
   d79ba:	f7ff fff3 	bl	d79a4 <_ZN5Print5printEc>
  return n;
}
   d79be:	4420      	add	r0, r4
   d79c0:	bd38      	pop	{r3, r4, r5, pc}

000d79c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d79c2:	b530      	push	{r4, r5, lr}
   d79c4:	b08b      	sub	sp, #44	; 0x2c
   d79c6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d79c8:	2100      	movs	r1, #0
   d79ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d79ce:	2a01      	cmp	r2, #1
   d79d0:	bf98      	it	ls
   d79d2:	220a      	movls	r2, #10
   d79d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d79d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d79dc:	fb05 3312 	mls	r3, r5, r2, r3
   d79e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d79e4:	2b09      	cmp	r3, #9
   d79e6:	bf94      	ite	ls
   d79e8:	3330      	addls	r3, #48	; 0x30
   d79ea:	3337      	addhi	r3, #55	; 0x37
   d79ec:	b2db      	uxtb	r3, r3
   d79ee:	4621      	mov	r1, r4
   d79f0:	f804 3901 	strb.w	r3, [r4], #-1
   d79f4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d79f6:	2d00      	cmp	r5, #0
   d79f8:	d1ee      	bne.n	d79d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d79fa:	f7ff ffbf 	bl	d797c <_ZN5Print5writeEPKc>
}
   d79fe:	b00b      	add	sp, #44	; 0x2c
   d7a00:	bd30      	pop	{r4, r5, pc}

000d7a02 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7a02:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7a04:	b92a      	cbnz	r2, d7a12 <_ZN5Print5printEmi+0x10>
   d7a06:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7a08:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7a0c:	689b      	ldr	r3, [r3, #8]
   d7a0e:	b2c9      	uxtb	r1, r1
   d7a10:	4718      	bx	r3
  else return printNumber(n, base);
   d7a12:	b2d2      	uxtb	r2, r2
}
   d7a14:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7a18:	f7ff bfd3 	b.w	d79c2 <_ZN5Print11printNumberEmh>

000d7a1c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7a1c:	f7ff bff1 	b.w	d7a02 <_ZN5Print5printEmi>

000d7a20 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d7a20:	b538      	push	{r3, r4, r5, lr}
   d7a22:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7a24:	f7ff ffed 	bl	d7a02 <_ZN5Print5printEmi>
   d7a28:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d7a2a:	4628      	mov	r0, r5
   d7a2c:	f7ff ffbd 	bl	d79aa <_ZN5Print7printlnEv>
  return n;
}
   d7a30:	4420      	add	r0, r4
   d7a32:	bd38      	pop	{r3, r4, r5, pc}

000d7a34 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a38:	4607      	mov	r7, r0
   d7a3a:	460e      	mov	r6, r1
  if (base == 0) {
   d7a3c:	4615      	mov	r5, r2
   d7a3e:	b92a      	cbnz	r2, d7a4c <_ZN5Print5printEli+0x18>
    return write(n);
   d7a40:	6803      	ldr	r3, [r0, #0]
   d7a42:	b2c9      	uxtb	r1, r1
   d7a44:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7a4a:	4718      	bx	r3
  } else if (base == 10) {
   d7a4c:	2a0a      	cmp	r2, #10
   d7a4e:	d102      	bne.n	d7a56 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d7a50:	2900      	cmp	r1, #0
   d7a52:	da01      	bge.n	d7a58 <_ZN5Print5printEli+0x24>
   d7a54:	e004      	b.n	d7a60 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7a56:	b2d2      	uxtb	r2, r2
  }
}
   d7a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7a5c:	f7ff bfb1 	b.w	d79c2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7a60:	212d      	movs	r1, #45	; 0x2d
   d7a62:	f7ff ff9f 	bl	d79a4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d7a66:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7a68:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7a6a:	4271      	negs	r1, r6
   d7a6c:	4638      	mov	r0, r7
   d7a6e:	f7ff ffa8 	bl	d79c2 <_ZN5Print11printNumberEmh>
   d7a72:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a78 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
   d7a78:	b538      	push	{r3, r4, r5, lr}
   d7a7a:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d7a7c:	f7ff ffda 	bl	d7a34 <_ZN5Print5printEli>
   d7a80:	4604      	mov	r4, r0
  n += println();
   d7a82:	4628      	mov	r0, r5
   d7a84:	f7ff ff91 	bl	d79aa <_ZN5Print7printlnEv>
  return n;
}
   d7a88:	4420      	add	r0, r4
   d7a8a:	bd38      	pop	{r3, r4, r5, pc}

000d7a8c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7a8c:	b40c      	push	{r2, r3}
   d7a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7a92:	b087      	sub	sp, #28
   d7a94:	af00      	add	r7, sp, #0
   d7a96:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7a9a:	4605      	mov	r5, r0
   d7a9c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7aa0:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7aa2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7aa4:	4623      	mov	r3, r4
   d7aa6:	464a      	mov	r2, r9
   d7aa8:	2114      	movs	r1, #20
   d7aaa:	1d38      	adds	r0, r7, #4
   d7aac:	f7fd fefc 	bl	d58a8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7ab0:	2813      	cmp	r0, #19
   d7ab2:	d805      	bhi.n	d7ac0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7ab4:	1d39      	adds	r1, r7, #4
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f7ff ff60 	bl	d797c <_ZN5Print5writeEPKc>
   d7abc:	4604      	mov	r4, r0
   d7abe:	e013      	b.n	d7ae8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7ac0:	f100 0308 	add.w	r3, r0, #8
   d7ac4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7ac8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7aca:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7ace:	1c41      	adds	r1, r0, #1
   d7ad0:	4623      	mov	r3, r4
   d7ad2:	464a      	mov	r2, r9
   d7ad4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7ad6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7ad8:	f7fd fee6 	bl	d58a8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7adc:	4669      	mov	r1, sp
   d7ade:	4628      	mov	r0, r5
   d7ae0:	f7ff ff4c 	bl	d797c <_ZN5Print5writeEPKc>
   d7ae4:	4604      	mov	r4, r0
   d7ae6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7ae8:	b11e      	cbz	r6, d7af2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7aea:	4628      	mov	r0, r5
   d7aec:	f7ff ff5d 	bl	d79aa <_ZN5Print7printlnEv>
   d7af0:	4404      	add	r4, r0
    return n;
}
   d7af2:	4620      	mov	r0, r4
   d7af4:	371c      	adds	r7, #28
   d7af6:	46bd      	mov	sp, r7
   d7af8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7afc:	b002      	add	sp, #8
   d7afe:	4770      	bx	lr

000d7b00 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7b00:	b510      	push	{r4, lr}
   d7b02:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b04:	f7fe ffa3 	bl	d6a4e <_ZNSt14_Function_baseD1Ev>
   d7b08:	4620      	mov	r0, r4
   d7b0a:	bd10      	pop	{r4, pc}

000d7b0c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7b0c:	4803      	ldr	r0, [pc, #12]	; (d7b1c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7b0e:	4a04      	ldr	r2, [pc, #16]	; (d7b20 <_GLOBAL__sub_I_RGB+0x14>)
   d7b10:	4904      	ldr	r1, [pc, #16]	; (d7b24 <_GLOBAL__sub_I_RGB+0x18>)
   d7b12:	2300      	movs	r3, #0
   d7b14:	6083      	str	r3, [r0, #8]
   d7b16:	f000 bf43 	b.w	d89a0 <__aeabi_atexit>
   d7b1a:	bf00      	nop
   d7b1c:	2003e5b0 	.word	0x2003e5b0
   d7b20:	2003e330 	.word	0x2003e330
   d7b24:	000d7b01 	.word	0x000d7b01

000d7b28 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7b28:	4770      	bx	lr

000d7b2a <_ZN8SPIClassD0Ev>:
   d7b2a:	b510      	push	{r4, lr}
   d7b2c:	2110      	movs	r1, #16
   d7b2e:	4604      	mov	r4, r0
   d7b30:	f000 ff3b 	bl	d89aa <_ZdlPvj>
   d7b34:	4620      	mov	r0, r4
   d7b36:	bd10      	pop	{r4, pc}

000d7b38 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7b38:	b570      	push	{r4, r5, r6, lr}
   d7b3a:	4b08      	ldr	r3, [pc, #32]	; (d7b5c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7b3c:	6003      	str	r3, [r0, #0]
   d7b3e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d7b40:	2500      	movs	r5, #0
   d7b42:	460e      	mov	r6, r1
   d7b44:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7b48:	f7fd fbce 	bl	d52e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7b4c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d7b4e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d7b50:	f7fd fd22 	bl	d5598 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7b54:	60a5      	str	r5, [r4, #8]
}
   d7b56:	4620      	mov	r0, r4
   d7b58:	bd70      	pop	{r4, r5, r6, pc}
   d7b5a:	bf00      	nop
   d7b5c:	000da094 	.word	0x000da094

000d7b60 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7b60:	7900      	ldrb	r0, [r0, #4]
   d7b62:	f7fd bd21 	b.w	d55a8 <HAL_SPI_Is_Enabled>
	...

000d7b68 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d7b68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b6c:	ec59 8b10 	vmov	r8, r9, d0
   d7b70:	4607      	mov	r7, r0
   d7b72:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d7b74:	2200      	movs	r2, #0
   d7b76:	2300      	movs	r3, #0
   d7b78:	ee10 0a10 	vmov	r0, s0
   d7b7c:	4649      	mov	r1, r9
   d7b7e:	f001 fca5 	bl	d94cc <__aeabi_dcmplt>
   d7b82:	b128      	cbz	r0, d7b90 <_Z4dtoadhPc+0x28>
        val = -val;
   d7b84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d7b88:	4699      	mov	r9, r3
        *sout++ = '-';
   d7b8a:	232d      	movs	r3, #45	; 0x2d
   d7b8c:	7033      	strb	r3, [r6, #0]
   d7b8e:	3601      	adds	r6, #1
   d7b90:	2300      	movs	r3, #0
    }
    long scale = 1;
   d7b92:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d7b94:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d7b96:	b2d9      	uxtb	r1, r3
   d7b98:	428f      	cmp	r7, r1
   d7b9a:	d902      	bls.n	d7ba2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d7b9c:	4354      	muls	r4, r2
   d7b9e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d7ba0:	e7f9      	b.n	d7b96 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d7ba2:	4620      	mov	r0, r4
   d7ba4:	f001 f9ba 	bl	d8f1c <__aeabi_i2d>
   d7ba8:	4642      	mov	r2, r8
   d7baa:	464b      	mov	r3, r9
   d7bac:	f001 fa1c 	bl	d8fe8 <__aeabi_dmul>
   d7bb0:	4682      	mov	sl, r0
   d7bb2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d7bb4:	f001 fd3a 	bl	d962c <__aeabi_d2ulz>
   d7bb8:	4680      	mov	r8, r0
   d7bba:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7bbc:	f001 f9de 	bl	d8f7c <__aeabi_ul2d>
   d7bc0:	4602      	mov	r2, r0
   d7bc2:	460b      	mov	r3, r1
   d7bc4:	4650      	mov	r0, sl
   d7bc6:	4659      	mov	r1, fp
   d7bc8:	f001 f85a 	bl	d8c80 <__aeabi_dsub>
   d7bcc:	2200      	movs	r2, #0
   d7bce:	4b17      	ldr	r3, [pc, #92]	; (d7c2c <_Z4dtoadhPc+0xc4>)
   d7bd0:	f001 fc90 	bl	d94f4 <__aeabi_dcmpge>
   d7bd4:	b118      	cbz	r0, d7bde <_Z4dtoadhPc+0x76>
        fixed++;
   d7bd6:	f118 0801 	adds.w	r8, r8, #1
   d7bda:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d7bde:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d7be0:	4622      	mov	r2, r4
   d7be2:	462b      	mov	r3, r5
   d7be4:	4640      	mov	r0, r8
   d7be6:	4649      	mov	r1, r9
   d7be8:	f001 fd08 	bl	d95fc <__aeabi_uldivmod>
   d7bec:	2301      	movs	r3, #1
   d7bee:	220a      	movs	r2, #10
   d7bf0:	4631      	mov	r1, r6
   d7bf2:	f000 fd82 	bl	d86fa <ultoa>
    if (prec) {
   d7bf6:	b1af      	cbz	r7, d7c24 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d7bf8:	4630      	mov	r0, r6
   d7bfa:	f001 ff54 	bl	d9aa6 <strlen>
        *sout++ = '.';
   d7bfe:	232e      	movs	r3, #46	; 0x2e
   d7c00:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d7c02:	3001      	adds	r0, #1
   d7c04:	4406      	add	r6, r0
   d7c06:	4622      	mov	r2, r4
   d7c08:	462b      	mov	r3, r5
   d7c0a:	4640      	mov	r0, r8
   d7c0c:	4649      	mov	r1, r9
   d7c0e:	f001 fcf5 	bl	d95fc <__aeabi_uldivmod>
   d7c12:	463b      	mov	r3, r7
   d7c14:	4610      	mov	r0, r2
   d7c16:	4631      	mov	r1, r6
   d7c18:	220a      	movs	r2, #10
    }
}
   d7c1a:	b001      	add	sp, #4
   d7c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d7c20:	f000 bd6b 	b.w	d86fa <ultoa>
    }
}
   d7c24:	b001      	add	sp, #4
   d7c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c2a:	bf00      	nop
   d7c2c:	3fe00000 	.word	0x3fe00000

000d7c30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7c30:	b510      	push	{r4, lr}
   d7c32:	4604      	mov	r4, r0
{
	free(buffer);
   d7c34:	6800      	ldr	r0, [r0, #0]
   d7c36:	f7fd fe27 	bl	d5888 <free>
}
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	bd10      	pop	{r4, pc}

000d7c3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7c3e:	b510      	push	{r4, lr}
   d7c40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7c42:	6800      	ldr	r0, [r0, #0]
   d7c44:	b108      	cbz	r0, d7c4a <_ZN6String10invalidateEv+0xc>
   d7c46:	f7fd fe1f 	bl	d5888 <free>
	buffer = NULL;
   d7c4a:	2300      	movs	r3, #0
   d7c4c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7c4e:	60a3      	str	r3, [r4, #8]
   d7c50:	6063      	str	r3, [r4, #4]
   d7c52:	bd10      	pop	{r4, pc}

000d7c54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7c54:	b538      	push	{r3, r4, r5, lr}
   d7c56:	4604      	mov	r4, r0
   d7c58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7c5a:	6800      	ldr	r0, [r0, #0]
   d7c5c:	3101      	adds	r1, #1
   d7c5e:	f7fd fe1b 	bl	d5898 <realloc>
	if (newbuffer) {
   d7c62:	b110      	cbz	r0, d7c6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7c64:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7c68:	2001      	movs	r0, #1
	}
	return 0;
}
   d7c6a:	bd38      	pop	{r3, r4, r5, pc}

000d7c6c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7c6e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7c72:	b113      	cbz	r3, d7c7a <_ZN6String7reserveEj+0xe>
   d7c74:	6843      	ldr	r3, [r0, #4]
   d7c76:	428b      	cmp	r3, r1
   d7c78:	d207      	bcs.n	d7c8a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	f7ff ffea 	bl	d7c54 <_ZN6String12changeBufferEj>
   d7c80:	b120      	cbz	r0, d7c8c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7c82:	68a3      	ldr	r3, [r4, #8]
   d7c84:	b90b      	cbnz	r3, d7c8a <_ZN6String7reserveEj+0x1e>
   d7c86:	6822      	ldr	r2, [r4, #0]
   d7c88:	7013      	strb	r3, [r2, #0]
   d7c8a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7c8c:	bd10      	pop	{r4, pc}

000d7c8e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c8e:	b570      	push	{r4, r5, r6, lr}
   d7c90:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7c92:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c94:	4604      	mov	r4, r0
   d7c96:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7c98:	f7ff ffe8 	bl	d7c6c <_ZN6String7reserveEj>
   d7c9c:	b918      	cbnz	r0, d7ca6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7c9e:	4620      	mov	r0, r4
   d7ca0:	f7ff ffcd 	bl	d7c3e <_ZN6String10invalidateEv>
		return *this;
   d7ca4:	e009      	b.n	d7cba <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7ca6:	462a      	mov	r2, r5
   d7ca8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7caa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7cac:	6820      	ldr	r0, [r4, #0]
   d7cae:	f001 fe7a 	bl	d99a6 <memcpy>
	buffer[len] = 0;
   d7cb2:	6822      	ldr	r2, [r4, #0]
   d7cb4:	68a3      	ldr	r3, [r4, #8]
   d7cb6:	2100      	movs	r1, #0
   d7cb8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7cba:	4620      	mov	r0, r4
   d7cbc:	bd70      	pop	{r4, r5, r6, pc}

000d7cbe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7cbe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7cc0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7cc2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7cc4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7cc6:	6043      	str	r3, [r0, #4]
	len = 0;
   d7cc8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7cca:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7ccc:	460d      	mov	r5, r1
   d7cce:	b139      	cbz	r1, d7ce0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7cd0:	4608      	mov	r0, r1
   d7cd2:	f001 fee8 	bl	d9aa6 <strlen>
   d7cd6:	4629      	mov	r1, r5
   d7cd8:	4602      	mov	r2, r0
   d7cda:	4620      	mov	r0, r4
   d7cdc:	f7ff ffd7 	bl	d7c8e <_ZN6String4copyEPKcj>
}
   d7ce0:	4620      	mov	r0, r4
   d7ce2:	bd38      	pop	{r3, r4, r5, pc}

000d7ce4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7ce4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7ce6:	b510      	push	{r4, lr}
   d7ce8:	460b      	mov	r3, r1
   d7cea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7cec:	d007      	beq.n	d7cfe <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7cee:	6809      	ldr	r1, [r1, #0]
   d7cf0:	b119      	cbz	r1, d7cfa <_ZN6StringaSERKS_+0x16>
   d7cf2:	689a      	ldr	r2, [r3, #8]
   d7cf4:	f7ff ffcb 	bl	d7c8e <_ZN6String4copyEPKcj>
   d7cf8:	e001      	b.n	d7cfe <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7cfa:	f7ff ffa0 	bl	d7c3e <_ZN6String10invalidateEv>

	return *this;
}
   d7cfe:	4620      	mov	r0, r4
   d7d00:	bd10      	pop	{r4, pc}

000d7d02 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d02:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d04:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d06:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d0a:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d0e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7d10:	f7ff ffe8 	bl	d7ce4 <_ZN6StringaSERKS_>
}
   d7d14:	4620      	mov	r0, r4
   d7d16:	bd10      	pop	{r4, pc}

000d7d18 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7d18:	b538      	push	{r3, r4, r5, lr}
   d7d1a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7d1c:	460c      	mov	r4, r1
   d7d1e:	b141      	cbz	r1, d7d32 <_ZN6StringaSEPKc+0x1a>
   d7d20:	4608      	mov	r0, r1
   d7d22:	f001 fec0 	bl	d9aa6 <strlen>
   d7d26:	4621      	mov	r1, r4
   d7d28:	4602      	mov	r2, r0
   d7d2a:	4628      	mov	r0, r5
   d7d2c:	f7ff ffaf 	bl	d7c8e <_ZN6String4copyEPKcj>
   d7d30:	e001      	b.n	d7d36 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7d32:	f7ff ff84 	bl	d7c3e <_ZN6String10invalidateEv>

	return *this;
}
   d7d36:	4628      	mov	r0, r5
   d7d38:	bd38      	pop	{r3, r4, r5, pc}

000d7d3a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d7d3a:	b510      	push	{r4, lr}
   d7d3c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d3e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d7d40:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d42:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d7d44:	6063      	str	r3, [r4, #4]
	len = 0;
   d7d46:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7d48:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d7d4a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d7d4c:	a901      	add	r1, sp, #4
   d7d4e:	f000 fcfc 	bl	d874a <itoa>
	*this = buf;
   d7d52:	a901      	add	r1, sp, #4
   d7d54:	4620      	mov	r0, r4
   d7d56:	f7ff ffdf 	bl	d7d18 <_ZN6StringaSEPKc>
}
   d7d5a:	4620      	mov	r0, r4
   d7d5c:	b00a      	add	sp, #40	; 0x28
   d7d5e:	bd10      	pop	{r4, pc}

000d7d60 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d7d60:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d62:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d7d64:	b08a      	sub	sp, #40	; 0x28
   d7d66:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d68:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d6a:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d6c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d6e:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d7d70:	b2c8      	uxtb	r0, r1
   d7d72:	a901      	add	r1, sp, #4
   d7d74:	f7ff fef8 	bl	d7b68 <_Z4dtoadhPc>
        *this = buf;
   d7d78:	a901      	add	r1, sp, #4
   d7d7a:	4620      	mov	r0, r4
   d7d7c:	f7ff ffcc 	bl	d7d18 <_ZN6StringaSEPKc>
}
   d7d80:	4620      	mov	r0, r4
   d7d82:	b00a      	add	sp, #40	; 0x28
   d7d84:	bd10      	pop	{r4, pc}
	...

000d7d88 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7d88:	4b04      	ldr	r3, [pc, #16]	; (d7d9c <_GLOBAL__sub_I_System+0x14>)
   d7d8a:	2000      	movs	r0, #0
   d7d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7d90:	7018      	strb	r0, [r3, #0]
   d7d92:	8058      	strh	r0, [r3, #2]
   d7d94:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7d96:	f7fd bc97 	b.w	d56c8 <set_system_mode>
   d7d9a:	bf00      	nop
   d7d9c:	2003e5c0 	.word	0x2003e5c0

000d7da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7da0:	4b02      	ldr	r3, [pc, #8]	; (d7dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7da2:	681a      	ldr	r2, [r3, #0]
   d7da4:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7da6:	601a      	str	r2, [r3, #0]
   d7da8:	4770      	bx	lr
   d7daa:	bf00      	nop
   d7dac:	2003e2c4 	.word	0x2003e2c4
   d7db0:	2003e5c8 	.word	0x2003e5c8

000d7db4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7db4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7db6:	6804      	ldr	r4, [r0, #0]
   d7db8:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7dba:	46a4      	mov	ip, r4
    }
   d7dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7dc0:	4760      	bx	ip

000d7dc2 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d7dc2:	6803      	ldr	r3, [r0, #0]
   d7dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7dc6:	4718      	bx	r3

000d7dc8 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7dc8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7dca:	4770      	bx	lr

000d7dcc <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7dcc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d7dce:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d7dd0:	1a10      	subs	r0, r2, r0
   d7dd2:	4770      	bx	lr

000d7dd4 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7dd4:	b513      	push	{r0, r1, r4, lr}
   d7dd6:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d7dd8:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7dda:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d7dde:	68d4      	ldr	r4, [r2, #12]
   d7de0:	4619      	mov	r1, r3
   d7de2:	2201      	movs	r2, #1
   d7de4:	47a0      	blx	r4
}
   d7de6:	b002      	add	sp, #8
   d7de8:	bd10      	pop	{r4, pc}

000d7dea <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7dea:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7dec:	6803      	ldr	r3, [r0, #0]
   d7dee:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d7df0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d7df2:	4798      	blx	r3
   d7df4:	b128      	cbz	r0, d7e02 <_ZN3UDP4readEv+0x18>
   d7df6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7df8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7dfa:	1c59      	adds	r1, r3, #1
   d7dfc:	86e1      	strh	r1, [r4, #54]	; 0x36
   d7dfe:	5cd0      	ldrb	r0, [r2, r3]
   d7e00:	bd10      	pop	{r4, pc}
   d7e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7e06:	bd10      	pop	{r4, pc}

000d7e08 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7e08:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d7e0a:	6803      	ldr	r3, [r0, #0]
   d7e0c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7e0e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d7e10:	4798      	blx	r3
   d7e12:	b118      	cbz	r0, d7e1c <_ZN3UDP4peekEv+0x14>
   d7e14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7e16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7e18:	5cd0      	ldrb	r0, [r2, r3]
   d7e1a:	bd10      	pop	{r4, pc}
   d7e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7e20:	bd10      	pop	{r4, pc}

000d7e22 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d7e22:	4770      	bx	lr

000d7e24 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d7e24:	b410      	push	{r4}
   d7e26:	4603      	mov	r3, r0
   d7e28:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7e2a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d7e2c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d7e2e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d7e30:	6803      	ldr	r3, [r0, #0]
   d7e32:	1a52      	subs	r2, r2, r1
   d7e34:	68db      	ldr	r3, [r3, #12]
   d7e36:	4421      	add	r1, r4
}
   d7e38:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7e3c:	4718      	bx	r3

000d7e3e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d7e3e:	f1a0 0010 	sub.w	r0, r0, #16
   d7e42:	f7ff bfef 	b.w	d7e24 <_ZNK3UDP7printToER5Print>

000d7e46 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e46:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7e48:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e4a:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e4c:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d7e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e50:	4604      	mov	r4, r0
   d7e52:	460f      	mov	r7, r1
   d7e54:	4615      	mov	r5, r2
    stop();
   d7e56:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7e58:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e5a:	4632      	mov	r2, r6
   d7e5c:	2100      	movs	r1, #0
   d7e5e:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d7e60:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e62:	f001 fdc6 	bl	d99f2 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7e66:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7e6a:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7e6c:	260a      	movs	r6, #10
   d7e6e:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d7e72:	f7fd fb49 	bl	d5508 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e76:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7e78:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e7c:	2102      	movs	r1, #2
   d7e7e:	4630      	mov	r0, r6
   d7e80:	f7fd fb82 	bl	d5588 <sock_socket>

    if (_sock < 0) {
   d7e84:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e86:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7e88:	db24      	blt.n	d7ed4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7e8a:	2204      	movs	r2, #4
   d7e8c:	9200      	str	r2, [sp, #0]
   d7e8e:	ab02      	add	r3, sp, #8
   d7e90:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e94:	f7fd fb58 	bl	d5548 <sock_setsockopt>
   d7e98:	b9e0      	cbnz	r0, d7ed4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7e9a:	b195      	cbz	r5, d7ec2 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7e9c:	9003      	str	r0, [sp, #12]
   d7e9e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d7ea2:	a903      	add	r1, sp, #12
   d7ea4:	b2e8      	uxtb	r0, r5
   d7ea6:	f7fd faef 	bl	d5488 <if_index_to_name>
   d7eaa:	b998      	cbnz	r0, d7ed4 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7eac:	2306      	movs	r3, #6
   d7eae:	9300      	str	r3, [sp, #0]
   d7eb0:	f241 020b 	movw	r2, #4107	; 0x100b
   d7eb4:	ab03      	add	r3, sp, #12
   d7eb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7eba:	6960      	ldr	r0, [r4, #20]
   d7ebc:	f7fd fb44 	bl	d5548 <sock_setsockopt>
   d7ec0:	b940      	cbnz	r0, d7ed4 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d7ec2:	221c      	movs	r2, #28
   d7ec4:	a905      	add	r1, sp, #20
   d7ec6:	6960      	ldr	r0, [r4, #20]
   d7ec8:	f7fd fb36 	bl	d5538 <sock_bind>
   d7ecc:	b910      	cbnz	r0, d7ed4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d7ece:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d7ed0:	2001      	movs	r0, #1
   d7ed2:	e004      	b.n	d7ede <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d7ed4:	6823      	ldr	r3, [r4, #0]
   d7ed6:	4620      	mov	r0, r4
   d7ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7eda:	4798      	blx	r3
   d7edc:	2000      	movs	r0, #0
    }
    return bound;
}
   d7ede:	b00d      	add	sp, #52	; 0x34
   d7ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ee2 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d7ee2:	b510      	push	{r4, lr}
   d7ee4:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d7ee6:	6940      	ldr	r0, [r0, #20]
   d7ee8:	2800      	cmp	r0, #0
   d7eea:	db01      	blt.n	d7ef0 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d7eec:	f7fd fb34 	bl	d5558 <sock_close>
    }

    _sock = -1;
   d7ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7ef4:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7ef6:	2300      	movs	r3, #0
   d7ef8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7efa:	8723      	strh	r3, [r4, #56]	; 0x38
   d7efc:	bd10      	pop	{r4, pc}

000d7efe <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d7efe:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7f00:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d7f02:	4605      	mov	r5, r0
   d7f04:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7f06:	b113      	cbz	r3, d7f0e <_ZN3UDP5writeEPKhj+0x10>
   d7f08:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d7f0a:	1a24      	subs	r4, r4, r0
   d7f0c:	e000      	b.n	d7f10 <_ZN3UDP5writeEPKhj+0x12>
   d7f0e:	461c      	mov	r4, r3
   d7f10:	4294      	cmp	r4, r2
   d7f12:	bf28      	it	cs
   d7f14:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d7f16:	4622      	mov	r2, r4
   d7f18:	4418      	add	r0, r3
   d7f1a:	f001 fd44 	bl	d99a6 <memcpy>
    _offset += size;
   d7f1e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d7f20:	4423      	add	r3, r4
   d7f22:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d7f24:	4620      	mov	r0, r4
   d7f26:	bd38      	pop	{r3, r4, r5, pc}

000d7f28 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7f28:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d7f2a:	6803      	ldr	r3, [r0, #0]
   d7f2c:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7f2e:	4604      	mov	r4, r0
   d7f30:	460e      	mov	r6, r1
   d7f32:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d7f34:	4798      	blx	r3
   d7f36:	b188      	cbz	r0, d7f5c <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d7f38:	6823      	ldr	r3, [r4, #0]
   d7f3a:	4620      	mov	r0, r4
   d7f3c:	691b      	ldr	r3, [r3, #16]
   d7f3e:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d7f40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7f44:	4285      	cmp	r5, r0
   d7f46:	bfa8      	it	ge
   d7f48:	4605      	movge	r5, r0
   d7f4a:	4419      	add	r1, r3
   d7f4c:	462a      	mov	r2, r5
   d7f4e:	4630      	mov	r0, r6
   d7f50:	f001 fd29 	bl	d99a6 <memcpy>
        _offset += read;
   d7f54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f56:	442b      	add	r3, r5
   d7f58:	86e3      	strh	r3, [r4, #54]	; 0x36
   d7f5a:	e001      	b.n	d7f60 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d7f5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d7f60:	4628      	mov	r0, r5
   d7f62:	bd70      	pop	{r4, r5, r6, pc}

000d7f64 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d7f64:	b570      	push	{r4, r5, r6, lr}
   d7f66:	4604      	mov	r4, r0
   d7f68:	4b05      	ldr	r3, [pc, #20]	; (d7f80 <_ZN3UDP8remoteIPEv+0x1c>)
   d7f6a:	f844 3b04 	str.w	r3, [r4], #4
   d7f6e:	f101 0520 	add.w	r5, r1, #32
   d7f72:	4606      	mov	r6, r0
   d7f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f78:	682b      	ldr	r3, [r5, #0]
   d7f7a:	7023      	strb	r3, [r4, #0]
   d7f7c:	4630      	mov	r0, r6
   d7f7e:	bd70      	pop	{r4, r5, r6, pc}
   d7f80:	000d9f0c 	.word	0x000d9f0c

000d7f84 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f86:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f88:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f8a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f8c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d7f8e:	4a0a      	ldr	r2, [pc, #40]	; (d7fb8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d7f90:	9202      	str	r2, [sp, #8]
   d7f92:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f94:	468e      	mov	lr, r1
   d7f96:	4606      	mov	r6, r0
   d7f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f9a:	ac03      	add	r4, sp, #12
   d7f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f9e:	682b      	ldr	r3, [r5, #0]
   d7fa0:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7fa2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7fa6:	9300      	str	r3, [sp, #0]
   d7fa8:	4662      	mov	r2, ip
   d7faa:	ab02      	add	r3, sp, #8
   d7fac:	4671      	mov	r1, lr
   d7fae:	4630      	mov	r0, r6
   d7fb0:	47b8      	blx	r7
    }
   d7fb2:	b009      	add	sp, #36	; 0x24
   d7fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7fb6:	bf00      	nop
   d7fb8:	000d9f0c 	.word	0x000d9f0c

000d7fbc <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7fbe:	6803      	ldr	r3, [r0, #0]
   d7fc0:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d7fc4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7fc6:	4b0d      	ldr	r3, [pc, #52]	; (d7ffc <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7fc8:	b089      	sub	sp, #36	; 0x24
   d7fca:	f100 0620 	add.w	r6, r0, #32
   d7fce:	4604      	mov	r4, r0
   d7fd0:	9302      	str	r3, [sp, #8]
   d7fd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7fd4:	ad03      	add	r5, sp, #12
   d7fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7fd8:	6833      	ldr	r3, [r6, #0]
   d7fda:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7fdc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d7fde:	9300      	str	r3, [sp, #0]
   d7fe0:	4672      	mov	r2, lr
   d7fe2:	ab02      	add	r3, sp, #8
   d7fe4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	47b8      	blx	r7
    flush(); // wait for send to complete
   d7fea:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7fec:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d7fee:	69db      	ldr	r3, [r3, #28]
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	4798      	blx	r3
    return result;
}
   d7ff4:	4628      	mov	r0, r5
   d7ff6:	b009      	add	sp, #36	; 0x24
   d7ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ffa:	bf00      	nop
   d7ffc:	000d9f0c 	.word	0x000d9f0c

000d8000 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8000:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d8002:	7843      	ldrb	r3, [r0, #1]
   d8004:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8006:	b08d      	sub	sp, #52	; 0x34
   d8008:	4605      	mov	r5, r0
   d800a:	460c      	mov	r4, r1
   d800c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d800e:	d101      	bne.n	d8014 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8010:	1d01      	adds	r1, r0, #4
   d8012:	e033      	b.n	d807c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8014:	2b0a      	cmp	r3, #10
   d8016:	d135      	bne.n	d8084 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8018:	2211      	movs	r2, #17
   d801a:	2100      	movs	r1, #0
   d801c:	a801      	add	r0, sp, #4
   d801e:	f001 fce8 	bl	d99f2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8022:	68ab      	ldr	r3, [r5, #8]
   d8024:	b943      	cbnz	r3, d8038 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d8026:	68eb      	ldr	r3, [r5, #12]
   d8028:	b933      	cbnz	r3, d8038 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d802a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d802e:	692e      	ldr	r6, [r5, #16]
   d8030:	f7fd fa5a 	bl	d54e8 <inet_htonl>
   d8034:	4286      	cmp	r6, r0
   d8036:	d01f      	beq.n	d8078 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8038:	f105 0308 	add.w	r3, r5, #8
   d803c:	ae01      	add	r6, sp, #4
   d803e:	f105 0e18 	add.w	lr, r5, #24
   d8042:	6818      	ldr	r0, [r3, #0]
   d8044:	6859      	ldr	r1, [r3, #4]
   d8046:	4632      	mov	r2, r6
   d8048:	c203      	stmia	r2!, {r0, r1}
   d804a:	3308      	adds	r3, #8
   d804c:	4573      	cmp	r3, lr
   d804e:	4616      	mov	r6, r2
   d8050:	d1f7      	bne.n	d8042 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d8052:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8054:	a901      	add	r1, sp, #4
   d8056:	a806      	add	r0, sp, #24
   d8058:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d805a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d805e:	f7ff f8c1 	bl	d71e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8062:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8064:	3404      	adds	r4, #4
   d8066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8068:	6833      	ldr	r3, [r6, #0]
   d806a:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d806c:	b157      	cbz	r7, d8084 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d806e:	8868      	ldrh	r0, [r5, #2]
   d8070:	f7fd fa42 	bl	d54f8 <inet_ntohs>
   d8074:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d8076:	e005      	b.n	d8084 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8078:	f105 0114 	add.w	r1, r5, #20
   d807c:	4620      	mov	r0, r4
   d807e:	f7ff f8e6 	bl	d724e <_ZN9IPAddressaSEPKh>
   d8082:	e7f3      	b.n	d806c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d8084:	b00d      	add	sp, #52	; 0x34
   d8086:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8088 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d8088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d808c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d808e:	ab0e      	add	r3, sp, #56	; 0x38
   d8090:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d8092:	4606      	mov	r6, r0
   d8094:	4617      	mov	r7, r2
   d8096:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d8098:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d809c:	462a      	mov	r2, r5
   d809e:	4629      	mov	r1, r5
   d80a0:	f7fd fa42 	bl	d5528 <netdb_getaddrinfo>
   d80a4:	2800      	cmp	r0, #0
   d80a6:	db1f      	blt.n	d80e8 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d80a8:	9b01      	ldr	r3, [sp, #4]
   d80aa:	b1fb      	cbz	r3, d80ec <_ZN3UDP11beginPacketEPKct+0x64>
   d80ac:	695b      	ldr	r3, [r3, #20]
   d80ae:	b1eb      	cbz	r3, d80ec <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d80b0:	a802      	add	r0, sp, #8
   d80b2:	f7ff f889 	bl	d71c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d80b6:	9b01      	ldr	r3, [sp, #4]
   d80b8:	462a      	mov	r2, r5
   d80ba:	6958      	ldr	r0, [r3, #20]
   d80bc:	a902      	add	r1, sp, #8
   d80be:	f7ff ff9f 	bl	d8000 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d80c2:	a802      	add	r0, sp, #8
   d80c4:	f7ff f8a0 	bl	d7208 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d80c8:	b180      	cbz	r0, d80ec <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d80ca:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d80cc:	ad03      	add	r5, sp, #12
   d80ce:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d80d2:	4b0b      	ldr	r3, [pc, #44]	; (d8100 <_ZN3UDP11beginPacketEPKct+0x78>)
   d80d4:	9308      	str	r3, [sp, #32]
   d80d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80d8:	ac09      	add	r4, sp, #36	; 0x24
   d80da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80dc:	682b      	ldr	r3, [r5, #0]
   d80de:	7023      	strb	r3, [r4, #0]
   d80e0:	463a      	mov	r2, r7
   d80e2:	a908      	add	r1, sp, #32
   d80e4:	4630      	mov	r0, r6
   d80e6:	47c0      	blx	r8
   d80e8:	4604      	mov	r4, r0
   d80ea:	e001      	b.n	d80f0 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d80ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d80f0:	9801      	ldr	r0, [sp, #4]
   d80f2:	f7fd fa11 	bl	d5518 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d80f6:	4620      	mov	r0, r4
   d80f8:	b00e      	add	sp, #56	; 0x38
   d80fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d80fe:	bf00      	nop
   d8100:	000d9f0c 	.word	0x000d9f0c

000d8104 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d8108:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d810c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8110:	b08c      	sub	sp, #48	; 0x30
   d8112:	4605      	mov	r5, r0
   d8114:	460c      	mov	r4, r1
   d8116:	4617      	mov	r7, r2
   d8118:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d811a:	db00      	blt.n	d811e <_ZN3UDP13receivePacketEPhjm+0x1a>
   d811c:	b911      	cbnz	r1, d8124 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d811e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8122:	e035      	b.n	d8190 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d8124:	f04f 0a1c 	mov.w	sl, #28
   d8128:	ae05      	add	r6, sp, #20
   d812a:	4652      	mov	r2, sl
   d812c:	2100      	movs	r1, #0
   d812e:	4630      	mov	r0, r6
   d8130:	f001 fc5f 	bl	d99f2 <memset>
        socklen_t slen = sizeof(saddr);
   d8134:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d8138:	f1b9 0f00 	cmp.w	r9, #0
   d813c:	d014      	beq.n	d8168 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d813e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8142:	fbb9 f1f2 	udiv	r1, r9, r2
   d8146:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d8148:	fb02 9111 	mls	r1, r2, r1, r9
   d814c:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d814e:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d8150:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d8152:	9300      	str	r3, [sp, #0]
   d8154:	f241 0206 	movw	r2, #4102	; 0x1006
   d8158:	ab03      	add	r3, sp, #12
   d815a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d815e:	4640      	mov	r0, r8
   d8160:	f7fd f9f2 	bl	d5548 <sock_setsockopt>
            if (ret) {
   d8164:	b108      	cbz	r0, d816a <_ZN3UDP13receivePacketEPhjm+0x66>
   d8166:	e013      	b.n	d8190 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d8168:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d816a:	ab02      	add	r3, sp, #8
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	4621      	mov	r1, r4
   d8170:	4603      	mov	r3, r0
   d8172:	9600      	str	r6, [sp, #0]
   d8174:	463a      	mov	r2, r7
   d8176:	6968      	ldr	r0, [r5, #20]
   d8178:	f7fd f9f6 	bl	d5568 <sock_recvfrom>
        if (ret >= 0) {
   d817c:	1e04      	subs	r4, r0, #0
   d817e:	db06      	blt.n	d818e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d8180:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d8184:	f105 011c 	add.w	r1, r5, #28
   d8188:	4630      	mov	r0, r6
   d818a:	f7ff ff39 	bl	d8000 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d818e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d8190:	b00c      	add	sp, #48	; 0x30
   d8192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8196 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8196:	b538      	push	{r3, r4, r5, lr}
   d8198:	4605      	mov	r5, r0
   d819a:	4614      	mov	r4, r2
   d819c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d819e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d81a0:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d81a2:	d111      	bne.n	d81c8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d81a4:	231c      	movs	r3, #28
   d81a6:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d81a8:	230a      	movs	r3, #10
   d81aa:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d81ac:	f7fd f9ac 	bl	d5508 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d81b0:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d81b2:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d81b6:	1d2b      	adds	r3, r5, #4
   d81b8:	3514      	adds	r5, #20
   d81ba:	f853 2b04 	ldr.w	r2, [r3], #4
   d81be:	f844 2b04 	str.w	r2, [r4], #4
   d81c2:	42ab      	cmp	r3, r5
   d81c4:	d1f9      	bne.n	d81ba <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d81c6:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d81c8:	2b04      	cmp	r3, #4
   d81ca:	d10a      	bne.n	d81e2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d81cc:	2310      	movs	r3, #16
   d81ce:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d81d0:	2302      	movs	r3, #2
   d81d2:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d81d4:	f7fd f998 	bl	d5508 <inet_htons>
   d81d8:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d81da:	6868      	ldr	r0, [r5, #4]
   d81dc:	f7fd f984 	bl	d54e8 <inet_htonl>
   d81e0:	6060      	str	r0, [r4, #4]
   d81e2:	bd38      	pop	{r3, r4, r5, pc}

000d81e4 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d81e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81e8:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d81ea:	ac03      	add	r4, sp, #12
   d81ec:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d81ee:	4699      	mov	r9, r3
   d81f0:	4606      	mov	r6, r0
   d81f2:	460f      	mov	r7, r1
   d81f4:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d81f6:	2100      	movs	r1, #0
   d81f8:	462a      	mov	r2, r5
   d81fa:	4620      	mov	r0, r4
   d81fc:	f001 fbf9 	bl	d99f2 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8200:	4622      	mov	r2, r4
   d8202:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d8206:	4648      	mov	r0, r9
   d8208:	f7ff ffc5 	bl	d8196 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d820c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8210:	b143      	cbz	r3, d8224 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d8212:	e88d 0030 	stmia.w	sp, {r4, r5}
   d8216:	2300      	movs	r3, #0
   d8218:	4642      	mov	r2, r8
   d821a:	4639      	mov	r1, r7
   d821c:	6970      	ldr	r0, [r6, #20]
   d821e:	f7fd f9ab 	bl	d5578 <sock_sendto>
   d8222:	e001      	b.n	d8228 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d8224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d8228:	b00b      	add	sp, #44	; 0x2c
   d822a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d822e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d822e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8230:	b091      	sub	sp, #68	; 0x44
   d8232:	460c      	mov	r4, r1
   d8234:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d8236:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d8238:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d823a:	a809      	add	r0, sp, #36	; 0x24
   d823c:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d823e:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d8240:	f001 fbd7 	bl	d99f2 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d8244:	aa09      	add	r2, sp, #36	; 0x24
   d8246:	2100      	movs	r1, #0
   d8248:	4620      	mov	r0, r4
   d824a:	f7ff ffa4 	bl	d8196 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d824e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d8252:	2b02      	cmp	r3, #2
   d8254:	d12e      	bne.n	d82b4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d8256:	2300      	movs	r3, #0
   d8258:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d825a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d825c:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d825e:	b1dd      	cbz	r5, d8298 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d8260:	a902      	add	r1, sp, #8
   d8262:	4628      	mov	r0, r5
   d8264:	f7fd f918 	bl	d5498 <if_get_by_index>
   d8268:	b9b0      	cbnz	r0, d8298 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d826a:	a910      	add	r1, sp, #64	; 0x40
   d826c:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d8270:	9802      	ldr	r0, [sp, #8]
   d8272:	f7fd f919 	bl	d54a8 <if_get_addrs>
   d8276:	b960      	cbnz	r0, d8292 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d8278:	9b03      	ldr	r3, [sp, #12]
   d827a:	b153      	cbz	r3, d8292 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d827c:	68da      	ldr	r2, [r3, #12]
   d827e:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d8280:	7851      	ldrb	r1, [r2, #1]
   d8282:	2902      	cmp	r1, #2
   d8284:	d103      	bne.n	d828e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d8286:	6852      	ldr	r2, [r2, #4]
   d8288:	b10a      	cbz	r2, d828e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d828a:	9205      	str	r2, [sp, #20]
   d828c:	e001      	b.n	d8292 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d828e:	681b      	ldr	r3, [r3, #0]
   d8290:	e7f3      	b.n	d827a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d8292:	9803      	ldr	r0, [sp, #12]
   d8294:	f7fd f910 	bl	d54b8 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d8298:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d829a:	f04f 0308 	mov.w	r3, #8
   d829e:	9300      	str	r3, [sp, #0]
   d82a0:	bf18      	it	ne
   d82a2:	2203      	movne	r2, #3
   d82a4:	ab04      	add	r3, sp, #16
   d82a6:	bf08      	it	eq
   d82a8:	2204      	moveq	r2, #4
   d82aa:	2100      	movs	r1, #0
   d82ac:	4630      	mov	r0, r6
   d82ae:	f7fd f94b 	bl	d5548 <sock_setsockopt>
   d82b2:	e01e      	b.n	d82f2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d82b4:	2b0a      	cmp	r3, #10
   d82b6:	d11a      	bne.n	d82ee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d82b8:	ac04      	add	r4, sp, #16
   d82ba:	2214      	movs	r2, #20
   d82bc:	2100      	movs	r1, #0
   d82be:	4620      	mov	r0, r4
   d82c0:	f001 fb97 	bl	d99f2 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d82c4:	ab0b      	add	r3, sp, #44	; 0x2c
   d82c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82c8:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d82ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82ce:	f04f 0314 	mov.w	r3, #20
   d82d2:	9300      	str	r3, [sp, #0]
   d82d4:	bf18      	it	ne
   d82d6:	220c      	movne	r2, #12
   d82d8:	4623      	mov	r3, r4
   d82da:	bf08      	it	eq
   d82dc:	220d      	moveq	r2, #13
   d82de:	2129      	movs	r1, #41	; 0x29
   d82e0:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d82e2:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82e4:	f7fd f930 	bl	d5548 <sock_setsockopt>
   d82e8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d82ec:	e001      	b.n	d82f2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d82ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d82f2:	b011      	add	sp, #68	; 0x44
   d82f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d82f8 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d82f8:	b538      	push	{r3, r4, r5, lr}
   d82fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82fe:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d8300:	4b0b      	ldr	r3, [pc, #44]	; (d8330 <_ZN3UDPC1Ev+0x38>)
   d8302:	f103 0208 	add.w	r2, r3, #8
   d8306:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8308:	2500      	movs	r5, #0
   d830a:	6103      	str	r3, [r0, #16]
   d830c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d8310:	4604      	mov	r4, r0
   d8312:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d8314:	6002      	str	r2, [r0, #0]
   d8316:	6143      	str	r3, [r0, #20]
   d8318:	301c      	adds	r0, #28
   d831a:	f7fe ff55 	bl	d71c8 <_ZN9IPAddressC1Ev>
   d831e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d8322:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8324:	8725      	strh	r5, [r4, #56]	; 0x38
   d8326:	63e5      	str	r5, [r4, #60]	; 0x3c
   d8328:	6423      	str	r3, [r4, #64]	; 0x40
   d832a:	6465      	str	r5, [r4, #68]	; 0x44
}
   d832c:	4620      	mov	r0, r4
   d832e:	bd38      	pop	{r3, r4, r5, pc}
   d8330:	000da0c8 	.word	0x000da0c8

000d8334 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d8334:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d8336:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d833a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d833c:	b123      	cbz	r3, d8348 <_ZN3UDP13releaseBufferEv+0x14>
   d833e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8340:	b110      	cbz	r0, d8348 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8342:	2101      	movs	r1, #1
   d8344:	f000 fb31 	bl	d89aa <_ZdlPvj>
    }
    _buffer = NULL;
   d8348:	2300      	movs	r3, #0
   d834a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d834c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8350:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d8352:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8354:	8723      	strh	r3, [r4, #56]	; 0x38
   d8356:	bd10      	pop	{r4, pc}

000d8358 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d8358:	b570      	push	{r4, r5, r6, lr}
   d835a:	4604      	mov	r4, r0
   d835c:	4616      	mov	r6, r2
   d835e:	460d      	mov	r5, r1
    releaseBuffer();
   d8360:	f7ff ffe8 	bl	d8334 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d8364:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d8366:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d8368:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d836a:	b93e      	cbnz	r6, d837c <_ZN3UDP9setBufferEjPh+0x24>
   d836c:	b135      	cbz	r5, d837c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d836e:	4628      	mov	r0, r5
   d8370:	f7fb fe95 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d8374:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d8376:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d8378:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d837c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d837e:	b103      	cbz	r3, d8382 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d8380:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d8382:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8384:	3000      	adds	r0, #0
   d8386:	bf18      	it	ne
   d8388:	2001      	movne	r0, #1
   d838a:	bd70      	pop	{r4, r5, r6, pc}

000d838c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d838e:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d8390:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8392:	4605      	mov	r5, r0
   d8394:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d8396:	b91a      	cbnz	r2, d83a0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8398:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d839a:	b109      	cbz	r1, d83a0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d839c:	f7ff ffdc 	bl	d8358 <_ZN3UDP9setBufferEjPh>
   d83a0:	3404      	adds	r4, #4
   d83a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d83a4:	f105 0620 	add.w	r6, r5, #32
   d83a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d83aa:	6823      	ldr	r3, [r4, #0]
   d83ac:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d83ae:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d83b0:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d83b2:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d83b4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d83b6:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d83b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83ba <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d83ba:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d83bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d83be:	4604      	mov	r4, r0
   d83c0:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d83c2:	b91a      	cbnz	r2, d83cc <_ZN3UDP11parsePacketEm+0x12>
   d83c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d83c6:	b109      	cbz	r1, d83cc <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d83c8:	f7ff ffc6 	bl	d8358 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d83cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d83ce:	2200      	movs	r2, #0
   d83d0:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d83d2:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d83d4:	b149      	cbz	r1, d83ea <_ZN3UDP11parsePacketEm+0x30>
   d83d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d83d8:	b13a      	cbz	r2, d83ea <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d83da:	6823      	ldr	r3, [r4, #0]
   d83dc:	4620      	mov	r0, r4
   d83de:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d83e0:	4633      	mov	r3, r6
   d83e2:	47a8      	blx	r5
        if (result > 0) {
   d83e4:	2800      	cmp	r0, #0
            _total = result;
   d83e6:	bfc8      	it	gt
   d83e8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d83ea:	6823      	ldr	r3, [r4, #0]
   d83ec:	4620      	mov	r0, r4
   d83ee:	691b      	ldr	r3, [r3, #16]
}
   d83f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d83f4:	4718      	bx	r3
	...

000d83f8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d83f8:	b510      	push	{r4, lr}
   d83fa:	4b07      	ldr	r3, [pc, #28]	; (d8418 <_ZN3UDPD1Ev+0x20>)
   d83fc:	f103 0208 	add.w	r2, r3, #8
   d8400:	336c      	adds	r3, #108	; 0x6c
   d8402:	4604      	mov	r4, r0
   d8404:	6002      	str	r2, [r0, #0]
   d8406:	6103      	str	r3, [r0, #16]
   d8408:	f7ff fd6b 	bl	d7ee2 <_ZN3UDP4stopEv>
   d840c:	4620      	mov	r0, r4
   d840e:	f7ff ff91 	bl	d8334 <_ZN3UDP13releaseBufferEv>
   d8412:	4620      	mov	r0, r4
   d8414:	bd10      	pop	{r4, pc}
   d8416:	bf00      	nop
   d8418:	000da0c8 	.word	0x000da0c8

000d841c <_ZN3UDPD0Ev>:
   d841c:	b510      	push	{r4, lr}
   d841e:	4604      	mov	r4, r0
   d8420:	f7ff ffea 	bl	d83f8 <_ZN3UDPD1Ev>
   d8424:	4620      	mov	r0, r4
   d8426:	214c      	movs	r1, #76	; 0x4c
   d8428:	f000 fabf 	bl	d89aa <_ZdlPvj>
   d842c:	4620      	mov	r0, r4
   d842e:	bd10      	pop	{r4, pc}

000d8430 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d8430:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d8432:	6940      	ldr	r0, [r0, #20]
   d8434:	2800      	cmp	r0, #0
   d8436:	db04      	blt.n	d8442 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d8438:	2301      	movs	r3, #1
   d843a:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d843e:	f7ff bef6 	b.w	d822e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d8442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8446:	4770      	bx	lr

000d8448 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8448:	4770      	bx	lr

000d844a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d844a:	7441      	strb	r1, [r0, #17]
   d844c:	4770      	bx	lr

000d844e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d844e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8450:	7c00      	ldrb	r0, [r0, #16]
   d8452:	f7fd f8e9 	bl	d5628 <HAL_USART_Available_Data_For_Write>
}
   d8456:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d845a:	bd08      	pop	{r3, pc}

000d845c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d845c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d845e:	7c00      	ldrb	r0, [r0, #16]
   d8460:	f7fd f8ba 	bl	d55d8 <HAL_USART_Available_Data>
}
   d8464:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8468:	bd08      	pop	{r3, pc}

000d846a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d846a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d846c:	7c00      	ldrb	r0, [r0, #16]
   d846e:	f7fd f8c3 	bl	d55f8 <HAL_USART_Peek_Data>
}
   d8472:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8476:	bf28      	it	cs
   d8478:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d847c:	bd08      	pop	{r3, pc}

000d847e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d847e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8480:	7c00      	ldrb	r0, [r0, #16]
   d8482:	f7fd f8b1 	bl	d55e8 <HAL_USART_Read_Data>
}
   d8486:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d848a:	bf28      	it	cs
   d848c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8490:	bd08      	pop	{r3, pc}

000d8492 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8492:	7c00      	ldrb	r0, [r0, #16]
   d8494:	f7fd b8b8 	b.w	d5608 <HAL_USART_Flush_Data>

000d8498 <_ZN11USARTSerialD0Ev>:
   d8498:	b510      	push	{r4, lr}
   d849a:	2114      	movs	r1, #20
   d849c:	4604      	mov	r4, r0
   d849e:	f000 fa84 	bl	d89aa <_ZdlPvj>
   d84a2:	4620      	mov	r0, r4
   d84a4:	bd10      	pop	{r4, pc}

000d84a6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d84a6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d84a8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d84aa:	4604      	mov	r4, r0
   d84ac:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d84ae:	b925      	cbnz	r5, d84ba <_ZN11USARTSerial5writeEh+0x14>
   d84b0:	7c00      	ldrb	r0, [r0, #16]
   d84b2:	f7fd f8b9 	bl	d5628 <HAL_USART_Available_Data_For_Write>
   d84b6:	2800      	cmp	r0, #0
   d84b8:	dd05      	ble.n	d84c6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d84ba:	4631      	mov	r1, r6
   d84bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d84be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d84c2:	f7fd b881 	b.w	d55c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d84c6:	4628      	mov	r0, r5
   d84c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d84cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d84cc:	b510      	push	{r4, lr}
   d84ce:	4604      	mov	r4, r0
   d84d0:	4608      	mov	r0, r1
   d84d2:	4611      	mov	r1, r2
   d84d4:	2200      	movs	r2, #0
   d84d6:	6062      	str	r2, [r4, #4]
   d84d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d84dc:	60a2      	str	r2, [r4, #8]
   d84de:	4a05      	ldr	r2, [pc, #20]	; (d84f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d84e0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d84e2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d84e4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d84e6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d84e8:	461a      	mov	r2, r3
   d84ea:	f7fd f865 	bl	d55b8 <HAL_USART_Init>
}
   d84ee:	4620      	mov	r0, r4
   d84f0:	bd10      	pop	{r4, pc}
   d84f2:	bf00      	nop
   d84f4:	000da140 	.word	0x000da140

000d84f8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d84f8:	7c00      	ldrb	r0, [r0, #16]
   d84fa:	f7fd b88d 	b.w	d5618 <HAL_USART_Is_Enabled>
	...

000d8500 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8500:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8502:	4d0c      	ldr	r5, [pc, #48]	; (d8534 <_Z22__fetch_global_Serial1v+0x34>)
   d8504:	6829      	ldr	r1, [r5, #0]
   d8506:	f011 0401 	ands.w	r4, r1, #1
   d850a:	d111      	bne.n	d8530 <_Z22__fetch_global_Serial1v+0x30>
   d850c:	4628      	mov	r0, r5
   d850e:	f7fb fdcc 	bl	d40aa <__cxa_guard_acquire>
   d8512:	b168      	cbz	r0, d8530 <_Z22__fetch_global_Serial1v+0x30>
   d8514:	4a08      	ldr	r2, [pc, #32]	; (d8538 <_Z22__fetch_global_Serial1v+0x38>)
   d8516:	4b09      	ldr	r3, [pc, #36]	; (d853c <_Z22__fetch_global_Serial1v+0x3c>)
   d8518:	4809      	ldr	r0, [pc, #36]	; (d8540 <_Z22__fetch_global_Serial1v+0x40>)
   d851a:	4621      	mov	r1, r4
   d851c:	f7ff ffd6 	bl	d84cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8520:	4628      	mov	r0, r5
   d8522:	f7fb fdc7 	bl	d40b4 <__cxa_guard_release>
   d8526:	4a07      	ldr	r2, [pc, #28]	; (d8544 <_Z22__fetch_global_Serial1v+0x44>)
   d8528:	4907      	ldr	r1, [pc, #28]	; (d8548 <_Z22__fetch_global_Serial1v+0x48>)
   d852a:	4805      	ldr	r0, [pc, #20]	; (d8540 <_Z22__fetch_global_Serial1v+0x40>)
   d852c:	f000 fa38 	bl	d89a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8530:	4803      	ldr	r0, [pc, #12]	; (d8540 <_Z22__fetch_global_Serial1v+0x40>)
   d8532:	bd38      	pop	{r3, r4, r5, pc}
   d8534:	2003e664 	.word	0x2003e664
   d8538:	2003e668 	.word	0x2003e668
   d853c:	2003e5e0 	.word	0x2003e5e0
   d8540:	2003e5cc 	.word	0x2003e5cc
   d8544:	2003e330 	.word	0x2003e330
   d8548:	000d8449 	.word	0x000d8449

000d854c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d854c:	7441      	strb	r1, [r0, #17]
   d854e:	4770      	bx	lr

000d8550 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8550:	4770      	bx	lr

000d8552 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8552:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8554:	2100      	movs	r1, #0
   d8556:	7c00      	ldrb	r0, [r0, #16]
   d8558:	f7fd f88e 	bl	d5678 <HAL_USB_USART_Receive_Data>
}
   d855c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8560:	bf28      	it	cs
   d8562:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8566:	bd08      	pop	{r3, pc}

000d8568 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8568:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d856a:	2101      	movs	r1, #1
   d856c:	7c00      	ldrb	r0, [r0, #16]
   d856e:	f7fd f883 	bl	d5678 <HAL_USB_USART_Receive_Data>
}
   d8572:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8576:	bf28      	it	cs
   d8578:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d857c:	bd08      	pop	{r3, pc}

000d857e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d857e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8580:	7c00      	ldrb	r0, [r0, #16]
   d8582:	f7fd f871 	bl	d5668 <HAL_USB_USART_Available_Data_For_Write>
}
   d8586:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d858a:	bd08      	pop	{r3, pc}

000d858c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d858c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d858e:	7c00      	ldrb	r0, [r0, #16]
   d8590:	f7fd f862 	bl	d5658 <HAL_USB_USART_Available_Data>
}
   d8594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8598:	bd08      	pop	{r3, pc}

000d859a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d859a:	7c00      	ldrb	r0, [r0, #16]
   d859c:	f7fd b87c 	b.w	d5698 <HAL_USB_USART_Flush_Data>

000d85a0 <_ZN9USBSerialD0Ev>:
   d85a0:	b510      	push	{r4, lr}
   d85a2:	2114      	movs	r1, #20
   d85a4:	4604      	mov	r4, r0
   d85a6:	f000 fa00 	bl	d89aa <_ZdlPvj>
   d85aa:	4620      	mov	r0, r4
   d85ac:	bd10      	pop	{r4, pc}

000d85ae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d85ae:	b538      	push	{r3, r4, r5, lr}
   d85b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d85b2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d85b4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d85b6:	f7fd f857 	bl	d5668 <HAL_USB_USART_Available_Data_For_Write>
   d85ba:	2800      	cmp	r0, #0
   d85bc:	dc01      	bgt.n	d85c2 <_ZN9USBSerial5writeEh+0x14>
   d85be:	7c60      	ldrb	r0, [r4, #17]
   d85c0:	b128      	cbz	r0, d85ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d85c2:	4629      	mov	r1, r5
   d85c4:	7c20      	ldrb	r0, [r4, #16]
   d85c6:	f7fd f85f 	bl	d5688 <HAL_USB_USART_Send_Data>
   d85ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d85ce:	bd38      	pop	{r3, r4, r5, pc}

000d85d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d85d0:	b510      	push	{r4, lr}
   d85d2:	4604      	mov	r4, r0
   d85d4:	2300      	movs	r3, #0
   d85d6:	6063      	str	r3, [r4, #4]
   d85d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d85dc:	60a3      	str	r3, [r4, #8]
   d85de:	4b05      	ldr	r3, [pc, #20]	; (d85f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d85e0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d85e2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d85e4:	4608      	mov	r0, r1
{
  _serial = serial;
   d85e6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d85e8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d85ea:	4611      	mov	r1, r2
   d85ec:	f7fd f824 	bl	d5638 <HAL_USB_USART_Init>
}
   d85f0:	4620      	mov	r0, r4
   d85f2:	bd10      	pop	{r4, pc}
   d85f4:	000da170 	.word	0x000da170

000d85f8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d85f8:	2200      	movs	r2, #0
   d85fa:	7c00      	ldrb	r0, [r0, #16]
   d85fc:	f7fd b824 	b.w	d5648 <HAL_USB_USART_Begin>

000d8600 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8600:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8602:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8604:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8606:	2100      	movs	r1, #0
   d8608:	f001 f9f3 	bl	d99f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d860c:	4620      	mov	r0, r4
   d860e:	bd10      	pop	{r4, pc}

000d8610 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8610:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8612:	4d0e      	ldr	r5, [pc, #56]	; (d864c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8614:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8616:	a801      	add	r0, sp, #4
   d8618:	f7ff fff2 	bl	d8600 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d861c:	6829      	ldr	r1, [r5, #0]
   d861e:	f011 0401 	ands.w	r4, r1, #1
   d8622:	d110      	bne.n	d8646 <_Z16_fetch_usbserialv+0x36>
   d8624:	4628      	mov	r0, r5
   d8626:	f7fb fd40 	bl	d40aa <__cxa_guard_acquire>
   d862a:	b160      	cbz	r0, d8646 <_Z16_fetch_usbserialv+0x36>
   d862c:	aa01      	add	r2, sp, #4
   d862e:	4621      	mov	r1, r4
   d8630:	4807      	ldr	r0, [pc, #28]	; (d8650 <_Z16_fetch_usbserialv+0x40>)
   d8632:	f7ff ffcd 	bl	d85d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8636:	4628      	mov	r0, r5
   d8638:	f7fb fd3c 	bl	d40b4 <__cxa_guard_release>
   d863c:	4a05      	ldr	r2, [pc, #20]	; (d8654 <_Z16_fetch_usbserialv+0x44>)
   d863e:	4906      	ldr	r1, [pc, #24]	; (d8658 <_Z16_fetch_usbserialv+0x48>)
   d8640:	4803      	ldr	r0, [pc, #12]	; (d8650 <_Z16_fetch_usbserialv+0x40>)
   d8642:	f000 f9ad 	bl	d89a0 <__aeabi_atexit>
	return _usbserial;
}
   d8646:	4802      	ldr	r0, [pc, #8]	; (d8650 <_Z16_fetch_usbserialv+0x40>)
   d8648:	b007      	add	sp, #28
   d864a:	bd30      	pop	{r4, r5, pc}
   d864c:	2003e6ec 	.word	0x2003e6ec
   d8650:	2003e6f0 	.word	0x2003e6f0
   d8654:	2003e330 	.word	0x2003e330
   d8658:	000d8551 	.word	0x000d8551

000d865c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d865c:	2200      	movs	r2, #0
   d865e:	4611      	mov	r1, r2
   d8660:	6840      	ldr	r0, [r0, #4]
   d8662:	f7fd b8d1 	b.w	d5808 <network_ready>

000d8666 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8666:	2200      	movs	r2, #0
   d8668:	4611      	mov	r1, r2
   d866a:	6840      	ldr	r0, [r0, #4]
   d866c:	f7fd b8ec 	b.w	d5848 <network_listening>

000d8670 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8670:	2200      	movs	r2, #0
   d8672:	4611      	mov	r1, r2
   d8674:	6840      	ldr	r0, [r0, #4]
   d8676:	f7fd b8f7 	b.w	d5868 <network_get_listen_timeout>

000d867a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d867a:	2200      	movs	r2, #0
   d867c:	6840      	ldr	r0, [r0, #4]
   d867e:	f7fd b8eb 	b.w	d5858 <network_set_listen_timeout>

000d8682 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8682:	2200      	movs	r2, #0
   d8684:	f081 0101 	eor.w	r1, r1, #1
   d8688:	6840      	ldr	r0, [r0, #4]
   d868a:	f7fd b8d5 	b.w	d5838 <network_listen>

000d868e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d868e:	2300      	movs	r3, #0
   d8690:	461a      	mov	r2, r3
   d8692:	4619      	mov	r1, r3
   d8694:	6840      	ldr	r0, [r0, #4]
   d8696:	f7fd b8c7 	b.w	d5828 <network_off>

000d869a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d869a:	2300      	movs	r3, #0
   d869c:	461a      	mov	r2, r3
   d869e:	4619      	mov	r1, r3
   d86a0:	6840      	ldr	r0, [r0, #4]
   d86a2:	f7fd b8b9 	b.w	d5818 <network_on>

000d86a6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d86a6:	2200      	movs	r2, #0
   d86a8:	4611      	mov	r1, r2
   d86aa:	6840      	ldr	r0, [r0, #4]
   d86ac:	f7fd b89c 	b.w	d57e8 <network_connecting>

000d86b0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d86b0:	2200      	movs	r2, #0
   d86b2:	2102      	movs	r1, #2
   d86b4:	6840      	ldr	r0, [r0, #4]
   d86b6:	f7fd b89f 	b.w	d57f8 <network_disconnect>

000d86ba <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d86ba:	2300      	movs	r3, #0
   d86bc:	461a      	mov	r2, r3
   d86be:	6840      	ldr	r0, [r0, #4]
   d86c0:	f7fd b88a 	b.w	d57d8 <network_connect>

000d86c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d86c4:	4b02      	ldr	r3, [pc, #8]	; (d86d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d86c6:	2204      	movs	r2, #4
   d86c8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d86ca:	4a02      	ldr	r2, [pc, #8]	; (d86d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d86cc:	601a      	str	r2, [r3, #0]
   d86ce:	4770      	bx	lr
   d86d0:	2003e704 	.word	0x2003e704
   d86d4:	000da1a0 	.word	0x000da1a0

000d86d8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d86d8:	b510      	push	{r4, lr}
   d86da:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d86dc:	f001 f9e3 	bl	d9aa6 <strlen>
   d86e0:	3801      	subs	r0, #1
   d86e2:	1823      	adds	r3, r4, r0
   d86e4:	4620      	mov	r0, r4
	while(i<j){
   d86e6:	4298      	cmp	r0, r3
   d86e8:	d206      	bcs.n	d86f8 <_Z11str_reversePc+0x20>
		c = *i;
   d86ea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d86ec:	7819      	ldrb	r1, [r3, #0]
   d86ee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d86f2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d86f6:	e7f6      	b.n	d86e6 <_Z11str_reversePc+0xe>
   d86f8:	bd10      	pop	{r4, pc}

000d86fa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d86fa:	b570      	push	{r4, r5, r6, lr}
   d86fc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d86fe:	1e91      	subs	r1, r2, #2
   d8700:	2922      	cmp	r1, #34	; 0x22
   d8702:	d820      	bhi.n	d8746 <ultoa+0x4c>
   d8704:	4625      	mov	r5, r4
   d8706:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d8708:	b910      	cbnz	r0, d8710 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d870a:	4423      	add	r3, r4
            *ptr++ = '0';
   d870c:	2230      	movs	r2, #48	; 0x30
   d870e:	e00e      	b.n	d872e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d8710:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d8714:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d8718:	b2c1      	uxtb	r1, r0
   d871a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d871e:	2809      	cmp	r0, #9
                *ptr += '0';
   d8720:	bf94      	ite	ls
   d8722:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d8724:	3157      	addhi	r1, #87	; 0x57
   d8726:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d872a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d872c:	e7eb      	b.n	d8706 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d872e:	4299      	cmp	r1, r3
   d8730:	d202      	bcs.n	d8738 <ultoa+0x3e>
            *ptr++ = '0';
   d8732:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d8736:	e7fa      	b.n	d872e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d8738:	2300      	movs	r3, #0
	str_reverse(buffer);
   d873a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d873c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d873e:	f7ff ffcb 	bl	d86d8 <_Z11str_reversePc>
	return buffer;
   d8742:	4620      	mov	r0, r4
   d8744:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d8746:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d8748:	bd70      	pop	{r4, r5, r6, pc}

000d874a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d874a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d874c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d874e:	460c      	mov	r4, r1
   d8750:	4615      	mov	r5, r2
	if(a<0){
   d8752:	da0b      	bge.n	d876c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d8754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d8758:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d875c:	bf14      	ite	ne
   d875e:	4258      	negne	r0, r3
   d8760:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d8762:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d8764:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d8766:	462a      	mov	r2, r5
   d8768:	4419      	add	r1, r3
   d876a:	e000      	b.n	d876e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d876c:	2301      	movs	r3, #1
   d876e:	f7ff ffc4 	bl	d86fa <ultoa>
	}
	return buffer;
}
   d8772:	4620      	mov	r0, r4
   d8774:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8778 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8778:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d877a:	4b0c      	ldr	r3, [pc, #48]	; (d87ac <serialEventRun+0x34>)
   d877c:	b133      	cbz	r3, d878c <serialEventRun+0x14>
   d877e:	f7ff ff47 	bl	d8610 <_Z16_fetch_usbserialv>
   d8782:	6803      	ldr	r3, [r0, #0]
   d8784:	691b      	ldr	r3, [r3, #16]
   d8786:	4798      	blx	r3
   d8788:	2800      	cmp	r0, #0
   d878a:	dc09      	bgt.n	d87a0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d878c:	4b08      	ldr	r3, [pc, #32]	; (d87b0 <serialEventRun+0x38>)
   d878e:	b163      	cbz	r3, d87aa <serialEventRun+0x32>
   d8790:	f7ff feb6 	bl	d8500 <_Z22__fetch_global_Serial1v>
   d8794:	6803      	ldr	r3, [r0, #0]
   d8796:	691b      	ldr	r3, [r3, #16]
   d8798:	4798      	blx	r3
   d879a:	2800      	cmp	r0, #0
   d879c:	dc03      	bgt.n	d87a6 <serialEventRun+0x2e>
   d879e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d87a0:	f3af 8000 	nop.w
   d87a4:	e7f2      	b.n	d878c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d87a6:	f3af 8000 	nop.w
   d87aa:	bd08      	pop	{r3, pc}
	...

000d87b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d87b4:	b508      	push	{r3, lr}
	serialEventRun();
   d87b6:	f7ff ffdf 	bl	d8778 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d87ba:	f7fc fdd5 	bl	d5368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d87be:	4b01      	ldr	r3, [pc, #4]	; (d87c4 <_post_loop+0x10>)
   d87c0:	6018      	str	r0, [r3, #0]
   d87c2:	bd08      	pop	{r3, pc}
   d87c4:	2003e710 	.word	0x2003e710

000d87c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d87c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d87ca:	2300      	movs	r3, #0
   d87cc:	9300      	str	r3, [sp, #0]
   d87ce:	461a      	mov	r2, r3
   d87d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d87d4:	f7fc ffbc 	bl	d5750 <system_ctrl_set_result>
}
   d87d8:	b003      	add	sp, #12
   d87da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d87e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d87e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d87e2:	8843      	ldrh	r3, [r0, #2]
   d87e4:	2b0a      	cmp	r3, #10
   d87e6:	d008      	beq.n	d87fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d87e8:	2b50      	cmp	r3, #80	; 0x50
   d87ea:	d109      	bne.n	d8800 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d87ec:	4b09      	ldr	r3, [pc, #36]	; (d8814 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d87ee:	681b      	ldr	r3, [r3, #0]
   d87f0:	b13b      	cbz	r3, d8802 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d87f2:	b003      	add	sp, #12
   d87f4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d87f8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d87fa:	f7ff ffe5 	bl	d87c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d87fe:	e006      	b.n	d880e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8800:	2300      	movs	r3, #0
   d8802:	9300      	str	r3, [sp, #0]
   d8804:	461a      	mov	r2, r3
   d8806:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d880a:	f7fc ffa1 	bl	d5750 <system_ctrl_set_result>
        break;
    }
}
   d880e:	b003      	add	sp, #12
   d8810:	f85d fb04 	ldr.w	pc, [sp], #4
   d8814:	2003e70c 	.word	0x2003e70c

000d8818 <module_user_init_hook>:

void module_user_init_hook()
{
   d8818:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d881a:	f7fc fd8d 	bl	d5338 <HAL_RNG_GetRandomNumber>
   d881e:	4604      	mov	r4, r0
    srand(seed);
   d8820:	f001 f8fe 	bl	d9a20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8824:	4b07      	ldr	r3, [pc, #28]	; (d8844 <module_user_init_hook+0x2c>)
   d8826:	b113      	cbz	r3, d882e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8828:	4620      	mov	r0, r4
   d882a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d882e:	2100      	movs	r1, #0
   d8830:	4804      	ldr	r0, [pc, #16]	; (d8844 <module_user_init_hook+0x2c>)
   d8832:	f7fc ffc1 	bl	d57b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8836:	2100      	movs	r1, #0
   d8838:	4803      	ldr	r0, [pc, #12]	; (d8848 <module_user_init_hook+0x30>)
}
   d883a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d883e:	f7fc bf7d 	b.w	d573c <system_ctrl_set_app_request_handler>
   d8842:	bf00      	nop
   d8844:	00000000 	.word	0x00000000
   d8848:	000d87e1 	.word	0x000d87e1

000d884c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d884c:	b510      	push	{r4, lr}
   d884e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8850:	480f      	ldr	r0, [pc, #60]	; (d8890 <pinAvailable+0x44>)
   d8852:	f7ff f985 	bl	d7b60 <_ZN8SPIClass9isEnabledEv>
   d8856:	b128      	cbz	r0, d8864 <pinAvailable+0x18>
   d8858:	f1a4 030b 	sub.w	r3, r4, #11
   d885c:	2b02      	cmp	r3, #2
   d885e:	d801      	bhi.n	d8864 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8860:	2000      	movs	r0, #0
   d8862:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8864:	f000 f85a 	bl	d891c <_Z19__fetch_global_Wirev>
   d8868:	f7fe fc6c 	bl	d7144 <_ZN7TwoWire9isEnabledEv>
   d886c:	b108      	cbz	r0, d8872 <pinAvailable+0x26>
   d886e:	2c01      	cmp	r4, #1
   d8870:	d9f6      	bls.n	d8860 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8872:	f7ff fe45 	bl	d8500 <_Z22__fetch_global_Serial1v>
   d8876:	f7ff fe3f 	bl	d84f8 <_ZN11USARTSerial9isEnabledEv>
   d887a:	b118      	cbz	r0, d8884 <pinAvailable+0x38>
   d887c:	f1a4 0309 	sub.w	r3, r4, #9
   d8880:	2b01      	cmp	r3, #1
   d8882:	d9ed      	bls.n	d8860 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8884:	2c23      	cmp	r4, #35	; 0x23
   d8886:	bf8c      	ite	hi
   d8888:	2000      	movhi	r0, #0
   d888a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d888c:	bd10      	pop	{r4, pc}
   d888e:	bf00      	nop
   d8890:	2003e730 	.word	0x2003e730

000d8894 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8894:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8896:	b538      	push	{r3, r4, r5, lr}
   d8898:	4604      	mov	r4, r0
   d889a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d889c:	d80a      	bhi.n	d88b4 <pinMode+0x20>
   d889e:	29ff      	cmp	r1, #255	; 0xff
   d88a0:	d008      	beq.n	d88b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d88a2:	f7ff ffd3 	bl	d884c <pinAvailable>
   d88a6:	b128      	cbz	r0, d88b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88a8:	4629      	mov	r1, r5
   d88aa:	4620      	mov	r0, r4
}
   d88ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88b0:	f7fc bd72 	b.w	d5398 <HAL_Pin_Mode>
   d88b4:	bd38      	pop	{r3, r4, r5, pc}

000d88b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d88b6:	b538      	push	{r3, r4, r5, lr}
   d88b8:	4604      	mov	r4, r0
   d88ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d88bc:	f7fc fd74 	bl	d53a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d88c0:	28ff      	cmp	r0, #255	; 0xff
   d88c2:	d010      	beq.n	d88e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d88c4:	2806      	cmp	r0, #6
   d88c6:	d804      	bhi.n	d88d2 <digitalWrite+0x1c>
   d88c8:	234d      	movs	r3, #77	; 0x4d
   d88ca:	fa23 f000 	lsr.w	r0, r3, r0
   d88ce:	07c3      	lsls	r3, r0, #31
   d88d0:	d409      	bmi.n	d88e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d88d2:	4620      	mov	r0, r4
   d88d4:	f7ff ffba 	bl	d884c <pinAvailable>
   d88d8:	b128      	cbz	r0, d88e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d88da:	4629      	mov	r1, r5
   d88dc:	4620      	mov	r0, r4
}
   d88de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d88e2:	f7fc bd69 	b.w	d53b8 <HAL_GPIO_Write>
   d88e6:	bd38      	pop	{r3, r4, r5, pc}

000d88e8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d88e8:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d88ea:	b510      	push	{r4, lr}
   d88ec:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d88ee:	bf9c      	itt	ls
   d88f0:	340e      	addls	r4, #14
   d88f2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d88f4:	4620      	mov	r0, r4
   d88f6:	f7ff ffa9 	bl	d884c <pinAvailable>
   d88fa:	b150      	cbz	r0, d8912 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d88fc:	2103      	movs	r1, #3
   d88fe:	4620      	mov	r0, r4
   d8900:	f7fc fd42 	bl	d5388 <HAL_Validate_Pin_Function>
   d8904:	2803      	cmp	r0, #3
   d8906:	d104      	bne.n	d8912 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8908:	4620      	mov	r0, r4
}
   d890a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d890e:	f7fc bd6b 	b.w	d53e8 <HAL_ADC_Read>
}
   d8912:	2000      	movs	r0, #0
   d8914:	bd10      	pop	{r4, pc}

000d8916 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d8916:	f7fc bd6f 	b.w	d53f8 <HAL_Pulse_In>
	...

000d891c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d891c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d891e:	4d0b      	ldr	r5, [pc, #44]	; (d894c <_Z19__fetch_global_Wirev+0x30>)
   d8920:	6829      	ldr	r1, [r5, #0]
   d8922:	f011 0401 	ands.w	r4, r1, #1
   d8926:	d10f      	bne.n	d8948 <_Z19__fetch_global_Wirev+0x2c>
   d8928:	4628      	mov	r0, r5
   d892a:	f7fb fbbe 	bl	d40aa <__cxa_guard_acquire>
   d892e:	b158      	cbz	r0, d8948 <_Z19__fetch_global_Wirev+0x2c>
   d8930:	4621      	mov	r1, r4
   d8932:	4807      	ldr	r0, [pc, #28]	; (d8950 <_Z19__fetch_global_Wirev+0x34>)
   d8934:	f7fe fbf4 	bl	d7120 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8938:	4628      	mov	r0, r5
   d893a:	f7fb fbbb 	bl	d40b4 <__cxa_guard_release>
   d893e:	4a05      	ldr	r2, [pc, #20]	; (d8954 <_Z19__fetch_global_Wirev+0x38>)
   d8940:	4905      	ldr	r1, [pc, #20]	; (d8958 <_Z19__fetch_global_Wirev+0x3c>)
   d8942:	4803      	ldr	r0, [pc, #12]	; (d8950 <_Z19__fetch_global_Wirev+0x34>)
   d8944:	f000 f82c 	bl	d89a0 <__aeabi_atexit>
	return wire;
}
   d8948:	4801      	ldr	r0, [pc, #4]	; (d8950 <_Z19__fetch_global_Wirev+0x34>)
   d894a:	bd38      	pop	{r3, r4, r5, pc}
   d894c:	2003e718 	.word	0x2003e718
   d8950:	2003e71c 	.word	0x2003e71c
   d8954:	2003e330 	.word	0x2003e330
   d8958:	000d70c9 	.word	0x000d70c9

000d895c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d895c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d895e:	4c0c      	ldr	r4, [pc, #48]	; (d8990 <_GLOBAL__sub_I_SPI+0x34>)
   d8960:	4e0c      	ldr	r6, [pc, #48]	; (d8994 <_GLOBAL__sub_I_SPI+0x38>)
   d8962:	4d0d      	ldr	r5, [pc, #52]	; (d8998 <_GLOBAL__sub_I_SPI+0x3c>)
   d8964:	2100      	movs	r1, #0
   d8966:	4620      	mov	r0, r4
   d8968:	f7ff f8e6 	bl	d7b38 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d896c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d896e:	4c0b      	ldr	r4, [pc, #44]	; (d899c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8970:	4632      	mov	r2, r6
   d8972:	4629      	mov	r1, r5
   d8974:	f000 f814 	bl	d89a0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8978:	2101      	movs	r1, #1
   d897a:	4620      	mov	r0, r4
   d897c:	f7ff f8dc 	bl	d7b38 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8980:	4632      	mov	r2, r6
   d8982:	4629      	mov	r1, r5
   d8984:	4620      	mov	r0, r4
   d8986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d898a:	f000 b809 	b.w	d89a0 <__aeabi_atexit>
   d898e:	bf00      	nop
   d8990:	2003e730 	.word	0x2003e730
   d8994:	2003e330 	.word	0x2003e330
   d8998:	000d7b29 	.word	0x000d7b29
   d899c:	2003e740 	.word	0x2003e740

000d89a0 <__aeabi_atexit>:
   d89a0:	460b      	mov	r3, r1
   d89a2:	4601      	mov	r1, r0
   d89a4:	4618      	mov	r0, r3
   d89a6:	f000 bfe1 	b.w	d996c <__cxa_atexit>

000d89aa <_ZdlPvj>:
   d89aa:	f7fb bb7a 	b.w	d40a2 <_ZdlPv>
	...

000d89b0 <_ZSt15get_new_handlerv>:
   d89b0:	4b02      	ldr	r3, [pc, #8]	; (d89bc <_ZSt15get_new_handlerv+0xc>)
   d89b2:	6818      	ldr	r0, [r3, #0]
   d89b4:	f3bf 8f5f 	dmb	sy
   d89b8:	4770      	bx	lr
   d89ba:	bf00      	nop
   d89bc:	2003e750 	.word	0x2003e750

000d89c0 <_ZnwjRKSt9nothrow_t>:
   d89c0:	b510      	push	{r4, lr}
   d89c2:	2800      	cmp	r0, #0
   d89c4:	bf14      	ite	ne
   d89c6:	4604      	movne	r4, r0
   d89c8:	2401      	moveq	r4, #1
   d89ca:	4620      	mov	r0, r4
   d89cc:	f7fc ff54 	bl	d5878 <malloc>
   d89d0:	b920      	cbnz	r0, d89dc <_ZnwjRKSt9nothrow_t+0x1c>
   d89d2:	f7ff ffed 	bl	d89b0 <_ZSt15get_new_handlerv>
   d89d6:	b108      	cbz	r0, d89dc <_ZnwjRKSt9nothrow_t+0x1c>
   d89d8:	4780      	blx	r0
   d89da:	e7f6      	b.n	d89ca <_ZnwjRKSt9nothrow_t+0xa>
   d89dc:	bd10      	pop	{r4, pc}

000d89de <_ZnajRKSt9nothrow_t>:
   d89de:	f7ff bfef 	b.w	d89c0 <_ZnwjRKSt9nothrow_t>

000d89e2 <_ZSt25__throw_bad_function_callv>:
   d89e2:	b508      	push	{r3, lr}
   d89e4:	f7fc ff68 	bl	d58b8 <abort>

000d89e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d89e8:	4b24      	ldr	r3, [pc, #144]	; (d8a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d89ea:	681a      	ldr	r2, [r3, #0]
   d89ec:	07d0      	lsls	r0, r2, #31
   d89ee:	bf5c      	itt	pl
   d89f0:	2201      	movpl	r2, #1
   d89f2:	601a      	strpl	r2, [r3, #0]
   d89f4:	4b22      	ldr	r3, [pc, #136]	; (d8a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d89f6:	681a      	ldr	r2, [r3, #0]
   d89f8:	07d1      	lsls	r1, r2, #31
   d89fa:	bf5c      	itt	pl
   d89fc:	2201      	movpl	r2, #1
   d89fe:	601a      	strpl	r2, [r3, #0]
   d8a00:	4b20      	ldr	r3, [pc, #128]	; (d8a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8a02:	681a      	ldr	r2, [r3, #0]
   d8a04:	07d2      	lsls	r2, r2, #31
   d8a06:	bf5c      	itt	pl
   d8a08:	2201      	movpl	r2, #1
   d8a0a:	601a      	strpl	r2, [r3, #0]
   d8a0c:	4b1e      	ldr	r3, [pc, #120]	; (d8a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8a0e:	681a      	ldr	r2, [r3, #0]
   d8a10:	07d0      	lsls	r0, r2, #31
   d8a12:	bf5c      	itt	pl
   d8a14:	2201      	movpl	r2, #1
   d8a16:	601a      	strpl	r2, [r3, #0]
   d8a18:	4b1c      	ldr	r3, [pc, #112]	; (d8a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8a1a:	681a      	ldr	r2, [r3, #0]
   d8a1c:	07d1      	lsls	r1, r2, #31
   d8a1e:	bf5c      	itt	pl
   d8a20:	2201      	movpl	r2, #1
   d8a22:	601a      	strpl	r2, [r3, #0]
   d8a24:	4b1a      	ldr	r3, [pc, #104]	; (d8a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8a26:	681a      	ldr	r2, [r3, #0]
   d8a28:	07d2      	lsls	r2, r2, #31
   d8a2a:	bf5c      	itt	pl
   d8a2c:	2201      	movpl	r2, #1
   d8a2e:	601a      	strpl	r2, [r3, #0]
   d8a30:	4b18      	ldr	r3, [pc, #96]	; (d8a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8a32:	681a      	ldr	r2, [r3, #0]
   d8a34:	07d0      	lsls	r0, r2, #31
   d8a36:	bf5c      	itt	pl
   d8a38:	2201      	movpl	r2, #1
   d8a3a:	601a      	strpl	r2, [r3, #0]
   d8a3c:	4b16      	ldr	r3, [pc, #88]	; (d8a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8a3e:	681a      	ldr	r2, [r3, #0]
   d8a40:	07d1      	lsls	r1, r2, #31
   d8a42:	bf5c      	itt	pl
   d8a44:	2201      	movpl	r2, #1
   d8a46:	601a      	strpl	r2, [r3, #0]
   d8a48:	4b14      	ldr	r3, [pc, #80]	; (d8a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8a4a:	681a      	ldr	r2, [r3, #0]
   d8a4c:	07d2      	lsls	r2, r2, #31
   d8a4e:	bf5c      	itt	pl
   d8a50:	2201      	movpl	r2, #1
   d8a52:	601a      	strpl	r2, [r3, #0]
   d8a54:	4b12      	ldr	r3, [pc, #72]	; (d8aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8a56:	681a      	ldr	r2, [r3, #0]
   d8a58:	07d0      	lsls	r0, r2, #31
   d8a5a:	bf5c      	itt	pl
   d8a5c:	2201      	movpl	r2, #1
   d8a5e:	601a      	strpl	r2, [r3, #0]
   d8a60:	4b10      	ldr	r3, [pc, #64]	; (d8aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8a62:	681a      	ldr	r2, [r3, #0]
   d8a64:	07d1      	lsls	r1, r2, #31
   d8a66:	bf5c      	itt	pl
   d8a68:	2201      	movpl	r2, #1
   d8a6a:	601a      	strpl	r2, [r3, #0]
   d8a6c:	4b0e      	ldr	r3, [pc, #56]	; (d8aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d2      	lsls	r2, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4770      	bx	lr
   d8a7a:	bf00      	nop
   d8a7c:	2003e780 	.word	0x2003e780
   d8a80:	2003e77c 	.word	0x2003e77c
   d8a84:	2003e778 	.word	0x2003e778
   d8a88:	2003e774 	.word	0x2003e774
   d8a8c:	2003e770 	.word	0x2003e770
   d8a90:	2003e76c 	.word	0x2003e76c
   d8a94:	2003e768 	.word	0x2003e768
   d8a98:	2003e764 	.word	0x2003e764
   d8a9c:	2003e760 	.word	0x2003e760
   d8aa0:	2003e75c 	.word	0x2003e75c
   d8aa4:	2003e758 	.word	0x2003e758
   d8aa8:	2003e754 	.word	0x2003e754

000d8aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8aac:	4b18      	ldr	r3, [pc, #96]	; (d8b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8aae:	681a      	ldr	r2, [r3, #0]
   d8ab0:	07d1      	lsls	r1, r2, #31
   d8ab2:	bf5c      	itt	pl
   d8ab4:	2201      	movpl	r2, #1
   d8ab6:	601a      	strpl	r2, [r3, #0]
   d8ab8:	4b16      	ldr	r3, [pc, #88]	; (d8b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8aba:	681a      	ldr	r2, [r3, #0]
   d8abc:	07d2      	lsls	r2, r2, #31
   d8abe:	bf5c      	itt	pl
   d8ac0:	2201      	movpl	r2, #1
   d8ac2:	601a      	strpl	r2, [r3, #0]
   d8ac4:	4b14      	ldr	r3, [pc, #80]	; (d8b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8ac6:	681a      	ldr	r2, [r3, #0]
   d8ac8:	07d0      	lsls	r0, r2, #31
   d8aca:	bf5c      	itt	pl
   d8acc:	2201      	movpl	r2, #1
   d8ace:	601a      	strpl	r2, [r3, #0]
   d8ad0:	4b12      	ldr	r3, [pc, #72]	; (d8b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8ad2:	681a      	ldr	r2, [r3, #0]
   d8ad4:	07d1      	lsls	r1, r2, #31
   d8ad6:	bf5c      	itt	pl
   d8ad8:	2201      	movpl	r2, #1
   d8ada:	601a      	strpl	r2, [r3, #0]
   d8adc:	4b10      	ldr	r3, [pc, #64]	; (d8b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8ade:	681a      	ldr	r2, [r3, #0]
   d8ae0:	07d2      	lsls	r2, r2, #31
   d8ae2:	bf5c      	itt	pl
   d8ae4:	2201      	movpl	r2, #1
   d8ae6:	601a      	strpl	r2, [r3, #0]
   d8ae8:	4b0e      	ldr	r3, [pc, #56]	; (d8b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8aea:	681a      	ldr	r2, [r3, #0]
   d8aec:	07d0      	lsls	r0, r2, #31
   d8aee:	bf5c      	itt	pl
   d8af0:	2201      	movpl	r2, #1
   d8af2:	601a      	strpl	r2, [r3, #0]
   d8af4:	4b0c      	ldr	r3, [pc, #48]	; (d8b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8af6:	681a      	ldr	r2, [r3, #0]
   d8af8:	07d1      	lsls	r1, r2, #31
   d8afa:	bf5c      	itt	pl
   d8afc:	2201      	movpl	r2, #1
   d8afe:	601a      	strpl	r2, [r3, #0]
   d8b00:	4b0a      	ldr	r3, [pc, #40]	; (d8b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8b02:	681a      	ldr	r2, [r3, #0]
   d8b04:	07d2      	lsls	r2, r2, #31
   d8b06:	bf5c      	itt	pl
   d8b08:	2201      	movpl	r2, #1
   d8b0a:	601a      	strpl	r2, [r3, #0]
   d8b0c:	4770      	bx	lr
   d8b0e:	bf00      	nop
   d8b10:	2003e7a0 	.word	0x2003e7a0
   d8b14:	2003e79c 	.word	0x2003e79c
   d8b18:	2003e798 	.word	0x2003e798
   d8b1c:	2003e794 	.word	0x2003e794
   d8b20:	2003e790 	.word	0x2003e790
   d8b24:	2003e78c 	.word	0x2003e78c
   d8b28:	2003e788 	.word	0x2003e788
   d8b2c:	2003e784 	.word	0x2003e784

000d8b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8b30:	4b18      	ldr	r3, [pc, #96]	; (d8b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8b32:	681a      	ldr	r2, [r3, #0]
   d8b34:	07d1      	lsls	r1, r2, #31
   d8b36:	bf5c      	itt	pl
   d8b38:	2201      	movpl	r2, #1
   d8b3a:	601a      	strpl	r2, [r3, #0]
   d8b3c:	4b16      	ldr	r3, [pc, #88]	; (d8b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8b3e:	681a      	ldr	r2, [r3, #0]
   d8b40:	07d2      	lsls	r2, r2, #31
   d8b42:	bf5c      	itt	pl
   d8b44:	2201      	movpl	r2, #1
   d8b46:	601a      	strpl	r2, [r3, #0]
   d8b48:	4b14      	ldr	r3, [pc, #80]	; (d8b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8b4a:	681a      	ldr	r2, [r3, #0]
   d8b4c:	07d0      	lsls	r0, r2, #31
   d8b4e:	bf5c      	itt	pl
   d8b50:	2201      	movpl	r2, #1
   d8b52:	601a      	strpl	r2, [r3, #0]
   d8b54:	4b12      	ldr	r3, [pc, #72]	; (d8ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8b56:	681a      	ldr	r2, [r3, #0]
   d8b58:	07d1      	lsls	r1, r2, #31
   d8b5a:	bf5c      	itt	pl
   d8b5c:	2201      	movpl	r2, #1
   d8b5e:	601a      	strpl	r2, [r3, #0]
   d8b60:	4b10      	ldr	r3, [pc, #64]	; (d8ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8b62:	681a      	ldr	r2, [r3, #0]
   d8b64:	07d2      	lsls	r2, r2, #31
   d8b66:	bf5c      	itt	pl
   d8b68:	2201      	movpl	r2, #1
   d8b6a:	601a      	strpl	r2, [r3, #0]
   d8b6c:	4b0e      	ldr	r3, [pc, #56]	; (d8ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8b6e:	681a      	ldr	r2, [r3, #0]
   d8b70:	07d0      	lsls	r0, r2, #31
   d8b72:	bf5c      	itt	pl
   d8b74:	2201      	movpl	r2, #1
   d8b76:	601a      	strpl	r2, [r3, #0]
   d8b78:	4b0c      	ldr	r3, [pc, #48]	; (d8bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8b7a:	681a      	ldr	r2, [r3, #0]
   d8b7c:	07d1      	lsls	r1, r2, #31
   d8b7e:	bf5c      	itt	pl
   d8b80:	2201      	movpl	r2, #1
   d8b82:	601a      	strpl	r2, [r3, #0]
   d8b84:	4b0a      	ldr	r3, [pc, #40]	; (d8bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8b86:	681a      	ldr	r2, [r3, #0]
   d8b88:	07d2      	lsls	r2, r2, #31
   d8b8a:	bf5c      	itt	pl
   d8b8c:	2201      	movpl	r2, #1
   d8b8e:	601a      	strpl	r2, [r3, #0]
   d8b90:	4770      	bx	lr
   d8b92:	bf00      	nop
   d8b94:	2003e7c0 	.word	0x2003e7c0
   d8b98:	2003e7bc 	.word	0x2003e7bc
   d8b9c:	2003e7b8 	.word	0x2003e7b8
   d8ba0:	2003e7b4 	.word	0x2003e7b4
   d8ba4:	2003e7b0 	.word	0x2003e7b0
   d8ba8:	2003e7ac 	.word	0x2003e7ac
   d8bac:	2003e7a8 	.word	0x2003e7a8
   d8bb0:	2003e7a4 	.word	0x2003e7a4

000d8bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8bb4:	4b24      	ldr	r3, [pc, #144]	; (d8c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8bb6:	681a      	ldr	r2, [r3, #0]
   d8bb8:	07d0      	lsls	r0, r2, #31
   d8bba:	bf5c      	itt	pl
   d8bbc:	2201      	movpl	r2, #1
   d8bbe:	601a      	strpl	r2, [r3, #0]
   d8bc0:	4b22      	ldr	r3, [pc, #136]	; (d8c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8bc2:	681a      	ldr	r2, [r3, #0]
   d8bc4:	07d1      	lsls	r1, r2, #31
   d8bc6:	bf5c      	itt	pl
   d8bc8:	2201      	movpl	r2, #1
   d8bca:	601a      	strpl	r2, [r3, #0]
   d8bcc:	4b20      	ldr	r3, [pc, #128]	; (d8c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8bce:	681a      	ldr	r2, [r3, #0]
   d8bd0:	07d2      	lsls	r2, r2, #31
   d8bd2:	bf5c      	itt	pl
   d8bd4:	2201      	movpl	r2, #1
   d8bd6:	601a      	strpl	r2, [r3, #0]
   d8bd8:	4b1e      	ldr	r3, [pc, #120]	; (d8c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8bda:	681a      	ldr	r2, [r3, #0]
   d8bdc:	07d0      	lsls	r0, r2, #31
   d8bde:	bf5c      	itt	pl
   d8be0:	2201      	movpl	r2, #1
   d8be2:	601a      	strpl	r2, [r3, #0]
   d8be4:	4b1c      	ldr	r3, [pc, #112]	; (d8c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8be6:	681a      	ldr	r2, [r3, #0]
   d8be8:	07d1      	lsls	r1, r2, #31
   d8bea:	bf5c      	itt	pl
   d8bec:	2201      	movpl	r2, #1
   d8bee:	601a      	strpl	r2, [r3, #0]
   d8bf0:	4b1a      	ldr	r3, [pc, #104]	; (d8c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8bf2:	681a      	ldr	r2, [r3, #0]
   d8bf4:	07d2      	lsls	r2, r2, #31
   d8bf6:	bf5c      	itt	pl
   d8bf8:	2201      	movpl	r2, #1
   d8bfa:	601a      	strpl	r2, [r3, #0]
   d8bfc:	4b18      	ldr	r3, [pc, #96]	; (d8c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8bfe:	681a      	ldr	r2, [r3, #0]
   d8c00:	07d0      	lsls	r0, r2, #31
   d8c02:	bf5c      	itt	pl
   d8c04:	2201      	movpl	r2, #1
   d8c06:	601a      	strpl	r2, [r3, #0]
   d8c08:	4b16      	ldr	r3, [pc, #88]	; (d8c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8c0a:	681a      	ldr	r2, [r3, #0]
   d8c0c:	07d1      	lsls	r1, r2, #31
   d8c0e:	bf5c      	itt	pl
   d8c10:	2201      	movpl	r2, #1
   d8c12:	601a      	strpl	r2, [r3, #0]
   d8c14:	4b14      	ldr	r3, [pc, #80]	; (d8c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8c16:	681a      	ldr	r2, [r3, #0]
   d8c18:	07d2      	lsls	r2, r2, #31
   d8c1a:	bf5c      	itt	pl
   d8c1c:	2201      	movpl	r2, #1
   d8c1e:	601a      	strpl	r2, [r3, #0]
   d8c20:	4b12      	ldr	r3, [pc, #72]	; (d8c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8c22:	681a      	ldr	r2, [r3, #0]
   d8c24:	07d0      	lsls	r0, r2, #31
   d8c26:	bf5c      	itt	pl
   d8c28:	2201      	movpl	r2, #1
   d8c2a:	601a      	strpl	r2, [r3, #0]
   d8c2c:	4b10      	ldr	r3, [pc, #64]	; (d8c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8c2e:	681a      	ldr	r2, [r3, #0]
   d8c30:	07d1      	lsls	r1, r2, #31
   d8c32:	bf5c      	itt	pl
   d8c34:	2201      	movpl	r2, #1
   d8c36:	601a      	strpl	r2, [r3, #0]
   d8c38:	4b0e      	ldr	r3, [pc, #56]	; (d8c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8c3a:	681a      	ldr	r2, [r3, #0]
   d8c3c:	07d2      	lsls	r2, r2, #31
   d8c3e:	bf5c      	itt	pl
   d8c40:	2201      	movpl	r2, #1
   d8c42:	601a      	strpl	r2, [r3, #0]
   d8c44:	4770      	bx	lr
   d8c46:	bf00      	nop
   d8c48:	2003e7f0 	.word	0x2003e7f0
   d8c4c:	2003e7ec 	.word	0x2003e7ec
   d8c50:	2003e7e8 	.word	0x2003e7e8
   d8c54:	2003e7e4 	.word	0x2003e7e4
   d8c58:	2003e7e0 	.word	0x2003e7e0
   d8c5c:	2003e7dc 	.word	0x2003e7dc
   d8c60:	2003e7d8 	.word	0x2003e7d8
   d8c64:	2003e7d4 	.word	0x2003e7d4
   d8c68:	2003e7d0 	.word	0x2003e7d0
   d8c6c:	2003e7cc 	.word	0x2003e7cc
   d8c70:	2003e7c8 	.word	0x2003e7c8
   d8c74:	2003e7c4 	.word	0x2003e7c4

000d8c78 <__aeabi_drsub>:
   d8c78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8c7c:	e002      	b.n	d8c84 <__adddf3>
   d8c7e:	bf00      	nop

000d8c80 <__aeabi_dsub>:
   d8c80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8c84 <__adddf3>:
   d8c84:	b530      	push	{r4, r5, lr}
   d8c86:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8c8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8c8e:	ea94 0f05 	teq	r4, r5
   d8c92:	bf08      	it	eq
   d8c94:	ea90 0f02 	teqeq	r0, r2
   d8c98:	bf1f      	itttt	ne
   d8c9a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8c9e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8ca2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8ca6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8caa:	f000 80e2 	beq.w	d8e72 <__adddf3+0x1ee>
   d8cae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8cb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8cb6:	bfb8      	it	lt
   d8cb8:	426d      	neglt	r5, r5
   d8cba:	dd0c      	ble.n	d8cd6 <__adddf3+0x52>
   d8cbc:	442c      	add	r4, r5
   d8cbe:	ea80 0202 	eor.w	r2, r0, r2
   d8cc2:	ea81 0303 	eor.w	r3, r1, r3
   d8cc6:	ea82 0000 	eor.w	r0, r2, r0
   d8cca:	ea83 0101 	eor.w	r1, r3, r1
   d8cce:	ea80 0202 	eor.w	r2, r0, r2
   d8cd2:	ea81 0303 	eor.w	r3, r1, r3
   d8cd6:	2d36      	cmp	r5, #54	; 0x36
   d8cd8:	bf88      	it	hi
   d8cda:	bd30      	pophi	{r4, r5, pc}
   d8cdc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ce4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8ce8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8cec:	d002      	beq.n	d8cf4 <__adddf3+0x70>
   d8cee:	4240      	negs	r0, r0
   d8cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8cf4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8cf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cfc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8d00:	d002      	beq.n	d8d08 <__adddf3+0x84>
   d8d02:	4252      	negs	r2, r2
   d8d04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8d08:	ea94 0f05 	teq	r4, r5
   d8d0c:	f000 80a7 	beq.w	d8e5e <__adddf3+0x1da>
   d8d10:	f1a4 0401 	sub.w	r4, r4, #1
   d8d14:	f1d5 0e20 	rsbs	lr, r5, #32
   d8d18:	db0d      	blt.n	d8d36 <__adddf3+0xb2>
   d8d1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8d1e:	fa22 f205 	lsr.w	r2, r2, r5
   d8d22:	1880      	adds	r0, r0, r2
   d8d24:	f141 0100 	adc.w	r1, r1, #0
   d8d28:	fa03 f20e 	lsl.w	r2, r3, lr
   d8d2c:	1880      	adds	r0, r0, r2
   d8d2e:	fa43 f305 	asr.w	r3, r3, r5
   d8d32:	4159      	adcs	r1, r3
   d8d34:	e00e      	b.n	d8d54 <__adddf3+0xd0>
   d8d36:	f1a5 0520 	sub.w	r5, r5, #32
   d8d3a:	f10e 0e20 	add.w	lr, lr, #32
   d8d3e:	2a01      	cmp	r2, #1
   d8d40:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8d44:	bf28      	it	cs
   d8d46:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8d4a:	fa43 f305 	asr.w	r3, r3, r5
   d8d4e:	18c0      	adds	r0, r0, r3
   d8d50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8d54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d58:	d507      	bpl.n	d8d6a <__adddf3+0xe6>
   d8d5a:	f04f 0e00 	mov.w	lr, #0
   d8d5e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8d62:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8d66:	eb6e 0101 	sbc.w	r1, lr, r1
   d8d6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8d6e:	d31b      	bcc.n	d8da8 <__adddf3+0x124>
   d8d70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8d74:	d30c      	bcc.n	d8d90 <__adddf3+0x10c>
   d8d76:	0849      	lsrs	r1, r1, #1
   d8d78:	ea5f 0030 	movs.w	r0, r0, rrx
   d8d7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8d80:	f104 0401 	add.w	r4, r4, #1
   d8d84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8d88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8d8c:	f080 809a 	bcs.w	d8ec4 <__adddf3+0x240>
   d8d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8d94:	bf08      	it	eq
   d8d96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d9a:	f150 0000 	adcs.w	r0, r0, #0
   d8d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8da2:	ea41 0105 	orr.w	r1, r1, r5
   d8da6:	bd30      	pop	{r4, r5, pc}
   d8da8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8dac:	4140      	adcs	r0, r0
   d8dae:	eb41 0101 	adc.w	r1, r1, r1
   d8db2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8db6:	f1a4 0401 	sub.w	r4, r4, #1
   d8dba:	d1e9      	bne.n	d8d90 <__adddf3+0x10c>
   d8dbc:	f091 0f00 	teq	r1, #0
   d8dc0:	bf04      	itt	eq
   d8dc2:	4601      	moveq	r1, r0
   d8dc4:	2000      	moveq	r0, #0
   d8dc6:	fab1 f381 	clz	r3, r1
   d8dca:	bf08      	it	eq
   d8dcc:	3320      	addeq	r3, #32
   d8dce:	f1a3 030b 	sub.w	r3, r3, #11
   d8dd2:	f1b3 0220 	subs.w	r2, r3, #32
   d8dd6:	da0c      	bge.n	d8df2 <__adddf3+0x16e>
   d8dd8:	320c      	adds	r2, #12
   d8dda:	dd08      	ble.n	d8dee <__adddf3+0x16a>
   d8ddc:	f102 0c14 	add.w	ip, r2, #20
   d8de0:	f1c2 020c 	rsb	r2, r2, #12
   d8de4:	fa01 f00c 	lsl.w	r0, r1, ip
   d8de8:	fa21 f102 	lsr.w	r1, r1, r2
   d8dec:	e00c      	b.n	d8e08 <__adddf3+0x184>
   d8dee:	f102 0214 	add.w	r2, r2, #20
   d8df2:	bfd8      	it	le
   d8df4:	f1c2 0c20 	rsble	ip, r2, #32
   d8df8:	fa01 f102 	lsl.w	r1, r1, r2
   d8dfc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8e00:	bfdc      	itt	le
   d8e02:	ea41 010c 	orrle.w	r1, r1, ip
   d8e06:	4090      	lslle	r0, r2
   d8e08:	1ae4      	subs	r4, r4, r3
   d8e0a:	bfa2      	ittt	ge
   d8e0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8e10:	4329      	orrge	r1, r5
   d8e12:	bd30      	popge	{r4, r5, pc}
   d8e14:	ea6f 0404 	mvn.w	r4, r4
   d8e18:	3c1f      	subs	r4, #31
   d8e1a:	da1c      	bge.n	d8e56 <__adddf3+0x1d2>
   d8e1c:	340c      	adds	r4, #12
   d8e1e:	dc0e      	bgt.n	d8e3e <__adddf3+0x1ba>
   d8e20:	f104 0414 	add.w	r4, r4, #20
   d8e24:	f1c4 0220 	rsb	r2, r4, #32
   d8e28:	fa20 f004 	lsr.w	r0, r0, r4
   d8e2c:	fa01 f302 	lsl.w	r3, r1, r2
   d8e30:	ea40 0003 	orr.w	r0, r0, r3
   d8e34:	fa21 f304 	lsr.w	r3, r1, r4
   d8e38:	ea45 0103 	orr.w	r1, r5, r3
   d8e3c:	bd30      	pop	{r4, r5, pc}
   d8e3e:	f1c4 040c 	rsb	r4, r4, #12
   d8e42:	f1c4 0220 	rsb	r2, r4, #32
   d8e46:	fa20 f002 	lsr.w	r0, r0, r2
   d8e4a:	fa01 f304 	lsl.w	r3, r1, r4
   d8e4e:	ea40 0003 	orr.w	r0, r0, r3
   d8e52:	4629      	mov	r1, r5
   d8e54:	bd30      	pop	{r4, r5, pc}
   d8e56:	fa21 f004 	lsr.w	r0, r1, r4
   d8e5a:	4629      	mov	r1, r5
   d8e5c:	bd30      	pop	{r4, r5, pc}
   d8e5e:	f094 0f00 	teq	r4, #0
   d8e62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8e66:	bf06      	itte	eq
   d8e68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8e6c:	3401      	addeq	r4, #1
   d8e6e:	3d01      	subne	r5, #1
   d8e70:	e74e      	b.n	d8d10 <__adddf3+0x8c>
   d8e72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8e76:	bf18      	it	ne
   d8e78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8e7c:	d029      	beq.n	d8ed2 <__adddf3+0x24e>
   d8e7e:	ea94 0f05 	teq	r4, r5
   d8e82:	bf08      	it	eq
   d8e84:	ea90 0f02 	teqeq	r0, r2
   d8e88:	d005      	beq.n	d8e96 <__adddf3+0x212>
   d8e8a:	ea54 0c00 	orrs.w	ip, r4, r0
   d8e8e:	bf04      	itt	eq
   d8e90:	4619      	moveq	r1, r3
   d8e92:	4610      	moveq	r0, r2
   d8e94:	bd30      	pop	{r4, r5, pc}
   d8e96:	ea91 0f03 	teq	r1, r3
   d8e9a:	bf1e      	ittt	ne
   d8e9c:	2100      	movne	r1, #0
   d8e9e:	2000      	movne	r0, #0
   d8ea0:	bd30      	popne	{r4, r5, pc}
   d8ea2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8ea6:	d105      	bne.n	d8eb4 <__adddf3+0x230>
   d8ea8:	0040      	lsls	r0, r0, #1
   d8eaa:	4149      	adcs	r1, r1
   d8eac:	bf28      	it	cs
   d8eae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8eb2:	bd30      	pop	{r4, r5, pc}
   d8eb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8eb8:	bf3c      	itt	cc
   d8eba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8ebe:	bd30      	popcc	{r4, r5, pc}
   d8ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ec4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8ec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ecc:	f04f 0000 	mov.w	r0, #0
   d8ed0:	bd30      	pop	{r4, r5, pc}
   d8ed2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ed6:	bf1a      	itte	ne
   d8ed8:	4619      	movne	r1, r3
   d8eda:	4610      	movne	r0, r2
   d8edc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8ee0:	bf1c      	itt	ne
   d8ee2:	460b      	movne	r3, r1
   d8ee4:	4602      	movne	r2, r0
   d8ee6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8eea:	bf06      	itte	eq
   d8eec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8ef0:	ea91 0f03 	teqeq	r1, r3
   d8ef4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ef8:	bd30      	pop	{r4, r5, pc}
   d8efa:	bf00      	nop

000d8efc <__aeabi_ui2d>:
   d8efc:	f090 0f00 	teq	r0, #0
   d8f00:	bf04      	itt	eq
   d8f02:	2100      	moveq	r1, #0
   d8f04:	4770      	bxeq	lr
   d8f06:	b530      	push	{r4, r5, lr}
   d8f08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f10:	f04f 0500 	mov.w	r5, #0
   d8f14:	f04f 0100 	mov.w	r1, #0
   d8f18:	e750      	b.n	d8dbc <__adddf3+0x138>
   d8f1a:	bf00      	nop

000d8f1c <__aeabi_i2d>:
   d8f1c:	f090 0f00 	teq	r0, #0
   d8f20:	bf04      	itt	eq
   d8f22:	2100      	moveq	r1, #0
   d8f24:	4770      	bxeq	lr
   d8f26:	b530      	push	{r4, r5, lr}
   d8f28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8f34:	bf48      	it	mi
   d8f36:	4240      	negmi	r0, r0
   d8f38:	f04f 0100 	mov.w	r1, #0
   d8f3c:	e73e      	b.n	d8dbc <__adddf3+0x138>
   d8f3e:	bf00      	nop

000d8f40 <__aeabi_f2d>:
   d8f40:	0042      	lsls	r2, r0, #1
   d8f42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8f46:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8f4e:	bf1f      	itttt	ne
   d8f50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8f54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8f5c:	4770      	bxne	lr
   d8f5e:	f092 0f00 	teq	r2, #0
   d8f62:	bf14      	ite	ne
   d8f64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f68:	4770      	bxeq	lr
   d8f6a:	b530      	push	{r4, r5, lr}
   d8f6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f78:	e720      	b.n	d8dbc <__adddf3+0x138>
   d8f7a:	bf00      	nop

000d8f7c <__aeabi_ul2d>:
   d8f7c:	ea50 0201 	orrs.w	r2, r0, r1
   d8f80:	bf08      	it	eq
   d8f82:	4770      	bxeq	lr
   d8f84:	b530      	push	{r4, r5, lr}
   d8f86:	f04f 0500 	mov.w	r5, #0
   d8f8a:	e00a      	b.n	d8fa2 <__aeabi_l2d+0x16>

000d8f8c <__aeabi_l2d>:
   d8f8c:	ea50 0201 	orrs.w	r2, r0, r1
   d8f90:	bf08      	it	eq
   d8f92:	4770      	bxeq	lr
   d8f94:	b530      	push	{r4, r5, lr}
   d8f96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8f9a:	d502      	bpl.n	d8fa2 <__aeabi_l2d+0x16>
   d8f9c:	4240      	negs	r0, r0
   d8f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8fa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8fa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8faa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8fae:	f43f aedc 	beq.w	d8d6a <__adddf3+0xe6>
   d8fb2:	f04f 0203 	mov.w	r2, #3
   d8fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fba:	bf18      	it	ne
   d8fbc:	3203      	addne	r2, #3
   d8fbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fc2:	bf18      	it	ne
   d8fc4:	3203      	addne	r2, #3
   d8fc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8fca:	f1c2 0320 	rsb	r3, r2, #32
   d8fce:	fa00 fc03 	lsl.w	ip, r0, r3
   d8fd2:	fa20 f002 	lsr.w	r0, r0, r2
   d8fd6:	fa01 fe03 	lsl.w	lr, r1, r3
   d8fda:	ea40 000e 	orr.w	r0, r0, lr
   d8fde:	fa21 f102 	lsr.w	r1, r1, r2
   d8fe2:	4414      	add	r4, r2
   d8fe4:	e6c1      	b.n	d8d6a <__adddf3+0xe6>
   d8fe6:	bf00      	nop

000d8fe8 <__aeabi_dmul>:
   d8fe8:	b570      	push	{r4, r5, r6, lr}
   d8fea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8fee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ff2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ff6:	bf1d      	ittte	ne
   d8ff8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ffc:	ea94 0f0c 	teqne	r4, ip
   d9000:	ea95 0f0c 	teqne	r5, ip
   d9004:	f000 f8de 	bleq	d91c4 <__aeabi_dmul+0x1dc>
   d9008:	442c      	add	r4, r5
   d900a:	ea81 0603 	eor.w	r6, r1, r3
   d900e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9012:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9016:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d901a:	bf18      	it	ne
   d901c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9028:	d038      	beq.n	d909c <__aeabi_dmul+0xb4>
   d902a:	fba0 ce02 	umull	ip, lr, r0, r2
   d902e:	f04f 0500 	mov.w	r5, #0
   d9032:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9036:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d903a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d903e:	f04f 0600 	mov.w	r6, #0
   d9042:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9046:	f09c 0f00 	teq	ip, #0
   d904a:	bf18      	it	ne
   d904c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9050:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9054:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9058:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d905c:	d204      	bcs.n	d9068 <__aeabi_dmul+0x80>
   d905e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9062:	416d      	adcs	r5, r5
   d9064:	eb46 0606 	adc.w	r6, r6, r6
   d9068:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d906c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9070:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9074:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9078:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d907c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9080:	bf88      	it	hi
   d9082:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9086:	d81e      	bhi.n	d90c6 <__aeabi_dmul+0xde>
   d9088:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d908c:	bf08      	it	eq
   d908e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9092:	f150 0000 	adcs.w	r0, r0, #0
   d9096:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d909a:	bd70      	pop	{r4, r5, r6, pc}
   d909c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d90a0:	ea46 0101 	orr.w	r1, r6, r1
   d90a4:	ea40 0002 	orr.w	r0, r0, r2
   d90a8:	ea81 0103 	eor.w	r1, r1, r3
   d90ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d90b0:	bfc2      	ittt	gt
   d90b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90ba:	bd70      	popgt	{r4, r5, r6, pc}
   d90bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90c0:	f04f 0e00 	mov.w	lr, #0
   d90c4:	3c01      	subs	r4, #1
   d90c6:	f300 80ab 	bgt.w	d9220 <__aeabi_dmul+0x238>
   d90ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d90ce:	bfde      	ittt	le
   d90d0:	2000      	movle	r0, #0
   d90d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d90d6:	bd70      	pople	{r4, r5, r6, pc}
   d90d8:	f1c4 0400 	rsb	r4, r4, #0
   d90dc:	3c20      	subs	r4, #32
   d90de:	da35      	bge.n	d914c <__aeabi_dmul+0x164>
   d90e0:	340c      	adds	r4, #12
   d90e2:	dc1b      	bgt.n	d911c <__aeabi_dmul+0x134>
   d90e4:	f104 0414 	add.w	r4, r4, #20
   d90e8:	f1c4 0520 	rsb	r5, r4, #32
   d90ec:	fa00 f305 	lsl.w	r3, r0, r5
   d90f0:	fa20 f004 	lsr.w	r0, r0, r4
   d90f4:	fa01 f205 	lsl.w	r2, r1, r5
   d90f8:	ea40 0002 	orr.w	r0, r0, r2
   d90fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9104:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9108:	fa21 f604 	lsr.w	r6, r1, r4
   d910c:	eb42 0106 	adc.w	r1, r2, r6
   d9110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9114:	bf08      	it	eq
   d9116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d911a:	bd70      	pop	{r4, r5, r6, pc}
   d911c:	f1c4 040c 	rsb	r4, r4, #12
   d9120:	f1c4 0520 	rsb	r5, r4, #32
   d9124:	fa00 f304 	lsl.w	r3, r0, r4
   d9128:	fa20 f005 	lsr.w	r0, r0, r5
   d912c:	fa01 f204 	lsl.w	r2, r1, r4
   d9130:	ea40 0002 	orr.w	r0, r0, r2
   d9134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d913c:	f141 0100 	adc.w	r1, r1, #0
   d9140:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9144:	bf08      	it	eq
   d9146:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d914a:	bd70      	pop	{r4, r5, r6, pc}
   d914c:	f1c4 0520 	rsb	r5, r4, #32
   d9150:	fa00 f205 	lsl.w	r2, r0, r5
   d9154:	ea4e 0e02 	orr.w	lr, lr, r2
   d9158:	fa20 f304 	lsr.w	r3, r0, r4
   d915c:	fa01 f205 	lsl.w	r2, r1, r5
   d9160:	ea43 0302 	orr.w	r3, r3, r2
   d9164:	fa21 f004 	lsr.w	r0, r1, r4
   d9168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d916c:	fa21 f204 	lsr.w	r2, r1, r4
   d9170:	ea20 0002 	bic.w	r0, r0, r2
   d9174:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d917c:	bf08      	it	eq
   d917e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9182:	bd70      	pop	{r4, r5, r6, pc}
   d9184:	f094 0f00 	teq	r4, #0
   d9188:	d10f      	bne.n	d91aa <__aeabi_dmul+0x1c2>
   d918a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d918e:	0040      	lsls	r0, r0, #1
   d9190:	eb41 0101 	adc.w	r1, r1, r1
   d9194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9198:	bf08      	it	eq
   d919a:	3c01      	subeq	r4, #1
   d919c:	d0f7      	beq.n	d918e <__aeabi_dmul+0x1a6>
   d919e:	ea41 0106 	orr.w	r1, r1, r6
   d91a2:	f095 0f00 	teq	r5, #0
   d91a6:	bf18      	it	ne
   d91a8:	4770      	bxne	lr
   d91aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d91ae:	0052      	lsls	r2, r2, #1
   d91b0:	eb43 0303 	adc.w	r3, r3, r3
   d91b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d91b8:	bf08      	it	eq
   d91ba:	3d01      	subeq	r5, #1
   d91bc:	d0f7      	beq.n	d91ae <__aeabi_dmul+0x1c6>
   d91be:	ea43 0306 	orr.w	r3, r3, r6
   d91c2:	4770      	bx	lr
   d91c4:	ea94 0f0c 	teq	r4, ip
   d91c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d91cc:	bf18      	it	ne
   d91ce:	ea95 0f0c 	teqne	r5, ip
   d91d2:	d00c      	beq.n	d91ee <__aeabi_dmul+0x206>
   d91d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91d8:	bf18      	it	ne
   d91da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91de:	d1d1      	bne.n	d9184 <__aeabi_dmul+0x19c>
   d91e0:	ea81 0103 	eor.w	r1, r1, r3
   d91e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d91e8:	f04f 0000 	mov.w	r0, #0
   d91ec:	bd70      	pop	{r4, r5, r6, pc}
   d91ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91f2:	bf06      	itte	eq
   d91f4:	4610      	moveq	r0, r2
   d91f6:	4619      	moveq	r1, r3
   d91f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91fc:	d019      	beq.n	d9232 <__aeabi_dmul+0x24a>
   d91fe:	ea94 0f0c 	teq	r4, ip
   d9202:	d102      	bne.n	d920a <__aeabi_dmul+0x222>
   d9204:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9208:	d113      	bne.n	d9232 <__aeabi_dmul+0x24a>
   d920a:	ea95 0f0c 	teq	r5, ip
   d920e:	d105      	bne.n	d921c <__aeabi_dmul+0x234>
   d9210:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9214:	bf1c      	itt	ne
   d9216:	4610      	movne	r0, r2
   d9218:	4619      	movne	r1, r3
   d921a:	d10a      	bne.n	d9232 <__aeabi_dmul+0x24a>
   d921c:	ea81 0103 	eor.w	r1, r1, r3
   d9220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9224:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9228:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d922c:	f04f 0000 	mov.w	r0, #0
   d9230:	bd70      	pop	{r4, r5, r6, pc}
   d9232:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9236:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d923a:	bd70      	pop	{r4, r5, r6, pc}

000d923c <__aeabi_ddiv>:
   d923c:	b570      	push	{r4, r5, r6, lr}
   d923e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9242:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9246:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d924a:	bf1d      	ittte	ne
   d924c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9250:	ea94 0f0c 	teqne	r4, ip
   d9254:	ea95 0f0c 	teqne	r5, ip
   d9258:	f000 f8a7 	bleq	d93aa <__aeabi_ddiv+0x16e>
   d925c:	eba4 0405 	sub.w	r4, r4, r5
   d9260:	ea81 0e03 	eor.w	lr, r1, r3
   d9264:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9268:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d926c:	f000 8088 	beq.w	d9380 <__aeabi_ddiv+0x144>
   d9270:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9274:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9278:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d927c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9280:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9284:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9288:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d928c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9290:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9294:	429d      	cmp	r5, r3
   d9296:	bf08      	it	eq
   d9298:	4296      	cmpeq	r6, r2
   d929a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d929e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d92a2:	d202      	bcs.n	d92aa <__aeabi_ddiv+0x6e>
   d92a4:	085b      	lsrs	r3, r3, #1
   d92a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d92aa:	1ab6      	subs	r6, r6, r2
   d92ac:	eb65 0503 	sbc.w	r5, r5, r3
   d92b0:	085b      	lsrs	r3, r3, #1
   d92b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d92b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d92ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d92be:	ebb6 0e02 	subs.w	lr, r6, r2
   d92c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92c6:	bf22      	ittt	cs
   d92c8:	1ab6      	subcs	r6, r6, r2
   d92ca:	4675      	movcs	r5, lr
   d92cc:	ea40 000c 	orrcs.w	r0, r0, ip
   d92d0:	085b      	lsrs	r3, r3, #1
   d92d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d92d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d92da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92de:	bf22      	ittt	cs
   d92e0:	1ab6      	subcs	r6, r6, r2
   d92e2:	4675      	movcs	r5, lr
   d92e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d92e8:	085b      	lsrs	r3, r3, #1
   d92ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d92ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d92f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92f6:	bf22      	ittt	cs
   d92f8:	1ab6      	subcs	r6, r6, r2
   d92fa:	4675      	movcs	r5, lr
   d92fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9300:	085b      	lsrs	r3, r3, #1
   d9302:	ea4f 0232 	mov.w	r2, r2, rrx
   d9306:	ebb6 0e02 	subs.w	lr, r6, r2
   d930a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d930e:	bf22      	ittt	cs
   d9310:	1ab6      	subcs	r6, r6, r2
   d9312:	4675      	movcs	r5, lr
   d9314:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9318:	ea55 0e06 	orrs.w	lr, r5, r6
   d931c:	d018      	beq.n	d9350 <__aeabi_ddiv+0x114>
   d931e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9322:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9326:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d932a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d932e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9332:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9336:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d933a:	d1c0      	bne.n	d92be <__aeabi_ddiv+0x82>
   d933c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9340:	d10b      	bne.n	d935a <__aeabi_ddiv+0x11e>
   d9342:	ea41 0100 	orr.w	r1, r1, r0
   d9346:	f04f 0000 	mov.w	r0, #0
   d934a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d934e:	e7b6      	b.n	d92be <__aeabi_ddiv+0x82>
   d9350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9354:	bf04      	itt	eq
   d9356:	4301      	orreq	r1, r0
   d9358:	2000      	moveq	r0, #0
   d935a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d935e:	bf88      	it	hi
   d9360:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9364:	f63f aeaf 	bhi.w	d90c6 <__aeabi_dmul+0xde>
   d9368:	ebb5 0c03 	subs.w	ip, r5, r3
   d936c:	bf04      	itt	eq
   d936e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9376:	f150 0000 	adcs.w	r0, r0, #0
   d937a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d937e:	bd70      	pop	{r4, r5, r6, pc}
   d9380:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9384:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9388:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d938c:	bfc2      	ittt	gt
   d938e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9392:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9396:	bd70      	popgt	{r4, r5, r6, pc}
   d9398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d939c:	f04f 0e00 	mov.w	lr, #0
   d93a0:	3c01      	subs	r4, #1
   d93a2:	e690      	b.n	d90c6 <__aeabi_dmul+0xde>
   d93a4:	ea45 0e06 	orr.w	lr, r5, r6
   d93a8:	e68d      	b.n	d90c6 <__aeabi_dmul+0xde>
   d93aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93ae:	ea94 0f0c 	teq	r4, ip
   d93b2:	bf08      	it	eq
   d93b4:	ea95 0f0c 	teqeq	r5, ip
   d93b8:	f43f af3b 	beq.w	d9232 <__aeabi_dmul+0x24a>
   d93bc:	ea94 0f0c 	teq	r4, ip
   d93c0:	d10a      	bne.n	d93d8 <__aeabi_ddiv+0x19c>
   d93c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93c6:	f47f af34 	bne.w	d9232 <__aeabi_dmul+0x24a>
   d93ca:	ea95 0f0c 	teq	r5, ip
   d93ce:	f47f af25 	bne.w	d921c <__aeabi_dmul+0x234>
   d93d2:	4610      	mov	r0, r2
   d93d4:	4619      	mov	r1, r3
   d93d6:	e72c      	b.n	d9232 <__aeabi_dmul+0x24a>
   d93d8:	ea95 0f0c 	teq	r5, ip
   d93dc:	d106      	bne.n	d93ec <__aeabi_ddiv+0x1b0>
   d93de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d93e2:	f43f aefd 	beq.w	d91e0 <__aeabi_dmul+0x1f8>
   d93e6:	4610      	mov	r0, r2
   d93e8:	4619      	mov	r1, r3
   d93ea:	e722      	b.n	d9232 <__aeabi_dmul+0x24a>
   d93ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93f0:	bf18      	it	ne
   d93f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93f6:	f47f aec5 	bne.w	d9184 <__aeabi_dmul+0x19c>
   d93fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d93fe:	f47f af0d 	bne.w	d921c <__aeabi_dmul+0x234>
   d9402:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9406:	f47f aeeb 	bne.w	d91e0 <__aeabi_dmul+0x1f8>
   d940a:	e712      	b.n	d9232 <__aeabi_dmul+0x24a>

000d940c <__gedf2>:
   d940c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9410:	e006      	b.n	d9420 <__cmpdf2+0x4>
   d9412:	bf00      	nop

000d9414 <__ledf2>:
   d9414:	f04f 0c01 	mov.w	ip, #1
   d9418:	e002      	b.n	d9420 <__cmpdf2+0x4>
   d941a:	bf00      	nop

000d941c <__cmpdf2>:
   d941c:	f04f 0c01 	mov.w	ip, #1
   d9420:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9424:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d942c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9430:	bf18      	it	ne
   d9432:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9436:	d01b      	beq.n	d9470 <__cmpdf2+0x54>
   d9438:	b001      	add	sp, #4
   d943a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d943e:	bf0c      	ite	eq
   d9440:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9444:	ea91 0f03 	teqne	r1, r3
   d9448:	bf02      	ittt	eq
   d944a:	ea90 0f02 	teqeq	r0, r2
   d944e:	2000      	moveq	r0, #0
   d9450:	4770      	bxeq	lr
   d9452:	f110 0f00 	cmn.w	r0, #0
   d9456:	ea91 0f03 	teq	r1, r3
   d945a:	bf58      	it	pl
   d945c:	4299      	cmppl	r1, r3
   d945e:	bf08      	it	eq
   d9460:	4290      	cmpeq	r0, r2
   d9462:	bf2c      	ite	cs
   d9464:	17d8      	asrcs	r0, r3, #31
   d9466:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d946a:	f040 0001 	orr.w	r0, r0, #1
   d946e:	4770      	bx	lr
   d9470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9478:	d102      	bne.n	d9480 <__cmpdf2+0x64>
   d947a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d947e:	d107      	bne.n	d9490 <__cmpdf2+0x74>
   d9480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9488:	d1d6      	bne.n	d9438 <__cmpdf2+0x1c>
   d948a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d948e:	d0d3      	beq.n	d9438 <__cmpdf2+0x1c>
   d9490:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9494:	4770      	bx	lr
   d9496:	bf00      	nop

000d9498 <__aeabi_cdrcmple>:
   d9498:	4684      	mov	ip, r0
   d949a:	4610      	mov	r0, r2
   d949c:	4662      	mov	r2, ip
   d949e:	468c      	mov	ip, r1
   d94a0:	4619      	mov	r1, r3
   d94a2:	4663      	mov	r3, ip
   d94a4:	e000      	b.n	d94a8 <__aeabi_cdcmpeq>
   d94a6:	bf00      	nop

000d94a8 <__aeabi_cdcmpeq>:
   d94a8:	b501      	push	{r0, lr}
   d94aa:	f7ff ffb7 	bl	d941c <__cmpdf2>
   d94ae:	2800      	cmp	r0, #0
   d94b0:	bf48      	it	mi
   d94b2:	f110 0f00 	cmnmi.w	r0, #0
   d94b6:	bd01      	pop	{r0, pc}

000d94b8 <__aeabi_dcmpeq>:
   d94b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94bc:	f7ff fff4 	bl	d94a8 <__aeabi_cdcmpeq>
   d94c0:	bf0c      	ite	eq
   d94c2:	2001      	moveq	r0, #1
   d94c4:	2000      	movne	r0, #0
   d94c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d94ca:	bf00      	nop

000d94cc <__aeabi_dcmplt>:
   d94cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94d0:	f7ff ffea 	bl	d94a8 <__aeabi_cdcmpeq>
   d94d4:	bf34      	ite	cc
   d94d6:	2001      	movcc	r0, #1
   d94d8:	2000      	movcs	r0, #0
   d94da:	f85d fb08 	ldr.w	pc, [sp], #8
   d94de:	bf00      	nop

000d94e0 <__aeabi_dcmple>:
   d94e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94e4:	f7ff ffe0 	bl	d94a8 <__aeabi_cdcmpeq>
   d94e8:	bf94      	ite	ls
   d94ea:	2001      	movls	r0, #1
   d94ec:	2000      	movhi	r0, #0
   d94ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d94f2:	bf00      	nop

000d94f4 <__aeabi_dcmpge>:
   d94f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94f8:	f7ff ffce 	bl	d9498 <__aeabi_cdrcmple>
   d94fc:	bf94      	ite	ls
   d94fe:	2001      	movls	r0, #1
   d9500:	2000      	movhi	r0, #0
   d9502:	f85d fb08 	ldr.w	pc, [sp], #8
   d9506:	bf00      	nop

000d9508 <__aeabi_dcmpgt>:
   d9508:	f84d ed08 	str.w	lr, [sp, #-8]!
   d950c:	f7ff ffc4 	bl	d9498 <__aeabi_cdrcmple>
   d9510:	bf34      	ite	cc
   d9512:	2001      	movcc	r0, #1
   d9514:	2000      	movcs	r0, #0
   d9516:	f85d fb08 	ldr.w	pc, [sp], #8
   d951a:	bf00      	nop

000d951c <__aeabi_d2uiz>:
   d951c:	004a      	lsls	r2, r1, #1
   d951e:	d211      	bcs.n	d9544 <__aeabi_d2uiz+0x28>
   d9520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9524:	d211      	bcs.n	d954a <__aeabi_d2uiz+0x2e>
   d9526:	d50d      	bpl.n	d9544 <__aeabi_d2uiz+0x28>
   d9528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d952c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9530:	d40e      	bmi.n	d9550 <__aeabi_d2uiz+0x34>
   d9532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d953a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d953e:	fa23 f002 	lsr.w	r0, r3, r2
   d9542:	4770      	bx	lr
   d9544:	f04f 0000 	mov.w	r0, #0
   d9548:	4770      	bx	lr
   d954a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d954e:	d102      	bne.n	d9556 <__aeabi_d2uiz+0x3a>
   d9550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9554:	4770      	bx	lr
   d9556:	f04f 0000 	mov.w	r0, #0
   d955a:	4770      	bx	lr

000d955c <__aeabi_d2f>:
   d955c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9560:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9564:	bf24      	itt	cs
   d9566:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d956a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d956e:	d90d      	bls.n	d958c <__aeabi_d2f+0x30>
   d9570:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9574:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9578:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d957c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9580:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9584:	bf08      	it	eq
   d9586:	f020 0001 	biceq.w	r0, r0, #1
   d958a:	4770      	bx	lr
   d958c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9590:	d121      	bne.n	d95d6 <__aeabi_d2f+0x7a>
   d9592:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9596:	bfbc      	itt	lt
   d9598:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d959c:	4770      	bxlt	lr
   d959e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d95a6:	f1c2 0218 	rsb	r2, r2, #24
   d95aa:	f1c2 0c20 	rsb	ip, r2, #32
   d95ae:	fa10 f30c 	lsls.w	r3, r0, ip
   d95b2:	fa20 f002 	lsr.w	r0, r0, r2
   d95b6:	bf18      	it	ne
   d95b8:	f040 0001 	orrne.w	r0, r0, #1
   d95bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d95c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d95c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d95c8:	ea40 000c 	orr.w	r0, r0, ip
   d95cc:	fa23 f302 	lsr.w	r3, r3, r2
   d95d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d95d4:	e7cc      	b.n	d9570 <__aeabi_d2f+0x14>
   d95d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d95da:	d107      	bne.n	d95ec <__aeabi_d2f+0x90>
   d95dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d95e0:	bf1e      	ittt	ne
   d95e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d95e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d95ea:	4770      	bxne	lr
   d95ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d95f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d95f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d95f8:	4770      	bx	lr
   d95fa:	bf00      	nop

000d95fc <__aeabi_uldivmod>:
   d95fc:	b953      	cbnz	r3, d9614 <__aeabi_uldivmod+0x18>
   d95fe:	b94a      	cbnz	r2, d9614 <__aeabi_uldivmod+0x18>
   d9600:	2900      	cmp	r1, #0
   d9602:	bf08      	it	eq
   d9604:	2800      	cmpeq	r0, #0
   d9606:	bf1c      	itt	ne
   d9608:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d960c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d9610:	f000 b9a2 	b.w	d9958 <__aeabi_idiv0>
   d9614:	f1ad 0c08 	sub.w	ip, sp, #8
   d9618:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d961c:	f000 f82a 	bl	d9674 <__udivmoddi4>
   d9620:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9628:	b004      	add	sp, #16
   d962a:	4770      	bx	lr

000d962c <__aeabi_d2ulz>:
   d962c:	b5d0      	push	{r4, r6, r7, lr}
   d962e:	2200      	movs	r2, #0
   d9630:	4b0e      	ldr	r3, [pc, #56]	; (d966c <__aeabi_d2ulz+0x40>)
   d9632:	4606      	mov	r6, r0
   d9634:	460f      	mov	r7, r1
   d9636:	f7ff fcd7 	bl	d8fe8 <__aeabi_dmul>
   d963a:	f7ff ff6f 	bl	d951c <__aeabi_d2uiz>
   d963e:	4604      	mov	r4, r0
   d9640:	f7ff fc5c 	bl	d8efc <__aeabi_ui2d>
   d9644:	2200      	movs	r2, #0
   d9646:	4b0a      	ldr	r3, [pc, #40]	; (d9670 <__aeabi_d2ulz+0x44>)
   d9648:	f7ff fcce 	bl	d8fe8 <__aeabi_dmul>
   d964c:	4602      	mov	r2, r0
   d964e:	460b      	mov	r3, r1
   d9650:	4630      	mov	r0, r6
   d9652:	4639      	mov	r1, r7
   d9654:	f7ff fb14 	bl	d8c80 <__aeabi_dsub>
   d9658:	f7ff ff60 	bl	d951c <__aeabi_d2uiz>
   d965c:	4623      	mov	r3, r4
   d965e:	2200      	movs	r2, #0
   d9660:	ea42 0200 	orr.w	r2, r2, r0
   d9664:	4610      	mov	r0, r2
   d9666:	4619      	mov	r1, r3
   d9668:	bdd0      	pop	{r4, r6, r7, pc}
   d966a:	bf00      	nop
   d966c:	3df00000 	.word	0x3df00000
   d9670:	41f00000 	.word	0x41f00000

000d9674 <__udivmoddi4>:
   d9674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9678:	468c      	mov	ip, r1
   d967a:	460e      	mov	r6, r1
   d967c:	4604      	mov	r4, r0
   d967e:	9d08      	ldr	r5, [sp, #32]
   d9680:	2b00      	cmp	r3, #0
   d9682:	d150      	bne.n	d9726 <__udivmoddi4+0xb2>
   d9684:	428a      	cmp	r2, r1
   d9686:	4617      	mov	r7, r2
   d9688:	d96c      	bls.n	d9764 <__udivmoddi4+0xf0>
   d968a:	fab2 fe82 	clz	lr, r2
   d968e:	f1be 0f00 	cmp.w	lr, #0
   d9692:	d00b      	beq.n	d96ac <__udivmoddi4+0x38>
   d9694:	f1ce 0420 	rsb	r4, lr, #32
   d9698:	fa20 f404 	lsr.w	r4, r0, r4
   d969c:	fa01 f60e 	lsl.w	r6, r1, lr
   d96a0:	ea44 0c06 	orr.w	ip, r4, r6
   d96a4:	fa02 f70e 	lsl.w	r7, r2, lr
   d96a8:	fa00 f40e 	lsl.w	r4, r0, lr
   d96ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d96b0:	0c22      	lsrs	r2, r4, #16
   d96b2:	fbbc f0f9 	udiv	r0, ip, r9
   d96b6:	fa1f f887 	uxth.w	r8, r7
   d96ba:	fb09 c610 	mls	r6, r9, r0, ip
   d96be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d96c2:	fb00 f308 	mul.w	r3, r0, r8
   d96c6:	42b3      	cmp	r3, r6
   d96c8:	d909      	bls.n	d96de <__udivmoddi4+0x6a>
   d96ca:	19f6      	adds	r6, r6, r7
   d96cc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d96d0:	f080 8122 	bcs.w	d9918 <__udivmoddi4+0x2a4>
   d96d4:	42b3      	cmp	r3, r6
   d96d6:	f240 811f 	bls.w	d9918 <__udivmoddi4+0x2a4>
   d96da:	3802      	subs	r0, #2
   d96dc:	443e      	add	r6, r7
   d96de:	1af6      	subs	r6, r6, r3
   d96e0:	b2a2      	uxth	r2, r4
   d96e2:	fbb6 f3f9 	udiv	r3, r6, r9
   d96e6:	fb09 6613 	mls	r6, r9, r3, r6
   d96ea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d96ee:	fb03 f808 	mul.w	r8, r3, r8
   d96f2:	45a0      	cmp	r8, r4
   d96f4:	d909      	bls.n	d970a <__udivmoddi4+0x96>
   d96f6:	19e4      	adds	r4, r4, r7
   d96f8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d96fc:	f080 810a 	bcs.w	d9914 <__udivmoddi4+0x2a0>
   d9700:	45a0      	cmp	r8, r4
   d9702:	f240 8107 	bls.w	d9914 <__udivmoddi4+0x2a0>
   d9706:	3b02      	subs	r3, #2
   d9708:	443c      	add	r4, r7
   d970a:	ebc8 0404 	rsb	r4, r8, r4
   d970e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9712:	2100      	movs	r1, #0
   d9714:	2d00      	cmp	r5, #0
   d9716:	d062      	beq.n	d97de <__udivmoddi4+0x16a>
   d9718:	fa24 f40e 	lsr.w	r4, r4, lr
   d971c:	2300      	movs	r3, #0
   d971e:	602c      	str	r4, [r5, #0]
   d9720:	606b      	str	r3, [r5, #4]
   d9722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9726:	428b      	cmp	r3, r1
   d9728:	d907      	bls.n	d973a <__udivmoddi4+0xc6>
   d972a:	2d00      	cmp	r5, #0
   d972c:	d055      	beq.n	d97da <__udivmoddi4+0x166>
   d972e:	2100      	movs	r1, #0
   d9730:	e885 0041 	stmia.w	r5, {r0, r6}
   d9734:	4608      	mov	r0, r1
   d9736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d973a:	fab3 f183 	clz	r1, r3
   d973e:	2900      	cmp	r1, #0
   d9740:	f040 8090 	bne.w	d9864 <__udivmoddi4+0x1f0>
   d9744:	42b3      	cmp	r3, r6
   d9746:	d302      	bcc.n	d974e <__udivmoddi4+0xda>
   d9748:	4282      	cmp	r2, r0
   d974a:	f200 80f8 	bhi.w	d993e <__udivmoddi4+0x2ca>
   d974e:	1a84      	subs	r4, r0, r2
   d9750:	eb66 0603 	sbc.w	r6, r6, r3
   d9754:	2001      	movs	r0, #1
   d9756:	46b4      	mov	ip, r6
   d9758:	2d00      	cmp	r5, #0
   d975a:	d040      	beq.n	d97de <__udivmoddi4+0x16a>
   d975c:	e885 1010 	stmia.w	r5, {r4, ip}
   d9760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9764:	b912      	cbnz	r2, d976c <__udivmoddi4+0xf8>
   d9766:	2701      	movs	r7, #1
   d9768:	fbb7 f7f2 	udiv	r7, r7, r2
   d976c:	fab7 fe87 	clz	lr, r7
   d9770:	f1be 0f00 	cmp.w	lr, #0
   d9774:	d135      	bne.n	d97e2 <__udivmoddi4+0x16e>
   d9776:	1bf3      	subs	r3, r6, r7
   d9778:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d977c:	fa1f fc87 	uxth.w	ip, r7
   d9780:	2101      	movs	r1, #1
   d9782:	fbb3 f0f8 	udiv	r0, r3, r8
   d9786:	0c22      	lsrs	r2, r4, #16
   d9788:	fb08 3610 	mls	r6, r8, r0, r3
   d978c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9790:	fb0c f300 	mul.w	r3, ip, r0
   d9794:	42b3      	cmp	r3, r6
   d9796:	d907      	bls.n	d97a8 <__udivmoddi4+0x134>
   d9798:	19f6      	adds	r6, r6, r7
   d979a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d979e:	d202      	bcs.n	d97a6 <__udivmoddi4+0x132>
   d97a0:	42b3      	cmp	r3, r6
   d97a2:	f200 80ce 	bhi.w	d9942 <__udivmoddi4+0x2ce>
   d97a6:	4610      	mov	r0, r2
   d97a8:	1af6      	subs	r6, r6, r3
   d97aa:	b2a2      	uxth	r2, r4
   d97ac:	fbb6 f3f8 	udiv	r3, r6, r8
   d97b0:	fb08 6613 	mls	r6, r8, r3, r6
   d97b4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d97b8:	fb0c fc03 	mul.w	ip, ip, r3
   d97bc:	45a4      	cmp	ip, r4
   d97be:	d907      	bls.n	d97d0 <__udivmoddi4+0x15c>
   d97c0:	19e4      	adds	r4, r4, r7
   d97c2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d97c6:	d202      	bcs.n	d97ce <__udivmoddi4+0x15a>
   d97c8:	45a4      	cmp	ip, r4
   d97ca:	f200 80b5 	bhi.w	d9938 <__udivmoddi4+0x2c4>
   d97ce:	4613      	mov	r3, r2
   d97d0:	ebcc 0404 	rsb	r4, ip, r4
   d97d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d97d8:	e79c      	b.n	d9714 <__udivmoddi4+0xa0>
   d97da:	4629      	mov	r1, r5
   d97dc:	4628      	mov	r0, r5
   d97de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97e2:	f1ce 0120 	rsb	r1, lr, #32
   d97e6:	fa06 f30e 	lsl.w	r3, r6, lr
   d97ea:	fa07 f70e 	lsl.w	r7, r7, lr
   d97ee:	fa20 f901 	lsr.w	r9, r0, r1
   d97f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d97f6:	40ce      	lsrs	r6, r1
   d97f8:	ea49 0903 	orr.w	r9, r9, r3
   d97fc:	fbb6 faf8 	udiv	sl, r6, r8
   d9800:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9804:	fb08 661a 	mls	r6, r8, sl, r6
   d9808:	fa1f fc87 	uxth.w	ip, r7
   d980c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9810:	fb0a f20c 	mul.w	r2, sl, ip
   d9814:	429a      	cmp	r2, r3
   d9816:	fa00 f40e 	lsl.w	r4, r0, lr
   d981a:	d90a      	bls.n	d9832 <__udivmoddi4+0x1be>
   d981c:	19db      	adds	r3, r3, r7
   d981e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d9822:	f080 8087 	bcs.w	d9934 <__udivmoddi4+0x2c0>
   d9826:	429a      	cmp	r2, r3
   d9828:	f240 8084 	bls.w	d9934 <__udivmoddi4+0x2c0>
   d982c:	f1aa 0a02 	sub.w	sl, sl, #2
   d9830:	443b      	add	r3, r7
   d9832:	1a9b      	subs	r3, r3, r2
   d9834:	fa1f f989 	uxth.w	r9, r9
   d9838:	fbb3 f1f8 	udiv	r1, r3, r8
   d983c:	fb08 3311 	mls	r3, r8, r1, r3
   d9840:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9844:	fb01 f60c 	mul.w	r6, r1, ip
   d9848:	429e      	cmp	r6, r3
   d984a:	d907      	bls.n	d985c <__udivmoddi4+0x1e8>
   d984c:	19db      	adds	r3, r3, r7
   d984e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d9852:	d26b      	bcs.n	d992c <__udivmoddi4+0x2b8>
   d9854:	429e      	cmp	r6, r3
   d9856:	d969      	bls.n	d992c <__udivmoddi4+0x2b8>
   d9858:	3902      	subs	r1, #2
   d985a:	443b      	add	r3, r7
   d985c:	1b9b      	subs	r3, r3, r6
   d985e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d9862:	e78e      	b.n	d9782 <__udivmoddi4+0x10e>
   d9864:	f1c1 0e20 	rsb	lr, r1, #32
   d9868:	fa22 f40e 	lsr.w	r4, r2, lr
   d986c:	408b      	lsls	r3, r1
   d986e:	4323      	orrs	r3, r4
   d9870:	fa20 f70e 	lsr.w	r7, r0, lr
   d9874:	fa06 f401 	lsl.w	r4, r6, r1
   d9878:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d987c:	fa26 f60e 	lsr.w	r6, r6, lr
   d9880:	433c      	orrs	r4, r7
   d9882:	fbb6 f9fc 	udiv	r9, r6, ip
   d9886:	0c27      	lsrs	r7, r4, #16
   d9888:	fb0c 6619 	mls	r6, ip, r9, r6
   d988c:	fa1f f883 	uxth.w	r8, r3
   d9890:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d9894:	fb09 f708 	mul.w	r7, r9, r8
   d9898:	42b7      	cmp	r7, r6
   d989a:	fa02 f201 	lsl.w	r2, r2, r1
   d989e:	fa00 fa01 	lsl.w	sl, r0, r1
   d98a2:	d908      	bls.n	d98b6 <__udivmoddi4+0x242>
   d98a4:	18f6      	adds	r6, r6, r3
   d98a6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d98aa:	d241      	bcs.n	d9930 <__udivmoddi4+0x2bc>
   d98ac:	42b7      	cmp	r7, r6
   d98ae:	d93f      	bls.n	d9930 <__udivmoddi4+0x2bc>
   d98b0:	f1a9 0902 	sub.w	r9, r9, #2
   d98b4:	441e      	add	r6, r3
   d98b6:	1bf6      	subs	r6, r6, r7
   d98b8:	b2a0      	uxth	r0, r4
   d98ba:	fbb6 f4fc 	udiv	r4, r6, ip
   d98be:	fb0c 6614 	mls	r6, ip, r4, r6
   d98c2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d98c6:	fb04 f808 	mul.w	r8, r4, r8
   d98ca:	45b8      	cmp	r8, r7
   d98cc:	d907      	bls.n	d98de <__udivmoddi4+0x26a>
   d98ce:	18ff      	adds	r7, r7, r3
   d98d0:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d98d4:	d228      	bcs.n	d9928 <__udivmoddi4+0x2b4>
   d98d6:	45b8      	cmp	r8, r7
   d98d8:	d926      	bls.n	d9928 <__udivmoddi4+0x2b4>
   d98da:	3c02      	subs	r4, #2
   d98dc:	441f      	add	r7, r3
   d98de:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d98e2:	ebc8 0707 	rsb	r7, r8, r7
   d98e6:	fba0 8902 	umull	r8, r9, r0, r2
   d98ea:	454f      	cmp	r7, r9
   d98ec:	4644      	mov	r4, r8
   d98ee:	464e      	mov	r6, r9
   d98f0:	d314      	bcc.n	d991c <__udivmoddi4+0x2a8>
   d98f2:	d029      	beq.n	d9948 <__udivmoddi4+0x2d4>
   d98f4:	b365      	cbz	r5, d9950 <__udivmoddi4+0x2dc>
   d98f6:	ebba 0304 	subs.w	r3, sl, r4
   d98fa:	eb67 0706 	sbc.w	r7, r7, r6
   d98fe:	fa07 fe0e 	lsl.w	lr, r7, lr
   d9902:	40cb      	lsrs	r3, r1
   d9904:	40cf      	lsrs	r7, r1
   d9906:	ea4e 0303 	orr.w	r3, lr, r3
   d990a:	e885 0088 	stmia.w	r5, {r3, r7}
   d990e:	2100      	movs	r1, #0
   d9910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9914:	4613      	mov	r3, r2
   d9916:	e6f8      	b.n	d970a <__udivmoddi4+0x96>
   d9918:	4610      	mov	r0, r2
   d991a:	e6e0      	b.n	d96de <__udivmoddi4+0x6a>
   d991c:	ebb8 0402 	subs.w	r4, r8, r2
   d9920:	eb69 0603 	sbc.w	r6, r9, r3
   d9924:	3801      	subs	r0, #1
   d9926:	e7e5      	b.n	d98f4 <__udivmoddi4+0x280>
   d9928:	4604      	mov	r4, r0
   d992a:	e7d8      	b.n	d98de <__udivmoddi4+0x26a>
   d992c:	4611      	mov	r1, r2
   d992e:	e795      	b.n	d985c <__udivmoddi4+0x1e8>
   d9930:	4681      	mov	r9, r0
   d9932:	e7c0      	b.n	d98b6 <__udivmoddi4+0x242>
   d9934:	468a      	mov	sl, r1
   d9936:	e77c      	b.n	d9832 <__udivmoddi4+0x1be>
   d9938:	3b02      	subs	r3, #2
   d993a:	443c      	add	r4, r7
   d993c:	e748      	b.n	d97d0 <__udivmoddi4+0x15c>
   d993e:	4608      	mov	r0, r1
   d9940:	e70a      	b.n	d9758 <__udivmoddi4+0xe4>
   d9942:	3802      	subs	r0, #2
   d9944:	443e      	add	r6, r7
   d9946:	e72f      	b.n	d97a8 <__udivmoddi4+0x134>
   d9948:	45c2      	cmp	sl, r8
   d994a:	d3e7      	bcc.n	d991c <__udivmoddi4+0x2a8>
   d994c:	463e      	mov	r6, r7
   d994e:	e7d1      	b.n	d98f4 <__udivmoddi4+0x280>
   d9950:	4629      	mov	r1, r5
   d9952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9956:	bf00      	nop

000d9958 <__aeabi_idiv0>:
   d9958:	4770      	bx	lr
   d995a:	bf00      	nop

000d995c <calloc>:
   d995c:	4b02      	ldr	r3, [pc, #8]	; (d9968 <calloc+0xc>)
   d995e:	460a      	mov	r2, r1
   d9960:	4601      	mov	r1, r0
   d9962:	6818      	ldr	r0, [r3, #0]
   d9964:	f000 b84d 	b.w	d9a02 <_calloc_r>
   d9968:	2003e328 	.word	0x2003e328

000d996c <__cxa_atexit>:
   d996c:	b510      	push	{r4, lr}
   d996e:	4c05      	ldr	r4, [pc, #20]	; (d9984 <__cxa_atexit+0x18>)
   d9970:	4613      	mov	r3, r2
   d9972:	b12c      	cbz	r4, d9980 <__cxa_atexit+0x14>
   d9974:	460a      	mov	r2, r1
   d9976:	4601      	mov	r1, r0
   d9978:	2002      	movs	r0, #2
   d997a:	f3af 8000 	nop.w
   d997e:	bd10      	pop	{r4, pc}
   d9980:	4620      	mov	r0, r4
   d9982:	bd10      	pop	{r4, pc}
   d9984:	00000000 	.word	0x00000000

000d9988 <memcmp>:
   d9988:	b510      	push	{r4, lr}
   d998a:	3901      	subs	r1, #1
   d998c:	4402      	add	r2, r0
   d998e:	4290      	cmp	r0, r2
   d9990:	d007      	beq.n	d99a2 <memcmp+0x1a>
   d9992:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9996:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d999a:	42a3      	cmp	r3, r4
   d999c:	d0f7      	beq.n	d998e <memcmp+0x6>
   d999e:	1b18      	subs	r0, r3, r4
   d99a0:	bd10      	pop	{r4, pc}
   d99a2:	2000      	movs	r0, #0
   d99a4:	bd10      	pop	{r4, pc}

000d99a6 <memcpy>:
   d99a6:	b510      	push	{r4, lr}
   d99a8:	1e43      	subs	r3, r0, #1
   d99aa:	440a      	add	r2, r1
   d99ac:	4291      	cmp	r1, r2
   d99ae:	d004      	beq.n	d99ba <memcpy+0x14>
   d99b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d99b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d99b8:	e7f8      	b.n	d99ac <memcpy+0x6>
   d99ba:	bd10      	pop	{r4, pc}

000d99bc <memmove>:
   d99bc:	4288      	cmp	r0, r1
   d99be:	b510      	push	{r4, lr}
   d99c0:	eb01 0302 	add.w	r3, r1, r2
   d99c4:	d801      	bhi.n	d99ca <memmove+0xe>
   d99c6:	1e42      	subs	r2, r0, #1
   d99c8:	e00b      	b.n	d99e2 <memmove+0x26>
   d99ca:	4298      	cmp	r0, r3
   d99cc:	d2fb      	bcs.n	d99c6 <memmove+0xa>
   d99ce:	1881      	adds	r1, r0, r2
   d99d0:	1ad2      	subs	r2, r2, r3
   d99d2:	42d3      	cmn	r3, r2
   d99d4:	d004      	beq.n	d99e0 <memmove+0x24>
   d99d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d99da:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d99de:	e7f8      	b.n	d99d2 <memmove+0x16>
   d99e0:	bd10      	pop	{r4, pc}
   d99e2:	4299      	cmp	r1, r3
   d99e4:	d004      	beq.n	d99f0 <memmove+0x34>
   d99e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d99ea:	f802 4f01 	strb.w	r4, [r2, #1]!
   d99ee:	e7f8      	b.n	d99e2 <memmove+0x26>
   d99f0:	bd10      	pop	{r4, pc}

000d99f2 <memset>:
   d99f2:	4402      	add	r2, r0
   d99f4:	4603      	mov	r3, r0
   d99f6:	4293      	cmp	r3, r2
   d99f8:	d002      	beq.n	d9a00 <memset+0xe>
   d99fa:	f803 1b01 	strb.w	r1, [r3], #1
   d99fe:	e7fa      	b.n	d99f6 <memset+0x4>
   d9a00:	4770      	bx	lr

000d9a02 <_calloc_r>:
   d9a02:	b538      	push	{r3, r4, r5, lr}
   d9a04:	fb02 f401 	mul.w	r4, r2, r1
   d9a08:	4621      	mov	r1, r4
   d9a0a:	f7fb ff5d 	bl	d58c8 <_malloc_r>
   d9a0e:	4605      	mov	r5, r0
   d9a10:	b118      	cbz	r0, d9a1a <_calloc_r+0x18>
   d9a12:	4622      	mov	r2, r4
   d9a14:	2100      	movs	r1, #0
   d9a16:	f7ff ffec 	bl	d99f2 <memset>
   d9a1a:	4628      	mov	r0, r5
   d9a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9a20 <srand>:
   d9a20:	b538      	push	{r3, r4, r5, lr}
   d9a22:	4b12      	ldr	r3, [pc, #72]	; (d9a6c <srand+0x4c>)
   d9a24:	681c      	ldr	r4, [r3, #0]
   d9a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a28:	4605      	mov	r5, r0
   d9a2a:	b9d3      	cbnz	r3, d9a62 <srand+0x42>
   d9a2c:	2018      	movs	r0, #24
   d9a2e:	f7fb ff23 	bl	d5878 <malloc>
   d9a32:	f243 330e 	movw	r3, #13070	; 0x330e
   d9a36:	63a0      	str	r0, [r4, #56]	; 0x38
   d9a38:	8003      	strh	r3, [r0, #0]
   d9a3a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9a3e:	8043      	strh	r3, [r0, #2]
   d9a40:	f241 2334 	movw	r3, #4660	; 0x1234
   d9a44:	8083      	strh	r3, [r0, #4]
   d9a46:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9a4a:	80c3      	strh	r3, [r0, #6]
   d9a4c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9a50:	8103      	strh	r3, [r0, #8]
   d9a52:	2305      	movs	r3, #5
   d9a54:	8143      	strh	r3, [r0, #10]
   d9a56:	230b      	movs	r3, #11
   d9a58:	8183      	strh	r3, [r0, #12]
   d9a5a:	2201      	movs	r2, #1
   d9a5c:	2300      	movs	r3, #0
   d9a5e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a64:	2200      	movs	r2, #0
   d9a66:	611d      	str	r5, [r3, #16]
   d9a68:	615a      	str	r2, [r3, #20]
   d9a6a:	bd38      	pop	{r3, r4, r5, pc}
   d9a6c:	2003e328 	.word	0x2003e328

000d9a70 <strdup>:
   d9a70:	4b02      	ldr	r3, [pc, #8]	; (d9a7c <strdup+0xc>)
   d9a72:	4601      	mov	r1, r0
   d9a74:	6818      	ldr	r0, [r3, #0]
   d9a76:	f000 b803 	b.w	d9a80 <_strdup_r>
   d9a7a:	bf00      	nop
   d9a7c:	2003e328 	.word	0x2003e328

000d9a80 <_strdup_r>:
   d9a80:	b570      	push	{r4, r5, r6, lr}
   d9a82:	4606      	mov	r6, r0
   d9a84:	4608      	mov	r0, r1
   d9a86:	460c      	mov	r4, r1
   d9a88:	f000 f80d 	bl	d9aa6 <strlen>
   d9a8c:	1c45      	adds	r5, r0, #1
   d9a8e:	4629      	mov	r1, r5
   d9a90:	4630      	mov	r0, r6
   d9a92:	f7fb ff19 	bl	d58c8 <_malloc_r>
   d9a96:	4606      	mov	r6, r0
   d9a98:	b118      	cbz	r0, d9aa2 <_strdup_r+0x22>
   d9a9a:	462a      	mov	r2, r5
   d9a9c:	4621      	mov	r1, r4
   d9a9e:	f7ff ff82 	bl	d99a6 <memcpy>
   d9aa2:	4630      	mov	r0, r6
   d9aa4:	bd70      	pop	{r4, r5, r6, pc}

000d9aa6 <strlen>:
   d9aa6:	4603      	mov	r3, r0
   d9aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9aac:	2a00      	cmp	r2, #0
   d9aae:	d1fb      	bne.n	d9aa8 <strlen+0x2>
   d9ab0:	1a18      	subs	r0, r3, r0
   d9ab2:	3801      	subs	r0, #1
   d9ab4:	4770      	bx	lr

000d9ab6 <strnlen>:
   d9ab6:	b510      	push	{r4, lr}
   d9ab8:	4603      	mov	r3, r0
   d9aba:	4401      	add	r1, r0
   d9abc:	428b      	cmp	r3, r1
   d9abe:	d004      	beq.n	d9aca <strnlen+0x14>
   d9ac0:	781a      	ldrb	r2, [r3, #0]
   d9ac2:	1c5c      	adds	r4, r3, #1
   d9ac4:	b10a      	cbz	r2, d9aca <strnlen+0x14>
   d9ac6:	4623      	mov	r3, r4
   d9ac8:	e7f8      	b.n	d9abc <strnlen+0x6>
   d9aca:	1a18      	subs	r0, r3, r0
   d9acc:	bd10      	pop	{r4, pc}

000d9ace <link_code_end>:
	...

000d9ad0 <dynalib_user>:
   d9ad0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9ae0:	0000 0000                                   ....

000d9ae4 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d9aec:	4145 000d 4159 000d 6f67 2074 7665 6e65     EA..YA..got even
   d9afc:	2074 6425 7720 7469 2068 6176 756c 2065     t %d with value 
   d9b0c:	6425 7400 6d65 0070 7568 696d 6964 7974     %d.temp.humidity
   d9b1c:	7400 676f 6c67 4c65 6465 6c00 6769 7468     .toggleLed.light
   d9b2c:	6500 766e 762d 6c61 0073 6964 7473 6e61     .env-vals.distan
   d9b3c:	6563 5400 6d65 3a70 2520 0066 7548 696d     ce.Temp: %f.Humi
   d9b4c:	6964 7974 203a 6625 6c00 6769 7468 6d2d     dity: %f.light-m
   d9b5c:	7465 7265 6c2f 7665 6c65 5500 7470 6d69     eter/level.Uptim
   d9b6c:	3a65 2520 0064 7453 6572 676e 6874 203a     e: %d.Strength: 
   d9b7c:	6600 6572 2065 656d 6f6d 7972 203a 3500     .free memory: .5
   d9b8c:	3163 3962 3061 2d64 3562 6562 342d 3461     c1b9a0d-b5be-4a4
   d9b9c:	2d30 6638 6137 362d 6236 3633 3064 3561     0-8f7a-66b36d0a5
   d9bac:	3731 0036 6466 6663 6134 6633 332d 6566     176.fdcf4a3f-3fe
   d9bbc:	2d64 6534 3264 382d 6534 2d36 3430 6262     d-4ed2-84e6-04bb
   d9bcc:	3962 6561 3430 3464 7500 7470 6d69 0065     b9ae04d4.uptime.
   d9bdc:	6363 3739 3263 6330 352d 3238 2d32 3834     cc97c20c-5822-48
   d9bec:	3030 612d 6564 2d35 6631 3636 6431 3132     00-ade5-1f661d21
   d9bfc:	3333 6565 7300 7274 6e65 7467 0068 3264     33ee.strength.d2
   d9c0c:	3262 6236 3366 392d 3937 2d32 3234 6366     b26bf3-9792-42fc
   d9c1c:	392d 3865 2d61 3134 3666 3031 6437 3066     -9e8a-41f6107df0
   d9c2c:	6334 6600 6572 4d65 6d65 726f 0079 0000     4c.freeMemory...

000d9c3c <_ZTV10JsonBuffer>:
	...
   d9c44:	4f09 000d 4f25 000d                         .O..%O..

000d9c4c <_ZTV10JsonWriter>:
	...
   d9c54:	4f39 000d 4f4d 000d 6c25 0075 3025 7834     9O..MO..%lu.%04x
   d9c64:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d9c74:	6573 2500 2a2e 0066 2e25 6c2a 0066 6c25     se.%.*f.%.*lf.%l
   d9c84:	0066 0000                                   f...

000d9c88 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9c90:	59a5 000d 59ab 000d 663d 000d 59d5 000d     .Y...Y..=f...Y..
   d9ca0:	59a7 000d                                   .Y..

000d9ca4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9cac:	599f 000d 59b9 000d 6745 000d 59d9 000d     .Y...Y..Eg...Y..
   d9cbc:	59a1 000d                                   .Y..

000d9cc0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9cc8:	5999 000d 59c7 000d 6127 000d 59dd 000d     .Y...Y..'a...Y..
   d9cd8:	599b 000d                                   .Y..

000d9cdc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9cdc:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d9cec:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d9cfc:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d9d0c:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d9d1c:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d9d2c:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d9d3c:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d9d4c:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d9d5c:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d9d6c:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d9d7c:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d9d8c:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d9d9c:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d9dac:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d9dbc:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d9dcc:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d9ddc:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d9dec:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d9dfc:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d9e0c:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d9e1c:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d9e2c:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d9e3c:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d9e4c:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d9e5c:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d9e6c:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d9e7c:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d9e8c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9e94:	6a31 000d 6a37 000d 6a8d 000d 6a45 000d     1j..7j...j..Ej..
   d9ea4:	6a33 000d                                   3j..

000d9ea8 <_ZTVN5spark13EthernetClassE>:
	...
   d9eb0:	70ab 000d 70a1 000d 7097 000d 708d 000d     .p...p...p...p..
   d9ec0:	7081 000d 7075 000d 7069 000d 7061 000d     .p..up..ip..ap..
   d9ed0:	7057 000d 704d 000d 7871 000d               Wp..Mp..qx..

000d9edc <_ZTV7TwoWire>:
	...
   d9ee4:	70c9 000d 7113 000d 70eb 000d 70cb 000d     .p...q...p...p..
   d9ef4:	70f3 000d 70fb 000d 7103 000d 710b 000d     .p...p...q...q..

000d9f04 <_ZTV9IPAddress>:
	...
   d9f0c:	7165 000d 7155 000d 7157 000d 6162 6475     eq..Uq..Wq..baud
   d9f1c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9f2c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9f3c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9f4c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9f5c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9f6c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9f7c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9f8c:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d9f9c:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d9fac:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d9fbc:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d9fcc:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d9fdc:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d9fec:	696e 0063 6c61 006c                         nic.all.

000d9ff4 <_ZTVN5spark9MeshClassE>:
	...
   d9ffc:	7309 000d 72ff 000d 72f5 000d 72eb 000d     .s...r...r...r..
   da00c:	72df 000d 72d3 000d 72c7 000d 72bf 000d     .r...r...r...r..
   da01c:	72b5 000d 72ab 000d 7871 000d 6666 3330     .r...r..qx..ff03
   da02c:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   da03c:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   da04c:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000da058 <_ZTVN5spark12NetworkClassE>:
	...
   da060:	7809 000d 7813 000d 781d 000d 7827 000d     .x...x...x..'x..
   da070:	7831 000d 783d 000d 7849 000d 7855 000d     1x..=x..Ix..Ux..
   da080:	785d 000d 7867 000d 7871 000d               ]x..gx..qx..

000da08c <_ZTV8SPIClass>:
	...
   da094:	7b29 000d 7b2b 000d 005a 2b25 3330 3a64     ){..+{..Z.%+03d:
   da0a4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   da0b4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   da0c4:	0000 0000                                   ....

000da0c8 <_ZTV3UDP>:
	...
   da0d0:	83f9 000d 841d 000d 7dd5 000d 7eff 000d     .........}...~..
   da0e0:	7dcd 000d 7deb 000d 7e09 000d 7e23 000d     .}...}...~..#~..
   da0f0:	7e47 000d 7ee3 000d 81e5 000d 7f85 000d     G~...~..........
   da100:	8105 000d 7db5 000d 838d 000d 8089 000d     .....}..........
   da110:	7fbd 000d 83bb 000d 7f29 000d 7dc3 000d     ........)....}..
   da120:	7f65 000d 7dc9 000d 7e25 000d fff0 ffff     e....}..%~......
   da130:	0000 0000 7e3f 000d                         ....?~..

000da138 <_ZTV11USARTSerial>:
	...
   da140:	8449 000d 8499 000d 84a7 000d 7951 000d     I...........Qy..
   da150:	845d 000d 847f 000d 846b 000d 8493 000d     ].......k.......
   da160:	844b 000d 844f 000d                         K...O...

000da168 <_ZTV9USBSerial>:
	...
   da170:	8551 000d 85a1 000d 85af 000d 7951 000d     Q...........Qy..
   da180:	858d 000d 8553 000d 8569 000d 859b 000d     ....S...i.......
   da190:	857f 000d 854d 000d                         ....M...

000da198 <_ZTVN5spark9WiFiClassE>:
	...
   da1a0:	86bb 000d 86b1 000d 86a7 000d 865d 000d     ............]...
   da1b0:	869b 000d 868f 000d 8683 000d 867b 000d     ............{...
   da1c0:	8671 000d 8667 000d 7871 000d               q...g...qx..

000da1cc <_ZSt7nothrow>:
   da1cc:	0000 0000                                   ....

000da1d0 <__sf_fake_stdin>:
	...

000da1f0 <__sf_fake_stdout>:
	...

000da210 <__sf_fake_stderr>:
	...
   da230:	0043                                        C.

000da232 <link_const_variable_data_end>:
	...

000da234 <link_constructors_location>:
   da234:	000d4641 	.word	0x000d4641
   da238:	000d47d1 	.word	0x000d47d1
   da23c:	000d4821 	.word	0x000d4821
   da240:	000d4c5d 	.word	0x000d4c5d
   da244:	000d4ef9 	.word	0x000d4ef9
   da248:	000d51b1 	.word	0x000d51b1
   da24c:	000d6a21 	.word	0x000d6a21
   da250:	000d70b5 	.word	0x000d70b5
   da254:	000d726d 	.word	0x000d726d
   da258:	000d77b9 	.word	0x000d77b9
   da25c:	000d793d 	.word	0x000d793d
   da260:	000d7b0d 	.word	0x000d7b0d
   da264:	000d7d89 	.word	0x000d7d89
   da268:	000d7da1 	.word	0x000d7da1
   da26c:	000d86c5 	.word	0x000d86c5
   da270:	000d895d 	.word	0x000d895d
   da274:	000d89e9 	.word	0x000d89e9
   da278:	000d8aad 	.word	0x000d8aad
   da27c:	000d8b31 	.word	0x000d8b31
   da280:	000d8bb5 	.word	0x000d8bb5

000da284 <link_constructors_end>:
	...
