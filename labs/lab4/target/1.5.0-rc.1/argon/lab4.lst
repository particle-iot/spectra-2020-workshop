
/Users/bsatrom/Development/particle/workshops/spectra-workshop-2020/labs/lab4/target/1.5.0-rc.1/argon/lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005610  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9630  000d9630  00009630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9638  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e3cc  000d963c  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003bc  2003e438  2003e438  0002e438  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d96a4  000d96a4  000296a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d96cc  000d96cc  000296cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001209b5  00000000  00000000  000296d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016aaf  00000000  00000000  0014a085  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002444b  00000000  00000000  00160b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002dc0  00000000  00000000  00184f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000053f8  00000000  00000000  00187d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f5d3  00000000  00000000  0018d137  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00038fb9  00000000  00000000  001cc70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010baf0  00000000  00000000  002056c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e670  00000000  00000000  003111b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 feec 	bl	d8e0e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 ff0c 	bl	d8e5a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3cc 	.word	0x2003e3cc
   d404c:	000d963c 	.word	0x000d963c
   d4050:	2003e434 	.word	0x2003e434
   d4054:	2003e438 	.word	0x2003e438
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fe19 	bl	d7c94 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9624 	.word	0x000d9624
   d4084:	000d95d4 	.word	0x000d95d4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8b8 	b.w	d41fc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9bb 	bl	d4408 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bdbf 	b.w	d7c18 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bb41 	b.w	d5720 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bb47 	b.w	d5730 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bb45 	b.w	d5730 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9toggleLed6String>:
    }
  }
}

int toggleLed(String args)
{
   d40b8:	b510      	push	{r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40ba:	4c10      	ldr	r4, [pc, #64]	; (d40fc <_Z9toggleLed6String+0x44>)
    }
  }
}

int toggleLed(String args)
{
   d40bc:	ed2d 8b02 	vpush	{d8}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40c0:	ed9f 8a0f 	vldr	s16, [pc, #60]	; d4100 <_Z9toggleLed6String+0x48>
   d40c4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d40c8:	eeb0 0a48 	vmov.f32	s0, s16
   d40cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d40d0:	2100      	movs	r1, #0
   d40d2:	4620      	mov	r0, r4
   d40d4:	f000 fce4 	bl	d4aa0 <_ZN12ChainableLED11setColorHSBEhfff>

  delay(1000);
   d40d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40dc:	f001 fb99 	bl	d5812 <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d40e0:	eeb0 1a48 	vmov.f32	s2, s16
   d40e4:	eef0 0a48 	vmov.f32	s1, s16
   d40e8:	eeb0 0a48 	vmov.f32	s0, s16
   d40ec:	4620      	mov	r0, r4
   d40ee:	2100      	movs	r1, #0
   d40f0:	f000 fcd6 	bl	d4aa0 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
}
   d40f4:	ecbd 8b02 	vpop	{d8}
   d40f8:	2001      	movs	r0, #1
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	2003e43c 	.word	0x2003e43c
   d4100:	00000000 	.word	0x00000000

000d4104 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4104:	b510      	push	{r4, lr}
   d4106:	4b03      	ldr	r3, [pc, #12]	; (d4114 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4108:	6003      	str	r3, [r0, #0]
   d410a:	4604      	mov	r4, r0
   d410c:	f000 fef8 	bl	d4f00 <_ZN10JsonWriterD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}
   d4114:	000d8f54 	.word	0x000d8f54

000d4118 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4118:	b510      	push	{r4, lr}
   d411a:	4604      	mov	r4, r0
   d411c:	f7ff fff2 	bl	d4104 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4120:	4620      	mov	r0, r4
   d4122:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4126:	f003 fe8e 	bl	d7e46 <_ZdlPvj>
   d412a:	4620      	mov	r0, r4
   d412c:	bd10      	pop	{r4, pc}
	...

000d4130 <_Z14button_handleryiPv>:

const unsigned long UPDATE_INTERVAL = 30000;
unsigned long lastUpdate = 0;

void button_handler(system_event_t event, int duration, void*)
{
   d4130:	b508      	push	{r3, lr}
  if (!duration) {
   d4132:	b92a      	cbnz	r2, d4140 <_Z14button_handleryiPv+0x10>
    digitalWrite(D7, HIGH);
   d4134:	2101      	movs	r1, #1
   d4136:	2007      	movs	r0, #7
  }  else {
    digitalWrite(D7, LOW);

    timeToSleep = true;
  }
}
   d4138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
unsigned long lastUpdate = 0;

void button_handler(system_event_t event, int duration, void*)
{
  if (!duration) {
    digitalWrite(D7, HIGH);
   d413c:	f003 be0b 	b.w	d7d56 <digitalWrite>
  }  else {
    digitalWrite(D7, LOW);
   d4140:	2100      	movs	r1, #0
   d4142:	2007      	movs	r0, #7
   d4144:	f003 fe07 	bl	d7d56 <digitalWrite>

    timeToSleep = true;
   d4148:	4b01      	ldr	r3, [pc, #4]	; (d4150 <_Z14button_handleryiPv+0x20>)
   d414a:	2201      	movs	r2, #1
   d414c:	701a      	strb	r2, [r3, #0]
   d414e:	bd08      	pop	{r3, pc}
   d4150:	2003e488 	.word	0x2003e488

000d4154 <_Z12configureBLEv>:
  }
}

void configureBLE()
{
   d4154:	b510      	push	{r4, lr}
   d4156:	b096      	sub	sp, #88	; 0x58
  BLE.addCharacteristic(uptimeCharacteristic);
   d4158:	f001 fe56 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d415c:	4a23      	ldr	r2, [pc, #140]	; (d41ec <_Z12configureBLEv+0x98>)
   d415e:	4601      	mov	r1, r0
   d4160:	a80d      	add	r0, sp, #52	; 0x34
   d4162:	f002 fa8f 	bl	d6684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4166:	a80d      	add	r0, sp, #52	; 0x34
   d4168:	f001 fefe 	bl	d5f68 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(signalStrengthCharacteristic);
   d416c:	f001 fe4c 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4170:	4a1f      	ldr	r2, [pc, #124]	; (d41f0 <_Z12configureBLEv+0x9c>)
   d4172:	4601      	mov	r1, r0
   d4174:	a80d      	add	r0, sp, #52	; 0x34
   d4176:	f002 fa85 	bl	d6684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d417a:	a80d      	add	r0, sp, #52	; 0x34
   d417c:	f001 fef4 	bl	d5f68 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(freeMemoryCharacteristic);
   d4180:	f001 fe42 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4184:	4a1b      	ldr	r2, [pc, #108]	; (d41f4 <_Z12configureBLEv+0xa0>)
   d4186:	4601      	mov	r1, r0
   d4188:	a80d      	add	r0, sp, #52	; 0x34
   d418a:	f002 fa7b 	bl	d6684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d418e:	a80d      	add	r0, sp, #52	; 0x34
   d4190:	f001 feea 	bl	d5f68 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData advData;
   d4194:	a80d      	add	r0, sp, #52	; 0x34
   d4196:	f001 fd1c 	bl	d5bd2 <_ZN8particle18BleAdvertisingDataC1Ev>

  // Advertise our private service only
  advData.appendServiceUUID(serviceUuid);
   d419a:	4917      	ldr	r1, [pc, #92]	; (d41f8 <_Z12configureBLEv+0xa4>)
   d419c:	a803      	add	r0, sp, #12
   d419e:	f001 fbc3 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41a2:	a903      	add	r1, sp, #12
   d41a4:	a808      	add	r0, sp, #32
   d41a6:	f001 fbbf 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41aa:	a808      	add	r0, sp, #32
   d41ac:	f001 fbfa 	bl	d59a4 <_ZNK8particle7BleUuid4typeEv>
   d41b0:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41b2:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41b4:	b944      	cbnz	r4, d41c8 <_Z12configureBLEv+0x74>
            uint16_t uuid16 = tempUUID.shorted();
   d41b6:	f001 fc12 	bl	d59de <_ZNK8particle7BleUuid7shortedEv>
   d41ba:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41bc:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d41be:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41c2:	2103      	movs	r1, #3
   d41c4:	9400      	str	r4, [sp, #0]
   d41c6:	e006      	b.n	d41d6 <_Z12configureBLEv+0x82>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41c8:	f001 fc0b 	bl	d59e2 <_ZNK8particle7BleUuid8rawBytesEv>
   d41cc:	2300      	movs	r3, #0
   d41ce:	9300      	str	r3, [sp, #0]
   d41d0:	4602      	mov	r2, r0
   d41d2:	2310      	movs	r3, #16
   d41d4:	2107      	movs	r1, #7
   d41d6:	a80d      	add	r0, sp, #52	; 0x34
   d41d8:	f001 fcb4 	bl	d5b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  // Continuously advertise when not connected
  BLE.advertise(&advData);
   d41dc:	f001 fe14 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41e0:	2200      	movs	r2, #0
   d41e2:	a90d      	add	r1, sp, #52	; 0x34
   d41e4:	f001 fe7d 	bl	d5ee2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d41e8:	b016      	add	sp, #88	; 0x58
   d41ea:	bd10      	pop	{r4, pc}
   d41ec:	2003e46c 	.word	0x2003e46c
   d41f0:	2003e44c 	.word	0x2003e44c
   d41f4:	2003e4a0 	.word	0x2003e4a0
   d41f8:	2003e454 	.word	0x2003e454

000d41fc <setup>:

void setup()
{
   d41fc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d41fe:	f003 fc4f 	bl	d7aa0 <_Z16_fetch_usbserialv>

  dht.begin();

  leds.init();
   d4202:	4c20      	ldr	r4, [pc, #128]	; (d4284 <setup+0x88>)
  BLE.advertise(&advData);
}

void setup()
{
  Serial.begin(9600);
   d4204:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4208:	f003 fc3e 	bl	d7a88 <_ZN9USBSerial5beginEl>

  dht.begin();
   d420c:	481e      	ldr	r0, [pc, #120]	; (d4288 <setup+0x8c>)
   d420e:	f000 fd49 	bl	d4ca4 <_ZN3DHT5beginEv>

  leds.init();
   d4212:	4620      	mov	r0, r4
   d4214:	f000 fba4 	bl	d4960 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d4218:	ed9f 1a1c 	vldr	s2, [pc, #112]	; d428c <setup+0x90>
   d421c:	4620      	mov	r0, r4
   d421e:	eef0 0a41 	vmov.f32	s1, s2
   d4222:	eeb0 0a41 	vmov.f32	s0, s2
   d4226:	2100      	movs	r1, #0
   d4228:	f000 fc3a 	bl	d4aa0 <_ZN12ChainableLED11setColorHSBEhfff>

  pinMode(A0, INPUT);
   d422c:	2100      	movs	r1, #0
   d422e:	2013      	movs	r0, #19
   d4230:	f003 fd80 	bl	d7d34 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::value(), NULL);
   d4234:	2300      	movs	r3, #0
   d4236:	2209      	movs	r2, #9
   d4238:	4915      	ldr	r1, [pc, #84]	; (d4290 <setup+0x94>)
   d423a:	4816      	ldr	r0, [pc, #88]	; (d4294 <setup+0x98>)
   d423c:	f001 f9f0 	bl	d5620 <spark_variable>
   d4240:	2300      	movs	r3, #0
   d4242:	2209      	movs	r2, #9
   d4244:	4914      	ldr	r1, [pc, #80]	; (d4298 <setup+0x9c>)
   d4246:	4815      	ldr	r0, [pc, #84]	; (d429c <setup+0xa0>)
   d4248:	f001 f9ea 	bl	d5620 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d424c:	4a14      	ldr	r2, [pc, #80]	; (d42a0 <setup+0xa4>)
   d424e:	4915      	ldr	r1, [pc, #84]	; (d42a4 <setup+0xa8>)
   d4250:	4815      	ldr	r0, [pc, #84]	; (d42a8 <setup+0xac>)
   d4252:	f002 fba2 	bl	d699a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("temp", temp_dbl);
  Particle.variable("humidity", humidity_dbl);

  Particle.function("toggleLed", toggleLed);

  Particle.publishVitals(10);
   d4256:	210a      	movs	r1, #10
   d4258:	4814      	ldr	r0, [pc, #80]	; (d42ac <setup+0xb0>)
   d425a:	f002 fbb5 	bl	d69c8 <_ZN10CloudClass13publishVitalsEm>

  configureBLE();
   d425e:	f7ff ff79 	bl	d4154 <_Z12configureBLEv>

  pinMode(D7, OUTPUT);
   d4262:	2101      	movs	r1, #1
   d4264:	2007      	movs	r0, #7
   d4266:	f003 fd65 	bl	d7d34 <pinMode>
  pinMode(D4, INPUT_PULLUP);
   d426a:	2102      	movs	r1, #2
   d426c:	2004      	movs	r0, #4
   d426e:	f003 fd61 	bl	d7d34 <pinMode>
    static uint16_t buttonPushed(uint8_t button=0) {
        return system_button_pushed_duration(button, NULL);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
   d4272:	2300      	movs	r3, #0
   d4274:	4a0e      	ldr	r2, [pc, #56]	; (d42b0 <setup+0xb4>)
   d4276:	2080      	movs	r0, #128	; 0x80
   d4278:	2100      	movs	r1, #0

  System.on(button_status, button_handler);
}
   d427a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d427e:	f001 b987 	b.w	d5590 <system_subscribe_event>
   d4282:	bf00      	nop
   d4284:	2003e43c 	.word	0x2003e43c
   d4288:	2003e48c 	.word	0x2003e48c
   d428c:	00000000 	.word	0x00000000
   d4290:	2003e480 	.word	0x2003e480
   d4294:	000d8f5c 	.word	0x000d8f5c
   d4298:	2003e478 	.word	0x2003e478
   d429c:	000d8f61 	.word	0x000d8f61
   d42a0:	000d8f6a 	.word	0x000d8f6a
   d42a4:	000d40b9 	.word	0x000d40b9
   d42a8:	000d696f 	.word	0x000d696f
   d42ac:	2003e720 	.word	0x2003e720
   d42b0:	000d4131 	.word	0x000d4131

000d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42b6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ba:	b17c      	cbz	r4, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42bc:	6863      	ldr	r3, [r4, #4]
   d42be:	3b01      	subs	r3, #1
   d42c0:	6063      	str	r3, [r4, #4]
   d42c2:	b95b      	cbnz	r3, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42c4:	6823      	ldr	r3, [r4, #0]
   d42c6:	4620      	mov	r0, r4
   d42c8:	689b      	ldr	r3, [r3, #8]
   d42ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42cc:	68a3      	ldr	r3, [r4, #8]
   d42ce:	3b01      	subs	r3, #1
   d42d0:	60a3      	str	r3, [r4, #8]
   d42d2:	b91b      	cbnz	r3, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42d4:	6823      	ldr	r3, [r4, #0]
   d42d6:	4620      	mov	r0, r4
   d42d8:	68db      	ldr	r3, [r3, #12]
   d42da:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42dc:	4628      	mov	r0, r5
   d42de:	bd38      	pop	{r3, r4, r5, pc}

000d42e0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42e2:	460e      	mov	r6, r1
   d42e4:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d42e6:	2100      	movs	r1, #0
   d42e8:	4604      	mov	r4, r0
   d42ea:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d42ec:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d42ee:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d42f0:	4619      	mov	r1, r3
   d42f2:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42f4:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d42f6:	f001 fb17 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d42fa:	9916      	ldr	r1, [sp, #88]	; 0x58
   d42fc:	4628      	mov	r0, r5
   d42fe:	f001 fb13 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4302:	aa10      	add	r2, sp, #64	; 0x40
   d4304:	783b      	ldrb	r3, [r7, #0]
   d4306:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d430a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d430c:	9302      	str	r3, [sp, #8]
   d430e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	4620      	mov	r0, r4
   d4314:	9500      	str	r5, [sp, #0]
   d4316:	ab06      	add	r3, sp, #24
   d4318:	4631      	mov	r1, r6
   d431a:	f002 f8ff 	bl	d651c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d431e:	4620      	mov	r0, r4
   d4320:	b011      	add	sp, #68	; 0x44
   d4322:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4324 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4324:	b570      	push	{r4, r5, r6, lr}
   d4326:	4604      	mov	r4, r0
   d4328:	460e      	mov	r6, r1
   d432a:	4615      	mov	r5, r2
		insertCheckSeparator();
   d432c:	f000 ff00 	bl	d5130 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4330:	2201      	movs	r2, #1
   d4332:	4631      	mov	r1, r6
   d4334:	4620      	mov	r0, r4
   d4336:	f000 fe6f 	bl	d5018 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d433a:	4620      	mov	r0, r4
   d433c:	213a      	movs	r1, #58	; 0x3a
   d433e:	f000 fe0d 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4342:	462a      	mov	r2, r5
   d4344:	4620      	mov	r0, r4
   d4346:	4902      	ldr	r1, [pc, #8]	; (d4350 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d4348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d434c:	f000 be56 	b.w	d4ffc <_ZN10JsonWriter13insertsprintfEPKcz>
   d4350:	000d8fb3 	.word	0x000d8fb3

000d4354 <_Z18createEventPayloadiid>:

  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
   d4354:	b530      	push	{r4, r5, lr}
   d4356:	ed2d 8b02 	vpush	{d8}
   d435a:	eeb0 8a40 	vmov.f32	s16, s0
   d435e:	eef0 8a60 	vmov.f32	s17, s1
   d4362:	b0d3      	sub	sp, #332	; 0x14c
   d4364:	4605      	mov	r5, r0
   d4366:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4368:	f44f 7280 	mov.w	r2, #256	; 0x100
   d436c:	a912      	add	r1, sp, #72	; 0x48
   d436e:	a806      	add	r0, sp, #24
   d4370:	f000 fde2 	bl	d4f38 <_ZN10JsonWriterC1EPcj>
   d4374:	4b1e      	ldr	r3, [pc, #120]	; (d43f0 <_Z18createEventPayloadiid+0x9c>)
   d4376:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4378:	227d      	movs	r2, #125	; 0x7d
   d437a:	217b      	movs	r1, #123	; 0x7b
   d437c:	a806      	add	r0, sp, #24
   d437e:	f000 fdfb 	bl	d4f78 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4382:	462a      	mov	r2, r5
   d4384:	a806      	add	r0, sp, #24
   d4386:	491b      	ldr	r1, [pc, #108]	; (d43f4 <_Z18createEventPayloadiid+0xa0>)
   d4388:	f7ff ffcc 	bl	d4324 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d438c:	4622      	mov	r2, r4
   d438e:	491a      	ldr	r1, [pc, #104]	; (d43f8 <_Z18createEventPayloadiid+0xa4>)
   d4390:	a806      	add	r0, sp, #24
   d4392:	f7ff ffc7 	bl	d4324 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4396:	a806      	add	r0, sp, #24
   d4398:	f000 feca 	bl	d5130 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d439c:	2201      	movs	r2, #1
   d439e:	a806      	add	r0, sp, #24
   d43a0:	4916      	ldr	r1, [pc, #88]	; (d43fc <_Z18createEventPayloadiid+0xa8>)
   d43a2:	f000 fe39 	bl	d5018 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d43a6:	213a      	movs	r1, #58	; 0x3a
   d43a8:	a806      	add	r0, sp, #24
   d43aa:	f000 fdd7 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d43ae:	eeb0 0a48 	vmov.f32	s0, s16
   d43b2:	eef0 0a68 	vmov.f32	s1, s17
   d43b6:	a806      	add	r0, sp, #24
   d43b8:	f000 fec6 	bl	d5148 <_ZN10JsonWriter11insertValueEd>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d43bc:	a806      	add	r0, sp, #24
   d43be:	f000 fdec 	bl	d4f9a <_ZN10JsonWriter19finishObjectOrArrayEv>
   d43c2:	9b07      	ldr	r3, [sp, #28]
   d43c4:	9303      	str	r3, [sp, #12]
   d43c6:	4b0e      	ldr	r3, [pc, #56]	; (d4400 <_Z18createEventPayloadiid+0xac>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43c8:	9a03      	ldr	r2, [sp, #12]
   d43ca:	781b      	ldrb	r3, [r3, #0]
   d43cc:	490d      	ldr	r1, [pc, #52]	; (d4404 <_Z18createEventPayloadiid+0xb0>)
   d43ce:	f88d 3000 	strb.w	r3, [sp]
   d43d2:	a804      	add	r0, sp, #16
   d43d4:	233c      	movs	r3, #60	; 0x3c
   d43d6:	f002 fc05 	bl	d6be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43da:	a805      	add	r0, sp, #20
   d43dc:	f7ff ff6a 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
  JsonWriterStatic<256> jw;
   d43e0:	a806      	add	r0, sp, #24
   d43e2:	f7ff fe8f 	bl	d4104 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d43e6:	b053      	add	sp, #332	; 0x14c
   d43e8:	ecbd 8b02 	vpop	{d8}
   d43ec:	bd30      	pop	{r4, r5, pc}
   d43ee:	bf00      	nop
   d43f0:	000d8f54 	.word	0x000d8f54
   d43f4:	000d8f5c 	.word	0x000d8f5c
   d43f8:	000d8f61 	.word	0x000d8f61
   d43fc:	000d8f74 	.word	0x000d8f74
   d4400:	2003e468 	.word	0x2003e468
   d4404:	000d8f7a 	.word	0x000d8f7a

000d4408 <loop>:

  System.on(button_status, button_handler);
}

void loop()
{
   d4408:	b570      	push	{r4, r5, r6, lr}
  if (timeToSleep) 
   d440a:	4a7b      	ldr	r2, [pc, #492]	; (d45f8 <loop+0x1f0>)
   d440c:	7813      	ldrb	r3, [r2, #0]

  System.on(button_status, button_handler);
}

void loop()
{
   d440e:	b08e      	sub	sp, #56	; 0x38
  if (timeToSleep) 
   d4410:	b19b      	cbz	r3, d443a <loop+0x32>
  {
    timeToSleep = false;
   d4412:	2300      	movs	r3, #0
   d4414:	7013      	strb	r3, [r2, #0]
   d4416:	4a79      	ldr	r2, [pc, #484]	; (d45fc <loop+0x1f4>)
   d4418:	6811      	ldr	r1, [r2, #0]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d441a:	9102      	str	r1, [sp, #8]
   d441c:	2204      	movs	r2, #4
   d441e:	f8ad 201e 	strh.w	r2, [sp, #30]
   d4422:	2201      	movs	r2, #1
   d4424:	e88d 000c 	stmia.w	sp, {r2, r3}
   d4428:	f10d 011e 	add.w	r1, sp, #30
   d442c:	f10d 031d 	add.w	r3, sp, #29
   d4430:	a80a      	add	r0, sp, #40	; 0x28
   d4432:	f88d 201d 	strb.w	r2, [sp, #29]
   d4436:	f003 f9d9 	bl	d77ec <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(D4, RISING);
  }

  unsigned long currentMillis = millis();

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
   d443a:	4c71      	ldr	r4, [pc, #452]	; (d4600 <loop+0x1f8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d443c:	f000 ff58 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
   d4440:	6823      	ldr	r3, [r4, #0]
   d4442:	1ac0      	subs	r0, r0, r3
   d4444:	f247 532f 	movw	r3, #29999	; 0x752f
   d4448:	4298      	cmp	r0, r3
   d444a:	f240 80c7 	bls.w	d45dc <loop+0x1d4>
   d444e:	f000 ff4f 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
  {
    lastUpdate = millis();
   d4452:	6020      	str	r0, [r4, #0]

    temp = dht.getTempFarenheit();
   d4454:	486b      	ldr	r0, [pc, #428]	; (d4604 <loop+0x1fc>)
   d4456:	4c6c      	ldr	r4, [pc, #432]	; (d4608 <loop+0x200>)
    humidity = dht.getHumidity();
   d4458:	4d6c      	ldr	r5, [pc, #432]	; (d460c <loop+0x204>)

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
   d445a:	f000 fd0d 	bl	d4e78 <_ZN3DHT16getTempFarenheitEv>
   d445e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    humidity = dht.getHumidity();
   d4462:	4868      	ldr	r0, [pc, #416]	; (d4604 <loop+0x1fc>)

  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
   d4464:	ed84 0a00 	vstr	s0, [r4]
    humidity = dht.getHumidity();
   d4468:	f000 fd28 	bl	d4ebc <_ZN3DHT11getHumidityEv>
   d446c:	eefd 7ac0 	vcvt.s32.f32	s15, s0

    temp_dbl = temp;
   d4470:	6820      	ldr	r0, [r4, #0]
  if (currentMillis - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = dht.getTempFarenheit();
    humidity = dht.getHumidity();
   d4472:	edc5 7a00 	vstr	s15, [r5]
   d4476:	ee17 6a90 	vmov	r6, s15

    temp_dbl = temp;
   d447a:	f003 ff83 	bl	d8384 <__aeabi_i2d>
   d447e:	4b64      	ldr	r3, [pc, #400]	; (d4610 <loop+0x208>)
   d4480:	e9c3 0100 	strd	r0, r1, [r3]
    humidity_dbl = humidity;
   d4484:	4630      	mov	r0, r6
   d4486:	f003 ff7d 	bl	d8384 <__aeabi_i2d>
   d448a:	4b62      	ldr	r3, [pc, #392]	; (d4614 <loop+0x20c>)

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d448c:	4e62      	ldr	r6, [pc, #392]	; (d4618 <loop+0x210>)

    temp = dht.getTempFarenheit();
    humidity = dht.getHumidity();

    temp_dbl = temp;
    humidity_dbl = humidity;
   d448e:	e9c3 0100 	strd	r0, r1, [r3]

    Serial.printlnf("Temp: %f", temp);
   d4492:	f003 fb05 	bl	d7aa0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4496:	6823      	ldr	r3, [r4, #0]
   d4498:	4a60      	ldr	r2, [pc, #384]	; (d461c <loop+0x214>)
   d449a:	2101      	movs	r1, #1
   d449c:	f002 ffd1 	bl	d7442 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %f", humidity);
   d44a0:	f003 fafe 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d44a4:	682b      	ldr	r3, [r5, #0]
   d44a6:	4a5e      	ldr	r2, [pc, #376]	; (d4620 <loop+0x218>)
   d44a8:	2101      	movs	r1, #1
   d44aa:	f002 ffca 	bl	d7442 <_ZN5Print11printf_implEbPKcz>

    double lightAnalogVal = analogRead(A0);
   d44ae:	2013      	movs	r0, #19
   d44b0:	f003 fc6a 	bl	d7d88 <analogRead>
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d44b4:	f003 ff66 	bl	d8384 <__aeabi_i2d>
   d44b8:	ed9f 3b49 	vldr	d3, [pc, #292]	; d45e0 <loop+0x1d8>
   d44bc:	ed9f 4b4a 	vldr	d4, [pc, #296]	; d45e8 <loop+0x1e0>
   d44c0:	eeb0 1a43 	vmov.f32	s2, s6
   d44c4:	eef0 1a63 	vmov.f32	s3, s7
   d44c8:	ed9f 2b49 	vldr	d2, [pc, #292]	; d45f0 <loop+0x1e8>
   d44cc:	ec41 0b10 	vmov	d0, r0, r1
   d44d0:	f001 f956 	bl	d5780 <_Z3mapddddd>

    createEventPayload(temp, humidity, currentLightLevel);
   d44d4:	6829      	ldr	r1, [r5, #0]
   d44d6:	6820      	ldr	r0, [r4, #0]

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d44d8:	ed86 0b00 	vstr	d0, [r6]

    createEventPayload(temp, humidity, currentLightLevel);
   d44dc:	f7ff ff3a 	bl	d4354 <_Z18createEventPayloadiid>

    if (currentLightLevel > 50)
   d44e0:	ed96 0b00 	vldr	d0, [r6]
   d44e4:	2200      	movs	r2, #0
   d44e6:	ec51 0b10 	vmov	r0, r1, d0
   d44ea:	4b4e      	ldr	r3, [pc, #312]	; (d4624 <loop+0x21c>)
   d44ec:	ed8d 0b04 	vstr	d0, [sp, #16]
   d44f0:	f004 fa3e 	bl	d8970 <__aeabi_dcmpgt>
   d44f4:	ed9d 0b04 	vldr	d0, [sp, #16]
   d44f8:	b198      	cbz	r0, d4522 <loop+0x11a>
    {
      Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   d44fa:	2106      	movs	r1, #6
   d44fc:	a80a      	add	r0, sp, #40	; 0x28
   d44fe:	f003 f906 	bl	d770e <_ZN6StringC1Edi>
   d4502:	4b49      	ldr	r3, [pc, #292]	; (d4628 <loop+0x220>)
   d4504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4506:	781b      	ldrb	r3, [r3, #0]
   d4508:	f88d 3000 	strb.w	r3, [sp]
   d450c:	4947      	ldr	r1, [pc, #284]	; (d462c <loop+0x224>)
   d450e:	233c      	movs	r3, #60	; 0x3c
   d4510:	a808      	add	r0, sp, #32
   d4512:	f002 fb67 	bl	d6be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4516:	a809      	add	r0, sp, #36	; 0x24
   d4518:	f7ff fecc 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d451c:	a80a      	add	r0, sp, #40	; 0x28
   d451e:	f003 f871 	bl	d7604 <_ZN6StringD1Ev>
    }

    if (BLE.connected())
   d4522:	f001 fc71 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4526:	f001 fcf9 	bl	d5f1c <_ZNK8particle14BleLocalDevice9connectedEv>
   d452a:	2800      	cmp	r0, #0
   d452c:	d056      	beq.n	d45dc <loop+0x1d4>
    {
      uint8_t uptime = (uint8_t)DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_UPTIME);
   d452e:	2006      	movs	r0, #6
   d4530:	f000 f93a 	bl	d47a8 <_ZN17DiagnosticsHelper8getValueEt>
   d4534:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4536:	2300      	movs	r3, #0
   d4538:	f801 0d1c 	strb.w	r0, [r1, #-28]!
   d453c:	2201      	movs	r2, #1
   d453e:	483c      	ldr	r0, [pc, #240]	; (d4630 <loop+0x228>)
   d4540:	f001 fbb0 	bl	d5ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      uptimeCharacteristic.setValue(uptime);

      uint8_t signalStrength = (uint8_t)(DiagnosticsHelper::getValue(DIAG_ID_NETWORK_SIGNAL_STRENGTH) >> 8);
   d4544:	2021      	movs	r0, #33	; 0x21
   d4546:	f000 f92f 	bl	d47a8 <_ZN17DiagnosticsHelper8getValueEt>
   d454a:	a90e      	add	r1, sp, #56	; 0x38
   d454c:	1200      	asrs	r0, r0, #8
   d454e:	f801 0d18 	strb.w	r0, [r1, #-24]!
   d4552:	2300      	movs	r3, #0
   d4554:	2201      	movs	r2, #1
   d4556:	4837      	ldr	r0, [pc, #220]	; (d4634 <loop+0x22c>)
   d4558:	f001 fba4 	bl	d5ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      signalStrengthCharacteristic.setValue(signalStrength);

      int32_t usedRAM = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_USED_RAM);
   d455c:	201a      	movs	r0, #26
   d455e:	f000 f923 	bl	d47a8 <_ZN17DiagnosticsHelper8getValueEt>
   d4562:	4604      	mov	r4, r0
      int32_t totalRAM = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_TOTAL_RAM);
   d4564:	2019      	movs	r0, #25
   d4566:	f000 f91f 	bl	d47a8 <_ZN17DiagnosticsHelper8getValueEt>
      int32_t freeMem = (totalRAM - usedRAM);
   d456a:	a90e      	add	r1, sp, #56	; 0x38
   d456c:	1b00      	subs	r0, r0, r4
   d456e:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4572:	2300      	movs	r3, #0
   d4574:	2204      	movs	r2, #4
   d4576:	4830      	ldr	r0, [pc, #192]	; (d4638 <loop+0x230>)
   d4578:	f001 fb94 	bl	d5ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      freeMemoryCharacteristic.setValue(freeMem);

      Serial.printlnf("Uptime: %d", uptime);
   d457c:	f003 fa90 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d4580:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d4584:	4a2d      	ldr	r2, [pc, #180]	; (d463c <loop+0x234>)
   d4586:	2101      	movs	r1, #1
   d4588:	f002 ff5b 	bl	d7442 <_ZN5Print11printf_implEbPKcz>
      Serial.print("Strength: ");
   d458c:	f003 fa88 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d4590:	492b      	ldr	r1, [pc, #172]	; (d4640 <loop+0x238>)
   d4592:	f002 ff23 	bl	d73dc <_ZN5Print5printEPKc>
      Serial.println(signalStrength);
   d4596:	f003 fa83 	bl	d7aa0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d459a:	220a      	movs	r2, #10
   d459c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   d45a0:	4604      	mov	r4, r0
   d45a2:	f002 ff2e 	bl	d7402 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45a6:	4620      	mov	r0, r4
   d45a8:	f002 ff1f 	bl	d73ea <_ZN5Print7printlnEv>
      Serial.print("free memory: ");
   d45ac:	f003 fa78 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d45b0:	4924      	ldr	r1, [pc, #144]	; (d4644 <loop+0x23c>)
   d45b2:	f002 ff13 	bl	d73dc <_ZN5Print5printEPKc>
      Serial.println(freeMem);
   d45b6:	f003 fa73 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d45ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d45bc:	2c00      	cmp	r4, #0
   d45be:	4605      	mov	r5, r0
   d45c0:	da04      	bge.n	d45cc <loop+0x1c4>
            t = print('-');
   d45c2:	212d      	movs	r1, #45	; 0x2d
   d45c4:	f002 ff0e 	bl	d73e4 <_ZN5Print5printEc>
            val = -n;
   d45c8:	4261      	negs	r1, r4
   d45ca:	e000      	b.n	d45ce <loop+0x1c6>
        } else {
            val = n;
   d45cc:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d45ce:	220a      	movs	r2, #10
   d45d0:	4628      	mov	r0, r5
   d45d2:	f002 ff16 	bl	d7402 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45d6:	4628      	mov	r0, r5
   d45d8:	f002 ff07 	bl	d73ea <_ZN5Print7printlnEv>
    }
  }
}
   d45dc:	b00e      	add	sp, #56	; 0x38
   d45de:	bd70      	pop	{r4, r5, r6, pc}
	...
   d45ec:	40590000 	.word	0x40590000
   d45f0:	00000000 	.word	0x00000000
   d45f4:	40affe00 	.word	0x40affe00
   d45f8:	2003e488 	.word	0x2003e488
   d45fc:	2003e448 	.word	0x2003e448
   d4600:	2003e4ac 	.word	0x2003e4ac
   d4604:	2003e48c 	.word	0x2003e48c
   d4608:	2003e444 	.word	0x2003e444
   d460c:	2003e4a8 	.word	0x2003e4a8
   d4610:	2003e480 	.word	0x2003e480
   d4614:	2003e478 	.word	0x2003e478
   d4618:	2003e4b0 	.word	0x2003e4b0
   d461c:	000d8f83 	.word	0x000d8f83
   d4620:	000d8f8c 	.word	0x000d8f8c
   d4624:	40490000 	.word	0x40490000
   d4628:	2003e468 	.word	0x2003e468
   d462c:	000d8f99 	.word	0x000d8f99
   d4630:	2003e46c 	.word	0x2003e46c
   d4634:	2003e44c 	.word	0x2003e44c
   d4638:	2003e4a0 	.word	0x2003e4a0
   d463c:	000d8fab 	.word	0x000d8fab
   d4640:	000d8fb6 	.word	0x000d8fb6
   d4644:	000d8fc1 	.word	0x000d8fc1

000d4648 <_GLOBAL__sub_I_dht>:
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d464c:	4b3c      	ldr	r3, [pc, #240]	; (d4740 <_GLOBAL__sub_I_dht+0xf8>)
#include "Grove_ChainableLED.h"
#include "JsonParserGeneratorRK.h"
#include "DiagnosticsHelperRK.h"

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d464e:	4f3d      	ldr	r7, [pc, #244]	; (d4744 <_GLOBAL__sub_I_dht+0xfc>)
   d4650:	4e3d      	ldr	r6, [pc, #244]	; (d4748 <_GLOBAL__sub_I_dht+0x100>)
bool timeToSleep;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4652:	f8df a128 	ldr.w	sl, [pc, #296]	; d477c <_GLOBAL__sub_I_dht+0x134>
   d4656:	f8df 8128 	ldr.w	r8, [pc, #296]	; d4780 <_GLOBAL__sub_I_dht+0x138>
   d465a:	2400      	movs	r4, #0
   d465c:	601c      	str	r4, [r3, #0]
   d465e:	4b3b      	ldr	r3, [pc, #236]	; (d474c <_GLOBAL__sub_I_dht+0x104>)
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4660:	b090      	sub	sp, #64	; 0x40
   d4662:	2501      	movs	r5, #1
   d4664:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4666:	f000 fe4b 	bl	d5300 <HAL_Pin_Map>
#include "Grove_Temperature_And_Humidity_Sensor.h"
#include "Grove_ChainableLED.h"
#include "JsonParserGeneratorRK.h"
#include "DiagnosticsHelperRK.h"

DHT dht(D2);
   d466a:	2206      	movs	r2, #6
   d466c:	2102      	movs	r1, #2
   d466e:	4838      	ldr	r0, [pc, #224]	; (d4750 <_GLOBAL__sub_I_dht+0x108>)
   d4670:	f000 fb12 	bl	d4c98 <_ZN3DHTC1Ehh>
ChainableLED leds(A4, A5, 1);
   d4674:	462b      	mov	r3, r5
   d4676:	220e      	movs	r2, #14
   d4678:	210f      	movs	r1, #15
   d467a:	4638      	mov	r0, r7
   d467c:	f000 f8b6 	bl	d47ec <_ZN12ChainableLEDC1Ehhh>
   d4680:	4632      	mov	r2, r6
   d4682:	4934      	ldr	r1, [pc, #208]	; (d4754 <_GLOBAL__sub_I_dht+0x10c>)
   d4684:	4638      	mov	r0, r7
unsigned char buffer[64];
int count = 0;
bool timeToSleep;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4686:	4f34      	ldr	r7, [pc, #208]	; (d4758 <_GLOBAL__sub_I_dht+0x110>)
#include "Grove_ChainableLED.h"
#include "JsonParserGeneratorRK.h"
#include "DiagnosticsHelperRK.h"

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d4688:	f003 fbd8 	bl	d7e3c <__aeabi_atexit>

SYSTEM_THREAD(ENABLED);
   d468c:	4621      	mov	r1, r4
   d468e:	4628      	mov	r0, r5
   d4690:	f000 ff86 	bl	d55a0 <system_thread_set_state>
unsigned char buffer[64];
int count = 0;
bool timeToSleep;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4694:	4931      	ldr	r1, [pc, #196]	; (d475c <_GLOBAL__sub_I_dht+0x114>)
   d4696:	4638      	mov	r0, r7
   d4698:	f001 fa31 	bl	d5afe <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d469c:	ad0b      	add	r5, sp, #44	; 0x2c
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d469e:	f04f 0910 	mov.w	r9, #16
   d46a2:	492f      	ldr	r1, [pc, #188]	; (d4760 <_GLOBAL__sub_I_dht+0x118>)
   d46a4:	f88d 9014 	strb.w	r9, [sp, #20]
   d46a8:	a806      	add	r0, sp, #24
   d46aa:	f001 fa28 	bl	d5afe <_ZN8particle7BleUuidC1EPKc>
   d46ae:	4639      	mov	r1, r7
   d46b0:	4628      	mov	r0, r5
   d46b2:	f001 f939 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
   d46b6:	ab06      	add	r3, sp, #24
   d46b8:	aa05      	add	r2, sp, #20
   d46ba:	9402      	str	r4, [sp, #8]
   d46bc:	9401      	str	r4, [sp, #4]
   d46be:	9500      	str	r5, [sp, #0]
   d46c0:	4928      	ldr	r1, [pc, #160]	; (d4764 <_GLOBAL__sub_I_dht+0x11c>)
   d46c2:	4650      	mov	r0, sl
   d46c4:	f7ff fe0c 	bl	d42e0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d46c8:	4632      	mov	r2, r6
   d46ca:	4641      	mov	r1, r8
   d46cc:	4650      	mov	r0, sl
   d46ce:	f003 fbb5 	bl	d7e3c <__aeabi_atexit>
BleCharacteristic signalStrengthCharacteristic("strength", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
   d46d2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d4784 <_GLOBAL__sub_I_dht+0x13c>
   d46d6:	4924      	ldr	r1, [pc, #144]	; (d4768 <_GLOBAL__sub_I_dht+0x120>)
   d46d8:	f88d 9014 	strb.w	r9, [sp, #20]
   d46dc:	a806      	add	r0, sp, #24
   d46de:	f001 fa0e 	bl	d5afe <_ZN8particle7BleUuidC1EPKc>
   d46e2:	4639      	mov	r1, r7
   d46e4:	4628      	mov	r0, r5
   d46e6:	f001 f91f 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
   d46ea:	ab06      	add	r3, sp, #24
   d46ec:	aa05      	add	r2, sp, #20
   d46ee:	9402      	str	r4, [sp, #8]
   d46f0:	9401      	str	r4, [sp, #4]
   d46f2:	9500      	str	r5, [sp, #0]
   d46f4:	491d      	ldr	r1, [pc, #116]	; (d476c <_GLOBAL__sub_I_dht+0x124>)
   d46f6:	4650      	mov	r0, sl
   d46f8:	f7ff fdf2 	bl	d42e0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d46fc:	4632      	mov	r2, r6
   d46fe:	4641      	mov	r1, r8
   d4700:	4650      	mov	r0, sl
   d4702:	f003 fb9b 	bl	d7e3c <__aeabi_atexit>
BleCharacteristic freeMemoryCharacteristic("freeMemory", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   d4706:	491a      	ldr	r1, [pc, #104]	; (d4770 <_GLOBAL__sub_I_dht+0x128>)
   d4708:	f88d 9014 	strb.w	r9, [sp, #20]
   d470c:	a806      	add	r0, sp, #24
   d470e:	f001 f9f6 	bl	d5afe <_ZN8particle7BleUuidC1EPKc>
   d4712:	4639      	mov	r1, r7
   d4714:	4f17      	ldr	r7, [pc, #92]	; (d4774 <_GLOBAL__sub_I_dht+0x12c>)
   d4716:	4628      	mov	r0, r5
   d4718:	f001 f906 	bl	d5928 <_ZN8particle7BleUuidC1ERKS0_>
   d471c:	ab06      	add	r3, sp, #24
   d471e:	aa05      	add	r2, sp, #20
   d4720:	9402      	str	r4, [sp, #8]
   d4722:	9401      	str	r4, [sp, #4]
   d4724:	9500      	str	r5, [sp, #0]
   d4726:	4914      	ldr	r1, [pc, #80]	; (d4778 <_GLOBAL__sub_I_dht+0x130>)
   d4728:	4638      	mov	r0, r7
   d472a:	f7ff fdd9 	bl	d42e0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d472e:	4632      	mov	r2, r6
   d4730:	4641      	mov	r1, r8
   d4732:	4638      	mov	r0, r7
   d4734:	f003 fb82 	bl	d7e3c <__aeabi_atexit>
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
   d4738:	b010      	add	sp, #64	; 0x40
   d473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d473e:	bf00      	nop
   d4740:	2003e448 	.word	0x2003e448
   d4744:	2003e43c 	.word	0x2003e43c
   d4748:	2003e438 	.word	0x2003e438
   d474c:	2003e468 	.word	0x2003e468
   d4750:	2003e48c 	.word	0x2003e48c
   d4754:	000d4807 	.word	0x000d4807
   d4758:	2003e454 	.word	0x2003e454
   d475c:	000d8fcf 	.word	0x000d8fcf
   d4760:	000d8ff4 	.word	0x000d8ff4
   d4764:	000d9019 	.word	0x000d9019
   d4768:	000d9020 	.word	0x000d9020
   d476c:	000d9045 	.word	0x000d9045
   d4770:	000d904e 	.word	0x000d904e
   d4774:	2003e4a0 	.word	0x2003e4a0
   d4778:	000d9073 	.word	0x000d9073
   d477c:	2003e46c 	.word	0x2003e46c
   d4780:	000d5f69 	.word	0x000d5f69
   d4784:	2003e44c 	.word	0x2003e44c

000d4788 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d4788:	b538      	push	{r3, r4, r5, lr}
   d478a:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d478c:	68c0      	ldr	r0, [r0, #12]
   d478e:	1883      	adds	r3, r0, r2
   d4790:	2b0a      	cmp	r3, #10
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d4792:	4615      	mov	r5, r2
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d4794:	d805      	bhi.n	d47a2 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   d4796:	4420      	add	r0, r4
   d4798:	f004 fb39 	bl	d8e0e <memcpy>
                d->offset += size;
   d479c:	68e3      	ldr	r3, [r4, #12]
   d479e:	441d      	add	r5, r3
   d47a0:	60e5      	str	r5, [r4, #12]
            }
            return true;
        }
   d47a2:	2001      	movs	r0, #1
   d47a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47a8 <_ZN17DiagnosticsHelper8getValueEt>:

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d47a8:	b510      	push	{r4, lr}
   d47aa:	b088      	sub	sp, #32
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d47ac:	2400      	movs	r4, #0
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47ae:	ab04      	add	r3, sp, #16
   d47b0:	2201      	movs	r2, #1

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d47b2:	f8ad 000e 	strh.w	r0, [sp, #14]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47b6:	9300      	str	r3, [sp, #0]
   d47b8:	9401      	str	r4, [sp, #4]
   d47ba:	4b09      	ldr	r3, [pc, #36]	; (d47e0 <_ZN17DiagnosticsHelper8getValueEt+0x38>)
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d47bc:	f8ad 4016 	strh.w	r4, [sp, #22]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47c0:	4611      	mov	r1, r2
   d47c2:	f10d 000e 	add.w	r0, sp, #14
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d47c6:	f8ad 4018 	strh.w	r4, [sp, #24]
   d47ca:	9407      	str	r4, [sp, #28]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d47cc:	f000 ff00 	bl	d55d0 <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   d47d0:	9b07      	ldr	r3, [sp, #28]
   d47d2:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   d47d4:	bf0c      	ite	eq
   d47d6:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   d47da:	4620      	movne	r0, r4
    }
}
   d47dc:	b008      	add	sp, #32
   d47de:	bd10      	pop	{r4, pc}
   d47e0:	000d4789 	.word	0x000d4789

000d47e4 <_GLOBAL__sub_I__ZN17DiagnosticsHelper8getValueEt>:
   d47e4:	f000 bd8c 	b.w	d5300 <HAL_Pin_Map>

000d47e8 <_GLOBAL__sub_I__ZN10UltrasonicC2Ei>:
   d47e8:	f000 bd8a 	b.w	d5300 <HAL_Pin_Map>

000d47ec <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d47ec:	b510      	push	{r4, lr}
   d47ee:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d47f0:	7001      	strb	r1, [r0, #0]
   d47f2:	7042      	strb	r2, [r0, #1]
   d47f4:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d47f6:	2101      	movs	r1, #1
   d47f8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d47fc:	f004 fae2 	bl	d8dc4 <calloc>
   d4800:	6060      	str	r0, [r4, #4]
}
   d4802:	4620      	mov	r0, r4
   d4804:	bd10      	pop	{r4, pc}

000d4806 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4806:	b510      	push	{r4, lr}
   d4808:	4604      	mov	r4, r0
{
    free(_led_state);
   d480a:	6840      	ldr	r0, [r0, #4]
   d480c:	f000 ff90 	bl	d5730 <free>
}
   d4810:	4620      	mov	r0, r4
   d4812:	bd10      	pop	{r4, pc}

000d4814 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4814:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4816:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4818:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d481a:	7800      	ldrb	r0, [r0, #0]
   d481c:	f003 fa9b 	bl	d7d56 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4820:	2014      	movs	r0, #20
   d4822:	f000 fd5d 	bl	d52e0 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4826:	7820      	ldrb	r0, [r4, #0]
   d4828:	2101      	movs	r1, #1
   d482a:	f003 fa94 	bl	d7d56 <digitalWrite>
   d482e:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4834:	f000 bd54 	b.w	d52e0 <HAL_Delay_Microseconds>

000d4838 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4838:	b570      	push	{r4, r5, r6, lr}
   d483a:	4606      	mov	r6, r0
   d483c:	460d      	mov	r5, r1
   d483e:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4840:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d4844:	bf14      	ite	ne
   d4846:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4848:	2100      	moveq	r1, #0
   d484a:	7870      	ldrb	r0, [r6, #1]
   d484c:	f003 fa83 	bl	d7d56 <digitalWrite>
   d4850:	3c01      	subs	r4, #1
        clk();
   d4852:	4630      	mov	r0, r6
   d4854:	f7ff ffde 	bl	d4814 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4858:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d485a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d485e:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4860:	d1ee      	bne.n	d4840 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d4862:	bd70      	pop	{r4, r5, r6, pc}

000d4864 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4864:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d486a:	460d      	mov	r5, r1
   d486c:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d486e:	bf14      	ite	ne
   d4870:	21c0      	movne	r1, #192	; 0xc0
   d4872:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4874:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4876:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4878:	bf58      	it	pl
   d487a:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d487e:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4880:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4882:	bf58      	it	pl
   d4884:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4888:	0670      	lsls	r0, r6, #25
   d488a:	bf58      	it	pl
   d488c:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4890:	062a      	lsls	r2, r5, #24
   d4892:	bf58      	it	pl
   d4894:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4898:	066b      	lsls	r3, r5, #25
   d489a:	bf58      	it	pl
   d489c:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d48a0:	4620      	mov	r0, r4
   d48a2:	f7ff ffc9 	bl	d4838 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d48a6:	4639      	mov	r1, r7
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff ffc5 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d48ae:	4631      	mov	r1, r6
   d48b0:	4620      	mov	r0, r4
   d48b2:	f7ff ffc1 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d48b6:	4629      	mov	r1, r5
   d48b8:	4620      	mov	r0, r4
}
   d48ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d48be:	f7ff bfbb 	b.w	d4838 <_ZN12ChainableLED8sendByteEh>

000d48c2 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d48c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48c6:	4604      	mov	r4, r0
   d48c8:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d48ca:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d48cc:	4691      	mov	r9, r2
   d48ce:	469a      	mov	sl, r3
   d48d0:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d48d4:	f7ff ffb0 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48d8:	2100      	movs	r1, #0
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff ffac 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48e0:	2100      	movs	r1, #0
   d48e2:	4620      	mov	r0, r4
   d48e4:	f7ff ffa8 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48e8:	2100      	movs	r1, #0
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff ffa4 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d48f0:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d48f2:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d48f6:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d48f8:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d48fc:	78a2      	ldrb	r2, [r4, #2]
   d48fe:	b2f3      	uxtb	r3, r6
   d4900:	429a      	cmp	r2, r3
   d4902:	d91b      	bls.n	d493c <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d4904:	42ab      	cmp	r3, r5
   d4906:	d10d      	bne.n	d4924 <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4908:	6861      	ldr	r1, [r4, #4]
   d490a:	fb15 f207 	smulbb	r2, r5, r7
   d490e:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d4912:	6862      	ldr	r2, [r4, #4]
   d4914:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4918:	2202      	movs	r2, #2
   d491a:	fb17 2205 	smlabb	r2, r7, r5, r2
   d491e:	6861      	ldr	r1, [r4, #4]
   d4920:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d4924:	6860      	ldr	r0, [r4, #4]
   d4926:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d492a:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d492c:	5c41      	ldrb	r1, [r0, r1]
   d492e:	7893      	ldrb	r3, [r2, #2]
   d4930:	7852      	ldrb	r2, [r2, #1]
   d4932:	4620      	mov	r0, r4
   d4934:	f7ff ff96 	bl	d4864 <_ZN12ChainableLED9sendColorEhhh>
   d4938:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d493a:	e7df      	b.n	d48fc <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d493c:	4620      	mov	r0, r4
   d493e:	2100      	movs	r1, #0
   d4940:	f7ff ff7a 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4944:	4620      	mov	r0, r4
   d4946:	2100      	movs	r1, #0
   d4948:	f7ff ff76 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d494c:	4620      	mov	r0, r4
   d494e:	2100      	movs	r1, #0
   d4950:	f7ff ff72 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4954:	4620      	mov	r0, r4
   d4956:	2100      	movs	r1, #0
}
   d4958:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d495c:	f7ff bf6c 	b.w	d4838 <_ZN12ChainableLED8sendByteEh>

000d4960 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d4960:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4962:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4964:	2101      	movs	r1, #1
   d4966:	7800      	ldrb	r0, [r0, #0]
   d4968:	f003 f9e4 	bl	d7d34 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d496c:	2101      	movs	r1, #1
   d496e:	7860      	ldrb	r0, [r4, #1]
   d4970:	f003 f9e0 	bl	d7d34 <pinMode>
   d4974:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d4976:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4978:	78a3      	ldrb	r3, [r4, #2]
   d497a:	b2e9      	uxtb	r1, r5
   d497c:	428b      	cmp	r3, r1
   d497e:	f105 0501 	add.w	r5, r5, #1
   d4982:	d906      	bls.n	d4992 <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d4984:	2300      	movs	r3, #0
   d4986:	9600      	str	r6, [sp, #0]
   d4988:	461a      	mov	r2, r3
   d498a:	4620      	mov	r0, r4
   d498c:	f7ff ff99 	bl	d48c2 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4990:	e7f2      	b.n	d4978 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d4992:	b002      	add	sp, #8
   d4994:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4998 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d499a:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d499e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d49a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49a6:	ed2d 8b04 	vpush	{d8-d9}
   d49aa:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d49ae:	bf48      	it	mi
   d49b0:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49b4:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d49b8:	eef4 8ae7 	vcmpe.f32	s17, s15
   d49bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d49c0:	bfc4      	itt	gt
   d49c2:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d49c6:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d49ca:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d49ce:	ee18 0a90 	vmov	r0, s17
   d49d2:	f003 fce9 	bl	d83a8 <__aeabi_f2d>
   d49d6:	a32f      	add	r3, pc, #188	; (adr r3, d4a94 <_Z7hue2rgbfff+0xfc>)
   d49d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49dc:	4604      	mov	r4, r0
   d49de:	460d      	mov	r5, r1
   d49e0:	f003 ffa8 	bl	d8934 <__aeabi_dcmplt>
   d49e4:	b160      	cbz	r0, d4a00 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d49e6:	ee79 7a48 	vsub.f32	s15, s18, s16
   d49ea:	ee17 0a90 	vmov	r0, s15
   d49ee:	f003 fcdb 	bl	d83a8 <__aeabi_f2d>
   d49f2:	2200      	movs	r2, #0
   d49f4:	4b26      	ldr	r3, [pc, #152]	; (d4a90 <_Z7hue2rgbfff+0xf8>)
   d49f6:	f003 fd2b 	bl	d8450 <__aeabi_dmul>
   d49fa:	4622      	mov	r2, r4
   d49fc:	462b      	mov	r3, r5
   d49fe:	e025      	b.n	d4a4c <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d4a00:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4a04:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a0c:	d42f      	bmi.n	d4a6e <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d4a0e:	a31e      	add	r3, pc, #120	; (adr r3, d4a88 <_Z7hue2rgbfff+0xf0>)
   d4a10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a14:	4620      	mov	r0, r4
   d4a16:	4629      	mov	r1, r5
   d4a18:	f003 ff8c 	bl	d8934 <__aeabi_dcmplt>
   d4a1c:	b350      	cbz	r0, d4a74 <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d4a1e:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4a22:	ee17 0a90 	vmov	r0, s15
   d4a26:	f003 fcbf 	bl	d83a8 <__aeabi_f2d>
   d4a2a:	4622      	mov	r2, r4
   d4a2c:	4606      	mov	r6, r0
   d4a2e:	460f      	mov	r7, r1
   d4a30:	462b      	mov	r3, r5
   d4a32:	a115      	add	r1, pc, #84	; (adr r1, d4a88 <_Z7hue2rgbfff+0xf0>)
   d4a34:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4a38:	f003 fb56 	bl	d80e8 <__aeabi_dsub>
   d4a3c:	4602      	mov	r2, r0
   d4a3e:	460b      	mov	r3, r1
   d4a40:	4630      	mov	r0, r6
   d4a42:	4639      	mov	r1, r7
   d4a44:	f003 fd04 	bl	d8450 <__aeabi_dmul>
   d4a48:	4b11      	ldr	r3, [pc, #68]	; (d4a90 <_Z7hue2rgbfff+0xf8>)
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	f003 fd00 	bl	d8450 <__aeabi_dmul>
   d4a50:	4604      	mov	r4, r0
   d4a52:	ee18 0a10 	vmov	r0, s16
   d4a56:	460d      	mov	r5, r1
   d4a58:	f003 fca6 	bl	d83a8 <__aeabi_f2d>
   d4a5c:	4602      	mov	r2, r0
   d4a5e:	460b      	mov	r3, r1
   d4a60:	4620      	mov	r0, r4
   d4a62:	4629      	mov	r1, r5
   d4a64:	f003 fb42 	bl	d80ec <__adddf3>
   d4a68:	f003 ffac 	bl	d89c4 <__aeabi_d2f>
   d4a6c:	e004      	b.n	d4a78 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d4a6e:	ee19 0a10 	vmov	r0, s18
   d4a72:	e001      	b.n	d4a78 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d4a74:	ee18 0a10 	vmov	r0, s16
}
   d4a78:	ecbd 8b04 	vpop	{d8-d9}
   d4a7c:	ee00 0a10 	vmov	s0, r0
   d4a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a82:	bf00      	nop
   d4a84:	f3af 8000 	nop.w
   d4a88:	55555555 	.word	0x55555555
   d4a8c:	3fe55555 	.word	0x3fe55555
   d4a90:	40180000 	.word	0x40180000
   d4a94:	55555555 	.word	0x55555555
   d4a98:	3fc55555 	.word	0x3fc55555
   d4a9c:	00000000 	.word	0x00000000

000d4aa0 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4aa4:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4aa8:	eef5 0a40 	vcmp.f32	s1, #0.0
   d4aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4ab0:	b083      	sub	sp, #12
   d4ab2:	4680      	mov	r8, r0
   d4ab4:	4689      	mov	r9, r1
   d4ab6:	eef0 9a40 	vmov.f32	s19, s0
   d4aba:	eeb0 9a60 	vmov.f32	s18, s1
   d4abe:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4ac2:	d06e      	beq.n	d4ba2 <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4ac4:	ee11 0a10 	vmov	r0, s2
   d4ac8:	f003 fc6e 	bl	d83a8 <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d4acc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4ad0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ad8:	4606      	mov	r6, r0
   d4ada:	460f      	mov	r7, r1
   d4adc:	d510      	bpl.n	d4b00 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d4ade:	ee19 0a10 	vmov	r0, s18
   d4ae2:	f003 fc61 	bl	d83a8 <__aeabi_f2d>
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	4b4d      	ldr	r3, [pc, #308]	; (d4c20 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d4aea:	f003 faff 	bl	d80ec <__adddf3>
   d4aee:	4632      	mov	r2, r6
   d4af0:	463b      	mov	r3, r7
   d4af2:	f003 fcad 	bl	d8450 <__aeabi_dmul>
   d4af6:	f003 ff65 	bl	d89c4 <__aeabi_d2f>
   d4afa:	ee08 0a90 	vmov	s17, r0
   d4afe:	e003      	b.n	d4b08 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d4b00:	ee79 8a08 	vadd.f32	s17, s18, s16
   d4b04:	eee9 8a48 	vfms.f32	s17, s18, s16
   d4b08:	ee19 0a90 	vmov	r0, s19
   d4b0c:	f003 fc4c 	bl	d83a8 <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d4b10:	4632      	mov	r2, r6
   d4b12:	463b      	mov	r3, r7
   d4b14:	4604      	mov	r4, r0
   d4b16:	460d      	mov	r5, r1
   d4b18:	4630      	mov	r0, r6
   d4b1a:	4639      	mov	r1, r7
   d4b1c:	f003 fae6 	bl	d80ec <__adddf3>
   d4b20:	4606      	mov	r6, r0
   d4b22:	ee18 0a90 	vmov	r0, s17
   d4b26:	460f      	mov	r7, r1
   d4b28:	f003 fc3e 	bl	d83a8 <__aeabi_f2d>
   d4b2c:	4602      	mov	r2, r0
   d4b2e:	460b      	mov	r3, r1
   d4b30:	4630      	mov	r0, r6
   d4b32:	4639      	mov	r1, r7
   d4b34:	f003 fad8 	bl	d80e8 <__aeabi_dsub>
   d4b38:	f003 ff44 	bl	d89c4 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4b3c:	a334      	add	r3, pc, #208	; (adr r3, d4c10 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d4b42:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4b46:	4629      	mov	r1, r5
   d4b48:	4620      	mov	r0, r4
   d4b4a:	f003 facf 	bl	d80ec <__adddf3>
   d4b4e:	f003 ff39 	bl	d89c4 <__aeabi_d2f>
   d4b52:	eef0 0a68 	vmov.f32	s1, s17
   d4b56:	ee01 0a10 	vmov	s2, r0
   d4b5a:	eeb0 0a49 	vmov.f32	s0, s18
   d4b5e:	f7ff ff1b 	bl	d4998 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d4b62:	eeb0 1a69 	vmov.f32	s2, s19
   d4b66:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4b6a:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d4b6e:	eeb0 0a49 	vmov.f32	s0, s18
   d4b72:	f7ff ff11 	bl	d4998 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4b76:	a326      	add	r3, pc, #152	; (adr r3, d4c10 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d4b80:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4b84:	f003 fab0 	bl	d80e8 <__aeabi_dsub>
   d4b88:	f003 ff1c 	bl	d89c4 <__aeabi_d2f>
   d4b8c:	eef0 0a68 	vmov.f32	s1, s17
   d4b90:	ee01 0a10 	vmov	s2, r0
   d4b94:	eeb0 0a49 	vmov.f32	s0, s18
   d4b98:	f7ff fefe 	bl	d4998 <_Z7hue2rgbfff>
   d4b9c:	eef0 8a40 	vmov.f32	s17, s0
   d4ba0:	e003      	b.n	d4baa <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d4ba2:	eef0 8a41 	vmov.f32	s17, s2
   d4ba6:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d4baa:	ee19 0a90 	vmov	r0, s19
   d4bae:	f003 fbfb 	bl	d83a8 <__aeabi_f2d>
   d4bb2:	a319      	add	r3, pc, #100	; (adr r3, d4c18 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bb8:	f003 fc4a 	bl	d8450 <__aeabi_dmul>
   d4bbc:	f003 fee2 	bl	d8984 <__aeabi_d2uiz>
   d4bc0:	b2c5      	uxtb	r5, r0
   d4bc2:	ee18 0a10 	vmov	r0, s16
   d4bc6:	f003 fbef 	bl	d83a8 <__aeabi_f2d>
   d4bca:	a313      	add	r3, pc, #76	; (adr r3, d4c18 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bd0:	f003 fc3e 	bl	d8450 <__aeabi_dmul>
   d4bd4:	f003 fed6 	bl	d8984 <__aeabi_d2uiz>
   d4bd8:	b2c4      	uxtb	r4, r0
   d4bda:	ee18 0a90 	vmov	r0, s17
   d4bde:	f003 fbe3 	bl	d83a8 <__aeabi_f2d>
   d4be2:	a30d      	add	r3, pc, #52	; (adr r3, d4c18 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4be8:	f003 fc32 	bl	d8450 <__aeabi_dmul>
   d4bec:	f003 feca 	bl	d8984 <__aeabi_d2uiz>
   d4bf0:	b2c0      	uxtb	r0, r0
   d4bf2:	9000      	str	r0, [sp, #0]
   d4bf4:	462b      	mov	r3, r5
   d4bf6:	4622      	mov	r2, r4
   d4bf8:	4649      	mov	r1, r9
   d4bfa:	4640      	mov	r0, r8
   d4bfc:	f7ff fe61 	bl	d48c2 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d4c00:	b003      	add	sp, #12
   d4c02:	ecbd 8b04 	vpop	{d8-d9}
   d4c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0a:	bf00      	nop
   d4c0c:	f3af 8000 	nop.w
   d4c10:	55555555 	.word	0x55555555
   d4c14:	3fd55555 	.word	0x3fd55555
   d4c18:	00000000 	.word	0x00000000
   d4c1c:	406fe000 	.word	0x406fe000
   d4c20:	3ff00000 	.word	0x3ff00000

000d4c24 <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d4c24:	f000 bb6c 	b.w	d5300 <HAL_Pin_Map>

000d4c28 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c28:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c2a:	6803      	ldr	r3, [r0, #0]
   d4c2c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c2e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c30:	d904      	bls.n	d4c3c <nrf_gpio_pin_port_decode+0x14>
   d4c32:	4a07      	ldr	r2, [pc, #28]	; (d4c50 <nrf_gpio_pin_port_decode+0x28>)
   d4c34:	2100      	movs	r1, #0
   d4c36:	200a      	movs	r0, #10
   d4c38:	f000 fc8a 	bl	d5550 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4c3c:	6823      	ldr	r3, [r4, #0]
   d4c3e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4c40:	bf83      	ittte	hi
   d4c42:	f003 031f 	andhi.w	r3, r3, #31
   d4c46:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4c48:	4802      	ldrhi	r0, [pc, #8]	; (d4c54 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4c4a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4c4e:	bd10      	pop	{r4, pc}
   d4c50:	000d52e1 	.word	0x000d52e1
   d4c54:	50000300 	.word	0x50000300

000d4c58 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4c58:	b507      	push	{r0, r1, r2, lr}
   d4c5a:	ab02      	add	r3, sp, #8
   d4c5c:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c60:	4618      	mov	r0, r3
   d4c62:	f7ff ffe1 	bl	d4c28 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4c66:	9a01      	ldr	r2, [sp, #4]
   d4c68:	2301      	movs	r3, #1
   d4c6a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4c6c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4c70:	b003      	add	sp, #12
   d4c72:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c76 <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4c76:	b507      	push	{r0, r1, r2, lr}
   d4c78:	ab02      	add	r3, sp, #8
   d4c7a:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c7e:	4618      	mov	r0, r3
   d4c80:	f7ff ffd2 	bl	d4c28 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4c84:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4c88:	9801      	ldr	r0, [sp, #4]
   d4c8a:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4c8e:	f000 0001 	and.w	r0, r0, #1
   d4c92:	b003      	add	sp, #12
   d4c94:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c98 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d4c98:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d4c9a:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d4c9c:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d4c9e:	7402      	strb	r2, [r0, #16]
}
   d4ca0:	4770      	bx	lr
	...

000d4ca4 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d4ca4:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d4ca6:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d4ca8:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d4caa:	7980      	ldrb	r0, [r0, #6]
   d4cac:	f003 f842 	bl	d7d34 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4cb0:	4a07      	ldr	r2, [pc, #28]	; (d4cd0 <_ZN3DHT5beginEv+0x2c>)
   d4cb2:	79a3      	ldrb	r3, [r4, #6]
   d4cb4:	6812      	ldr	r2, [r2, #0]
   d4cb6:	011b      	lsls	r3, r3, #4
   d4cb8:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4cba:	5cd0      	ldrb	r0, [r2, r3]
   d4cbc:	784b      	ldrb	r3, [r1, #1]
   d4cbe:	f003 031f 	and.w	r3, r3, #31
   d4cc2:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4cc6:	f7ff ffc7 	bl	d4c58 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d4cca:	2300      	movs	r3, #0
   d4ccc:	60e3      	str	r3, [r4, #12]
   d4cce:	bd10      	pop	{r4, pc}
   d4cd0:	2003e4b8 	.word	0x2003e4b8

000d4cd4 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4cd8:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4cda:	f000 fb09 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d4cde:	68e3      	ldr	r3, [r4, #12]
   d4ce0:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4ce2:	bf84      	itt	hi
   d4ce4:	2300      	movhi	r3, #0
   d4ce6:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4ce8:	7c23      	ldrb	r3, [r4, #16]
   d4cea:	b933      	cbnz	r3, d4cfa <_ZN3DHT4readEv+0x26>
   d4cec:	68e3      	ldr	r3, [r4, #12]
   d4cee:	1ac0      	subs	r0, r0, r3
   d4cf0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4cf4:	d201      	bcs.n	d4cfa <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4cf6:	2001      	movs	r0, #1
   d4cf8:	e0a8      	b.n	d4e4c <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4cfa:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4cfc:	4e55      	ldr	r6, [pc, #340]	; (d4e54 <_ZN3DHT4readEv+0x180>)
   d4cfe:	7425      	strb	r5, [r4, #16]
   d4d00:	f000 faf6 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
   d4d04:	79a3      	ldrb	r3, [r4, #6]
   d4d06:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4d08:	60e0      	str	r0, [r4, #12]
   d4d0a:	011b      	lsls	r3, r3, #4
   d4d0c:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4d0e:	7125      	strb	r5, [r4, #4]
   d4d10:	70e5      	strb	r5, [r4, #3]
   d4d12:	70a5      	strb	r5, [r4, #2]
   d4d14:	7065      	strb	r5, [r4, #1]
   d4d16:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4d18:	5cd0      	ldrb	r0, [r2, r3]
   d4d1a:	784b      	ldrb	r3, [r1, #1]
   d4d1c:	f003 031f 	and.w	r3, r3, #31
   d4d20:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4d24:	f7ff ff98 	bl	d4c58 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4d28:	20fa      	movs	r0, #250	; 0xfa
   d4d2a:	f000 fd72 	bl	d5812 <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4d2e:	2101      	movs	r1, #1
   d4d30:	79a0      	ldrb	r0, [r4, #6]
   d4d32:	f002 ffff 	bl	d7d34 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4d36:	79a3      	ldrb	r3, [r4, #6]
   d4d38:	6832      	ldr	r2, [r6, #0]
   d4d3a:	011b      	lsls	r3, r3, #4
   d4d3c:	18d1      	adds	r1, r2, r3
   d4d3e:	5cd2      	ldrb	r2, [r2, r3]
   d4d40:	784b      	ldrb	r3, [r1, #1]
   d4d42:	a802      	add	r0, sp, #8
   d4d44:	f003 031f 	and.w	r3, r3, #31
   d4d48:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4d4c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4d50:	f7ff ff6a 	bl	d4c28 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4d54:	9b01      	ldr	r3, [sp, #4]
   d4d56:	f04f 0801 	mov.w	r8, #1
   d4d5a:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4d5e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4d62:	2014      	movs	r0, #20
   d4d64:	f000 fd55 	bl	d5812 <delay>
	noInterrupts();
   d4d68:	f002 f93e 	bl	d6fe8 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4d6c:	79a3      	ldrb	r3, [r4, #6]
   d4d6e:	6832      	ldr	r2, [r6, #0]
   d4d70:	011b      	lsls	r3, r3, #4
   d4d72:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4d74:	5cd0      	ldrb	r0, [r2, r3]
   d4d76:	784b      	ldrb	r3, [r1, #1]
   d4d78:	f003 031f 	and.w	r3, r3, #31
   d4d7c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4d80:	f7ff ff6a 	bl	d4c58 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4d84:	2028      	movs	r0, #40	; 0x28
   d4d86:	f000 faab 	bl	d52e0 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4d8a:	4629      	mov	r1, r5
   d4d8c:	79a0      	ldrb	r0, [r4, #6]
   d4d8e:	f002 ffd1 	bl	d7d34 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d4d92:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d4d94:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4d98:	79a3      	ldrb	r3, [r4, #6]
   d4d9a:	6832      	ldr	r2, [r6, #0]
   d4d9c:	011b      	lsls	r3, r3, #4
   d4d9e:	18d1      	adds	r1, r2, r3
   d4da0:	f812 a003 	ldrb.w	sl, [r2, r3]
   d4da4:	784b      	ldrb	r3, [r1, #1]
   d4da6:	f003 031f 	and.w	r3, r3, #31
   d4daa:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4dae:	4650      	mov	r0, sl
   d4db0:	f7ff ff61 	bl	d4c76 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4db4:	4650      	mov	r0, sl
   d4db6:	f7ff ff5e 	bl	d4c76 <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d4dba:	4580      	cmp	r8, r0
   d4dbc:	fa5f f98b 	uxtb.w	r9, fp
   d4dc0:	d108      	bne.n	d4dd4 <_ZN3DHT4readEv+0x100>
   d4dc2:	2001      	movs	r0, #1
   d4dc4:	f10b 0b01 	add.w	fp, fp, #1
   d4dc8:	f000 fa8a 	bl	d52e0 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4dcc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d4dd0:	d1e2      	bne.n	d4d98 <_ZN3DHT4readEv+0xc4>
   d4dd2:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4dd4:	79a3      	ldrb	r3, [r4, #6]
   d4dd6:	6832      	ldr	r2, [r6, #0]
   d4dd8:	011b      	lsls	r3, r3, #4
   d4dda:	18d1      	adds	r1, r2, r3
   d4ddc:	f812 8003 	ldrb.w	r8, [r2, r3]
   d4de0:	784b      	ldrb	r3, [r1, #1]
   d4de2:	f003 031f 	and.w	r3, r3, #31
   d4de6:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4dea:	4640      	mov	r0, r8
   d4dec:	f7ff ff43 	bl	d4c76 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4df0:	4640      	mov	r0, r8
   d4df2:	f7ff ff40 	bl	d4c76 <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4df6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4dfa:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4dfe:	d014      	beq.n	d4e2a <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4e00:	2d03      	cmp	r5, #3
   d4e02:	d90e      	bls.n	d4e22 <_ZN3DHT4readEv+0x14e>
   d4e04:	07eb      	lsls	r3, r5, #31
   d4e06:	d40c      	bmi.n	d4e22 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4e08:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4e0a:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4e0c:	5ca3      	ldrb	r3, [r4, r2]
   d4e0e:	005b      	lsls	r3, r3, #1
   d4e10:	b2db      	uxtb	r3, r3
   d4e12:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4e14:	7a21      	ldrb	r1, [r4, #8]
   d4e16:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4e18:	bf3c      	itt	cc
   d4e1a:	f043 0301 	orrcc.w	r3, r3, #1
   d4e1e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4e20:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4e22:	3501      	adds	r5, #1
   d4e24:	b2ed      	uxtb	r5, r5
   d4e26:	2d55      	cmp	r5, #85	; 0x55
   d4e28:	d1b4      	bne.n	d4d94 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4e2a:	f002 f8df 	bl	d6fec <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4e2e:	2f27      	cmp	r7, #39	; 0x27
   d4e30:	d90b      	bls.n	d4e4a <_ZN3DHT4readEv+0x176>
   d4e32:	7822      	ldrb	r2, [r4, #0]
   d4e34:	7863      	ldrb	r3, [r4, #1]
   d4e36:	7921      	ldrb	r1, [r4, #4]
   d4e38:	4413      	add	r3, r2
   d4e3a:	78a2      	ldrb	r2, [r4, #2]
   d4e3c:	4413      	add	r3, r2
   d4e3e:	78e2      	ldrb	r2, [r4, #3]
   d4e40:	4413      	add	r3, r2
   d4e42:	b2db      	uxtb	r3, r3
   d4e44:	4299      	cmp	r1, r3
   d4e46:	f43f af56 	beq.w	d4cf6 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4e4a:	2000      	movs	r0, #0

}
   d4e4c:	b003      	add	sp, #12
   d4e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e52:	bf00      	nop
   d4e54:	2003e4b8 	.word	0x2003e4b8

000d4e58 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4e58:	b510      	push	{r4, lr}
   d4e5a:	4604      	mov	r4, r0
	float f;

	if (read())
   d4e5c:	f7ff ff3a 	bl	d4cd4 <_ZN3DHT4readEv>
   d4e60:	b128      	cbz	r0, d4e6e <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4e62:	78a3      	ldrb	r3, [r4, #2]
   d4e64:	ee00 3a10 	vmov	s0, r3
   d4e68:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4e6c:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4e6e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4e74 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4e72:	bd10      	pop	{r4, pc}
   d4e74:	7fc00000 	.word	0x7fc00000

000d4e78 <_ZN3DHT16getTempFarenheitEv>:
{
	return readTemperature();
}

float DHT::getTempFarenheit()
{
   d4e78:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4e7a:	f7ff ffed 	bl	d4e58 <_ZN3DHT15readTemperatureEv>
   d4e7e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4e82:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4e86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d4e8a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4e8e:	eddf 7a02 	vldr	s15, [pc, #8]	; d4e98 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4e92:	ee30 0a27 	vadd.f32	s0, s0, s15
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	42000000 	.word	0x42000000

000d4e9c <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	4604      	mov	r4, r0
	float f;

	if (read())
   d4ea0:	f7ff ff18 	bl	d4cd4 <_ZN3DHT4readEv>
   d4ea4:	b128      	cbz	r0, d4eb2 <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4ea6:	7823      	ldrb	r3, [r4, #0]
   d4ea8:	ee00 3a10 	vmov	s0, r3
   d4eac:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4eb0:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4eb2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4eb8 <_ZN3DHT12readHumidityEv+0x1c>
}
   d4eb6:	bd10      	pop	{r4, pc}
   d4eb8:	7fc00000 	.word	0x7fc00000

000d4ebc <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4ebc:	f7ff bfee 	b.w	d4e9c <_ZN3DHT12readHumidityEv>

000d4ec0 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4ec0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ec2:	f000 fa1d 	bl	d5300 <HAL_Pin_Map>
   d4ec6:	4b01      	ldr	r3, [pc, #4]	; (d4ecc <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4ec8:	6018      	str	r0, [r3, #0]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	2003e4b8 	.word	0x2003e4b8

000d4ed0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4ed0:	b510      	push	{r4, lr}
   d4ed2:	4b05      	ldr	r3, [pc, #20]	; (d4ee8 <_ZN10JsonBufferD1Ev+0x18>)
   d4ed4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4ed6:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4ed8:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4eda:	b91b      	cbnz	r3, d4ee4 <_ZN10JsonBufferD1Ev+0x14>
   d4edc:	6840      	ldr	r0, [r0, #4]
   d4ede:	b108      	cbz	r0, d4ee4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4ee0:	f000 fc26 	bl	d5730 <free>
	}
}
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}
   d4ee8:	000d9088 	.word	0x000d9088

000d4eec <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4eec:	b510      	push	{r4, lr}
   d4eee:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4ef0:	f7ff ffee 	bl	d4ed0 <_ZN10JsonBufferD1Ev>
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	2114      	movs	r1, #20
   d4ef8:	f002 ffa5 	bl	d7e46 <_ZdlPvj>
   d4efc:	4620      	mov	r0, r4
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4f00:	b510      	push	{r4, lr}
   d4f02:	4b03      	ldr	r3, [pc, #12]	; (d4f10 <_ZN10JsonWriterD1Ev+0x10>)
   d4f04:	6003      	str	r3, [r0, #0]
   d4f06:	4604      	mov	r4, r0
   d4f08:	f7ff ffe2 	bl	d4ed0 <_ZN10JsonBufferD1Ev>

}
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	bd10      	pop	{r4, pc}
   d4f10:	000d9098 	.word	0x000d9098

000d4f14 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4f14:	b510      	push	{r4, lr}
   d4f16:	4604      	mov	r4, r0

}
   d4f18:	f7ff fff2 	bl	d4f00 <_ZN10JsonWriterD1Ev>
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	2130      	movs	r1, #48	; 0x30
   d4f20:	f002 ff91 	bl	d7e46 <_ZdlPvj>
   d4f24:	4620      	mov	r0, r4
   d4f26:	bd10      	pop	{r4, pc}

000d4f28 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4f28:	2300      	movs	r3, #0
   d4f2a:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4f2c:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = false;
   d4f2e:	7603      	strb	r3, [r0, #24]
	context[contextIndex].terminator = 0;
   d4f30:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4f32:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4f36:	4770      	bx	lr

000d4f38 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f38:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f3a:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f3c:	60c3      	str	r3, [r0, #12]
   d4f3e:	2301      	movs	r3, #1
   d4f40:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f42:	4b05      	ldr	r3, [pc, #20]	; (d4f58 <_ZN10JsonWriterC1EPcj+0x20>)
   d4f44:	6003      	str	r3, [r0, #0]
   d4f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4f4a:	6041      	str	r1, [r0, #4]
   d4f4c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4f4e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4f50:	f7ff ffea 	bl	d4f28 <_ZN10JsonWriter4initEv>
}
   d4f54:	bd10      	pop	{r4, pc}
   d4f56:	bf00      	nop
   d4f58:	000d9098 	.word	0x000d9098

000d4f5c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4f5c:	68c3      	ldr	r3, [r0, #12]
   d4f5e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4f60:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d4f62:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4f64:	bf3f      	itttt	cc
   d4f66:	6842      	ldrcc	r2, [r0, #4]
   d4f68:	1c5c      	addcc	r4, r3, #1
   d4f6a:	60c4      	strcc	r4, [r0, #12]
   d4f6c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4f6e:	bf24      	itt	cs
   d4f70:	2301      	movcs	r3, #1
   d4f72:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4f78:	b538      	push	{r3, r4, r5, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4f7a:	6944      	ldr	r4, [r0, #20]
   d4f7c:	1c65      	adds	r5, r4, #1
   d4f7e:	2d08      	cmp	r5, #8
   d4f80:	d809      	bhi.n	d4f96 <_ZN10JsonWriter18startObjectOrArrayEcc+0x1e>
   d4f82:	eb00 0344 	add.w	r3, r0, r4, lsl #1
		return false;
	}
	contextIndex++;

	context[contextIndex].isFirst = true;
   d4f86:	2401      	movs	r4, #1

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	contextIndex++;
   d4f88:	6145      	str	r5, [r0, #20]

	context[contextIndex].isFirst = true;
   d4f8a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4f8c:	76da      	strb	r2, [r3, #27]

	insertChar(startChar);
   d4f8e:	f7ff ffe5 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
	return true;
   d4f92:	4620      	mov	r0, r4
   d4f94:	bd38      	pop	{r3, r4, r5, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4f96:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4f98:	bd38      	pop	{r3, r4, r5, pc}

000d4f9a <_ZN10JsonWriter19finishObjectOrArrayEv>:


void JsonWriter::finishObjectOrArray() {
   d4f9a:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4f9c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4f9e:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4fa0:	b143      	cbz	r3, d4fb4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4fa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4fa6:	7e59      	ldrb	r1, [r3, #25]
   d4fa8:	b109      	cbz	r1, d4fae <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4faa:	f7ff ffd7 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4fae:	6963      	ldr	r3, [r4, #20]
   d4fb0:	3b01      	subs	r3, #1
   d4fb2:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d4fb4:	68a3      	ldr	r3, [r4, #8]
   d4fb6:	68e0      	ldr	r0, [r4, #12]
   d4fb8:	6861      	ldr	r1, [r4, #4]
   d4fba:	4298      	cmp	r0, r3
   d4fbc:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4fc0:	bf2a      	itet	cs
   d4fc2:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4fc4:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4fc6:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4fcc:	b570      	push	{r4, r5, r6, lr}
   d4fce:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4fd0:	68c0      	ldr	r0, [r0, #12]
   d4fd2:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4fd4:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d4fd6:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4fd8:	4613      	mov	r3, r2
   d4fda:	4430      	add	r0, r6
   d4fdc:	460a      	mov	r2, r1
   d4fde:	4629      	mov	r1, r5
   d4fe0:	f000 fbb6 	bl	d5750 <vsnprintf>
	if (count <= spaceAvailable) {
   d4fe4:	4285      	cmp	r5, r0
		offset += count;
   d4fe6:	bf2d      	iteet	cs
   d4fe8:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4fea:	68a3      	ldrcc	r3, [r4, #8]
   d4fec:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4fee:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4ff0:	bf36      	itet	cc
   d4ff2:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4ff4:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4ff6:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4ffa:	bd70      	pop	{r4, r5, r6, pc}

000d4ffc <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4ffc:	b40e      	push	{r1, r2, r3}
   d4ffe:	b503      	push	{r0, r1, lr}
   d5000:	aa03      	add	r2, sp, #12
   d5002:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5006:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5008:	f7ff ffe0 	bl	d4fcc <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d500c:	b002      	add	sp, #8
   d500e:	f85d eb04 	ldr.w	lr, [sp], #4
   d5012:	b003      	add	sp, #12
   d5014:	4770      	bx	lr
	...

000d5018 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d501c:	4604      	mov	r4, r0
   d501e:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5020:	4617      	mov	r7, r2
   d5022:	b112      	cbz	r2, d502a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5024:	2122      	movs	r1, #34	; 0x22
   d5026:	f7ff ff99 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d502a:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d502c:	5d71      	ldrb	r1, [r6, r5]
   d502e:	eb06 0805 	add.w	r8, r6, r5
   d5032:	2900      	cmp	r1, #0
   d5034:	d071      	beq.n	d511a <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5036:	68e2      	ldr	r2, [r4, #12]
   d5038:	68a3      	ldr	r3, [r4, #8]
   d503a:	429a      	cmp	r2, r3
   d503c:	d26d      	bcs.n	d511a <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d503e:	060b      	lsls	r3, r1, #24
   d5040:	d533      	bpl.n	d50aa <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5042:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5046:	2be0      	cmp	r3, #224	; 0xe0
   d5048:	d117      	bne.n	d507a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d504a:	f898 3001 	ldrb.w	r3, [r8, #1]
   d504e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5052:	2a80      	cmp	r2, #128	; 0x80
   d5054:	d111      	bne.n	d507a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5056:	f105 0802 	add.w	r8, r5, #2
   d505a:	f816 2008 	ldrb.w	r2, [r6, r8]
   d505e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5062:	2880      	cmp	r0, #128	; 0x80
   d5064:	d109      	bne.n	d507a <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5066:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d506a:	019b      	lsls	r3, r3, #6
   d506c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5070:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5074:	431a      	orrs	r2, r3
   d5076:	b292      	uxth	r2, r2
   d5078:	e011      	b.n	d509e <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d507a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d507e:	2bc0      	cmp	r3, #192	; 0xc0
   d5080:	d146      	bne.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d5082:	f105 0801 	add.w	r8, r5, #1
   d5086:	f816 3008 	ldrb.w	r3, [r6, r8]
   d508a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d508e:	2a80      	cmp	r2, #128	; 0x80
   d5090:	d13e      	bne.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5092:	0189      	lsls	r1, r1, #6
   d5094:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d509c:	431a      	orrs	r2, r3
   d509e:	4923      	ldr	r1, [pc, #140]	; (d512c <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d50a0:	4620      	mov	r0, r4
   d50a2:	f7ff ffab 	bl	d4ffc <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d50a6:	4645      	mov	r5, r8
   d50a8:	e035      	b.n	d5116 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d50aa:	290c      	cmp	r1, #12
   d50ac:	d018      	beq.n	d50e0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d50ae:	d80b      	bhi.n	d50c8 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d50b0:	2909      	cmp	r1, #9
   d50b2:	d021      	beq.n	d50f8 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d50b4:	290a      	cmp	r1, #10
   d50b6:	d019      	beq.n	d50ec <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d50b8:	2908      	cmp	r1, #8
   d50ba:	d129      	bne.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d50bc:	215c      	movs	r1, #92	; 0x5c
   d50be:	4620      	mov	r0, r4
   d50c0:	f7ff ff4c 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d50c4:	2162      	movs	r1, #98	; 0x62
   d50c6:	e023      	b.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d50c8:	2922      	cmp	r1, #34	; 0x22
   d50ca:	d01b      	beq.n	d5104 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d50cc:	295c      	cmp	r1, #92	; 0x5c
   d50ce:	d019      	beq.n	d5104 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d50d0:	290d      	cmp	r1, #13
   d50d2:	d11d      	bne.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d50d4:	215c      	movs	r1, #92	; 0x5c
   d50d6:	4620      	mov	r0, r4
   d50d8:	f7ff ff40 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d50dc:	2172      	movs	r1, #114	; 0x72
   d50de:	e017      	b.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d50e0:	215c      	movs	r1, #92	; 0x5c
   d50e2:	4620      	mov	r0, r4
   d50e4:	f7ff ff3a 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d50e8:	2166      	movs	r1, #102	; 0x66
   d50ea:	e011      	b.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d50ec:	215c      	movs	r1, #92	; 0x5c
   d50ee:	4620      	mov	r0, r4
   d50f0:	f7ff ff34 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d50f4:	216e      	movs	r1, #110	; 0x6e
   d50f6:	e00b      	b.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d50f8:	215c      	movs	r1, #92	; 0x5c
   d50fa:	4620      	mov	r0, r4
   d50fc:	f7ff ff2e 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5100:	2174      	movs	r1, #116	; 0x74
   d5102:	e005      	b.n	d5110 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5104:	215c      	movs	r1, #92	; 0x5c
   d5106:	4620      	mov	r0, r4
   d5108:	f7ff ff28 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d510c:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5110:	4620      	mov	r0, r4
   d5112:	f7ff ff23 	bl	d4f5c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5116:	3501      	adds	r5, #1
   d5118:	e788      	b.n	d502c <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d511a:	b12f      	cbz	r7, d5128 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d511c:	4620      	mov	r0, r4
   d511e:	2122      	movs	r1, #34	; 0x22
	}

}
   d5120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5124:	f7ff bf1a 	b.w	d4f5c <_ZN10JsonWriter10insertCharEc>
   d5128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d512c:	000d90a9 	.word	0x000d90a9

000d5130 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5130:	6942      	ldr	r2, [r0, #20]
   d5132:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5136:	7e1a      	ldrb	r2, [r3, #24]
   d5138:	b112      	cbz	r2, d5140 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d513a:	2200      	movs	r2, #0
   d513c:	761a      	strb	r2, [r3, #24]
   d513e:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5140:	212c      	movs	r1, #44	; 0x2c
   d5142:	f7ff bf0b 	b.w	d4f5c <_ZN10JsonWriter10insertCharEc>
	...

000d5148 <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d5148:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d514a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d514c:	2a00      	cmp	r2, #0
   d514e:	db07      	blt.n	d5160 <_ZN10JsonWriter11insertValueEd+0x18>
		insertsprintf("%.*lf", floatPlaces, value);
   d5150:	ed8d 0b00 	vstr	d0, [sp]
   d5154:	4906      	ldr	r1, [pc, #24]	; (d5170 <_ZN10JsonWriter11insertValueEd+0x28>)
   d5156:	f7ff ff51 	bl	d4ffc <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d515a:	b003      	add	sp, #12
   d515c:	f85d fb04 	ldr.w	pc, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d5160:	ec53 2b10 	vmov	r2, r3, d0
   d5164:	4903      	ldr	r1, [pc, #12]	; (d5174 <_ZN10JsonWriter11insertValueEd+0x2c>)
	}
}
   d5166:	b003      	add	sp, #12
   d5168:	f85d eb04 	ldr.w	lr, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d516c:	f7ff bf46 	b.w	d4ffc <_ZN10JsonWriter13insertsprintfEPKcz>
   d5170:	000d90c0 	.word	0x000d90c0
   d5174:	000d90c6 	.word	0x000d90c6

000d5178 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5178:	f000 b8c2 	b.w	d5300 <HAL_Pin_Map>

000d517c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <hal_ble_stack_init+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	689b      	ldr	r3, [r3, #8]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030278 	.word	0x00030278

000d518c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <hal_ble_gap_set_advertising_data+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030278 	.word	0x00030278

000d519c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <hal_ble_gap_set_scan_response_data+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030278 	.word	0x00030278

000d51ac <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <hal_ble_gap_start_advertising+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030278 	.word	0x00030278

000d51bc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b03      	ldr	r3, [pc, #12]	; (d51cc <hal_ble_gap_disconnect+0x10>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d51c6:	9301      	str	r3, [sp, #4]
   d51c8:	bd08      	pop	{r3, pc}
   d51ca:	0000      	.short	0x0000
   d51cc:	00030278 	.word	0x00030278

000d51d0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b03      	ldr	r3, [pc, #12]	; (d51e0 <hal_ble_gatt_server_add_service+0x10>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d51da:	9301      	str	r3, [sp, #4]
   d51dc:	bd08      	pop	{r3, pc}
   d51de:	0000      	.short	0x0000
   d51e0:	00030278 	.word	0x00030278

000d51e4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b03      	ldr	r3, [pc, #12]	; (d51f4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d51ee:	9301      	str	r3, [sp, #4]
   d51f0:	bd08      	pop	{r3, pc}
   d51f2:	0000      	.short	0x0000
   d51f4:	00030278 	.word	0x00030278

000d51f8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b03      	ldr	r3, [pc, #12]	; (d5208 <hal_ble_gatt_client_write_with_response+0x10>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5202:	9301      	str	r3, [sp, #4]
   d5204:	bd08      	pop	{r3, pc}
   d5206:	0000      	.short	0x0000
   d5208:	00030278 	.word	0x00030278

000d520c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b03      	ldr	r3, [pc, #12]	; (d521c <hal_ble_gatt_client_write_without_response+0x10>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5216:	9301      	str	r3, [sp, #4]
   d5218:	bd08      	pop	{r3, pc}
   d521a:	0000      	.short	0x0000
   d521c:	00030278 	.word	0x00030278

000d5220 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b03      	ldr	r3, [pc, #12]	; (d5230 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d522a:	9301      	str	r3, [sp, #4]
   d522c:	bd08      	pop	{r3, pc}
   d522e:	0000      	.short	0x0000
   d5230:	00030278 	.word	0x00030278

000d5234 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b03      	ldr	r3, [pc, #12]	; (d5244 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d523e:	9301      	str	r3, [sp, #4]
   d5240:	bd08      	pop	{r3, pc}
   d5242:	0000      	.short	0x0000
   d5244:	00030278 	.word	0x00030278

000d5248 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b03      	ldr	r3, [pc, #12]	; (d5258 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5252:	9301      	str	r3, [sp, #4]
   d5254:	bd08      	pop	{r3, pc}
   d5256:	0000      	.short	0x0000
   d5258:	00030278 	.word	0x00030278

000d525c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b03      	ldr	r3, [pc, #12]	; (d526c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5266:	9301      	str	r3, [sp, #4]
   d5268:	bd08      	pop	{r3, pc}
   d526a:	0000      	.short	0x0000
   d526c:	00030278 	.word	0x00030278

000d5270 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <os_thread_is_current+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	689b      	ldr	r3, [r3, #8]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030248 	.word	0x00030248

000d5280 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <os_thread_join+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	691b      	ldr	r3, [r3, #16]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030248 	.word	0x00030248

000d5290 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <os_thread_cleanup+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	695b      	ldr	r3, [r3, #20]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	00030248 	.word	0x00030248

000d52a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <os_mutex_recursive_create+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	00030248 	.word	0x00030248

000d52b0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <os_mutex_recursive_lock+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	00030248 	.word	0x00030248

000d52c0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <os_mutex_recursive_unlock+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	00030248 	.word	0x00030248

000d52d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_RNG_GetRandomNumber+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	685b      	ldr	r3, [r3, #4]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	00030218 	.word	0x00030218

000d52e0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_Delay_Microseconds+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	68db      	ldr	r3, [r3, #12]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	00030218 	.word	0x00030218

000d52f0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	695b      	ldr	r3, [r3, #20]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030218 	.word	0x00030218

000d5300 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_Pin_Map+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	681b      	ldr	r3, [r3, #0]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	0003022c 	.word	0x0003022c

000d5310 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_Validate_Pin_Function+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	685b      	ldr	r3, [r3, #4]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	0003022c 	.word	0x0003022c

000d5320 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_Pin_Mode+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	689b      	ldr	r3, [r3, #8]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	0003022c 	.word	0x0003022c

000d5330 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_Get_Pin_Mode+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	68db      	ldr	r3, [r3, #12]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	0003022c 	.word	0x0003022c

000d5340 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_GPIO_Write+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	691b      	ldr	r3, [r3, #16]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	0003022c 	.word	0x0003022c

000d5350 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <HAL_Interrupts_Enable_All+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	6a1b      	ldr	r3, [r3, #32]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	0003022c 	.word	0x0003022c

000d5360 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <HAL_Interrupts_Disable_All+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	0003022c 	.word	0x0003022c

000d5370 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <HAL_ADC_Read+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	0003022c 	.word	0x0003022c

000d5380 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <HAL_I2C_Write_Data+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6a1b      	ldr	r3, [r3, #32]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030228 	.word	0x00030228

000d5390 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <HAL_I2C_Available_Data+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030228 	.word	0x00030228

000d53a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <HAL_I2C_Read_Data+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030228 	.word	0x00030228

000d53b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <HAL_I2C_Peek_Data+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030228 	.word	0x00030228

000d53c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <HAL_I2C_Flush_Data+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030228 	.word	0x00030228

000d53d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <HAL_I2C_Is_Enabled+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030228 	.word	0x00030228

000d53e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <HAL_I2C_Init+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030228 	.word	0x00030228

000d53f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <inet_inet_ntop+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	695b      	ldr	r3, [r3, #20]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030264 	.word	0x00030264

000d5400 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <netdb_freeaddrinfo+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	689b      	ldr	r3, [r3, #8]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030268 	.word	0x00030268

000d5410 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <netdb_getaddrinfo+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	68db      	ldr	r3, [r3, #12]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030268 	.word	0x00030268

000d5420 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <HAL_SPI_Init+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	69db      	ldr	r3, [r3, #28]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030230 	.word	0x00030230

000d5430 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <HAL_SPI_Is_Enabled+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	6a1b      	ldr	r3, [r3, #32]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030230 	.word	0x00030230

000d5440 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <HAL_SPI_Acquire+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030230 	.word	0x00030230

000d5450 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <HAL_SPI_Release+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030230 	.word	0x00030230

000d5460 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <HAL_USART_Init+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	681b      	ldr	r3, [r3, #0]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	0003023c 	.word	0x0003023c

000d5470 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <HAL_USART_Write_Data+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	68db      	ldr	r3, [r3, #12]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	0003023c 	.word	0x0003023c

000d5480 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <HAL_USART_Available_Data+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	691b      	ldr	r3, [r3, #16]
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	0003023c 	.word	0x0003023c

000d5490 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <HAL_USART_Read_Data+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	695b      	ldr	r3, [r3, #20]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	0003023c 	.word	0x0003023c

000d54a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <HAL_USART_Peek_Data+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	699b      	ldr	r3, [r3, #24]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	0003023c 	.word	0x0003023c

000d54b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <HAL_USART_Flush_Data+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	69db      	ldr	r3, [r3, #28]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	0003023c 	.word	0x0003023c

000d54c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <HAL_USART_Is_Enabled+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	6a1b      	ldr	r3, [r3, #32]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	0003023c 	.word	0x0003023c

000d54d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <HAL_USART_Available_Data_For_Write+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	0003023c 	.word	0x0003023c

000d54e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <HAL_USB_USART_Init+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	681b      	ldr	r3, [r3, #0]
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	0003024c 	.word	0x0003024c

000d54f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <HAL_USB_USART_Begin+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	685b      	ldr	r3, [r3, #4]
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	0003024c 	.word	0x0003024c

000d5500 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <HAL_USB_USART_Available_Data+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	691b      	ldr	r3, [r3, #16]
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	0003024c 	.word	0x0003024c

000d5510 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	695b      	ldr	r3, [r3, #20]
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	0003024c 	.word	0x0003024c

000d5520 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <HAL_USB_USART_Receive_Data+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	699b      	ldr	r3, [r3, #24]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	0003024c 	.word	0x0003024c

000d5530 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <HAL_USB_USART_Send_Data+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	69db      	ldr	r3, [r3, #28]
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	0003024c 	.word	0x0003024c

000d5540 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <HAL_USB_USART_Flush_Data+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	6a1b      	ldr	r3, [r3, #32]
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	0003024c 	.word	0x0003024c

000d5550 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <panic_+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	00030260 	.word	0x00030260

000d5560 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <log_message+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	00030260 	.word	0x00030260

000d5570 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <set_system_mode+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	685b      	ldr	r3, [r3, #4]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030220 	.word	0x00030220

000d5580 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <system_delay_ms+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	695b      	ldr	r3, [r3, #20]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030220 	.word	0x00030220

000d5590 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <system_subscribe_event+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	6a1b      	ldr	r3, [r3, #32]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030220 	.word	0x00030220

000d55a0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <system_thread_set_state+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	00030220 	.word	0x00030220

000d55b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <application_thread_current+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	00030220 	.word	0x00030220

000d55c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <application_thread_invoke+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030220 	.word	0x00030220

000d55d0 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b03      	ldr	r3, [pc, #12]	; (d55e0 <system_format_diag_data+0x10>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d55da:	9301      	str	r3, [sp, #4]
   d55dc:	bd08      	pop	{r3, pc}
   d55de:	0000      	.short	0x0000
   d55e0:	00030220 	.word	0x00030220

000d55e4 <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b03      	ldr	r3, [pc, #12]	; (d55f4 <system_ctrl_set_app_request_handler+0x10>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55ee:	9301      	str	r3, [sp, #4]
   d55f0:	bd08      	pop	{r3, pc}
   d55f2:	0000      	.short	0x0000
   d55f4:	00030220 	.word	0x00030220

000d55f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b03      	ldr	r3, [pc, #12]	; (d5608 <system_ctrl_set_result+0x10>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5602:	9301      	str	r3, [sp, #4]
   d5604:	bd08      	pop	{r3, pc}
   d5606:	0000      	.short	0x0000
   d5608:	00030220 	.word	0x00030220

000d560c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b03      	ldr	r3, [pc, #12]	; (d561c <system_sleep_pins+0x10>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d5616:	9301      	str	r3, [sp, #4]
   d5618:	bd08      	pop	{r3, pc}
   d561a:	0000      	.short	0x0000
   d561c:	00030220 	.word	0x00030220

000d5620 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <spark_variable+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	681b      	ldr	r3, [r3, #0]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030244 	.word	0x00030244

000d5630 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <spark_function+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	685b      	ldr	r3, [r3, #4]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030244 	.word	0x00030244

000d5640 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <spark_cloud_flag_connected+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	695b      	ldr	r3, [r3, #20]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030244 	.word	0x00030244

000d5650 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <spark_send_event+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6a1b      	ldr	r3, [r3, #32]
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030244 	.word	0x00030244

000d5660 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030244 	.word	0x00030244

000d5670 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <spark_publish_vitals+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030244 	.word	0x00030244

000d5680 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <network_connect+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	685b      	ldr	r3, [r3, #4]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	00030240 	.word	0x00030240

000d5690 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <network_connecting+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	689b      	ldr	r3, [r3, #8]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	00030240 	.word	0x00030240

000d56a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <network_disconnect+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	68db      	ldr	r3, [r3, #12]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	00030240 	.word	0x00030240

000d56b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <network_ready+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	691b      	ldr	r3, [r3, #16]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	00030240 	.word	0x00030240

000d56c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <network_on+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	695b      	ldr	r3, [r3, #20]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	00030240 	.word	0x00030240

000d56d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <network_off+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	699b      	ldr	r3, [r3, #24]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	00030240 	.word	0x00030240

000d56e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <network_listen+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	69db      	ldr	r3, [r3, #28]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030240 	.word	0x00030240

000d56f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <network_listening+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6a1b      	ldr	r3, [r3, #32]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030240 	.word	0x00030240

000d5700 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <network_set_listen_timeout+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030240 	.word	0x00030240

000d5710 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <network_get_listen_timeout+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030240 	.word	0x00030240

000d5720 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <malloc+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	681b      	ldr	r3, [r3, #0]
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	0003021c 	.word	0x0003021c

000d5730 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <free+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	685b      	ldr	r3, [r3, #4]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	0003021c 	.word	0x0003021c

000d5740 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <realloc+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	689b      	ldr	r3, [r3, #8]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	0003021c 	.word	0x0003021c

000d5750 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <vsnprintf+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	0003021c 	.word	0x0003021c

000d5760 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <abort+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	0003021c 	.word	0x0003021c

000d5770 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <_malloc_r+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	0003021c 	.word	0x0003021c

000d5780 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d5780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5784:	ed2d 8b02 	vpush	{d8}
   d5788:	eeb0 8a44 	vmov.f32	s16, s8
   d578c:	eef0 8a64 	vmov.f32	s17, s9
   d5790:	ec55 4b11 	vmov	r4, r5, d1
   d5794:	ec57 6b12 	vmov	r6, r7, d2
   d5798:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d579a:	ee11 2a10 	vmov	r2, s2
   d579e:	462b      	mov	r3, r5
   d57a0:	ee12 0a10 	vmov	r0, s4
   d57a4:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d57a6:	ed8d 0b00 	vstr	d0, [sp]
   d57aa:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d57ae:	f003 f8b7 	bl	d8920 <__aeabi_dcmpeq>
   d57b2:	ed9d 0b00 	vldr	d0, [sp]
   d57b6:	bb38      	cbnz	r0, d5808 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d57b8:	ec51 0b10 	vmov	r0, r1, d0
   d57bc:	4622      	mov	r2, r4
   d57be:	462b      	mov	r3, r5
   d57c0:	f002 fc92 	bl	d80e8 <__aeabi_dsub>
   d57c4:	4652      	mov	r2, sl
   d57c6:	4680      	mov	r8, r0
   d57c8:	4689      	mov	r9, r1
   d57ca:	465b      	mov	r3, fp
   d57cc:	ec51 0b18 	vmov	r0, r1, d8
   d57d0:	f002 fc8a 	bl	d80e8 <__aeabi_dsub>
   d57d4:	4602      	mov	r2, r0
   d57d6:	460b      	mov	r3, r1
   d57d8:	4640      	mov	r0, r8
   d57da:	4649      	mov	r1, r9
   d57dc:	f002 fe38 	bl	d8450 <__aeabi_dmul>
   d57e0:	4622      	mov	r2, r4
   d57e2:	4680      	mov	r8, r0
   d57e4:	4689      	mov	r9, r1
   d57e6:	462b      	mov	r3, r5
   d57e8:	4630      	mov	r0, r6
   d57ea:	4639      	mov	r1, r7
   d57ec:	f002 fc7c 	bl	d80e8 <__aeabi_dsub>
   d57f0:	4602      	mov	r2, r0
   d57f2:	460b      	mov	r3, r1
   d57f4:	4640      	mov	r0, r8
   d57f6:	4649      	mov	r1, r9
   d57f8:	f002 ff54 	bl	d86a4 <__aeabi_ddiv>
   d57fc:	4652      	mov	r2, sl
   d57fe:	465b      	mov	r3, fp
   d5800:	f002 fc74 	bl	d80ec <__adddf3>
   d5804:	ec41 0b10 	vmov	d0, r0, r1
}
   d5808:	b003      	add	sp, #12
   d580a:	ecbd 8b02 	vpop	{d8}
   d580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5812 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5812:	2100      	movs	r1, #0
   d5814:	f7ff beb4 	b.w	d5580 <system_delay_ms>

000d5818 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5818:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d581a:	6883      	ldr	r3, [r0, #8]
   d581c:	4604      	mov	r4, r0
   d581e:	b90b      	cbnz	r3, d5824 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5820:	f002 fb13 	bl	d7e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5824:	68c3      	ldr	r3, [r0, #12]
   d5826:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5828:	68a3      	ldr	r3, [r4, #8]
   d582a:	b11b      	cbz	r3, d5834 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d582c:	2203      	movs	r2, #3
   d582e:	4621      	mov	r1, r4
   d5830:	4620      	mov	r0, r4
   d5832:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5834:	4620      	mov	r0, r4
   d5836:	2110      	movs	r1, #16
}
   d5838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d583c:	f002 bb03 	b.w	d7e46 <_ZdlPvj>

000d5840 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5840:	4770      	bx	lr

000d5842 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5842:	2000      	movs	r0, #0
   d5844:	4770      	bx	lr

000d5846 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5846:	4770      	bx	lr

000d5848 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5848:	2000      	movs	r0, #0
   d584a:	4770      	bx	lr

000d584c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d584c:	4770      	bx	lr

000d584e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d584e:	2000      	movs	r0, #0
   d5850:	4770      	bx	lr

000d5852 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5852:	b510      	push	{r4, lr}
   d5854:	2114      	movs	r1, #20
   d5856:	4604      	mov	r4, r0
   d5858:	f002 faf5 	bl	d7e46 <_ZdlPvj>
   d585c:	4620      	mov	r0, r4
   d585e:	bd10      	pop	{r4, pc}

000d5860 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5860:	b510      	push	{r4, lr}
   d5862:	2114      	movs	r1, #20
   d5864:	4604      	mov	r4, r0
   d5866:	f002 faee 	bl	d7e46 <_ZdlPvj>
   d586a:	4620      	mov	r0, r4
   d586c:	bd10      	pop	{r4, pc}

000d586e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d586e:	b510      	push	{r4, lr}
   d5870:	2114      	movs	r1, #20
   d5872:	4604      	mov	r4, r0
   d5874:	f002 fae7 	bl	d7e46 <_ZdlPvj>
   d5878:	4620      	mov	r0, r4
   d587a:	bd10      	pop	{r4, pc}

000d587c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d587c:	f7fe bc0f 	b.w	d409e <_ZdlPv>

000d5880 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5880:	f7fe bc0d 	b.w	d409e <_ZdlPv>

000d5884 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5884:	f7fe bc0b 	b.w	d409e <_ZdlPv>

000d5888 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5888:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d588a:	200a      	movs	r0, #10
   d588c:	4a02      	ldr	r2, [pc, #8]	; (d5898 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d588e:	2100      	movs	r1, #0
   d5890:	f7ff fe5e 	bl	d5550 <panic_>
    }
}
   d5894:	bd08      	pop	{r3, pc}
   d5896:	bf00      	nop
   d5898:	000d52e1 	.word	0x000d52e1

000d589c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d589c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d58a0:	b2da      	uxtb	r2, r3
   d58a2:	2a09      	cmp	r2, #9
   d58a4:	d801      	bhi.n	d58aa <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d58a6:	4618      	mov	r0, r3
   d58a8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d58aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d58ae:	2b05      	cmp	r3, #5
   d58b0:	d801      	bhi.n	d58b6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d58b2:	3857      	subs	r0, #87	; 0x57
   d58b4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d58b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d58ba:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d58bc:	bf94      	ite	ls
   d58be:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d58c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d58c4:	4770      	bx	lr
	...

000d58c8 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d58c8:	b510      	push	{r4, lr}
            locked_(false) {
   d58ca:	2300      	movs	r3, #0
   d58cc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d58ce:	4b04      	ldr	r3, [pc, #16]	; (d58e0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d58d0:	4604      	mov	r4, r0
   d58d2:	6818      	ldr	r0, [r3, #0]
   d58d4:	f7ff fcec 	bl	d52b0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d58d8:	2301      	movs	r3, #1
   d58da:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d58dc:	4620      	mov	r0, r4
   d58de:	bd10      	pop	{r4, pc}
   d58e0:	2003e4c8 	.word	0x2003e4c8

000d58e4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d58e4:	b510      	push	{r4, lr}
        if (locked_) {
   d58e6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d58e8:	4604      	mov	r4, r0
        if (locked_) {
   d58ea:	b11b      	cbz	r3, d58f4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d58ec:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d58ee:	6818      	ldr	r0, [r3, #0]
   d58f0:	f7ff fce6 	bl	d52c0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd10      	pop	{r4, pc}
   d58f8:	2003e4c8 	.word	0x2003e4c8

000d58fc <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d58fc:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d58fe:	7982      	ldrb	r2, [r0, #6]
   d5900:	798b      	ldrb	r3, [r1, #6]
   d5902:	429a      	cmp	r2, r3
   d5904:	d106      	bne.n	d5914 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5906:	2206      	movs	r2, #6
   d5908:	f003 fa72 	bl	d8df0 <memcmp>
   d590c:	fab0 f080 	clz	r0, r0
   d5910:	0940      	lsrs	r0, r0, #5
   d5912:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5914:	2000      	movs	r0, #0
}
   d5916:	bd08      	pop	{r3, pc}

000d5918 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5918:	b510      	push	{r4, lr}
        : uuid_() {
   d591a:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d591c:	4604      	mov	r4, r0
        : uuid_() {
   d591e:	2100      	movs	r1, #0
   d5920:	f003 fa9b 	bl	d8e5a <memset>
}
   d5924:	4620      	mov	r0, r4
   d5926:	bd10      	pop	{r4, pc}

000d5928 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d5928:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d592a:	4603      	mov	r3, r0
   d592c:	f101 0214 	add.w	r2, r1, #20
   d5930:	f851 4b04 	ldr.w	r4, [r1], #4
   d5934:	f843 4b04 	str.w	r4, [r3], #4
   d5938:	4291      	cmp	r1, r2
   d593a:	d1f9      	bne.n	d5930 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d593c:	bd10      	pop	{r4, pc}

000d593e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d593e:	b570      	push	{r4, r5, r6, lr}
   d5940:	460c      	mov	r4, r1
   d5942:	4605      	mov	r5, r0
   d5944:	4616      	mov	r6, r2
        : BleUuid() {
   d5946:	f7ff ffe7 	bl	d5918 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d594a:	b92c      	cbnz	r4, d5958 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d594c:	2210      	movs	r2, #16
   d594e:	4621      	mov	r1, r4
   d5950:	4628      	mov	r0, r5
   d5952:	f003 fa82 	bl	d8e5a <memset>
   d5956:	e016      	b.n	d5986 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d5958:	2e01      	cmp	r6, #1
   d595a:	d109      	bne.n	d5970 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d595c:	462b      	mov	r3, r5
   d595e:	f104 0210 	add.w	r2, r4, #16
   d5962:	f854 1b04 	ldr.w	r1, [r4], #4
   d5966:	f843 1b04 	str.w	r1, [r3], #4
   d596a:	4294      	cmp	r4, r2
   d596c:	d1f9      	bne.n	d5962 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d596e:	e008      	b.n	d5982 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5970:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d5972:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d5974:	5ce1      	ldrb	r1, [r4, r3]
   d5976:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d597a:	3b01      	subs	r3, #1
   d597c:	b2db      	uxtb	r3, r3
   d597e:	2bff      	cmp	r3, #255	; 0xff
   d5980:	d1f8      	bne.n	d5974 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5982:	2301      	movs	r3, #1
   d5984:	742b      	strb	r3, [r5, #16]
    }
}
   d5986:	4628      	mov	r0, r5
   d5988:	bd70      	pop	{r4, r5, r6, pc}

000d598a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d598a:	b538      	push	{r3, r4, r5, lr}
   d598c:	4604      	mov	r4, r0
   d598e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5990:	461a      	mov	r2, r3
   d5992:	f7ff ffd4 	bl	d593e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d5996:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5998:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d599a:	0a2d      	lsrs	r5, r5, #8
   d599c:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d599e:	7423      	strb	r3, [r4, #16]
}
   d59a0:	4620      	mov	r0, r4
   d59a2:	bd38      	pop	{r3, r4, r5, pc}

000d59a4 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d59a4:	7c03      	ldrb	r3, [r0, #16]
   d59a6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d59aa:	bf14      	ite	ne
   d59ac:	2001      	movne	r0, #1
   d59ae:	2000      	moveq	r0, #0
   d59b0:	4770      	bx	lr

000d59b2 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d59b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d59b4:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d59b6:	f7ff fff5 	bl	d59a4 <_ZNK8particle7BleUuid4typeEv>
   d59ba:	b908      	cbnz	r0, d59c0 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d59bc:	8820      	ldrh	r0, [r4, #0]
   d59be:	e009      	b.n	d59d4 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d59c0:	2210      	movs	r2, #16
   d59c2:	2100      	movs	r1, #0
   d59c4:	4668      	mov	r0, sp
   d59c6:	f003 fa48 	bl	d8e5a <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d59ca:	2210      	movs	r2, #16
   d59cc:	4669      	mov	r1, sp
   d59ce:	4620      	mov	r0, r4
   d59d0:	f003 fa0e 	bl	d8df0 <memcmp>
   d59d4:	3000      	adds	r0, #0
   d59d6:	bf18      	it	ne
   d59d8:	2001      	movne	r0, #1
    }
}
   d59da:	b004      	add	sp, #16
   d59dc:	bd10      	pop	{r4, pc}

000d59de <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d59de:	8800      	ldrh	r0, [r0, #0]
   d59e0:	4770      	bx	lr

000d59e2 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d59e2:	4770      	bx	lr

000d59e4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d59e4:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d59e6:	4603      	mov	r3, r0
   d59e8:	f101 0214 	add.w	r2, r1, #20
   d59ec:	f851 4b04 	ldr.w	r4, [r1], #4
   d59f0:	f843 4b04 	str.w	r4, [r3], #4
   d59f4:	4291      	cmp	r1, r2
   d59f6:	d1f9      	bne.n	d59ec <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d59f8:	bd10      	pop	{r4, pc}

000d59fa <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d59fa:	b510      	push	{r4, lr}
    if (uuid128) {
   d59fc:	b151      	cbz	r1, d5a14 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d59fe:	4603      	mov	r3, r0
   d5a00:	f101 0210 	add.w	r2, r1, #16
   d5a04:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a08:	f843 4b04 	str.w	r4, [r3], #4
   d5a0c:	4291      	cmp	r1, r2
   d5a0e:	d1f9      	bne.n	d5a04 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5a10:	2301      	movs	r3, #1
   d5a12:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5a16:	b510      	push	{r4, lr}
   d5a18:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5a1a:	f7ff ffc3 	bl	d59a4 <_ZNK8particle7BleUuid4typeEv>
   d5a1e:	b928      	cbnz	r0, d5a2c <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d5a20:	8808      	ldrh	r0, [r1, #0]
   d5a22:	8823      	ldrh	r3, [r4, #0]
   d5a24:	1a1b      	subs	r3, r3, r0
   d5a26:	4258      	negs	r0, r3
   d5a28:	4158      	adcs	r0, r3
   d5a2a:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5a2c:	2210      	movs	r2, #16
   d5a2e:	4620      	mov	r0, r4
   d5a30:	f003 f9de 	bl	d8df0 <memcmp>
   d5a34:	fab0 f080 	clz	r0, r0
   d5a38:	0940      	lsrs	r0, r0, #5
    }
}
   d5a3a:	bd10      	pop	{r4, pc}

000d5a3c <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d5a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a3e:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5a40:	460e      	mov	r6, r1
   d5a42:	b919      	cbnz	r1, d5a4c <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5a44:	2210      	movs	r2, #16
   d5a46:	f003 fa08 	bl	d8e5a <memset>
   d5a4a:	e051      	b.n	d5af0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5a4c:	2124      	movs	r1, #36	; 0x24
   d5a4e:	4630      	mov	r0, r6
   d5a50:	f003 fa65 	bl	d8f1e <strnlen>
   d5a54:	2804      	cmp	r0, #4
   d5a56:	d002      	beq.n	d5a5e <_ZN8particle7BleUuid9constructEPKc+0x22>
   d5a58:	2700      	movs	r7, #0
   d5a5a:	2410      	movs	r4, #16
   d5a5c:	e03b      	b.n	d5ad6 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5a5e:	7830      	ldrb	r0, [r6, #0]
   d5a60:	f7ff ff1c 	bl	d589c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5a64:	1e04      	subs	r4, r0, #0
   d5a66:	db47      	blt.n	d5af8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5a68:	7870      	ldrb	r0, [r6, #1]
   d5a6a:	f7ff ff17 	bl	d589c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5a6e:	2800      	cmp	r0, #0
   d5a70:	db42      	blt.n	d5af8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5a72:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5a76:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5a7a:	78b0      	ldrb	r0, [r6, #2]
   d5a7c:	f7ff ff0e 	bl	d589c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5a80:	1e04      	subs	r4, r0, #0
   d5a82:	db39      	blt.n	d5af8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5a84:	78f0      	ldrb	r0, [r6, #3]
   d5a86:	f7ff ff09 	bl	d589c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5a8a:	2800      	cmp	r0, #0
   d5a8c:	db34      	blt.n	d5af8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5a8e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d5a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5a96:	b2c0      	uxtb	r0, r0
   d5a98:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d5a9c:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d5a9e:	2300      	movs	r3, #0
   d5aa0:	e027      	b.n	d5af2 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5aa2:	b32c      	cbz	r4, d5af0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d5aa4:	5df0      	ldrb	r0, [r6, r7]
   d5aa6:	f7ff fef9 	bl	d589c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5aaa:	0603      	lsls	r3, r0, #24
   d5aac:	d412      	bmi.n	d5ad4 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d5aae:	3c01      	subs	r4, #1
   d5ab0:	0100      	lsls	r0, r0, #4
   d5ab2:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5ab4:	2124      	movs	r1, #36	; 0x24
   d5ab6:	4630      	mov	r0, r6
   d5ab8:	f003 fa31 	bl	d8f1e <strnlen>
   d5abc:	3701      	adds	r7, #1
   d5abe:	4287      	cmp	r7, r0
   d5ac0:	d208      	bcs.n	d5ad4 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d5ac2:	5df0      	ldrb	r0, [r6, r7]
   d5ac4:	f7ff feea 	bl	d589c <_ZN8particle11hexToNibbleEc>
   d5ac8:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5aca:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d5acc:	bfa2      	ittt	ge
   d5ace:	5d2b      	ldrbge	r3, [r5, r4]
   d5ad0:	4318      	orrge	r0, r3
   d5ad2:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5ad4:	3701      	adds	r7, #1
   d5ad6:	2124      	movs	r1, #36	; 0x24
   d5ad8:	4630      	mov	r0, r6
   d5ada:	f003 fa20 	bl	d8f1e <strnlen>
   d5ade:	4287      	cmp	r7, r0
   d5ae0:	d3df      	bcc.n	d5aa2 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d5ae2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d5ae4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5ae6:	42a5      	cmp	r5, r4
   d5ae8:	d002      	beq.n	d5af0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d5aea:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5aee:	e7fa      	b.n	d5ae6 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5af0:	2301      	movs	r3, #1
   d5af2:	742b      	strb	r3, [r5, #16]
}
   d5af4:	b003      	add	sp, #12
   d5af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d5af8:	2300      	movs	r3, #0
   d5afa:	802b      	strh	r3, [r5, #0]
   d5afc:	e7cf      	b.n	d5a9e <_ZN8particle7BleUuid9constructEPKc+0x62>

000d5afe <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d5afe:	b538      	push	{r3, r4, r5, lr}
   d5b00:	4604      	mov	r4, r0
   d5b02:	460d      	mov	r5, r1
        : BleUuid() {
   d5b04:	f7ff ff08 	bl	d5918 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5b08:	4620      	mov	r0, r4
   d5b0a:	4629      	mov	r1, r5
   d5b0c:	f7ff ff96 	bl	d5a3c <_ZN8particle7BleUuid9constructEPKc>
}
   d5b10:	4620      	mov	r0, r4
   d5b12:	bd38      	pop	{r3, r4, r5, pc}

000d5b14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5b16:	b18b      	cbz	r3, d5b3c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5b18:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5b1a:	1ce5      	adds	r5, r4, #3
   d5b1c:	428d      	cmp	r5, r1
   d5b1e:	d80f      	bhi.n	d5b40 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5b20:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5b22:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5b24:	5d87      	ldrb	r7, [r0, r6]
   d5b26:	4297      	cmp	r7, r2
   d5b28:	d105      	bne.n	d5b36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5b2a:	442e      	add	r6, r5
   d5b2c:	42b1      	cmp	r1, r6
   d5b2e:	d307      	bcc.n	d5b40 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5b30:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5b32:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5b36:	3501      	adds	r5, #1
   d5b38:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5b3a:	e7ee      	b.n	d5b1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5b3c:	4618      	mov	r0, r3
   d5b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b40:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5b48:	4604      	mov	r4, r0
   d5b4a:	460e      	mov	r6, r1
   d5b4c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5b4e:	4617      	mov	r7, r2
   d5b50:	2a00      	cmp	r2, #0
   d5b52:	d03a      	beq.n	d5bca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5b54:	460a      	mov	r2, r1
   d5b56:	ab01      	add	r3, sp, #4
   d5b58:	6a01      	ldr	r1, [r0, #32]
   d5b5a:	f7ff ffdb 	bl	d5b14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5b5e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5b62:	6a22      	ldr	r2, [r4, #32]
   d5b64:	bb03      	cbnz	r3, d5ba8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5b66:	b1f8      	cbz	r0, d5ba8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5b68:	1c96      	adds	r6, r2, #2
   d5b6a:	442e      	add	r6, r5
   d5b6c:	1a36      	subs	r6, r6, r0
   d5b6e:	2e1f      	cmp	r6, #31
   d5b70:	d82b      	bhi.n	d5bca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5b72:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5b76:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5b7a:	ebc8 0202 	rsb	r2, r8, r2
   d5b7e:	1a12      	subs	r2, r2, r0
   d5b80:	eb00 0108 	add.w	r1, r0, r8
   d5b84:	eb05 0009 	add.w	r0, r5, r9
   d5b88:	b292      	uxth	r2, r2
   d5b8a:	4421      	add	r1, r4
   d5b8c:	4420      	add	r0, r4
   d5b8e:	f003 f949 	bl	d8e24 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5b92:	1c6b      	adds	r3, r5, #1
   d5b94:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5b98:	462a      	mov	r2, r5
   d5b9a:	4639      	mov	r1, r7
   d5b9c:	eb04 0009 	add.w	r0, r4, r9
   d5ba0:	f003 f935 	bl	d8e0e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5ba4:	6226      	str	r6, [r4, #32]
   d5ba6:	e010      	b.n	d5bca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5ba8:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5baa:	182b      	adds	r3, r5, r0
   d5bac:	2b1f      	cmp	r3, #31
   d5bae:	d80c      	bhi.n	d5bca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5bb0:	1c6b      	adds	r3, r5, #1
   d5bb2:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5bb4:	4422      	add	r2, r4
   d5bb6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5bb8:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5bba:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5bbc:	4420      	add	r0, r4
   d5bbe:	462a      	mov	r2, r5
   d5bc0:	f003 f925 	bl	d8e0e <memcpy>
        selfLen_ += len;
   d5bc4:	6a22      	ldr	r2, [r4, #32]
   d5bc6:	442a      	add	r2, r5
   d5bc8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5bca:	6a20      	ldr	r0, [r4, #32]
}
   d5bcc:	b003      	add	sp, #12
   d5bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5bd2 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5bd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5bd4:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5bd6:	4603      	mov	r3, r0
   d5bd8:	f100 021f 	add.w	r2, r0, #31
   d5bdc:	2000      	movs	r0, #0
   d5bde:	f803 0b01 	strb.w	r0, [r3], #1
   d5be2:	4293      	cmp	r3, r2
   d5be4:	f04f 0100 	mov.w	r1, #0
   d5be8:	d1f9      	bne.n	d5bde <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5bea:	aa04      	add	r2, sp, #16
   d5bec:	2306      	movs	r3, #6
   d5bee:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5bf2:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5bf4:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5bf6:	9100      	str	r1, [sp, #0]
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	4619      	mov	r1, r3
   d5bfc:	f7ff ffa2 	bl	d5b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5c00:	4620      	mov	r0, r4
   d5c02:	b004      	add	sp, #16
   d5c04:	bd10      	pop	{r4, pc}

000d5c06 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5c08:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5c0a:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5c0c:	ab01      	add	r3, sp, #4
   d5c0e:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5c10:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5c12:	f7ff ff7f 	bl	d5b14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5c16:	4605      	mov	r5, r0
   d5c18:	b178      	cbz	r0, d5c3a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5c1a:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5c1c:	6a22      	ldr	r2, [r4, #32]
   d5c1e:	1829      	adds	r1, r5, r0
   d5c20:	1a12      	subs	r2, r2, r0
   d5c22:	1b52      	subs	r2, r2, r5
   d5c24:	4421      	add	r1, r4
   d5c26:	4420      	add	r0, r4
   d5c28:	f003 f8f1 	bl	d8e0e <memcpy>
        selfLen_ -= len;
   d5c2c:	6a23      	ldr	r3, [r4, #32]
   d5c2e:	1b5d      	subs	r5, r3, r5
   d5c30:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5c32:	4631      	mov	r1, r6
   d5c34:	4620      	mov	r0, r4
   d5c36:	f7ff ffe6 	bl	d5c06 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5c3a:	b002      	add	sp, #8
   d5c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c40 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5c40:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5c42:	2500      	movs	r5, #0
   d5c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5c48:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5c4a:	8043      	strh	r3, [r0, #2]
   d5c4c:	220e      	movs	r2, #14
   d5c4e:	4629      	mov	r1, r5
   d5c50:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5c52:	7105      	strb	r5, [r0, #4]
   d5c54:	3006      	adds	r0, #6
   d5c56:	f003 f900 	bl	d8e5a <memset>
   d5c5a:	f104 0014 	add.w	r0, r4, #20
   d5c5e:	f7ff fe5b 	bl	d5918 <_ZN8particle7BleUuidC1Ev>
   d5c62:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5c66:	f7ff fe57 	bl	d5918 <_ZN8particle7BleUuidC1Ev>
   d5c6a:	4904      	ldr	r1, [pc, #16]	; (d5c7c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5c6c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5c70:	f001 fd0f 	bl	d7692 <_ZN6StringC1EPK19__FlashStringHelper>
   d5c74:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5c76:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5c78:	4620      	mov	r0, r4
   d5c7a:	bd38      	pop	{r3, r4, r5, pc}
   d5c7c:	000d9400 	.word	0x000d9400

000d5c80 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5c80:	b510      	push	{r4, lr}
   d5c82:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5c84:	69c2      	ldr	r2, [r0, #28]
   d5c86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5c8a:	4293      	cmp	r3, r2
   d5c8c:	4618      	mov	r0, r3
   d5c8e:	d006      	beq.n	d5c9e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5c90:	6804      	ldr	r4, [r0, #0]
   d5c92:	8824      	ldrh	r4, [r4, #0]
   d5c94:	428c      	cmp	r4, r1
   d5c96:	f103 0308 	add.w	r3, r3, #8
   d5c9a:	d1f6      	bne.n	d5c8a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5c9c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5c9e:	2000      	movs	r0, #0
    }
   d5ca0:	bd10      	pop	{r4, pc}
	...

000d5ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5ca8:	4680      	mov	r8, r0
   d5caa:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5cac:	460e      	mov	r6, r1
   d5cae:	b369      	cbz	r1, d5d0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5cb0:	b362      	cbz	r2, d5d0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5cb2:	2af4      	cmp	r2, #244	; 0xf4
   d5cb4:	6805      	ldr	r5, [r0, #0]
   d5cb6:	bf28      	it	cs
   d5cb8:	22f4      	movcs	r2, #244	; 0xf4
   d5cba:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5cbc:	782a      	ldrb	r2, [r5, #0]
   d5cbe:	b1a2      	cbz	r2, d5cea <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5cc0:	792b      	ldrb	r3, [r5, #4]
   d5cc2:	0798      	lsls	r0, r3, #30
   d5cc4:	d507      	bpl.n	d5cd6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5cc6:	2300      	movs	r3, #0
   d5cc8:	4622      	mov	r2, r4
   d5cca:	89a8      	ldrh	r0, [r5, #12]
   d5ccc:	f7ff fa8a 	bl	d51e4 <hal_ble_gatt_server_set_characteristic_value>
   d5cd0:	2800      	cmp	r0, #0
   d5cd2:	da02      	bge.n	d5cda <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5cd4:	e043      	b.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5cd6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5cda:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5cde:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5ce0:	06da      	lsls	r2, r3, #27
   d5ce2:	d518      	bpl.n	d5d16 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5ce4:	2f01      	cmp	r7, #1
   d5ce6:	d123      	bne.n	d5d30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5ce8:	e015      	b.n	d5d16 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5cea:	8868      	ldrh	r0, [r5, #2]
   d5cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5cf0:	4298      	cmp	r0, r3
   d5cf2:	d00d      	beq.n	d5d10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5cf4:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5cf6:	0759      	lsls	r1, r3, #29
   d5cf8:	d523      	bpl.n	d5d42 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5cfa:	2f01      	cmp	r7, #1
   d5cfc:	d021      	beq.n	d5d42 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cfe:	89a9      	ldrh	r1, [r5, #12]
   d5d00:	9200      	str	r2, [sp, #0]
   d5d02:	4623      	mov	r3, r4
   d5d04:	4632      	mov	r2, r6
   d5d06:	f7ff fa81 	bl	d520c <hal_ble_gatt_client_write_without_response>
   d5d0a:	e028      	b.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5d0c:	4815      	ldr	r0, [pc, #84]	; (d5d64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5d0e:	e026      	b.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5d10:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5d14:	e023      	b.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5d16:	069a      	lsls	r2, r3, #26
   d5d18:	d521      	bpl.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5d1a:	2f02      	cmp	r7, #2
   d5d1c:	d01f      	beq.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5d1e:	89a8      	ldrh	r0, [r5, #12]
   d5d20:	2300      	movs	r3, #0
   d5d22:	4622      	mov	r2, r4
   d5d24:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5d26:	b002      	add	sp, #8
   d5d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5d2c:	f7ff ba96 	b.w	d525c <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5d30:	89a8      	ldrh	r0, [r5, #12]
   d5d32:	2300      	movs	r3, #0
   d5d34:	4622      	mov	r2, r4
   d5d36:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5d38:	b002      	add	sp, #8
   d5d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5d3e:	f7ff ba83 	b.w	d5248 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5d42:	071b      	lsls	r3, r3, #28
   d5d44:	d501      	bpl.n	d5d4a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5d46:	2f02      	cmp	r7, #2
   d5d48:	d102      	bne.n	d5d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5d4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5d4e:	e006      	b.n	d5d5e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5d50:	2300      	movs	r3, #0
   d5d52:	89a9      	ldrh	r1, [r5, #12]
   d5d54:	9300      	str	r3, [sp, #0]
   d5d56:	4632      	mov	r2, r6
   d5d58:	4623      	mov	r3, r4
   d5d5a:	f7ff fa4d 	bl	d51f8 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5d5e:	b002      	add	sp, #8
   d5d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d64:	fffffef2 	.word	0xfffffef2

000d5d68 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5d68:	b510      	push	{r4, lr}
    return impl()->address();
   d5d6a:	680a      	ldr	r2, [r1, #0]
   d5d6c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5d70:	6003      	str	r3, [r0, #0]
   d5d72:	6853      	ldr	r3, [r2, #4]
   d5d74:	6043      	str	r3, [r0, #4]
}
   d5d76:	bd10      	pop	{r4, pc}

000d5d78 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5d7a:	6802      	ldr	r2, [r0, #0]
   d5d7c:	680b      	ldr	r3, [r1, #0]
   d5d7e:	8812      	ldrh	r2, [r2, #0]
   d5d80:	881b      	ldrh	r3, [r3, #0]
   d5d82:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5d84:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5d86:	d10c      	bne.n	d5da2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5d88:	4601      	mov	r1, r0
   d5d8a:	4668      	mov	r0, sp
   d5d8c:	f7ff ffec 	bl	d5d68 <_ZNK8particle13BlePeerDevice7addressEv>
   d5d90:	4621      	mov	r1, r4
   d5d92:	a802      	add	r0, sp, #8
   d5d94:	f7ff ffe8 	bl	d5d68 <_ZNK8particle13BlePeerDevice7addressEv>
   d5d98:	a902      	add	r1, sp, #8
   d5d9a:	4668      	mov	r0, sp
   d5d9c:	f7ff fdae 	bl	d58fc <_ZNK8particle10BleAddresseqERKS0_>
   d5da0:	b900      	cbnz	r0, d5da4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5da2:	2000      	movs	r0, #0
}
   d5da4:	b004      	add	sp, #16
   d5da6:	bd10      	pop	{r4, pc}

000d5da8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5da8:	b510      	push	{r4, lr}
   d5daa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5dac:	2034      	movs	r0, #52	; 0x34
   d5dae:	f7fe f974 	bl	d409a <_Znwj>
   d5db2:	4601      	mov	r1, r0
   d5db4:	b168      	cbz	r0, d5dd2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5db6:	2300      	movs	r3, #0
   d5db8:	6003      	str	r3, [r0, #0]
   d5dba:	6043      	str	r3, [r0, #4]
   d5dbc:	6083      	str	r3, [r0, #8]
   d5dbe:	60c3      	str	r3, [r0, #12]
   d5dc0:	6103      	str	r3, [r0, #16]
   d5dc2:	6143      	str	r3, [r0, #20]
   d5dc4:	6183      	str	r3, [r0, #24]
   d5dc6:	61c3      	str	r3, [r0, #28]
   d5dc8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5dca:	6243      	str	r3, [r0, #36]	; 0x24
   d5dcc:	6283      	str	r3, [r0, #40]	; 0x28
   d5dce:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5dd0:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5dd2:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5dd4:	b919      	cbnz	r1, d5dde <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5dd6:	4a0a      	ldr	r2, [pc, #40]	; (d5e00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5dd8:	200a      	movs	r0, #10
   d5dda:	f7ff fbb9 	bl	d5550 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5dde:	2000      	movs	r0, #0
   d5de0:	f7ff f9cc 	bl	d517c <hal_ble_stack_init>
   d5de4:	b120      	cbz	r0, d5df0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5de6:	4a06      	ldr	r2, [pc, #24]	; (d5e00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5de8:	2100      	movs	r1, #0
   d5dea:	200a      	movs	r0, #10
   d5dec:	f7ff fbb0 	bl	d5550 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5df0:	2200      	movs	r2, #0
   d5df2:	6821      	ldr	r1, [r4, #0]
   d5df4:	4803      	ldr	r0, [pc, #12]	; (d5e04 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5df6:	f7ff fa1d 	bl	d5234 <hal_ble_set_callback_on_periph_link_events>
}
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	bd10      	pop	{r4, pc}
   d5dfe:	bf00      	nop
   d5e00:	000d52e1 	.word	0x000d52e1
   d5e04:	000d61c9 	.word	0x000d61c9

000d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5e08:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5e0a:	4c0a      	ldr	r4, [pc, #40]	; (d5e34 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5e0c:	6823      	ldr	r3, [r4, #0]
   d5e0e:	07db      	lsls	r3, r3, #31
   d5e10:	d40e      	bmi.n	d5e30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7fe f947 	bl	d40a6 <__cxa_guard_acquire>
   d5e18:	b150      	cbz	r0, d5e30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5e1a:	4807      	ldr	r0, [pc, #28]	; (d5e38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5e1c:	f7ff ffc4 	bl	d5da8 <_ZN8particle14BleLocalDeviceC1Ev>
   d5e20:	4620      	mov	r0, r4
   d5e22:	f7fe f945 	bl	d40b0 <__cxa_guard_release>
   d5e26:	4a05      	ldr	r2, [pc, #20]	; (d5e3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5e28:	4905      	ldr	r1, [pc, #20]	; (d5e40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5e2a:	4803      	ldr	r0, [pc, #12]	; (d5e38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5e2c:	f002 f806 	bl	d7e3c <__aeabi_atexit>
    return instance;
}
   d5e30:	4801      	ldr	r0, [pc, #4]	; (d5e38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5e32:	bd10      	pop	{r4, pc}
   d5e34:	2003e4c0 	.word	0x2003e4c0
   d5e38:	2003e4bc 	.word	0x2003e4bc
   d5e3c:	2003e438 	.word	0x2003e438
   d5e40:	000d5fdd 	.word	0x000d5fdd

000d5e44 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5e44:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5e46:	6803      	ldr	r3, [r0, #0]
   d5e48:	3b09      	subs	r3, #9
   d5e4a:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5e4c:	b08a      	sub	sp, #40	; 0x28
   d5e4e:	4604      	mov	r4, r0
   d5e50:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5e52:	d819      	bhi.n	d5e88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5e54:	f7ff ffd8 	bl	d5e08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5e58:	88a1      	ldrh	r1, [r4, #4]
   d5e5a:	6800      	ldr	r0, [r0, #0]
   d5e5c:	f7ff ff10 	bl	d5c80 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5e60:	4602      	mov	r2, r0
   d5e62:	b958      	cbnz	r0, d5e7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5e64:	2320      	movs	r3, #32
   d5e66:	9302      	str	r3, [sp, #8]
   d5e68:	4b08      	ldr	r3, [pc, #32]	; (d5e8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5e6a:	9003      	str	r0, [sp, #12]
   d5e6c:	9300      	str	r3, [sp, #0]
   d5e6e:	aa02      	add	r2, sp, #8
   d5e70:	4603      	mov	r3, r0
   d5e72:	4907      	ldr	r1, [pc, #28]	; (d5e90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5e74:	2032      	movs	r0, #50	; 0x32
   d5e76:	f7ff fb73 	bl	d5560 <log_message>
   d5e7a:	e005      	b.n	d5e88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5e7c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5e7e:	b11d      	cbz	r5, d5e88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5e80:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5e82:	68e1      	ldr	r1, [r4, #12]
   d5e84:	6920      	ldr	r0, [r4, #16]
   d5e86:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5e88:	b00a      	add	sp, #40	; 0x28
   d5e8a:	bd70      	pop	{r4, r5, r6, pc}
   d5e8c:	000d917a 	.word	0x000d917a
   d5e90:	000d9130 	.word	0x000d9130

000d5e94 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5e94:	4608      	mov	r0, r1
   d5e96:	b909      	cbnz	r1, d5e9c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5e98:	460a      	mov	r2, r1
   d5e9a:	e001      	b.n	d5ea0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5e9c:	6a09      	ldr	r1, [r1, #32]
   d5e9e:	2200      	movs	r2, #0
   d5ea0:	f7ff b974 	b.w	d518c <hal_ble_gap_set_advertising_data>

000d5ea4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5ea4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5ea6:	460c      	mov	r4, r1
   d5ea8:	b911      	cbnz	r1, d5eb0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5eaa:	460a      	mov	r2, r1
   d5eac:	4608      	mov	r0, r1
   d5eae:	e006      	b.n	d5ebe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5eb0:	2101      	movs	r1, #1
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	f7ff fea7 	bl	d5c06 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5eb8:	6a21      	ldr	r1, [r4, #32]
   d5eba:	2200      	movs	r2, #0
   d5ebc:	4620      	mov	r0, r4
    }
}
   d5ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5ec2:	f7ff b96b 	b.w	d519c <hal_ble_gap_set_scan_response_data>

000d5ec6 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5ec6:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5ec8:	a801      	add	r0, sp, #4
   d5eca:	f7ff fcfd 	bl	d58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5ece:	2000      	movs	r0, #0
   d5ed0:	f7ff f96c 	bl	d51ac <hal_ble_gap_start_advertising>
   d5ed4:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5ed6:	a801      	add	r0, sp, #4
   d5ed8:	f7ff fd04 	bl	d58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5edc:	4620      	mov	r0, r4
   d5ede:	b002      	add	sp, #8
   d5ee0:	bd10      	pop	{r4, pc}

000d5ee2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5ee4:	4605      	mov	r5, r0
   d5ee6:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5ee8:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5eea:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5eec:	f7ff fcec 	bl	d58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5ef0:	4621      	mov	r1, r4
   d5ef2:	4628      	mov	r0, r5
   d5ef4:	f7ff ffce 	bl	d5e94 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5ef8:	2800      	cmp	r0, #0
   d5efa:	db08      	blt.n	d5f0e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5efc:	4631      	mov	r1, r6
   d5efe:	4628      	mov	r0, r5
   d5f00:	f7ff ffd0 	bl	d5ea4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5f04:	2800      	cmp	r0, #0
   d5f06:	db02      	blt.n	d5f0e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5f08:	4628      	mov	r0, r5
   d5f0a:	f7ff ffdc 	bl	d5ec6 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5f0e:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5f10:	a801      	add	r0, sp, #4
   d5f12:	f7ff fce7 	bl	d58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5f16:	4620      	mov	r0, r4
   d5f18:	b002      	add	sp, #8
   d5f1a:	bd70      	pop	{r4, r5, r6, pc}

000d5f1c <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5f1c:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5f1e:	69d8      	ldr	r0, [r3, #28]
}
   d5f20:	2800      	cmp	r0, #0
   d5f22:	bfd4      	ite	le
   d5f24:	2000      	movle	r0, #0
   d5f26:	2001      	movgt	r0, #1
   d5f28:	4770      	bx	lr

000d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5f2a:	680b      	ldr	r3, [r1, #0]
   d5f2c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5f2e:	b113      	cbz	r3, d5f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5f30:	685a      	ldr	r2, [r3, #4]
   d5f32:	3201      	adds	r2, #1
   d5f34:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5f36:	4770      	bx	lr

000d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5f38:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f3a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5f3e:	4604      	mov	r4, r0
   d5f40:	f840 3b04 	str.w	r3, [r0], #4
   d5f44:	f7ff fff1 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5f48:	6823      	ldr	r3, [r4, #0]
   d5f4a:	b90b      	cbnz	r3, d5f50 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5f4c:	f7ff fc9c 	bl	d5888 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5f54:	b510      	push	{r4, lr}
   d5f56:	f851 3b04 	ldr.w	r3, [r1], #4
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	f840 3b04 	str.w	r3, [r0], #4
   d5f60:	f7ff ffe3 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5f64:	4620      	mov	r0, r4
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5f68:	b510      	push	{r4, lr}
   d5f6a:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f6c:	3004      	adds	r0, #4
   d5f6e:	f7fe f9a1 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5f72:	4620      	mov	r0, r4
   d5f74:	bd10      	pop	{r4, pc}

000d5f76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f76:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f78:	6804      	ldr	r4, [r0, #0]
   d5f7a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f7c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f7e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f82:	42a6      	cmp	r6, r4
   d5f84:	d004      	beq.n	d5f90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5f86:	1d20      	adds	r0, r4, #4
   d5f88:	f7fe f994 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f8c:	3408      	adds	r4, #8
   d5f8e:	e7f8      	b.n	d5f82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f90:	6828      	ldr	r0, [r5, #0]
   d5f92:	f7ff fbcd 	bl	d5730 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f96:	4628      	mov	r0, r5
   d5f98:	bd70      	pop	{r4, r5, r6, pc}

000d5f9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f9a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f9c:	6804      	ldr	r4, [r0, #0]
   d5f9e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5fa0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5fa2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fa6:	42a6      	cmp	r6, r4
   d5fa8:	d004      	beq.n	d5fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5faa:	1d20      	adds	r0, r4, #4
   d5fac:	f7fe f982 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fb0:	3408      	adds	r4, #8
   d5fb2:	e7f8      	b.n	d5fa6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5fb4:	6828      	ldr	r0, [r5, #0]
   d5fb6:	f7ff fbbb 	bl	d5730 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5fba:	4628      	mov	r0, r5
   d5fbc:	bd70      	pop	{r4, r5, r6, pc}

000d5fbe <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5fbe:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5fc0:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5fc2:	f104 0018 	add.w	r0, r4, #24
   d5fc6:	f7ff ffe8 	bl	d5f9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5fca:	f104 000c 	add.w	r0, r4, #12
   d5fce:	f7ff ffd2 	bl	d5f76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5fd8:	f7fe b861 	b.w	d409e <_ZdlPv>

000d5fdc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fde:	6804      	ldr	r4, [r0, #0]
   d5fe0:	4607      	mov	r7, r0
   d5fe2:	b1c4      	cbz	r4, d6016 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5fe4:	69a5      	ldr	r5, [r4, #24]
   d5fe6:	69e3      	ldr	r3, [r4, #28]
   d5fe8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fec:	42ae      	cmp	r6, r5
   d5fee:	d004      	beq.n	d5ffa <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ff0:	1d28      	adds	r0, r5, #4
   d5ff2:	f7fe f95f 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ff6:	3508      	adds	r5, #8
   d5ff8:	e7f8      	b.n	d5fec <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ffa:	69a0      	ldr	r0, [r4, #24]
   d5ffc:	f7ff fb98 	bl	d5730 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6000:	f104 000c 	add.w	r0, r4, #12
   d6004:	f7ff ffc9 	bl	d5f9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6008:	4620      	mov	r0, r4
   d600a:	f7ff ffb4 	bl	d5f76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d600e:	2134      	movs	r1, #52	; 0x34
   d6010:	4620      	mov	r0, r4
   d6012:	f001 ff18 	bl	d7e46 <_ZdlPvj>
   d6016:	4638      	mov	r0, r7
   d6018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d601c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d601c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d601e:	2500      	movs	r5, #0
   d6020:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6022:	6045      	str	r5, [r0, #4]
   d6024:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6026:	2024      	movs	r0, #36	; 0x24
   d6028:	f7fe f837 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d602c:	4604      	mov	r4, r0
   d602e:	b178      	cbz	r0, d6050 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6030:	4603      	mov	r3, r0
   d6032:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6036:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d603a:	f8c0 5002 	str.w	r5, [r0, #2]
   d603e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6040:	7285      	strb	r5, [r0, #10]
   d6042:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6044:	60c5      	str	r5, [r0, #12]
   d6046:	6105      	str	r5, [r0, #16]
   d6048:	6145      	str	r5, [r0, #20]
   d604a:	6185      	str	r5, [r0, #24]
   d604c:	61c5      	str	r5, [r0, #28]
   d604e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6050:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6052:	2014      	movs	r0, #20
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	f7fe f820 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d605a:	4603      	mov	r3, r0
   d605c:	b128      	cbz	r0, d606a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d605e:	2201      	movs	r2, #1
   d6060:	6042      	str	r2, [r0, #4]
   d6062:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6064:	4a08      	ldr	r2, [pc, #32]	; (d6088 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6066:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6068:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d606a:	a802      	add	r0, sp, #8
   d606c:	6872      	ldr	r2, [r6, #4]
   d606e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6072:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6074:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6076:	f7fe f91d 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d607a:	6833      	ldr	r3, [r6, #0]
   d607c:	b90b      	cbnz	r3, d6082 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d607e:	f7ff fc03 	bl	d5888 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d6082:	4630      	mov	r0, r6
   d6084:	b002      	add	sp, #8
   d6086:	bd70      	pop	{r4, r5, r6, pc}
   d6088:	000d910c 	.word	0x000d910c

000d608c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d608c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d608e:	b570      	push	{r4, r5, r6, lr}
   d6090:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6092:	d91a      	bls.n	d60ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6094:	4290      	cmp	r0, r2
   d6096:	d219      	bcs.n	d60cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6098:	f1a1 0608 	sub.w	r6, r1, #8
   d609c:	1a51      	subs	r1, r2, r1
   d609e:	3904      	subs	r1, #4
   d60a0:	1f15      	subs	r5, r2, #4
   d60a2:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d60a4:	1f2b      	subs	r3, r5, #4
   d60a6:	429e      	cmp	r6, r3
   d60a8:	d025      	beq.n	d60f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d60aa:	2c04      	cmp	r4, #4
   d60ac:	d007      	beq.n	d60be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60ae:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d60b2:	f844 3c04 	str.w	r3, [r4, #-4]
   d60b6:	4629      	mov	r1, r5
   d60b8:	4620      	mov	r0, r4
   d60ba:	f7ff ff36 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60be:	4628      	mov	r0, r5
   d60c0:	f7fe f8f8 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60c4:	3d08      	subs	r5, #8
   d60c6:	3c08      	subs	r4, #8
   d60c8:	e7ec      	b.n	d60a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d60ca:	d014      	beq.n	d60f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d60cc:	1d0c      	adds	r4, r1, #4
   d60ce:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d60d0:	1f23      	subs	r3, r4, #4
   d60d2:	429d      	cmp	r5, r3
   d60d4:	d00f      	beq.n	d60f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d60d6:	2e04      	cmp	r6, #4
   d60d8:	d007      	beq.n	d60ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d60de:	f846 3c04 	str.w	r3, [r6, #-4]
   d60e2:	4621      	mov	r1, r4
   d60e4:	4630      	mov	r0, r6
   d60e6:	f7ff ff20 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60ea:	4620      	mov	r0, r4
   d60ec:	f7fe f8e2 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60f0:	3408      	adds	r4, #8
   d60f2:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d60f4:	e7ec      	b.n	d60d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d60f6:	bd70      	pop	{r4, r5, r6, pc}

000d60f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d60f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d60fc:	6804      	ldr	r4, [r0, #0]
   d60fe:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6100:	4605      	mov	r5, r0
   d6102:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6104:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6108:	42a7      	cmp	r7, r4
   d610a:	d018      	beq.n	d613e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d610c:	4641      	mov	r1, r8
   d610e:	4620      	mov	r0, r4
   d6110:	f7ff fe32 	bl	d5d78 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6114:	4606      	mov	r6, r0
   d6116:	b908      	cbnz	r0, d611c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6118:	3408      	adds	r4, #8
   d611a:	e7f5      	b.n	d6108 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d611c:	b18c      	cbz	r4, d6142 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d611e:	1d20      	adds	r0, r4, #4
   d6120:	f7fe f8c8 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6124:	682b      	ldr	r3, [r5, #0]
   d6126:	686a      	ldr	r2, [r5, #4]
   d6128:	f104 0108 	add.w	r1, r4, #8
   d612c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6130:	4620      	mov	r0, r4
   d6132:	f7ff ffab 	bl	d608c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6136:	686b      	ldr	r3, [r5, #4]
   d6138:	3b01      	subs	r3, #1
   d613a:	606b      	str	r3, [r5, #4]
    return true;
   d613c:	e002      	b.n	d6144 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d613e:	2600      	movs	r6, #0
   d6140:	e000      	b.n	d6144 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6142:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6144:	4630      	mov	r0, r6
   d6146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d614a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d614a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d614c:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d614e:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6152:	6847      	ldr	r7, [r0, #4]
   d6154:	9300      	str	r3, [sp, #0]
   d6156:	a801      	add	r0, sp, #4
   d6158:	f7ff fee7 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d615c:	6866      	ldr	r6, [r4, #4]
   d615e:	68a3      	ldr	r3, [r4, #8]
   d6160:	429e      	cmp	r6, r3
   d6162:	db14      	blt.n	d618e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d6164:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6166:	2e00      	cmp	r6, #0
   d6168:	dd0b      	ble.n	d6182 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d616a:	00f0      	lsls	r0, r6, #3
   d616c:	f7ff fad8 	bl	d5720 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6170:	4605      	mov	r5, r0
   d6172:	b318      	cbz	r0, d61bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6174:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6178:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d617c:	f7ff ff86 	bl	d608c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6180:	e000      	b.n	d6184 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6182:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6184:	6820      	ldr	r0, [r4, #0]
   d6186:	f7ff fad3 	bl	d5730 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d618a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d618c:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d618e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6190:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6192:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6196:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d619a:	4629      	mov	r1, r5
   d619c:	f105 0008 	add.w	r0, r5, #8
   d61a0:	f7ff ff74 	bl	d608c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d61a4:	b135      	cbz	r5, d61b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d61a6:	9b00      	ldr	r3, [sp, #0]
   d61a8:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d61ac:	a901      	add	r1, sp, #4
   d61ae:	1d28      	adds	r0, r5, #4
   d61b0:	f7ff febb 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d61b4:	6863      	ldr	r3, [r4, #4]
   d61b6:	3301      	adds	r3, #1
   d61b8:	6063      	str	r3, [r4, #4]
   d61ba:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d61bc:	a801      	add	r0, sp, #4
   d61be:	f7fe f879 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d61c2:	4628      	mov	r0, r5
   d61c4:	b003      	add	sp, #12
   d61c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d61c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61cc:	4604      	mov	r4, r0
   d61ce:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d61d0:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d61d2:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d61d4:	f7ff fb78 	bl	d58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d61d8:	6823      	ldr	r3, [r4, #0]
   d61da:	2b03      	cmp	r3, #3
   d61dc:	d002      	beq.n	d61e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d61de:	2b04      	cmp	r3, #4
   d61e0:	d042      	beq.n	d6268 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d61e2:	e087      	b.n	d62f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d61e4:	a804      	add	r0, sp, #16
   d61e6:	f7ff ff19 	bl	d601c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d61ea:	9b04      	ldr	r3, [sp, #16]
   d61ec:	8922      	ldrh	r2, [r4, #8]
   d61ee:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d61f0:	6862      	ldr	r2, [r4, #4]
   d61f2:	9904      	ldr	r1, [sp, #16]
   d61f4:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d61f8:	f8c1 3002 	str.w	r3, [r1, #2]
   d61fc:	6853      	ldr	r3, [r2, #4]
   d61fe:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6202:	a807      	add	r0, sp, #28
   d6204:	9b04      	ldr	r3, [sp, #16]
   d6206:	9306      	str	r3, [sp, #24]
   d6208:	a905      	add	r1, sp, #20
   d620a:	f7ff fe8e 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d620e:	a906      	add	r1, sp, #24
   d6210:	f105 0018 	add.w	r0, r5, #24
   d6214:	f7ff ff99 	bl	d614a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6218:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d621a:	a807      	add	r0, sp, #28
   d621c:	f7fe f84a 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6220:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6222:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6224:	b974      	cbnz	r4, d6244 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6226:	4b36      	ldr	r3, [pc, #216]	; (d6300 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6228:	9300      	str	r3, [sp, #0]
   d622a:	aa06      	add	r2, sp, #24
   d622c:	4623      	mov	r3, r4
   d622e:	4935      	ldr	r1, [pc, #212]	; (d6304 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6230:	9407      	str	r4, [sp, #28]
   d6232:	2032      	movs	r0, #50	; 0x32
   d6234:	f7ff f994 	bl	d5560 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6238:	9b04      	ldr	r3, [sp, #16]
   d623a:	4621      	mov	r1, r4
   d623c:	8818      	ldrh	r0, [r3, #0]
   d623e:	f7fe ffbd 	bl	d51bc <hal_ble_gap_disconnect>
   d6242:	e00d      	b.n	d6260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6244:	4a30      	ldr	r2, [pc, #192]	; (d6308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6246:	9200      	str	r2, [sp, #0]
   d6248:	2300      	movs	r3, #0
   d624a:	aa06      	add	r2, sp, #24
   d624c:	492d      	ldr	r1, [pc, #180]	; (d6304 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d624e:	9307      	str	r3, [sp, #28]
   d6250:	2001      	movs	r0, #1
   d6252:	f7ff f985 	bl	d5560 <log_message>
                if (impl->connectedCb_) {
   d6256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6258:	b113      	cbz	r3, d6260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d625a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d625c:	a804      	add	r0, sp, #16
   d625e:	4798      	blx	r3
   d6260:	a805      	add	r0, sp, #20
   d6262:	f7fe f827 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6266:	e045      	b.n	d62f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6268:	8921      	ldrh	r1, [r4, #8]
   d626a:	4628      	mov	r0, r5
   d626c:	f7ff fd08 	bl	d5c80 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6270:	4607      	mov	r7, r0
   d6272:	2800      	cmp	r0, #0
   d6274:	d03e      	beq.n	d62f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6276:	6804      	ldr	r4, [r0, #0]
   d6278:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d627a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d627c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6280:	8022      	strh	r2, [r4, #0]
   d6282:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6286:	4299      	cmp	r1, r3
   d6288:	d003      	beq.n	d6292 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d628a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d628e:	8042      	strh	r2, [r0, #2]
   d6290:	e7f9      	b.n	d6286 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6292:	68e6      	ldr	r6, [r4, #12]
   d6294:	6923      	ldr	r3, [r4, #16]
   d6296:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d629a:	45b0      	cmp	r8, r6
   d629c:	d004      	beq.n	d62a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d629e:	1d30      	adds	r0, r6, #4
   d62a0:	f7fe f808 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62a4:	3608      	adds	r6, #8
   d62a6:	e7f8      	b.n	d629a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d62a8:	2300      	movs	r3, #0
   d62aa:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d62ac:	69a6      	ldr	r6, [r4, #24]
   d62ae:	69e3      	ldr	r3, [r4, #28]
   d62b0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d62b4:	45b0      	cmp	r8, r6
   d62b6:	d004      	beq.n	d62c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d62b8:	1d30      	adds	r0, r6, #4
   d62ba:	f7fd fffb 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62be:	3608      	adds	r6, #8
   d62c0:	e7f8      	b.n	d62b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d62c2:	2300      	movs	r3, #0
   d62c4:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d62c6:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d62c8:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d62ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d62cc:	b113      	cbz	r3, d62d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d62ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d62d0:	4638      	mov	r0, r7
   d62d2:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d62d4:	2320      	movs	r3, #32
   d62d6:	4a0d      	ldr	r2, [pc, #52]	; (d630c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d62d8:	9306      	str	r3, [sp, #24]
   d62da:	9200      	str	r2, [sp, #0]
   d62dc:	2300      	movs	r3, #0
   d62de:	4909      	ldr	r1, [pc, #36]	; (d6304 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d62e0:	9307      	str	r3, [sp, #28]
   d62e2:	2001      	movs	r0, #1
   d62e4:	aa06      	add	r2, sp, #24
   d62e6:	f7ff f93b 	bl	d5560 <log_message>
                    impl->peers_.removeOne(*peer);
   d62ea:	4639      	mov	r1, r7
   d62ec:	f105 0018 	add.w	r0, r5, #24
   d62f0:	f7ff ff02 	bl	d60f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d62f4:	a803      	add	r0, sp, #12
   d62f6:	f7ff faf5 	bl	d58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d62fa:	b00e      	add	sp, #56	; 0x38
   d62fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6300:	000d9192 	.word	0x000d9192
   d6304:	000d9130 	.word	0x000d9130
   d6308:	000d91b8 	.word	0x000d91b8
   d630c:	000d91d5 	.word	0x000d91d5

000d6310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6310:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6314:	4606      	mov	r6, r0
   d6316:	460c      	mov	r4, r1
   d6318:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d631a:	d914      	bls.n	d6346 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d631c:	4290      	cmp	r0, r2
   d631e:	d213      	bcs.n	d6348 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6320:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6324:	1a6c      	subs	r4, r5, r1
   d6326:	f1a1 0708 	sub.w	r7, r1, #8
   d632a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d632c:	42af      	cmp	r7, r5
   d632e:	d018      	beq.n	d6362 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6330:	b11c      	cbz	r4, d633a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6332:	4629      	mov	r1, r5
   d6334:	4620      	mov	r0, r4
   d6336:	f7ff fe0d 	bl	d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d633a:	1d28      	adds	r0, r5, #4
   d633c:	f7fd ffba 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6340:	3d08      	subs	r5, #8
   d6342:	3c08      	subs	r4, #8
   d6344:	e7f2      	b.n	d632c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6346:	d00c      	beq.n	d6362 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6348:	42ac      	cmp	r4, r5
   d634a:	d00a      	beq.n	d6362 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d634c:	b11e      	cbz	r6, d6356 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d634e:	4621      	mov	r1, r4
   d6350:	4630      	mov	r0, r6
   d6352:	f7ff fdff 	bl	d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6356:	1d20      	adds	r0, r4, #4
   d6358:	f7fd ffac 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d635c:	3408      	adds	r4, #8
   d635e:	3608      	adds	r6, #8
   d6360:	e7f2      	b.n	d6348 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6364 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6364:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6366:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6368:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d636a:	dd0b      	ble.n	d6384 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d636c:	00f0      	lsls	r0, r6, #3
   d636e:	f7ff f9d7 	bl	d5720 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6372:	4604      	mov	r4, r0
   d6374:	b170      	cbz	r0, d6394 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6376:	e895 0006 	ldmia.w	r5, {r1, r2}
   d637a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d637e:	f7ff ffc7 	bl	d6310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6382:	e000      	b.n	d6386 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6384:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6386:	6828      	ldr	r0, [r5, #0]
   d6388:	f7ff f9d2 	bl	d5730 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d638c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d638e:	60ae      	str	r6, [r5, #8]
        return true;
   d6390:	2001      	movs	r0, #1
   d6392:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6394:	bd70      	pop	{r4, r5, r6, pc}

000d6396 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6396:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6398:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d639a:	6845      	ldr	r5, [r0, #4]
   d639c:	4668      	mov	r0, sp
   d639e:	f7ff fdd9 	bl	d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d63a2:	6861      	ldr	r1, [r4, #4]
   d63a4:	68a3      	ldr	r3, [r4, #8]
   d63a6:	4299      	cmp	r1, r3
   d63a8:	db05      	blt.n	d63b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d63aa:	3101      	adds	r1, #1
   d63ac:	4620      	mov	r0, r4
   d63ae:	f7ff ffd9 	bl	d6364 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d63b2:	4606      	mov	r6, r0
   d63b4:	b198      	cbz	r0, d63de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d63b6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d63b8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d63ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d63be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d63c2:	4629      	mov	r1, r5
   d63c4:	f105 0008 	add.w	r0, r5, #8
   d63c8:	f7ff ffa2 	bl	d6310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d63cc:	b11d      	cbz	r5, d63d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d63ce:	4669      	mov	r1, sp
   d63d0:	4628      	mov	r0, r5
   d63d2:	f7ff fdbf 	bl	d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d63d6:	6863      	ldr	r3, [r4, #4]
   d63d8:	3301      	adds	r3, #1
   d63da:	6063      	str	r3, [r4, #4]
   d63dc:	2601      	movs	r6, #1
   d63de:	a801      	add	r0, sp, #4
   d63e0:	f7fd ff68 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d63e4:	4630      	mov	r0, r6
   d63e6:	b002      	add	sp, #8
   d63e8:	bd70      	pop	{r4, r5, r6, pc}

000d63ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d63ea:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d63ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63ee:	4606      	mov	r6, r0
   d63f0:	460c      	mov	r4, r1
   d63f2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d63f4:	d914      	bls.n	d6420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d63f6:	4290      	cmp	r0, r2
   d63f8:	d213      	bcs.n	d6422 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d63fa:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d63fe:	1a6c      	subs	r4, r5, r1
   d6400:	f1a1 0708 	sub.w	r7, r1, #8
   d6404:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6406:	42af      	cmp	r7, r5
   d6408:	d018      	beq.n	d643c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d640a:	b11c      	cbz	r4, d6414 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d640c:	4629      	mov	r1, r5
   d640e:	4620      	mov	r0, r4
   d6410:	f7ff fd92 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6414:	1d28      	adds	r0, r5, #4
   d6416:	f7fd ff4d 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d641a:	3d08      	subs	r5, #8
   d641c:	3c08      	subs	r4, #8
   d641e:	e7f2      	b.n	d6406 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6420:	d00c      	beq.n	d643c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6422:	42ac      	cmp	r4, r5
   d6424:	d00a      	beq.n	d643c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6426:	b11e      	cbz	r6, d6430 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6428:	4621      	mov	r1, r4
   d642a:	4630      	mov	r0, r6
   d642c:	f7ff fd84 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6430:	1d20      	adds	r0, r4, #4
   d6432:	f7fd ff3f 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6436:	3408      	adds	r4, #8
   d6438:	3608      	adds	r6, #8
   d643a:	e7f2      	b.n	d6422 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d643c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d643e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d643e:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6440:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6442:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6444:	dd0b      	ble.n	d645e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6446:	00f0      	lsls	r0, r6, #3
   d6448:	f7ff f96a 	bl	d5720 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d644c:	4604      	mov	r4, r0
   d644e:	b170      	cbz	r0, d646e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6450:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6454:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6458:	f7ff ffc7 	bl	d63ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d645c:	e000      	b.n	d6460 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d645e:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6460:	6828      	ldr	r0, [r5, #0]
   d6462:	f7ff f965 	bl	d5730 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6466:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6468:	60ae      	str	r6, [r5, #8]
        return true;
   d646a:	2001      	movs	r0, #1
   d646c:	bd70      	pop	{r4, r5, r6, pc}
    }
   d646e:	bd70      	pop	{r4, r5, r6, pc}

000d6470 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6470:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6472:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6474:	6845      	ldr	r5, [r0, #4]
   d6476:	4668      	mov	r0, sp
   d6478:	f7ff fd5e 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d647c:	6861      	ldr	r1, [r4, #4]
   d647e:	68a3      	ldr	r3, [r4, #8]
   d6480:	4299      	cmp	r1, r3
   d6482:	db05      	blt.n	d6490 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6484:	3101      	adds	r1, #1
   d6486:	4620      	mov	r0, r4
   d6488:	f7ff ffd9 	bl	d643e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d648c:	4606      	mov	r6, r0
   d648e:	b198      	cbz	r0, d64b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6490:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6492:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6494:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6498:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d649c:	4629      	mov	r1, r5
   d649e:	f105 0008 	add.w	r0, r5, #8
   d64a2:	f7ff ffa2 	bl	d63ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d64a6:	b11d      	cbz	r5, d64b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d64a8:	4669      	mov	r1, sp
   d64aa:	4628      	mov	r0, r5
   d64ac:	f7ff fd44 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d64b0:	6863      	ldr	r3, [r4, #4]
   d64b2:	3301      	adds	r3, #1
   d64b4:	6063      	str	r3, [r4, #4]
   d64b6:	2601      	movs	r6, #1
   d64b8:	a801      	add	r0, sp, #4
   d64ba:	f7fd fefb 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d64be:	4630      	mov	r0, r6
   d64c0:	b002      	add	sp, #8
   d64c2:	bd70      	pop	{r4, r5, r6, pc}

000d64c4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d64c4:	b510      	push	{r4, lr}
   d64c6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d64c8:	6840      	ldr	r0, [r0, #4]
   d64ca:	b108      	cbz	r0, d64d0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d64cc:	f7fd fde7 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd10      	pop	{r4, pc}

000d64d4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d64d4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d64d6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d64d8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d64da:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d64de:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d64e2:	f001 f88f 	bl	d7604 <_ZN6StringD1Ev>
   d64e6:	4668      	mov	r0, sp
   d64e8:	f7ff ffec 	bl	d64c4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d64ec:	b003      	add	sp, #12
   d64ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d64f4:	b538      	push	{r3, r4, r5, lr}
   d64f6:	2300      	movs	r3, #0
   d64f8:	4604      	mov	r4, r0
   d64fa:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64fc:	2014      	movs	r0, #20
   d64fe:	460d      	mov	r5, r1
   d6500:	f7fd fdcb 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6504:	b128      	cbz	r0, d6512 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6506:	2301      	movs	r3, #1
   d6508:	6043      	str	r3, [r0, #4]
   d650a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d650c:	4b02      	ldr	r3, [pc, #8]	; (d6518 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d650e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6510:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6512:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6514:	4620      	mov	r0, r4
   d6516:	bd38      	pop	{r3, r4, r5, pc}
   d6518:	000d90d4 	.word	0x000d90d4

000d651c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6520:	b088      	sub	sp, #32
   d6522:	4605      	mov	r5, r0
   d6524:	461e      	mov	r6, r3
   d6526:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6528:	2300      	movs	r3, #0
   d652a:	460f      	mov	r7, r1
   d652c:	4690      	mov	r8, r2
   d652e:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6530:	9305      	str	r3, [sp, #20]
   d6532:	f7fd fdb2 	bl	d409a <_Znwj>
   d6536:	f8cd d018 	str.w	sp, [sp, #24]
   d653a:	4604      	mov	r4, r0
   d653c:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d653e:	b1c0      	cbz	r0, d6572 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d6540:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d6544:	f7ff fb7c 	bl	d5c40 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d6548:	4639      	mov	r1, r7
   d654a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d654e:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d6552:	f001 f8cb 	bl	d76ec <_ZN6StringaSEPKc>
        callback_ = callback;
   d6556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6558:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d655a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d655e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6560:	f104 0014 	add.w	r0, r4, #20
   d6564:	f7ff fa3e 	bl	d59e4 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d6568:	990e      	ldr	r1, [sp, #56]	; 0x38
   d656a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d656e:	f7ff fa39 	bl	d59e4 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6572:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6574:	2600      	movs	r6, #0
   d6576:	ab01      	add	r3, sp, #4
   d6578:	aa02      	add	r2, sp, #8
   d657a:	a803      	add	r0, sp, #12
   d657c:	9607      	str	r6, [sp, #28]
   d657e:	f7ff ffb9 	bl	d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6582:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6584:	9a05      	ldr	r2, [sp, #20]
   d6586:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6588:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d658a:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d658c:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d658e:	f7fd fe91 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6592:	a806      	add	r0, sp, #24
   d6594:	f7ff ff96 	bl	d64c4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6598:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d659a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d659c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d659e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d65a0:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d65a2:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d65a4:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d65a6:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d65a8:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d65ac:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d65ae:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65b0:	f7fd fe80 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d65b4:	a805      	add	r0, sp, #20
   d65b6:	f7fd fe7d 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d65ba:	6829      	ldr	r1, [r5, #0]
   d65bc:	b919      	cbnz	r1, d65c6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d65be:	4a03      	ldr	r2, [pc, #12]	; (d65cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d65c0:	200a      	movs	r0, #10
   d65c2:	f7fe ffc5 	bl	d5550 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d65c6:	b008      	add	sp, #32
   d65c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65cc:	000d52e1 	.word	0x000d52e1

000d65d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d65d0:	b510      	push	{r4, lr}
   d65d2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d65d4:	6840      	ldr	r0, [r0, #4]
   d65d6:	b108      	cbz	r0, d65dc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d65d8:	f7fd fd61 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}

000d65e0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d65e0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65e2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d65e4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d65e6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d65ea:	4668      	mov	r0, sp
   d65ec:	f7ff fff0 	bl	d65d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65f0:	b003      	add	sp, #12
   d65f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d65f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d65f8:	b538      	push	{r3, r4, r5, lr}
   d65fa:	2300      	movs	r3, #0
   d65fc:	4604      	mov	r4, r0
   d65fe:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6600:	2014      	movs	r0, #20
   d6602:	460d      	mov	r5, r1
   d6604:	f7fd fd49 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6608:	b128      	cbz	r0, d6616 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d660a:	2301      	movs	r3, #1
   d660c:	6043      	str	r3, [r0, #4]
   d660e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6610:	4b02      	ldr	r3, [pc, #8]	; (d661c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6612:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6614:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6616:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6618:	4620      	mov	r0, r4
   d661a:	bd38      	pop	{r3, r4, r5, pc}
   d661c:	000d90f0 	.word	0x000d90f0

000d6620 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6620:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6622:	2600      	movs	r6, #0
   d6624:	b087      	sub	sp, #28
   d6626:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6628:	6046      	str	r6, [r0, #4]
   d662a:	4604      	mov	r4, r0
   d662c:	2018      	movs	r0, #24
   d662e:	460f      	mov	r7, r1
   d6630:	f7fd fd33 	bl	d409a <_Znwj>
   d6634:	f8cd d010 	str.w	sp, [sp, #16]
   d6638:	4605      	mov	r5, r0
   d663a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d663c:	b138      	cbz	r0, d664e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d663e:	f7ff f96b 	bl	d5918 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6642:	4639      	mov	r1, r7
   d6644:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6646:	82ae      	strh	r6, [r5, #20]
   d6648:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d664a:	f7ff f9cb 	bl	d59e4 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d664e:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6650:	4629      	mov	r1, r5
   d6652:	9305      	str	r3, [sp, #20]
   d6654:	aa02      	add	r2, sp, #8
   d6656:	ab01      	add	r3, sp, #4
   d6658:	a803      	add	r0, sp, #12
   d665a:	f7ff ffcd 	bl	d65f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d665e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6660:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6662:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6664:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6666:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6668:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d666a:	f7fd fe23 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d666e:	a804      	add	r0, sp, #16
   d6670:	f7ff ffae 	bl	d65d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d6674:	6823      	ldr	r3, [r4, #0]
   d6676:	b90b      	cbnz	r3, d667c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d6678:	f7ff f906 	bl	d5888 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d667c:	4620      	mov	r0, r4
   d667e:	b007      	add	sp, #28
   d6680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6688:	4617      	mov	r7, r2
   d668a:	b09f      	sub	sp, #124	; 0x7c
   d668c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d668e:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6690:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6692:	f7ff f919 	bl	d58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
   d6696:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6698:	7923      	ldrb	r3, [r4, #4]
   d669a:	2b00      	cmp	r3, #0
   d669c:	f000 80f3 	beq.w	d6886 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d66a0:	6833      	ldr	r3, [r6, #0]
   d66a2:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d66a4:	691b      	ldr	r3, [r3, #16]
   d66a6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d66aa:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d66ac:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d66b0:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d66b4:	9b03      	ldr	r3, [sp, #12]
   d66b6:	42ab      	cmp	r3, r5
   d66b8:	d023      	beq.n	d6702 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d66ba:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d66be:	4650      	mov	r0, sl
   d66c0:	f109 0114 	add.w	r1, r9, #20
   d66c4:	f7ff f9a7 	bl	d5a16 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d66c8:	2800      	cmp	r0, #0
   d66ca:	f000 80e1 	beq.w	d6890 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d66ce:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d66d2:	4658      	mov	r0, fp
   d66d4:	f7ff f99f 	bl	d5a16 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d66d8:	2800      	cmp	r0, #0
   d66da:	f000 80d9 	beq.w	d6890 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d66de:	6823      	ldr	r3, [r4, #0]
   d66e0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d66e4:	f8d9 3000 	ldr.w	r3, [r9]
   d66e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d66ec:	4299      	cmp	r1, r3
   d66ee:	f040 80cf 	bne.w	d6890 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d66f2:	2320      	movs	r3, #32
   d66f4:	4a6b      	ldr	r2, [pc, #428]	; (d68a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d66f6:	9313      	str	r3, [sp, #76]	; 0x4c
   d66f8:	2300      	movs	r3, #0
   d66fa:	9200      	str	r2, [sp, #0]
   d66fc:	9314      	str	r3, [sp, #80]	; 0x50
   d66fe:	aa13      	add	r2, sp, #76	; 0x4c
   d6700:	e0bd      	b.n	d687e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d6702:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d6706:	4628      	mov	r0, r5
   d6708:	f7ff f953 	bl	d59b2 <_ZNK8particle7BleUuid7isValidEv>
   d670c:	b918      	cbnz	r0, d6716 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d670e:	4966      	ldr	r1, [pc, #408]	; (d68a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6710:	4628      	mov	r0, r5
   d6712:	f7ff f972 	bl	d59fa <_ZN8particle7BleUuidaSEPKh>
   d6716:	6833      	ldr	r3, [r6, #0]
   d6718:	f8d3 9000 	ldr.w	r9, [r3]
   d671c:	685b      	ldr	r3, [r3, #4]
   d671e:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6722:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6724:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6726:	d008      	beq.n	d673a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6728:	f8d9 0000 	ldr.w	r0, [r9]
   d672c:	f7ff f973 	bl	d5a16 <_ZNK8particle7BleUuideqERKS0_>
   d6730:	2800      	cmp	r0, #0
   d6732:	d137      	bne.n	d67a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6734:	f109 0908 	add.w	r9, r9, #8
   d6738:	e7f3      	b.n	d6722 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d673a:	a806      	add	r0, sp, #24
   d673c:	f7ff ff70 	bl	d6620 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6740:	aa13      	add	r2, sp, #76	; 0x4c
   d6742:	462b      	mov	r3, r5
   d6744:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d6748:	4696      	mov	lr, r2
   d674a:	6818      	ldr	r0, [r3, #0]
   d674c:	6859      	ldr	r1, [r3, #4]
   d674e:	4615      	mov	r5, r2
   d6750:	c503      	stmia	r5!, {r0, r1}
   d6752:	3308      	adds	r3, #8
   d6754:	4563      	cmp	r3, ip
   d6756:	462a      	mov	r2, r5
   d6758:	d1f7      	bne.n	d674a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d675a:	6818      	ldr	r0, [r3, #0]
   d675c:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d675e:	9a06      	ldr	r2, [sp, #24]
   d6760:	2300      	movs	r3, #0
   d6762:	3214      	adds	r2, #20
   d6764:	4671      	mov	r1, lr
   d6766:	2001      	movs	r0, #1
   d6768:	f7fe fd32 	bl	d51d0 <hal_ble_gatt_server_add_service>
   d676c:	2800      	cmp	r0, #0
   d676e:	d17e      	bne.n	d686e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d6770:	6835      	ldr	r5, [r6, #0]
   d6772:	a906      	add	r1, sp, #24
   d6774:	a80b      	add	r0, sp, #44	; 0x2c
   d6776:	f7ff fbed 	bl	d5f54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d677a:	4628      	mov	r0, r5
   d677c:	a90b      	add	r1, sp, #44	; 0x2c
   d677e:	f7ff fe0a 	bl	d6396 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6782:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6784:	a80c      	add	r0, sp, #48	; 0x30
   d6786:	f7fd fd95 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d678a:	2d00      	cmp	r5, #0
   d678c:	d06f      	beq.n	d686e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d678e:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d6790:	6853      	ldr	r3, [r2, #4]
   d6792:	6812      	ldr	r2, [r2, #0]
   d6794:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6798:	3b01      	subs	r3, #1
   d679a:	a807      	add	r0, sp, #28
   d679c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d67a0:	f7fd fd88 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d67a4:	f104 0514 	add.w	r5, r4, #20
   d67a8:	4628      	mov	r0, r5
   d67aa:	f7ff f902 	bl	d59b2 <_ZNK8particle7BleUuid7isValidEv>
   d67ae:	b968      	cbnz	r0, d67cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d67b0:	4b3e      	ldr	r3, [pc, #248]	; (d68ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d67b2:	493d      	ldr	r1, [pc, #244]	; (d68a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d67b4:	881a      	ldrh	r2, [r3, #0]
   d67b6:	3201      	adds	r2, #1
   d67b8:	b292      	uxth	r2, r2
   d67ba:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d67bc:	a813      	add	r0, sp, #76	; 0x4c
   d67be:	2301      	movs	r3, #1
   d67c0:	f7ff f8e3 	bl	d598a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d67c4:	a913      	add	r1, sp, #76	; 0x4c
   d67c6:	4628      	mov	r0, r5
   d67c8:	f7ff f90c 	bl	d59e4 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d67cc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d67d0:	4652      	mov	r2, sl
   d67d2:	2100      	movs	r1, #0
   d67d4:	a813      	add	r0, sp, #76	; 0x4c
   d67d6:	f002 fb40 	bl	d8e5a <memset>
    charInit.version = BLE_API_VERSION;
   d67da:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d67dc:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d67de:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d67e2:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d67e6:	462b      	mov	r3, r5
   d67e8:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d67ec:	4615      	mov	r5, r2
   d67ee:	6818      	ldr	r0, [r3, #0]
   d67f0:	6859      	ldr	r1, [r3, #4]
   d67f2:	4696      	mov	lr, r2
   d67f4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d67f8:	3308      	adds	r3, #8
   d67fa:	4563      	cmp	r3, ip
   d67fc:	4672      	mov	r2, lr
   d67fe:	d1f6      	bne.n	d67ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d6800:	6818      	ldr	r0, [r3, #0]
   d6802:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d6806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6808:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d680c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6810:	682b      	ldr	r3, [r5, #0]
   d6812:	f8ce 3000 	str.w	r3, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d6816:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d6818:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d681c:	f8d9 3000 	ldr.w	r3, [r9]
   d6820:	8a9b      	ldrh	r3, [r3, #20]
   d6822:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d6826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6828:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d682a:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d682c:	4b20      	ldr	r3, [pc, #128]	; (d68b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d682e:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6830:	1da1      	adds	r1, r4, #6
   d6832:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d6834:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6836:	f7fe fcf3 	bl	d5220 <hal_ble_gatt_server_add_characteristic>
   d683a:	bb20      	cbnz	r0, d6886 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d683c:	2301      	movs	r3, #1
   d683e:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6840:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6842:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6844:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6846:	a80b      	add	r0, sp, #44	; 0x2c
   d6848:	f7ff fb76 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d684c:	4620      	mov	r0, r4
   d684e:	a90b      	add	r1, sp, #44	; 0x2c
   d6850:	f7ff fe0e 	bl	d6470 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6854:	4604      	mov	r4, r0
   d6856:	a80c      	add	r0, sp, #48	; 0x30
   d6858:	f7fd fd2c 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d685c:	b99c      	cbnz	r4, d6886 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d685e:	2320      	movs	r3, #32
   d6860:	930b      	str	r3, [sp, #44]	; 0x2c
   d6862:	4b14      	ldr	r3, [pc, #80]	; (d68b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d6864:	9300      	str	r3, [sp, #0]
   d6866:	940c      	str	r4, [sp, #48]	; 0x30
   d6868:	4623      	mov	r3, r4
   d686a:	aa0b      	add	r2, sp, #44	; 0x2c
   d686c:	e007      	b.n	d687e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d686e:	4639      	mov	r1, r7
   d6870:	4640      	mov	r0, r8
   d6872:	f7ff fb61 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6876:	a807      	add	r0, sp, #28
   d6878:	f7fd fd1c 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d687c:	e00a      	b.n	d6894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d687e:	490e      	ldr	r1, [pc, #56]	; (d68b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d6880:	2032      	movs	r0, #50	; 0x32
   d6882:	f7fe fe6d 	bl	d5560 <log_message>
            return characteristic;
   d6886:	4639      	mov	r1, r7
   d6888:	4640      	mov	r0, r8
   d688a:	f7ff fb55 	bl	d5f38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d688e:	e001      	b.n	d6894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d6890:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6892:	e70f      	b.n	d66b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d6894:	a805      	add	r0, sp, #20
   d6896:	f7ff f825 	bl	d58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d689a:	4640      	mov	r0, r8
   d689c:	b01f      	add	sp, #124	; 0x7c
   d689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68a2:	bf00      	nop
   d68a4:	000d92a5 	.word	0x000d92a5
   d68a8:	000d9120 	.word	0x000d9120
   d68ac:	2003e4c4 	.word	0x2003e4c4
   d68b0:	000d5e45 	.word	0x000d5e45
   d68b4:	000d927e 	.word	0x000d927e
   d68b8:	000d9130 	.word	0x000d9130

000d68bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68bc:	4802      	ldr	r0, [pc, #8]	; (d68c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d68be:	2300      	movs	r3, #0
   d68c0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d68c2:	f7fe bced 	b.w	d52a0 <os_mutex_recursive_create>
   d68c6:	bf00      	nop
   d68c8:	2003e4c8 	.word	0x2003e4c8

000d68cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68cc:	4770      	bx	lr

000d68ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d68ce:	2000      	movs	r0, #0
   d68d0:	4770      	bx	lr

000d68d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68d2:	b510      	push	{r4, lr}
   d68d4:	2110      	movs	r1, #16
   d68d6:	4604      	mov	r4, r0
   d68d8:	f001 fab5 	bl	d7e46 <_ZdlPvj>
   d68dc:	4620      	mov	r0, r4
   d68de:	bd10      	pop	{r4, pc}

000d68e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d68e0:	b508      	push	{r3, lr}
      { delete this; }
   d68e2:	b108      	cbz	r0, d68e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d68e4:	f7ff fff5 	bl	d68d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d68e8:	bd08      	pop	{r3, pc}

000d68ea <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d68ea:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d68ec:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d68ee:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d68f0:	b113      	cbz	r3, d68f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68f2:	2203      	movs	r2, #3
   d68f4:	4601      	mov	r1, r0
   d68f6:	4798      	blx	r3
    }
   d68f8:	4620      	mov	r0, r4
   d68fa:	bd10      	pop	{r4, pc}

000d68fc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d68fc:	2200      	movs	r2, #0
   d68fe:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6900:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6902:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6906:	8082      	strh	r2, [r0, #4]
   d6908:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d690c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d690e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6910:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6912:	680c      	ldr	r4, [r1, #0]
   d6914:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6916:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6918:	bd10      	pop	{r4, pc}

000d691a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d691a:	b510      	push	{r4, lr}
   d691c:	4604      	mov	r4, r0
    free((void*)msg_);
   d691e:	6800      	ldr	r0, [r0, #0]
   d6920:	f7fe ff06 	bl	d5730 <free>
}
   d6924:	4620      	mov	r0, r4
   d6926:	bd10      	pop	{r4, pc}

000d6928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6928:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d692a:	68c4      	ldr	r4, [r0, #12]
   d692c:	b1f4      	cbz	r4, d696c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d692e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6930:	2b02      	cmp	r3, #2
   d6932:	d103      	bne.n	d693c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6934:	f104 000c 	add.w	r0, r4, #12
   d6938:	f7ff ffef 	bl	d691a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d693c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d693e:	b135      	cbz	r5, d694e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6940:	4628      	mov	r0, r5
   d6942:	f7ff ffd2 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
   d6946:	2110      	movs	r1, #16
   d6948:	4628      	mov	r0, r5
   d694a:	f001 fa7c 	bl	d7e46 <_ZdlPvj>
   d694e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6950:	b135      	cbz	r5, d6960 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6952:	4628      	mov	r0, r5
   d6954:	f7ff ffc9 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
   d6958:	2110      	movs	r1, #16
   d695a:	4628      	mov	r0, r5
   d695c:	f001 fa73 	bl	d7e46 <_ZdlPvj>
   d6960:	4620      	mov	r0, r4
   d6962:	2114      	movs	r1, #20
   d6964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6968:	f001 ba6d 	b.w	d7e46 <_ZdlPvj>
   d696c:	bd38      	pop	{r3, r4, r5, pc}

000d696e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d696e:	b510      	push	{r4, lr}
   d6970:	b088      	sub	sp, #32
   d6972:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6974:	4668      	mov	r0, sp
   d6976:	f000 fe8c 	bl	d7692 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d697a:	4669      	mov	r1, sp
   d697c:	a804      	add	r0, sp, #16
   d697e:	f000 feaa 	bl	d76d6 <_ZN6StringC1ERKS_>
   d6982:	a804      	add	r0, sp, #16
   d6984:	47a0      	blx	r4
   d6986:	4604      	mov	r4, r0
   d6988:	a804      	add	r0, sp, #16
   d698a:	f000 fe3b 	bl	d7604 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d698e:	4668      	mov	r0, sp
   d6990:	f000 fe38 	bl	d7604 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d6994:	4620      	mov	r0, r4
   d6996:	b008      	add	sp, #32
   d6998:	bd10      	pop	{r4, pc}

000d699a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d699a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d699c:	2410      	movs	r4, #16
   d699e:	b085      	sub	sp, #20
   d69a0:	4607      	mov	r7, r0
   d69a2:	460e      	mov	r6, r1
   d69a4:	4615      	mov	r5, r2
   d69a6:	2100      	movs	r1, #0
   d69a8:	4622      	mov	r2, r4
   d69aa:	4668      	mov	r0, sp
   d69ac:	f002 fa55 	bl	d8e5a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d69b0:	2200      	movs	r2, #0
   d69b2:	4669      	mov	r1, sp
   d69b4:	4610      	mov	r0, r2
         size = sizeof(*this);
   d69b6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d69ba:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d69bc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d69be:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d69c0:	f7fe fe36 	bl	d5630 <spark_function>
}
   d69c4:	b005      	add	sp, #20
   d69c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69c8 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d69c8:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d69ca:	2100      	movs	r1, #0
   d69cc:	f7fe be50 	b.w	d5670 <spark_publish_vitals>

000d69d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d69d0:	b513      	push	{r0, r1, r4, lr}
   d69d2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d69d4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d69d8:	2300      	movs	r3, #0
   d69da:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d69dc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69de:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d69e0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d69e2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d69e4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d69e6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d69e8:	f7fd fc64 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69ec:	4620      	mov	r0, r4
   d69ee:	b002      	add	sp, #8
   d69f0:	bd10      	pop	{r4, pc}

000d69f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d69f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69f4:	460c      	mov	r4, r1
   d69f6:	ad02      	add	r5, sp, #8
   d69f8:	f854 3b04 	ldr.w	r3, [r4], #4
   d69fc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6a00:	4606      	mov	r6, r0
   d6a02:	460f      	mov	r7, r1
   d6a04:	a801      	add	r0, sp, #4
   d6a06:	4621      	mov	r1, r4
   d6a08:	f7ff fa8f 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6a0c:	4629      	mov	r1, r5
   d6a0e:	4630      	mov	r0, r6
   d6a10:	f7ff ffde 	bl	d69d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a14:	a801      	add	r0, sp, #4
   d6a16:	f7fd fc4d 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	f7fd fc4a 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6a20:	4638      	mov	r0, r7
   d6a22:	2108      	movs	r1, #8
   d6a24:	f001 fa0f 	bl	d7e46 <_ZdlPvj>
        return p;
    }
   d6a28:	4630      	mov	r0, r6
   d6a2a:	b003      	add	sp, #12
   d6a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a2e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6a2e:	b513      	push	{r0, r1, r4, lr}
   d6a30:	460b      	mov	r3, r1
   d6a32:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a34:	c803      	ldmia	r0, {r0, r1}
   d6a36:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a3a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a3e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a42:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6a46:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6a4a:	b002      	add	sp, #8
   d6a4c:	bd10      	pop	{r4, pc}
	...

000d6a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a50:	b538      	push	{r3, r4, r5, lr}
   d6a52:	2300      	movs	r3, #0
   d6a54:	4604      	mov	r4, r0
   d6a56:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a58:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a5a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a5c:	f7fd fb1d 	bl	d409a <_Znwj>
   d6a60:	b128      	cbz	r0, d6a6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a62:	2301      	movs	r3, #1
   d6a64:	6043      	str	r3, [r0, #4]
   d6a66:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6a68:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6a6a:	6003      	str	r3, [r0, #0]
   d6a6c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a6e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6a70:	4620      	mov	r0, r4
   d6a72:	bd38      	pop	{r3, r4, r5, pc}
   d6a74:	000d92d8 	.word	0x000d92d8

000d6a78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a78:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6a7a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a7c:	b90a      	cbnz	r2, d6a82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6a7e:	f001 f9e4 	bl	d7e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a82:	68c3      	ldr	r3, [r0, #12]
    }
   d6a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a88:	4718      	bx	r3

000d6a8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a8a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6a8c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6a8e:	f100 0110 	add.w	r1, r0, #16
   d6a92:	f7ff fff1 	bl	d6a78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6a96:	bd08      	pop	{r3, pc}

000d6a98 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a98:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6a9a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a9c:	b90a      	cbnz	r2, d6aa2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6a9e:	f001 f9d4 	bl	d7e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6aa2:	68c3      	ldr	r3, [r0, #12]
    }
   d6aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6aa8:	4718      	bx	r3

000d6aaa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6aaa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6aac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6aae:	f100 0110 	add.w	r1, r0, #16
   d6ab2:	f7ff fff1 	bl	d6a98 <_ZNKSt8functionIFvRKbEEclES1_>
   d6ab6:	bd08      	pop	{r3, pc}

000d6ab8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ab8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6aba:	2300      	movs	r3, #0
   d6abc:	6083      	str	r3, [r0, #8]
   d6abe:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6ac4:	b12b      	cbz	r3, d6ad2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ac6:	2202      	movs	r2, #2
   d6ac8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6aca:	68eb      	ldr	r3, [r5, #12]
   d6acc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6ace:	68ab      	ldr	r3, [r5, #8]
   d6ad0:	60a3      	str	r3, [r4, #8]
	}
    }
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ada:	b089      	sub	sp, #36	; 0x24
   d6adc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6ade:	4668      	mov	r0, sp
   d6ae0:	f7ff ff0c 	bl	d68fc <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6ae4:	2300      	movs	r3, #0
   d6ae6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6aea:	f04f 0202 	mov.w	r2, #2
   d6aee:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6af2:	2b00      	cmp	r3, #0
   d6af4:	d103      	bne.n	d6afe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6af6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6afa:	2900      	cmp	r1, #0
   d6afc:	d1f7      	bne.n	d6aee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6afe:	d002      	beq.n	d6b06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6b00:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b04:	e063      	b.n	d6bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6b06:	f114 050c 	adds.w	r5, r4, #12
   d6b0a:	d003      	beq.n	d6b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6b0c:	4669      	mov	r1, sp
   d6b0e:	4628      	mov	r0, r5
   d6b10:	f7ff fef4 	bl	d68fc <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6b14:	f3bf 8f5f 	dmb	sy
   d6b18:	2301      	movs	r3, #1
   d6b1a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6b1c:	2000      	movs	r0, #0
   d6b1e:	f104 0308 	add.w	r3, r4, #8
   d6b22:	f3bf 8f5f 	dmb	sy
   d6b26:	e853 6f00 	ldrex	r6, [r3]
   d6b2a:	e843 0200 	strex	r2, r0, [r3]
   d6b2e:	2a00      	cmp	r2, #0
   d6b30:	d1f9      	bne.n	d6b26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6b32:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6b36:	2e00      	cmp	r6, #0
   d6b38:	d049      	beq.n	d6bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b3a:	f7fe fd39 	bl	d55b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6b3e:	b120      	cbz	r0, d6b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b40:	4629      	mov	r1, r5
   d6b42:	4630      	mov	r0, r6
   d6b44:	f7ff ff98 	bl	d6a78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6b48:	e03a      	b.n	d6bc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b4a:	4631      	mov	r1, r6
   d6b4c:	a802      	add	r0, sp, #8
   d6b4e:	f7ff ffb3 	bl	d6ab8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6b52:	68e0      	ldr	r0, [r4, #12]
   d6b54:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6b58:	b108      	cbz	r0, d6b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6b5a:	f002 f9bd 	bl	d8ed8 <strdup>
   d6b5e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b60:	2010      	movs	r0, #16
   d6b62:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6b66:	f7fd fa98 	bl	d409a <_Znwj>
   d6b6a:	4605      	mov	r5, r0
   d6b6c:	b1e8      	cbz	r0, d6baa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b6e:	2700      	movs	r7, #0
   d6b70:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b72:	2018      	movs	r0, #24
   d6b74:	f7fd fa91 	bl	d409a <_Znwj>
   d6b78:	4604      	mov	r4, r0
   d6b7a:	b188      	cbz	r0, d6ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6b7c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b7e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6b80:	a802      	add	r0, sp, #8
   d6b82:	f7ff ff54 	bl	d6a2e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b86:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b8a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b8c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b8e:	9204      	str	r2, [sp, #16]
   d6b90:	a906      	add	r1, sp, #24
   d6b92:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b94:	60e3      	str	r3, [r4, #12]
   d6b96:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b9a:	9205      	str	r2, [sp, #20]
   d6b9c:	f7ff feae 	bl	d68fc <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6ba0:	4b0d      	ldr	r3, [pc, #52]	; (d6bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6ba2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6ba4:	4b0d      	ldr	r3, [pc, #52]	; (d6bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ba6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6ba8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6baa:	a806      	add	r0, sp, #24
   d6bac:	f7ff feb5 	bl	d691a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bb0:	a802      	add	r0, sp, #8
   d6bb2:	f7ff fe9a 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6bb6:	2200      	movs	r2, #0
   d6bb8:	4629      	mov	r1, r5
   d6bba:	4809      	ldr	r0, [pc, #36]	; (d6be0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6bbc:	f7fe fd00 	bl	d55c0 <application_thread_invoke>
   d6bc0:	4630      	mov	r0, r6
   d6bc2:	f7ff fe92 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6bc6:	2110      	movs	r1, #16
   d6bc8:	4630      	mov	r0, r6
   d6bca:	f001 f93c 	bl	d7e46 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6bce:	4668      	mov	r0, sp
   d6bd0:	f7ff fea3 	bl	d691a <_ZN8particle5ErrorD1Ev>
    }
   d6bd4:	b009      	add	sp, #36	; 0x24
   d6bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bd8:	000d6a8b 	.word	0x000d6a8b
   d6bdc:	000d6d01 	.word	0x000d6d01
   d6be0:	000d5819 	.word	0x000d5819

000d6be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6be8:	b08b      	sub	sp, #44	; 0x2c
   d6bea:	4606      	mov	r6, r0
   d6bec:	460f      	mov	r7, r1
   d6bee:	4690      	mov	r8, r2
   d6bf0:	4699      	mov	r9, r3
   d6bf2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6bf6:	f7fe fd23 	bl	d5640 <spark_cloud_flag_connected>
   d6bfa:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6bfc:	4683      	mov	fp, r0
   d6bfe:	bb30      	cbnz	r0, d6c4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6c00:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6c04:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6c06:	a905      	add	r1, sp, #20
   d6c08:	4628      	mov	r0, r5
   d6c0a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c0e:	f7ff fe75 	bl	d68fc <_ZN8particle5ErrorC1EOS0_>
   d6c12:	2014      	movs	r0, #20
   d6c14:	f7fd fa41 	bl	d409a <_Znwj>
   d6c18:	4604      	mov	r4, r0
   d6c1a:	b158      	cbz	r0, d6c34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6c1c:	2302      	movs	r3, #2
   d6c1e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c20:	2301      	movs	r3, #1
   d6c22:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6c24:	f8c0 b004 	str.w	fp, [r0, #4]
   d6c28:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6c2c:	4629      	mov	r1, r5
   d6c2e:	300c      	adds	r0, #12
   d6c30:	f7ff fe64 	bl	d68fc <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6c34:	4630      	mov	r0, r6
   d6c36:	4621      	mov	r1, r4
   d6c38:	f840 4b04 	str.w	r4, [r0], #4
   d6c3c:	f7ff ff08 	bl	d6a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6c40:	4628      	mov	r0, r5
   d6c42:	f7ff fe6a 	bl	d691a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6c46:	a805      	add	r0, sp, #20
   d6c48:	f7ff fe67 	bl	d691a <_ZN8particle5ErrorD1Ev>
   d6c4c:	e052      	b.n	d6cf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6c4e:	2400      	movs	r4, #0
   d6c50:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6c52:	2014      	movs	r0, #20
   d6c54:	606c      	str	r4, [r5, #4]
   d6c56:	60ac      	str	r4, [r5, #8]
   d6c58:	9307      	str	r3, [sp, #28]
   d6c5a:	f7fd fa1e 	bl	d409a <_Znwj>
   d6c5e:	4601      	mov	r1, r0
   d6c60:	b118      	cbz	r0, d6c6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6c62:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c64:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6c66:	6044      	str	r4, [r0, #4]
   d6c68:	6084      	str	r4, [r0, #8]
   d6c6a:	a804      	add	r0, sp, #16
   d6c6c:	9103      	str	r1, [sp, #12]
   d6c6e:	f7ff feef 	bl	d6a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6c72:	4b22      	ldr	r3, [pc, #136]	; (d6cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6c74:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6c76:	2008      	movs	r0, #8
   d6c78:	f7fd fa0f 	bl	d409a <_Znwj>
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	b128      	cbz	r0, d6c8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c80:	9b03      	ldr	r3, [sp, #12]
   d6c82:	f840 3b04 	str.w	r3, [r0], #4
   d6c86:	a904      	add	r1, sp, #16
   d6c88:	f7ff f94f 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c8c:	9500      	str	r5, [sp, #0]
   d6c8e:	fa5f f38a 	uxtb.w	r3, sl
   d6c92:	464a      	mov	r2, r9
   d6c94:	4641      	mov	r1, r8
   d6c96:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6c98:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c9a:	f7fe fcd9 	bl	d5650 <spark_send_event>
   d6c9e:	b920      	cbnz	r0, d6caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6ca0:	9b03      	ldr	r3, [sp, #12]
   d6ca2:	785b      	ldrb	r3, [r3, #1]
   d6ca4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6ca8:	b183      	cbz	r3, d6ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6caa:	9b03      	ldr	r3, [sp, #12]
   d6cac:	9305      	str	r3, [sp, #20]
   d6cae:	a904      	add	r1, sp, #16
   d6cb0:	a806      	add	r0, sp, #24
   d6cb2:	f7ff f93a 	bl	d5f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6cb6:	a905      	add	r1, sp, #20
   d6cb8:	4630      	mov	r0, r6
   d6cba:	f7ff fe89 	bl	d69d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6cbe:	a806      	add	r0, sp, #24
   d6cc0:	f7fd faf8 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cc4:	a804      	add	r0, sp, #16
   d6cc6:	f7fd faf5 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cca:	e013      	b.n	d6cf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6ccc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6cd0:	a905      	add	r1, sp, #20
   d6cd2:	a803      	add	r0, sp, #12
   d6cd4:	9205      	str	r2, [sp, #20]
   d6cd6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6cda:	f7ff fefd 	bl	d6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6cde:	a805      	add	r0, sp, #20
   d6ce0:	f7ff fe1b 	bl	d691a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6ce4:	a805      	add	r0, sp, #20
   d6ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ce8:	f7ff fe83 	bl	d69f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6cec:	a806      	add	r0, sp, #24
   d6cee:	f7fd fae1 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cf2:	e7da      	b.n	d6caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6cf4:	4630      	mov	r0, r6
   d6cf6:	b00b      	add	sp, #44	; 0x2c
   d6cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cfc:	000d6e71 	.word	0x000d6e71

000d6d00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d00:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d04:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d06:	d006      	beq.n	d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6d08:	2a03      	cmp	r2, #3
   d6d0a:	d017      	beq.n	d6d3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6d0c:	2a01      	cmp	r2, #1
   d6d0e:	d122      	bne.n	d6d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d10:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d12:	6003      	str	r3, [r0, #0]
	      break;
   d6d14:	e01f      	b.n	d6d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d16:	2018      	movs	r0, #24
   d6d18:	680e      	ldr	r6, [r1, #0]
   d6d1a:	f7fd f9be 	bl	d409a <_Znwj>
   d6d1e:	4605      	mov	r5, r0
   d6d20:	b150      	cbz	r0, d6d38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6d22:	4631      	mov	r1, r6
   d6d24:	f7ff fec8 	bl	d6ab8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6d28:	6930      	ldr	r0, [r6, #16]
   d6d2a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6d2e:	b108      	cbz	r0, d6d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6d30:	f002 f8d2 	bl	d8ed8 <strdup>
   d6d34:	6128      	str	r0, [r5, #16]
   d6d36:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d38:	6025      	str	r5, [r4, #0]
   d6d3a:	e00c      	b.n	d6d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d3c:	6804      	ldr	r4, [r0, #0]
   d6d3e:	b154      	cbz	r4, d6d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6d40:	f104 0010 	add.w	r0, r4, #16
   d6d44:	f7ff fde9 	bl	d691a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d48:	4620      	mov	r0, r4
   d6d4a:	f7ff fdce 	bl	d68ea <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d4e:	2118      	movs	r1, #24
   d6d50:	4620      	mov	r0, r4
   d6d52:	f001 f878 	bl	d7e46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6d56:	2000      	movs	r0, #0
   d6d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d5a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d5a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d5c:	2300      	movs	r3, #0
   d6d5e:	6083      	str	r3, [r0, #8]
   d6d60:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d62:	4604      	mov	r4, r0
   d6d64:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6d66:	b12b      	cbz	r3, d6d74 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d68:	2202      	movs	r2, #2
   d6d6a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d6c:	68eb      	ldr	r3, [r5, #12]
   d6d6e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6d70:	68ab      	ldr	r3, [r5, #8]
   d6d72:	60a3      	str	r3, [r4, #8]
	}
    }
   d6d74:	4620      	mov	r0, r4
   d6d76:	bd38      	pop	{r3, r4, r5, pc}

000d6d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d7a:	b570      	push	{r4, r5, r6, lr}
   d6d7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6d7e:	d006      	beq.n	d6d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6d80:	2a03      	cmp	r2, #3
   d6d82:	d011      	beq.n	d6da8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6d84:	2a01      	cmp	r2, #1
   d6d86:	d118      	bne.n	d6dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d8a:	6003      	str	r3, [r0, #0]
	      break;
   d6d8c:	e015      	b.n	d6dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d8e:	2014      	movs	r0, #20
   d6d90:	680e      	ldr	r6, [r1, #0]
   d6d92:	f7fd f982 	bl	d409a <_Znwj>
   d6d96:	4605      	mov	r5, r0
   d6d98:	b120      	cbz	r0, d6da4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6d9a:	4631      	mov	r1, r6
   d6d9c:	f7ff ffdd 	bl	d6d5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6da0:	7c33      	ldrb	r3, [r6, #16]
   d6da2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6da4:	6025      	str	r5, [r4, #0]
   d6da6:	e008      	b.n	d6dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6da8:	6804      	ldr	r4, [r0, #0]
   d6daa:	b134      	cbz	r4, d6dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dac:	4620      	mov	r0, r4
   d6dae:	f7ff fd9c 	bl	d68ea <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6db2:	2114      	movs	r1, #20
   d6db4:	4620      	mov	r0, r4
   d6db6:	f001 f846 	bl	d7e46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6dba:	2000      	movs	r0, #0
   d6dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6dc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6dc0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6dc2:	2300      	movs	r3, #0
   d6dc4:	b087      	sub	sp, #28
   d6dc6:	460c      	mov	r4, r1
   d6dc8:	f3bf 8f5f 	dmb	sy
   d6dcc:	e850 6f00 	ldrex	r6, [r0]
   d6dd0:	e840 3200 	strex	r2, r3, [r0]
   d6dd4:	2a00      	cmp	r2, #0
   d6dd6:	d1f9      	bne.n	d6dcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6dd8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6ddc:	2e00      	cmp	r6, #0
   d6dde:	d03f      	beq.n	d6e60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6de0:	4618      	mov	r0, r3
   d6de2:	f7fe fbe5 	bl	d55b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6de6:	4607      	mov	r7, r0
   d6de8:	b120      	cbz	r0, d6df4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6dea:	4621      	mov	r1, r4
   d6dec:	4630      	mov	r0, r6
   d6dee:	f7ff fe53 	bl	d6a98 <_ZNKSt8functionIFvRKbEEclES1_>
   d6df2:	e02e      	b.n	d6e52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6df4:	4631      	mov	r1, r6
   d6df6:	a801      	add	r0, sp, #4
   d6df8:	f7ff ffaf 	bl	d6d5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6dfc:	7823      	ldrb	r3, [r4, #0]
   d6dfe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6e02:	2010      	movs	r0, #16
   d6e04:	f7fd f949 	bl	d409a <_Znwj>
   d6e08:	4605      	mov	r5, r0
   d6e0a:	b1d0      	cbz	r0, d6e42 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e0c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e0e:	2014      	movs	r0, #20
   d6e10:	f7fd f943 	bl	d409a <_Znwj>
   d6e14:	4604      	mov	r4, r0
   d6e16:	b178      	cbz	r0, d6e38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e18:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6e1a:	4601      	mov	r1, r0
   d6e1c:	a801      	add	r0, sp, #4
   d6e1e:	f7ff fe06 	bl	d6a2e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e22:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6e24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e26:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6e2a:	9203      	str	r2, [sp, #12]
   d6e2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e2e:	60e3      	str	r3, [r4, #12]
   d6e30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e34:	9204      	str	r2, [sp, #16]
   d6e36:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6e38:	4b0a      	ldr	r3, [pc, #40]	; (d6e64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6e3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e3c:	4b0a      	ldr	r3, [pc, #40]	; (d6e68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6e40:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e42:	a801      	add	r0, sp, #4
   d6e44:	f7ff fd51 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e48:	2200      	movs	r2, #0
   d6e4a:	4629      	mov	r1, r5
   d6e4c:	4807      	ldr	r0, [pc, #28]	; (d6e6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6e4e:	f7fe fbb7 	bl	d55c0 <application_thread_invoke>
   d6e52:	4630      	mov	r0, r6
   d6e54:	f7ff fd49 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6e58:	2110      	movs	r1, #16
   d6e5a:	4630      	mov	r0, r6
   d6e5c:	f000 fff3 	bl	d7e46 <_ZdlPvj>
        }
    }
   d6e60:	b007      	add	sp, #28
   d6e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e64:	000d6aab 	.word	0x000d6aab
   d6e68:	000d6d79 	.word	0x000d6d79
   d6e6c:	000d5819 	.word	0x000d5819

000d6e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6e70:	b530      	push	{r4, r5, lr}
   d6e72:	b085      	sub	sp, #20
   d6e74:	4604      	mov	r4, r0
   d6e76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6e78:	4668      	mov	r0, sp
   d6e7a:	4611      	mov	r1, r2
   d6e7c:	f7ff fdb9 	bl	d69f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6e80:	b17c      	cbz	r4, d6ea2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6e82:	b224      	sxth	r4, r4
   d6e84:	4628      	mov	r0, r5
   d6e86:	b10d      	cbz	r5, d6e8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6e88:	f002 f826 	bl	d8ed8 <strdup>
   d6e8c:	9002      	str	r0, [sp, #8]
   d6e8e:	a902      	add	r1, sp, #8
   d6e90:	4668      	mov	r0, sp
   d6e92:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6e96:	f7ff fe1f 	bl	d6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6e9a:	a802      	add	r0, sp, #8
   d6e9c:	f7ff fd3d 	bl	d691a <_ZN8particle5ErrorD1Ev>
   d6ea0:	e01d      	b.n	d6ede <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6ea2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6ea4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6ea8:	f04f 0201 	mov.w	r2, #1
   d6eac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6eb0:	42a3      	cmp	r3, r4
   d6eb2:	d103      	bne.n	d6ebc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6eb4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6eb8:	2900      	cmp	r1, #0
   d6eba:	d1f7      	bne.n	d6eac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6ebc:	d002      	beq.n	d6ec4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6ebe:	f88d 3008 	strb.w	r3, [sp, #8]
   d6ec2:	e00c      	b.n	d6ede <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6ec4:	f110 010c 	adds.w	r1, r0, #12
   d6ec8:	f04f 0301 	mov.w	r3, #1
   d6ecc:	bf18      	it	ne
   d6ece:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6ed0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6ed4:	3004      	adds	r0, #4
   d6ed6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6eda:	f7ff ff71 	bl	d6dc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6ede:	a801      	add	r0, sp, #4
   d6ee0:	f7fd f9e8 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6ee4:	b005      	add	sp, #20
   d6ee6:	bd30      	pop	{r4, r5, pc}

000d6ee8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ee8:	2200      	movs	r2, #0
   d6eea:	4611      	mov	r1, r2
   d6eec:	6840      	ldr	r0, [r0, #4]
   d6eee:	f7fe bbff 	b.w	d56f0 <network_listening>

000d6ef2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ef2:	2200      	movs	r2, #0
   d6ef4:	4611      	mov	r1, r2
   d6ef6:	6840      	ldr	r0, [r0, #4]
   d6ef8:	f7fe bc0a 	b.w	d5710 <network_get_listen_timeout>

000d6efc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6efc:	2200      	movs	r2, #0
   d6efe:	6840      	ldr	r0, [r0, #4]
   d6f00:	f7fe bbfe 	b.w	d5700 <network_set_listen_timeout>

000d6f04 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f04:	2200      	movs	r2, #0
   d6f06:	f081 0101 	eor.w	r1, r1, #1
   d6f0a:	6840      	ldr	r0, [r0, #4]
   d6f0c:	f7fe bbe8 	b.w	d56e0 <network_listen>

000d6f10 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6f10:	2300      	movs	r3, #0
   d6f12:	461a      	mov	r2, r3
   d6f14:	4619      	mov	r1, r3
   d6f16:	6840      	ldr	r0, [r0, #4]
   d6f18:	f7fe bbda 	b.w	d56d0 <network_off>

000d6f1c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	461a      	mov	r2, r3
   d6f20:	4619      	mov	r1, r3
   d6f22:	6840      	ldr	r0, [r0, #4]
   d6f24:	f7fe bbcc 	b.w	d56c0 <network_on>

000d6f28 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f28:	2200      	movs	r2, #0
   d6f2a:	4611      	mov	r1, r2
   d6f2c:	6840      	ldr	r0, [r0, #4]
   d6f2e:	f7fe bbbf 	b.w	d56b0 <network_ready>

000d6f32 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f32:	2200      	movs	r2, #0
   d6f34:	4611      	mov	r1, r2
   d6f36:	6840      	ldr	r0, [r0, #4]
   d6f38:	f7fe bbaa 	b.w	d5690 <network_connecting>

000d6f3c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f3c:	2200      	movs	r2, #0
   d6f3e:	2102      	movs	r1, #2
   d6f40:	6840      	ldr	r0, [r0, #4]
   d6f42:	f7fe bbad 	b.w	d56a0 <network_disconnect>

000d6f46 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f46:	2300      	movs	r3, #0
   d6f48:	461a      	mov	r2, r3
   d6f4a:	6840      	ldr	r0, [r0, #4]
   d6f4c:	f7fe bb98 	b.w	d5680 <network_connect>

000d6f50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f50:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f52:	2203      	movs	r2, #3
   d6f54:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f56:	4a02      	ldr	r2, [pc, #8]	; (d6f60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f58:	601a      	str	r2, [r3, #0]
   d6f5a:	4770      	bx	lr
   d6f5c:	2003e4cc 	.word	0x2003e4cc
   d6f60:	000d92f4 	.word	0x000d92f4

000d6f64 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6f64:	4770      	bx	lr

000d6f66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f68:	4606      	mov	r6, r0
   d6f6a:	4615      	mov	r5, r2
   d6f6c:	460c      	mov	r4, r1
   d6f6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6f70:	42bc      	cmp	r4, r7
   d6f72:	d006      	beq.n	d6f82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6f74:	6833      	ldr	r3, [r6, #0]
   d6f76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6f7a:	689b      	ldr	r3, [r3, #8]
   d6f7c:	4630      	mov	r0, r6
   d6f7e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6f80:	e7f6      	b.n	d6f70 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6f82:	4628      	mov	r0, r5
   d6f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f86 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6f86:	2200      	movs	r2, #0
   d6f88:	7c00      	ldrb	r0, [r0, #16]
   d6f8a:	f7fe b9f9 	b.w	d5380 <HAL_I2C_Write_Data>

000d6f8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6f8e:	2100      	movs	r1, #0
   d6f90:	7c00      	ldrb	r0, [r0, #16]
   d6f92:	f7fe b9fd 	b.w	d5390 <HAL_I2C_Available_Data>

000d6f96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6f96:	2100      	movs	r1, #0
   d6f98:	7c00      	ldrb	r0, [r0, #16]
   d6f9a:	f7fe ba01 	b.w	d53a0 <HAL_I2C_Read_Data>

000d6f9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6f9e:	2100      	movs	r1, #0
   d6fa0:	7c00      	ldrb	r0, [r0, #16]
   d6fa2:	f7fe ba05 	b.w	d53b0 <HAL_I2C_Peek_Data>

000d6fa6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6fa6:	2100      	movs	r1, #0
   d6fa8:	7c00      	ldrb	r0, [r0, #16]
   d6faa:	f7fe ba09 	b.w	d53c0 <HAL_I2C_Flush_Data>

000d6fae <_ZN7TwoWireD0Ev>:
   d6fae:	b510      	push	{r4, lr}
   d6fb0:	2114      	movs	r1, #20
   d6fb2:	4604      	mov	r4, r0
   d6fb4:	f000 ff47 	bl	d7e46 <_ZdlPvj>
   d6fb8:	4620      	mov	r0, r4
   d6fba:	bd10      	pop	{r4, pc}

000d6fbc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6fbc:	b510      	push	{r4, lr}
   d6fbe:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fc4:	4608      	mov	r0, r1
   d6fc6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6fc8:	2100      	movs	r1, #0
   d6fca:	4b04      	ldr	r3, [pc, #16]	; (d6fdc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6fcc:	7420      	strb	r0, [r4, #16]
   d6fce:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6fd0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6fd2:	f7fe fa05 	bl	d53e0 <HAL_I2C_Init>

}
   d6fd6:	4620      	mov	r0, r4
   d6fd8:	bd10      	pop	{r4, pc}
   d6fda:	bf00      	nop
   d6fdc:	000d9328 	.word	0x000d9328

000d6fe0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6fe0:	2100      	movs	r1, #0
   d6fe2:	7c00      	ldrb	r0, [r0, #16]
   d6fe4:	f7fe b9f4 	b.w	d53d0 <HAL_I2C_Is_Enabled>

000d6fe8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6fe8:	f7fe b9ba 	b.w	d5360 <HAL_Interrupts_Disable_All>

000d6fec <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6fec:	f7fe b9b0 	b.w	d5350 <HAL_Interrupts_Enable_All>

000d6ff0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ff0:	4770      	bx	lr

000d6ff2 <_ZN9IPAddressD0Ev>:
   d6ff2:	b510      	push	{r4, lr}
   d6ff4:	2118      	movs	r1, #24
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	f000 ff25 	bl	d7e46 <_ZdlPvj>
   d6ffc:	4620      	mov	r0, r4
   d6ffe:	bd10      	pop	{r4, pc}

000d7000 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7000:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7002:	7d03      	ldrb	r3, [r0, #20]
   d7004:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7006:	b08d      	sub	sp, #52	; 0x34
   d7008:	460e      	mov	r6, r1
   d700a:	f100 0704 	add.w	r7, r0, #4
   d700e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7012:	d002      	beq.n	d701a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7014:	f100 0508 	add.w	r5, r0, #8
   d7018:	e018      	b.n	d704c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d701a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d701c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d701e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7022:	232f      	movs	r3, #47	; 0x2f
   d7024:	462a      	mov	r2, r5
   d7026:	200a      	movs	r0, #10
   d7028:	f7fe f9e2 	bl	d53f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d702c:	4628      	mov	r0, r5
   d702e:	f001 ff6e 	bl	d8f0e <strlen>
   d7032:	6833      	ldr	r3, [r6, #0]
   d7034:	4602      	mov	r2, r0
   d7036:	68db      	ldr	r3, [r3, #12]
   d7038:	4629      	mov	r1, r5
   d703a:	4630      	mov	r0, r6
   d703c:	4798      	blx	r3
   d703e:	e00f      	b.n	d7060 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7040:	b124      	cbz	r4, d704c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7042:	212e      	movs	r1, #46	; 0x2e
   d7044:	4630      	mov	r0, r6
   d7046:	f000 f9cd 	bl	d73e4 <_ZN5Print5printEc>
   d704a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d704c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7050:	220a      	movs	r2, #10
   d7052:	4630      	mov	r0, r6
   d7054:	f000 f9d5 	bl	d7402 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7058:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d705a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d705c:	d1f0      	bne.n	d7040 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d705e:	4620      	mov	r0, r4
    }
    return n;
}
   d7060:	b00d      	add	sp, #52	; 0x34
   d7062:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7064 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7064:	b510      	push	{r4, lr}
   d7066:	4b05      	ldr	r3, [pc, #20]	; (d707c <_ZN9IPAddressC1Ev+0x18>)
   d7068:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d706a:	2211      	movs	r2, #17
   d706c:	f840 3b04 	str.w	r3, [r0], #4
   d7070:	2100      	movs	r1, #0
   d7072:	f001 fef2 	bl	d8e5a <memset>
{
    clear();
}
   d7076:	4620      	mov	r0, r4
   d7078:	bd10      	pop	{r4, pc}
   d707a:	bf00      	nop
   d707c:	000d9350 	.word	0x000d9350

000d7080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7080:	4603      	mov	r3, r0
   d7082:	4a07      	ldr	r2, [pc, #28]	; (d70a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7084:	b510      	push	{r4, lr}
   d7086:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d708a:	f101 0210 	add.w	r2, r1, #16
   d708e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7092:	f843 4b04 	str.w	r4, [r3], #4
   d7096:	4291      	cmp	r1, r2
   d7098:	d1f9      	bne.n	d708e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d709a:	780a      	ldrb	r2, [r1, #0]
   d709c:	701a      	strb	r2, [r3, #0]
}
   d709e:	bd10      	pop	{r4, pc}
   d70a0:	000d9350 	.word	0x000d9350

000d70a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d70a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d70a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d70aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d70ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d70b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d70b6:	2304      	movs	r3, #4
   d70b8:	6041      	str	r1, [r0, #4]
   d70ba:	7503      	strb	r3, [r0, #20]
   d70bc:	bd10      	pop	{r4, pc}

000d70be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d70be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d70c0:	780d      	ldrb	r5, [r1, #0]
   d70c2:	788b      	ldrb	r3, [r1, #2]
   d70c4:	784a      	ldrb	r2, [r1, #1]
   d70c6:	78c9      	ldrb	r1, [r1, #3]
   d70c8:	9100      	str	r1, [sp, #0]
   d70ca:	4629      	mov	r1, r5
   d70cc:	f7ff ffea 	bl	d70a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d70d0:	b003      	add	sp, #12
   d70d2:	bd30      	pop	{r4, r5, pc}

000d70d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d70d4:	4b01      	ldr	r3, [pc, #4]	; (d70dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d70d6:	4a02      	ldr	r2, [pc, #8]	; (d70e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d70d8:	601a      	str	r2, [r3, #0]
   d70da:	4770      	bx	lr
   d70dc:	2003e4d4 	.word	0x2003e4d4
   d70e0:	000d93cf 	.word	0x000d93cf

000d70e4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70e4:	2200      	movs	r2, #0
   d70e6:	4611      	mov	r1, r2
   d70e8:	6840      	ldr	r0, [r0, #4]
   d70ea:	f7fe bb01 	b.w	d56f0 <network_listening>

000d70ee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d70ee:	2200      	movs	r2, #0
   d70f0:	4611      	mov	r1, r2
   d70f2:	6840      	ldr	r0, [r0, #4]
   d70f4:	f7fe bb0c 	b.w	d5710 <network_get_listen_timeout>

000d70f8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d70f8:	2200      	movs	r2, #0
   d70fa:	6840      	ldr	r0, [r0, #4]
   d70fc:	f7fe bb00 	b.w	d5700 <network_set_listen_timeout>

000d7100 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7100:	2200      	movs	r2, #0
   d7102:	f081 0101 	eor.w	r1, r1, #1
   d7106:	6840      	ldr	r0, [r0, #4]
   d7108:	f7fe baea 	b.w	d56e0 <network_listen>

000d710c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d710c:	2300      	movs	r3, #0
   d710e:	461a      	mov	r2, r3
   d7110:	2101      	movs	r1, #1
   d7112:	6840      	ldr	r0, [r0, #4]
   d7114:	f7fe badc 	b.w	d56d0 <network_off>

000d7118 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7118:	2300      	movs	r3, #0
   d711a:	461a      	mov	r2, r3
   d711c:	4619      	mov	r1, r3
   d711e:	6840      	ldr	r0, [r0, #4]
   d7120:	f7fe bace 	b.w	d56c0 <network_on>

000d7124 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7124:	2200      	movs	r2, #0
   d7126:	4611      	mov	r1, r2
   d7128:	6840      	ldr	r0, [r0, #4]
   d712a:	f7fe bac1 	b.w	d56b0 <network_ready>

000d712e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d712e:	2200      	movs	r2, #0
   d7130:	4611      	mov	r1, r2
   d7132:	6840      	ldr	r0, [r0, #4]
   d7134:	f7fe baac 	b.w	d5690 <network_connecting>

000d7138 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7138:	2200      	movs	r2, #0
   d713a:	2102      	movs	r1, #2
   d713c:	6840      	ldr	r0, [r0, #4]
   d713e:	f7fe baaf 	b.w	d56a0 <network_disconnect>

000d7142 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7142:	2300      	movs	r3, #0
   d7144:	461a      	mov	r2, r3
   d7146:	6840      	ldr	r0, [r0, #4]
   d7148:	f7fe ba9a 	b.w	d5680 <network_connect>

000d714c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d714c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d714e:	4605      	mov	r5, r0
   d7150:	b188      	cbz	r0, d7176 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7152:	6804      	ldr	r4, [r0, #0]
   d7154:	b14c      	cbz	r4, d716a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7156:	68a3      	ldr	r3, [r4, #8]
   d7158:	b11b      	cbz	r3, d7162 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d715a:	2203      	movs	r2, #3
   d715c:	4621      	mov	r1, r4
   d715e:	4620      	mov	r0, r4
   d7160:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7162:	2110      	movs	r1, #16
   d7164:	4620      	mov	r0, r4
   d7166:	f000 fe6e 	bl	d7e46 <_ZdlPvj>
   d716a:	4628      	mov	r0, r5
   d716c:	2114      	movs	r1, #20
      }
   d716e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7172:	f000 be68 	b.w	d7e46 <_ZdlPvj>
   d7176:	bd38      	pop	{r3, r4, r5, pc}

000d7178 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7178:	b110      	cbz	r0, d7180 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d717a:	6803      	ldr	r3, [r0, #0]
   d717c:	685b      	ldr	r3, [r3, #4]
   d717e:	4718      	bx	r3
   d7180:	4770      	bx	lr

000d7182 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7182:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7184:	6803      	ldr	r3, [r0, #0]
   d7186:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7188:	b1bb      	cbz	r3, d71ba <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d718a:	6858      	ldr	r0, [r3, #4]
   d718c:	f7fe f870 	bl	d5270 <os_thread_is_current>
   d7190:	b978      	cbnz	r0, d71b2 <_ZN6ThreadD1Ev+0x30>
   d7192:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7194:	7c5a      	ldrb	r2, [r3, #17]
   d7196:	b912      	cbnz	r2, d719e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7198:	6858      	ldr	r0, [r3, #4]
   d719a:	f7fe f871 	bl	d5280 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d719e:	6823      	ldr	r3, [r4, #0]
   d71a0:	6858      	ldr	r0, [r3, #4]
   d71a2:	f7fe f875 	bl	d5290 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71a6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71a8:	2300      	movs	r3, #0
   d71aa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71ac:	b128      	cbz	r0, d71ba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d71ae:	f7ff ffcd 	bl	d714c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71b2:	6820      	ldr	r0, [r4, #0]
   d71b4:	b108      	cbz	r0, d71ba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d71b6:	f7ff ffc9 	bl	d714c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d71ba:	4620      	mov	r0, r4
   d71bc:	bd10      	pop	{r4, pc}
	...

000d71c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d71c0:	b538      	push	{r3, r4, r5, lr}
   d71c2:	4b0c      	ldr	r3, [pc, #48]	; (d71f4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d71c4:	6003      	str	r3, [r0, #0]
   d71c6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71c8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d71cc:	b108      	cbz	r0, d71d2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d71ce:	f7fc ff68 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71d2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d71d6:	b135      	cbz	r5, d71e6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d71d8:	4628      	mov	r0, r5
   d71da:	f7ff ffd2 	bl	d7182 <_ZN6ThreadD1Ev>
   d71de:	2104      	movs	r1, #4
   d71e0:	4628      	mov	r0, r5
   d71e2:	f000 fe30 	bl	d7e46 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71e6:	68a0      	ldr	r0, [r4, #8]
   d71e8:	b108      	cbz	r0, d71ee <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d71ea:	f7ff ffc5 	bl	d7178 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d71ee:	4620      	mov	r0, r4
   d71f0:	bd38      	pop	{r3, r4, r5, pc}
   d71f2:	bf00      	nop
   d71f4:	000d9440 	.word	0x000d9440

000d71f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d71f8:	b538      	push	{r3, r4, r5, lr}
   d71fa:	4c0e      	ldr	r4, [pc, #56]	; (d7234 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d71fc:	4b0e      	ldr	r3, [pc, #56]	; (d7238 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d71fe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7200:	2500      	movs	r5, #0
   d7202:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7204:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7208:	6063      	str	r3, [r4, #4]
   d720a:	60a5      	str	r5, [r4, #8]
   d720c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7210:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7214:	f7fe f844 	bl	d52a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7218:	4b08      	ldr	r3, [pc, #32]	; (d723c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d721a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d721e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7222:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7224:	4620      	mov	r0, r4
   d7226:	4a06      	ldr	r2, [pc, #24]	; (d7240 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7228:	4906      	ldr	r1, [pc, #24]	; (d7244 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d722a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d722e:	f000 be05 	b.w	d7e3c <__aeabi_atexit>
   d7232:	bf00      	nop
   d7234:	2003e4d8 	.word	0x2003e4d8
   d7238:	000d9474 	.word	0x000d9474
   d723c:	000d9440 	.word	0x000d9440
   d7240:	2003e438 	.word	0x2003e438
   d7244:	000d71c1 	.word	0x000d71c1

000d7248 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7248:	2300      	movs	r3, #0
   d724a:	461a      	mov	r2, r3
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	f7fe ba17 	b.w	d5680 <network_connect>

000d7252 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7252:	2200      	movs	r2, #0
   d7254:	2102      	movs	r1, #2
   d7256:	6840      	ldr	r0, [r0, #4]
   d7258:	f7fe ba22 	b.w	d56a0 <network_disconnect>

000d725c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d725c:	2200      	movs	r2, #0
   d725e:	4611      	mov	r1, r2
   d7260:	6840      	ldr	r0, [r0, #4]
   d7262:	f7fe ba15 	b.w	d5690 <network_connecting>

000d7266 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7266:	2200      	movs	r2, #0
   d7268:	4611      	mov	r1, r2
   d726a:	6840      	ldr	r0, [r0, #4]
   d726c:	f7fe ba20 	b.w	d56b0 <network_ready>

000d7270 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7270:	2300      	movs	r3, #0
   d7272:	461a      	mov	r2, r3
   d7274:	4619      	mov	r1, r3
   d7276:	6840      	ldr	r0, [r0, #4]
   d7278:	f7fe ba22 	b.w	d56c0 <network_on>

000d727c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d727c:	2300      	movs	r3, #0
   d727e:	461a      	mov	r2, r3
   d7280:	4619      	mov	r1, r3
   d7282:	6840      	ldr	r0, [r0, #4]
   d7284:	f7fe ba24 	b.w	d56d0 <network_off>

000d7288 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7288:	2200      	movs	r2, #0
   d728a:	f081 0101 	eor.w	r1, r1, #1
   d728e:	6840      	ldr	r0, [r0, #4]
   d7290:	f7fe ba26 	b.w	d56e0 <network_listen>

000d7294 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7294:	2200      	movs	r2, #0
   d7296:	6840      	ldr	r0, [r0, #4]
   d7298:	f7fe ba32 	b.w	d5700 <network_set_listen_timeout>

000d729c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d729c:	2200      	movs	r2, #0
   d729e:	4611      	mov	r1, r2
   d72a0:	6840      	ldr	r0, [r0, #4]
   d72a2:	f7fe ba35 	b.w	d5710 <network_get_listen_timeout>

000d72a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d72a6:	2200      	movs	r2, #0
   d72a8:	4611      	mov	r1, r2
   d72aa:	6840      	ldr	r0, [r0, #4]
   d72ac:	f7fe ba20 	b.w	d56f0 <network_listening>

000d72b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d72b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72b4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d72b6:	b095      	sub	sp, #84	; 0x54
   d72b8:	4616      	mov	r6, r2
   d72ba:	460d      	mov	r5, r1
   d72bc:	4607      	mov	r7, r0
    IPAddress addr;
   d72be:	f7ff fed1 	bl	d7064 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d72c2:	4621      	mov	r1, r4
   d72c4:	2220      	movs	r2, #32
   d72c6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72c8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d72ca:	f001 fdc6 	bl	d8e5a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d72ce:	2340      	movs	r3, #64	; 0x40
   d72d0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d72d2:	4621      	mov	r1, r4
   d72d4:	466b      	mov	r3, sp
   d72d6:	aa0c      	add	r2, sp, #48	; 0x30
   d72d8:	4630      	mov	r0, r6
   d72da:	f7fe f899 	bl	d5410 <netdb_getaddrinfo>
    if (!r) {
   d72de:	4604      	mov	r4, r0
   d72e0:	2800      	cmp	r0, #0
   d72e2:	d144      	bne.n	d736e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d72e4:	4602      	mov	r2, r0
   d72e6:	2101      	movs	r1, #1
   d72e8:	6868      	ldr	r0, [r5, #4]
   d72ea:	f7fe f9e1 	bl	d56b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72ee:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d72f0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72f2:	4622      	mov	r2, r4
   d72f4:	6868      	ldr	r0, [r5, #4]
   d72f6:	f7fe f9db 	bl	d56b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d72fa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72fc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d72fe:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7300:	2e00      	cmp	r6, #0
   d7302:	d034      	beq.n	d736e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7304:	2900      	cmp	r1, #0
   d7306:	d132      	bne.n	d736e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7308:	6873      	ldr	r3, [r6, #4]
   d730a:	2b02      	cmp	r3, #2
   d730c:	d002      	beq.n	d7314 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d730e:	2b0a      	cmp	r3, #10
   d7310:	d009      	beq.n	d7326 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7312:	e02a      	b.n	d736a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7314:	f1b8 0f00 	cmp.w	r8, #0
   d7318:	d027      	beq.n	d736a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d731a:	6971      	ldr	r1, [r6, #20]
   d731c:	4638      	mov	r0, r7
   d731e:	3104      	adds	r1, #4
   d7320:	f7ff fecd 	bl	d70be <_ZN9IPAddressaSEPKh>
   d7324:	e020      	b.n	d7368 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7326:	f1b9 0f00 	cmp.w	r9, #0
   d732a:	d01e      	beq.n	d736a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d732c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d732e:	2211      	movs	r2, #17
   d7330:	a801      	add	r0, sp, #4
   d7332:	f001 fd92 	bl	d8e5a <memset>
                    a.v = 6;
   d7336:	2306      	movs	r3, #6
   d7338:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d733c:	ad01      	add	r5, sp, #4
   d733e:	f104 0308 	add.w	r3, r4, #8
   d7342:	3418      	adds	r4, #24
   d7344:	6818      	ldr	r0, [r3, #0]
   d7346:	6859      	ldr	r1, [r3, #4]
   d7348:	462a      	mov	r2, r5
   d734a:	c203      	stmia	r2!, {r0, r1}
   d734c:	3308      	adds	r3, #8
   d734e:	42a3      	cmp	r3, r4
   d7350:	4615      	mov	r5, r2
   d7352:	d1f7      	bne.n	d7344 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7354:	a901      	add	r1, sp, #4
   d7356:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7358:	ad07      	add	r5, sp, #28
   d735a:	f7ff fe91 	bl	d7080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d735e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7360:	1d3c      	adds	r4, r7, #4
   d7362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7364:	682b      	ldr	r3, [r5, #0]
   d7366:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7368:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d736a:	69f6      	ldr	r6, [r6, #28]
   d736c:	e7c8      	b.n	d7300 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d736e:	9800      	ldr	r0, [sp, #0]
   d7370:	f7fe f846 	bl	d5400 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7374:	4638      	mov	r0, r7
   d7376:	b015      	add	sp, #84	; 0x54
   d7378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d737c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d737c:	4b02      	ldr	r3, [pc, #8]	; (d7388 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d737e:	4a03      	ldr	r2, [pc, #12]	; (d738c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7380:	601a      	str	r2, [r3, #0]
   d7382:	2200      	movs	r2, #0
   d7384:	605a      	str	r2, [r3, #4]
   d7386:	4770      	bx	lr
   d7388:	2003e6ac 	.word	0x2003e6ac
   d738c:	000d9474 	.word	0x000d9474

000d7390 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7392:	4606      	mov	r6, r0
   d7394:	460d      	mov	r5, r1
   d7396:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7398:	2400      	movs	r4, #0
  while (size--) {
   d739a:	42bd      	cmp	r5, r7
   d739c:	d00c      	beq.n	d73b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d739e:	6833      	ldr	r3, [r6, #0]
   d73a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d73a4:	689b      	ldr	r3, [r3, #8]
   d73a6:	4630      	mov	r0, r6
   d73a8:	4798      	blx	r3
     if (chunk>=0)
   d73aa:	2800      	cmp	r0, #0
   d73ac:	db01      	blt.n	d73b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d73ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d73b0:	e7f3      	b.n	d739a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d73b2:	2c00      	cmp	r4, #0
   d73b4:	bf08      	it	eq
   d73b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d73b8:	4620      	mov	r0, r4
   d73ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d73bc:	b570      	push	{r4, r5, r6, lr}
   d73be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d73c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d73c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d73c4:	b149      	cbz	r1, d73da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d73c6:	f001 fda2 	bl	d8f0e <strlen>
   d73ca:	682b      	ldr	r3, [r5, #0]
   d73cc:	4602      	mov	r2, r0
   d73ce:	4621      	mov	r1, r4
   d73d0:	4628      	mov	r0, r5
   d73d2:	68db      	ldr	r3, [r3, #12]
    }
   d73d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d73d8:	4718      	bx	r3
    }
   d73da:	bd70      	pop	{r4, r5, r6, pc}

000d73dc <_ZN5Print5printEPKc>:
   d73dc:	b508      	push	{r3, lr}
   d73de:	f7ff ffed 	bl	d73bc <_ZN5Print5writeEPKc>
   d73e2:	bd08      	pop	{r3, pc}

000d73e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d73e4:	6803      	ldr	r3, [r0, #0]
   d73e6:	689b      	ldr	r3, [r3, #8]
   d73e8:	4718      	bx	r3

000d73ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d73ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d73f0:	f7ff fff8 	bl	d73e4 <_ZN5Print5printEc>
  n += print('\n');
   d73f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d73f6:	4604      	mov	r4, r0
  n += print('\n');
   d73f8:	4628      	mov	r0, r5
   d73fa:	f7ff fff3 	bl	d73e4 <_ZN5Print5printEc>
  return n;
}
   d73fe:	4420      	add	r0, r4
   d7400:	bd38      	pop	{r3, r4, r5, pc}

000d7402 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7402:	b530      	push	{r4, r5, lr}
   d7404:	b08b      	sub	sp, #44	; 0x2c
   d7406:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7408:	2100      	movs	r1, #0
   d740a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d740e:	2a01      	cmp	r2, #1
   d7410:	bf98      	it	ls
   d7412:	220a      	movls	r2, #10
   d7414:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7418:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d741c:	fb05 3312 	mls	r3, r5, r2, r3
   d7420:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7424:	2b09      	cmp	r3, #9
   d7426:	bf94      	ite	ls
   d7428:	3330      	addls	r3, #48	; 0x30
   d742a:	3337      	addhi	r3, #55	; 0x37
   d742c:	b2db      	uxtb	r3, r3
   d742e:	4621      	mov	r1, r4
   d7430:	f804 3901 	strb.w	r3, [r4], #-1
   d7434:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7436:	2d00      	cmp	r5, #0
   d7438:	d1ee      	bne.n	d7418 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d743a:	f7ff ffbf 	bl	d73bc <_ZN5Print5writeEPKc>
}
   d743e:	b00b      	add	sp, #44	; 0x2c
   d7440:	bd30      	pop	{r4, r5, pc}

000d7442 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7442:	b40c      	push	{r2, r3}
   d7444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7448:	b087      	sub	sp, #28
   d744a:	af00      	add	r7, sp, #0
   d744c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7450:	4605      	mov	r5, r0
   d7452:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7456:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7458:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d745a:	4623      	mov	r3, r4
   d745c:	464a      	mov	r2, r9
   d745e:	2114      	movs	r1, #20
   d7460:	1d38      	adds	r0, r7, #4
   d7462:	f7fe f975 	bl	d5750 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7466:	2813      	cmp	r0, #19
   d7468:	d805      	bhi.n	d7476 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d746a:	1d39      	adds	r1, r7, #4
   d746c:	4628      	mov	r0, r5
   d746e:	f7ff ffa5 	bl	d73bc <_ZN5Print5writeEPKc>
   d7472:	4604      	mov	r4, r0
   d7474:	e013      	b.n	d749e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7476:	f100 0308 	add.w	r3, r0, #8
   d747a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d747e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7480:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7484:	1c41      	adds	r1, r0, #1
   d7486:	4623      	mov	r3, r4
   d7488:	464a      	mov	r2, r9
   d748a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d748c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d748e:	f7fe f95f 	bl	d5750 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7492:	4669      	mov	r1, sp
   d7494:	4628      	mov	r0, r5
   d7496:	f7ff ff91 	bl	d73bc <_ZN5Print5writeEPKc>
   d749a:	4604      	mov	r4, r0
   d749c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d749e:	b11e      	cbz	r6, d74a8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d74a0:	4628      	mov	r0, r5
   d74a2:	f7ff ffa2 	bl	d73ea <_ZN5Print7printlnEv>
   d74a6:	4404      	add	r4, r0
    return n;
}
   d74a8:	4620      	mov	r0, r4
   d74aa:	371c      	adds	r7, #28
   d74ac:	46bd      	mov	sp, r7
   d74ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d74b2:	b002      	add	sp, #8
   d74b4:	4770      	bx	lr

000d74b6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d74b6:	b510      	push	{r4, lr}
   d74b8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74ba:	f7ff fa16 	bl	d68ea <_ZNSt14_Function_baseD1Ev>
   d74be:	4620      	mov	r0, r4
   d74c0:	bd10      	pop	{r4, pc}
	...

000d74c4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d74c4:	4803      	ldr	r0, [pc, #12]	; (d74d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d74c6:	4a04      	ldr	r2, [pc, #16]	; (d74d8 <_GLOBAL__sub_I_RGB+0x14>)
   d74c8:	4904      	ldr	r1, [pc, #16]	; (d74dc <_GLOBAL__sub_I_RGB+0x18>)
   d74ca:	2300      	movs	r3, #0
   d74cc:	6083      	str	r3, [r0, #8]
   d74ce:	f000 bcb5 	b.w	d7e3c <__aeabi_atexit>
   d74d2:	bf00      	nop
   d74d4:	2003e6b4 	.word	0x2003e6b4
   d74d8:	2003e438 	.word	0x2003e438
   d74dc:	000d74b7 	.word	0x000d74b7

000d74e0 <_ZN8SPIClassD1Ev>:
  Mutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d74e0:	4770      	bx	lr

000d74e2 <_ZN8SPIClassD0Ev>:
   d74e2:	b510      	push	{r4, lr}
   d74e4:	210c      	movs	r1, #12
   d74e6:	4604      	mov	r4, r0
   d74e8:	f000 fcad 	bl	d7e46 <_ZdlPvj>
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d74f0:	2100      	movs	r1, #0
   d74f2:	f7fd bfa5 	b.w	d5440 <HAL_SPI_Acquire>

000d74f6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d74f6:	2100      	movs	r1, #0
   d74f8:	f7fd bfaa 	b.w	d5450 <HAL_SPI_Release>

000d74fc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d74fc:	b510      	push	{r4, lr}
   d74fe:	4b05      	ldr	r3, [pc, #20]	; (d7514 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d7500:	6003      	str	r3, [r0, #0]
   d7502:	4604      	mov	r4, r0
{
    _spi = spi;
   d7504:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d7506:	4608      	mov	r0, r1
   d7508:	f7fd ff8a 	bl	d5420 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d750c:	2300      	movs	r3, #0
   d750e:	60a3      	str	r3, [r4, #8]
}
   d7510:	4620      	mov	r0, r4
   d7512:	bd10      	pop	{r4, pc}
   d7514:	000d94a8 	.word	0x000d94a8

000d7518 <_ZN8SPIClass9isEnabledEv>:
{
    // TODO: Implement
}

bool SPIClass::isEnabled()
{
   d7518:	b538      	push	{r3, r4, r5, lr}
   d751a:	4604      	mov	r4, r0
    bool result = false;

    if (!lock())
   d751c:	7900      	ldrb	r0, [r0, #4]
   d751e:	f7ff ffe7 	bl	d74f0 <_ZN8SPIClass4lockEv.isra.0>
   d7522:	b938      	cbnz	r0, d7534 <_ZN8SPIClass9isEnabledEv+0x1c>
    {
        result = HAL_SPI_Is_Enabled(_spi);
   d7524:	7920      	ldrb	r0, [r4, #4]
   d7526:	f7fd ff83 	bl	d5430 <HAL_SPI_Is_Enabled>
   d752a:	4605      	mov	r5, r0
        unlock();
   d752c:	7920      	ldrb	r0, [r4, #4]
   d752e:	f7ff ffe2 	bl	d74f6 <_ZN8SPIClass6unlockEv.isra.1>
   d7532:	e000      	b.n	d7536 <_ZN8SPIClass9isEnabledEv+0x1e>
    // TODO: Implement
}

bool SPIClass::isEnabled()
{
    bool result = false;
   d7534:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Is_Enabled(_spi);
        unlock();
    }
    return result;
}
   d7536:	4628      	mov	r0, r5
   d7538:	bd38      	pop	{r3, r4, r5, pc}
	...

000d753c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d753c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7540:	ec59 8b10 	vmov	r8, r9, d0
   d7544:	4607      	mov	r7, r0
   d7546:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d7548:	2200      	movs	r2, #0
   d754a:	2300      	movs	r3, #0
   d754c:	ee10 0a10 	vmov	r0, s0
   d7550:	4649      	mov	r1, r9
   d7552:	f001 f9ef 	bl	d8934 <__aeabi_dcmplt>
   d7556:	b128      	cbz	r0, d7564 <_Z4dtoadhPc+0x28>
        val = -val;
   d7558:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d755c:	4699      	mov	r9, r3
        *sout++ = '-';
   d755e:	232d      	movs	r3, #45	; 0x2d
   d7560:	7033      	strb	r3, [r6, #0]
   d7562:	3601      	adds	r6, #1
   d7564:	2300      	movs	r3, #0
    }
    long scale = 1;
   d7566:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d7568:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d756a:	b2d9      	uxtb	r1, r3
   d756c:	428f      	cmp	r7, r1
   d756e:	d902      	bls.n	d7576 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d7570:	4354      	muls	r4, r2
   d7572:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d7574:	e7f9      	b.n	d756a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d7576:	4620      	mov	r0, r4
   d7578:	f000 ff04 	bl	d8384 <__aeabi_i2d>
   d757c:	4642      	mov	r2, r8
   d757e:	464b      	mov	r3, r9
   d7580:	f000 ff66 	bl	d8450 <__aeabi_dmul>
   d7584:	4682      	mov	sl, r0
   d7586:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d7588:	f001 fa84 	bl	d8a94 <__aeabi_d2ulz>
   d758c:	4680      	mov	r8, r0
   d758e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7590:	f000 ff28 	bl	d83e4 <__aeabi_ul2d>
   d7594:	4602      	mov	r2, r0
   d7596:	460b      	mov	r3, r1
   d7598:	4650      	mov	r0, sl
   d759a:	4659      	mov	r1, fp
   d759c:	f000 fda4 	bl	d80e8 <__aeabi_dsub>
   d75a0:	2200      	movs	r2, #0
   d75a2:	4b17      	ldr	r3, [pc, #92]	; (d7600 <_Z4dtoadhPc+0xc4>)
   d75a4:	f001 f9da 	bl	d895c <__aeabi_dcmpge>
   d75a8:	b118      	cbz	r0, d75b2 <_Z4dtoadhPc+0x76>
        fixed++;
   d75aa:	f118 0801 	adds.w	r8, r8, #1
   d75ae:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d75b2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d75b4:	4622      	mov	r2, r4
   d75b6:	462b      	mov	r3, r5
   d75b8:	4640      	mov	r0, r8
   d75ba:	4649      	mov	r1, r9
   d75bc:	f001 fa52 	bl	d8a64 <__aeabi_uldivmod>
   d75c0:	2301      	movs	r3, #1
   d75c2:	220a      	movs	r2, #10
   d75c4:	4631      	mov	r1, r6
   d75c6:	f000 fae0 	bl	d7b8a <ultoa>
    if (prec) {
   d75ca:	b1af      	cbz	r7, d75f8 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d75cc:	4630      	mov	r0, r6
   d75ce:	f001 fc9e 	bl	d8f0e <strlen>
        *sout++ = '.';
   d75d2:	232e      	movs	r3, #46	; 0x2e
   d75d4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d75d6:	3001      	adds	r0, #1
   d75d8:	4406      	add	r6, r0
   d75da:	4622      	mov	r2, r4
   d75dc:	462b      	mov	r3, r5
   d75de:	4640      	mov	r0, r8
   d75e0:	4649      	mov	r1, r9
   d75e2:	f001 fa3f 	bl	d8a64 <__aeabi_uldivmod>
   d75e6:	463b      	mov	r3, r7
   d75e8:	4610      	mov	r0, r2
   d75ea:	4631      	mov	r1, r6
   d75ec:	220a      	movs	r2, #10
    }
}
   d75ee:	b001      	add	sp, #4
   d75f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d75f4:	f000 bac9 	b.w	d7b8a <ultoa>
    }
}
   d75f8:	b001      	add	sp, #4
   d75fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75fe:	bf00      	nop
   d7600:	3fe00000 	.word	0x3fe00000

000d7604 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7604:	b510      	push	{r4, lr}
   d7606:	4604      	mov	r4, r0
{
	free(buffer);
   d7608:	6800      	ldr	r0, [r0, #0]
   d760a:	f7fe f891 	bl	d5730 <free>
}
   d760e:	4620      	mov	r0, r4
   d7610:	bd10      	pop	{r4, pc}

000d7612 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7612:	b510      	push	{r4, lr}
   d7614:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7616:	6800      	ldr	r0, [r0, #0]
   d7618:	b108      	cbz	r0, d761e <_ZN6String10invalidateEv+0xc>
   d761a:	f7fe f889 	bl	d5730 <free>
	buffer = NULL;
   d761e:	2300      	movs	r3, #0
   d7620:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7622:	60a3      	str	r3, [r4, #8]
   d7624:	6063      	str	r3, [r4, #4]
   d7626:	bd10      	pop	{r4, pc}

000d7628 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7628:	b538      	push	{r3, r4, r5, lr}
   d762a:	4604      	mov	r4, r0
   d762c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d762e:	6800      	ldr	r0, [r0, #0]
   d7630:	3101      	adds	r1, #1
   d7632:	f7fe f885 	bl	d5740 <realloc>
	if (newbuffer) {
   d7636:	b110      	cbz	r0, d763e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7638:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d763c:	2001      	movs	r0, #1
	}
	return 0;
}
   d763e:	bd38      	pop	{r3, r4, r5, pc}

000d7640 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7640:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7642:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7644:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7646:	b113      	cbz	r3, d764e <_ZN6String7reserveEj+0xe>
   d7648:	6843      	ldr	r3, [r0, #4]
   d764a:	428b      	cmp	r3, r1
   d764c:	d207      	bcs.n	d765e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d764e:	4620      	mov	r0, r4
   d7650:	f7ff ffea 	bl	d7628 <_ZN6String12changeBufferEj>
   d7654:	b120      	cbz	r0, d7660 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7656:	68a3      	ldr	r3, [r4, #8]
   d7658:	b90b      	cbnz	r3, d765e <_ZN6String7reserveEj+0x1e>
   d765a:	6822      	ldr	r2, [r4, #0]
   d765c:	7013      	strb	r3, [r2, #0]
   d765e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7660:	bd10      	pop	{r4, pc}

000d7662 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7662:	b570      	push	{r4, r5, r6, lr}
   d7664:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7666:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7668:	4604      	mov	r4, r0
   d766a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d766c:	f7ff ffe8 	bl	d7640 <_ZN6String7reserveEj>
   d7670:	b918      	cbnz	r0, d767a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7672:	4620      	mov	r0, r4
   d7674:	f7ff ffcd 	bl	d7612 <_ZN6String10invalidateEv>
		return *this;
   d7678:	e009      	b.n	d768e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d767a:	462a      	mov	r2, r5
   d767c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d767e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7680:	6820      	ldr	r0, [r4, #0]
   d7682:	f001 fbc4 	bl	d8e0e <memcpy>
	buffer[len] = 0;
   d7686:	6822      	ldr	r2, [r4, #0]
   d7688:	68a3      	ldr	r3, [r4, #8]
   d768a:	2100      	movs	r1, #0
   d768c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d768e:	4620      	mov	r0, r4
   d7690:	bd70      	pop	{r4, r5, r6, pc}

000d7692 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7692:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7694:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7696:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7698:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d769a:	6043      	str	r3, [r0, #4]
	len = 0;
   d769c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d769e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d76a0:	460d      	mov	r5, r1
   d76a2:	b139      	cbz	r1, d76b4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d76a4:	4608      	mov	r0, r1
   d76a6:	f001 fc32 	bl	d8f0e <strlen>
   d76aa:	4629      	mov	r1, r5
   d76ac:	4602      	mov	r2, r0
   d76ae:	4620      	mov	r0, r4
   d76b0:	f7ff ffd7 	bl	d7662 <_ZN6String4copyEPKcj>
}
   d76b4:	4620      	mov	r0, r4
   d76b6:	bd38      	pop	{r3, r4, r5, pc}

000d76b8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d76b8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d76ba:	b510      	push	{r4, lr}
   d76bc:	460b      	mov	r3, r1
   d76be:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d76c0:	d007      	beq.n	d76d2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d76c2:	6809      	ldr	r1, [r1, #0]
   d76c4:	b119      	cbz	r1, d76ce <_ZN6StringaSERKS_+0x16>
   d76c6:	689a      	ldr	r2, [r3, #8]
   d76c8:	f7ff ffcb 	bl	d7662 <_ZN6String4copyEPKcj>
   d76cc:	e001      	b.n	d76d2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d76ce:	f7ff ffa0 	bl	d7612 <_ZN6String10invalidateEv>

	return *this;
}
   d76d2:	4620      	mov	r0, r4
   d76d4:	bd10      	pop	{r4, pc}

000d76d6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d76d6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d76d8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d76da:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d76dc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d76de:	6043      	str	r3, [r0, #4]
	len = 0;
   d76e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d76e2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d76e4:	f7ff ffe8 	bl	d76b8 <_ZN6StringaSERKS_>
}
   d76e8:	4620      	mov	r0, r4
   d76ea:	bd10      	pop	{r4, pc}

000d76ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d76ec:	b538      	push	{r3, r4, r5, lr}
   d76ee:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d76f0:	460c      	mov	r4, r1
   d76f2:	b141      	cbz	r1, d7706 <_ZN6StringaSEPKc+0x1a>
   d76f4:	4608      	mov	r0, r1
   d76f6:	f001 fc0a 	bl	d8f0e <strlen>
   d76fa:	4621      	mov	r1, r4
   d76fc:	4602      	mov	r2, r0
   d76fe:	4628      	mov	r0, r5
   d7700:	f7ff ffaf 	bl	d7662 <_ZN6String4copyEPKcj>
   d7704:	e001      	b.n	d770a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7706:	f7ff ff84 	bl	d7612 <_ZN6String10invalidateEv>

	return *this;
}
   d770a:	4628      	mov	r0, r5
   d770c:	bd38      	pop	{r3, r4, r5, pc}

000d770e <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d770e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7710:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d7712:	b08a      	sub	sp, #40	; 0x28
   d7714:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7716:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7718:	6043      	str	r3, [r0, #4]
	len = 0;
   d771a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d771c:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d771e:	b2c8      	uxtb	r0, r1
   d7720:	a901      	add	r1, sp, #4
   d7722:	f7ff ff0b 	bl	d753c <_Z4dtoadhPc>
        *this = buf;
   d7726:	a901      	add	r1, sp, #4
   d7728:	4620      	mov	r0, r4
   d772a:	f7ff ffdf 	bl	d76ec <_ZN6StringaSEPKc>
}
   d772e:	4620      	mov	r0, r4
   d7730:	b00a      	add	sp, #40	; 0x28
   d7732:	bd10      	pop	{r4, pc}

000d7734 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7734:	b510      	push	{r4, lr}
   d7736:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7738:	6800      	ldr	r0, [r0, #0]
   d773a:	b118      	cbz	r0, d7744 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d773c:	f7fd fff8 	bl	d5730 <free>
            wakeupSource_ = nullptr;
   d7740:	2300      	movs	r3, #0
   d7742:	6023      	str	r3, [r4, #0]
   d7744:	bd10      	pop	{r4, pc}

000d7746 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7746:	b510      	push	{r4, lr}
   d7748:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d774a:	f7ff fff3 	bl	d7734 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d774e:	4620      	mov	r0, r4
   d7750:	bd10      	pop	{r4, pc}

000d7752 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7752:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7754:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7758:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d775a:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d775c:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d775e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7762:	f8c0 2006 	str.w	r2, [r0, #6]
   d7766:	889b      	ldrh	r3, [r3, #4]
   d7768:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d776a:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d776c:	f7ff ffe2 	bl	d7734 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7770:	682b      	ldr	r3, [r5, #0]
   d7772:	b113      	cbz	r3, d777a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7774:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7776:	2300      	movs	r3, #0
   d7778:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d777a:	4620      	mov	r0, r4
   d777c:	bd38      	pop	{r3, r4, r5, pc}

000d777e <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d777e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7782:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7784:	b90b      	cbnz	r3, d778a <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7786:	680a      	ldr	r2, [r1, #0]
   d7788:	b19a      	cbz	r2, d77b2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d778a:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d778c:	b15c      	cbz	r4, d77a6 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d778e:	88a2      	ldrh	r2, [r4, #4]
   d7790:	2a01      	cmp	r2, #1
   d7792:	d003      	beq.n	d779c <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d7794:	2a04      	cmp	r2, #4
   d7796:	d106      	bne.n	d77a6 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7798:	2202      	movs	r2, #2
   d779a:	e005      	b.n	d77a8 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d779c:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d779e:	814c      	strh	r4, [r1, #10]
   d77a0:	718a      	strb	r2, [r1, #6]
   d77a2:	810b      	strh	r3, [r1, #8]
                    break;
   d77a4:	e005      	b.n	d77b2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d77a6:	2204      	movs	r2, #4
   d77a8:	810b      	strh	r3, [r1, #8]
   d77aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d77ae:	718a      	strb	r2, [r1, #6]
   d77b0:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d77b2:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d77b6:	6003      	str	r3, [r0, #0]
   d77b8:	888b      	ldrh	r3, [r1, #4]
   d77ba:	8083      	strh	r3, [r0, #4]
    }
   d77bc:	bd10      	pop	{r4, pc}

000d77be <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d77be:	b510      	push	{r4, lr}
   d77c0:	2400      	movs	r4, #0
   d77c2:	7004      	strb	r4, [r0, #0]
   d77c4:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d77c6:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d77c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d77cc:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d77ce:	dd07      	ble.n	d77e0 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d77d0:	3901      	subs	r1, #1
   d77d2:	4299      	cmp	r1, r3
   d77d4:	d209      	bcs.n	d77ea <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d77d6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d77da:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d77dc:	2301      	movs	r3, #1
   d77de:	e001      	b.n	d77e4 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d77e0:	d102      	bne.n	d77e8 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d77e2:	2302      	movs	r3, #2
   d77e4:	7003      	strb	r3, [r0, #0]
   d77e6:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d77e8:	8041      	strh	r1, [r0, #2]
    }
}
   d77ea:	bd10      	pop	{r4, pc}

000d77ec <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d77ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d77ee:	b08b      	sub	sp, #44	; 0x2c
   d77f0:	4617      	mov	r7, r2
   d77f2:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d77f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d77f6:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d77f8:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d77fa:	2400      	movs	r4, #0
   d77fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d77fe:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7800:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7802:	9300      	str	r3, [sp, #0]
   d7804:	4639      	mov	r1, r7
   d7806:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7808:	4630      	mov	r0, r6
   d780a:	f7fd feff 	bl	d560c <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d780e:	463b      	mov	r3, r7
   d7810:	4632      	mov	r2, r6
   d7812:	4601      	mov	r1, r0
   d7814:	a805      	add	r0, sp, #20
   d7816:	f7ff ffd2 	bl	d77be <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d781a:	9407      	str	r4, [sp, #28]
   d781c:	f8ad 4020 	strh.w	r4, [sp, #32]
   d7820:	4c0d      	ldr	r4, [pc, #52]	; (d7858 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d7822:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d7826:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d782a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d782e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d7832:	4620      	mov	r0, r4
   d7834:	a907      	add	r1, sp, #28
   d7836:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d783a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d783e:	f7ff ff88 	bl	d7752 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7842:	a807      	add	r0, sp, #28
   d7844:	f7ff ff76 	bl	d7734 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d7848:	4628      	mov	r0, r5
   d784a:	4621      	mov	r1, r4
   d784c:	f7ff ff97 	bl	d777e <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d7850:	4628      	mov	r0, r5
   d7852:	b00b      	add	sp, #44	; 0x2c
   d7854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7856:	bf00      	nop
   d7858:	2003e6c4 	.word	0x2003e6c4

000d785c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d785c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d785e:	4c09      	ldr	r4, [pc, #36]	; (d7884 <_GLOBAL__sub_I_System+0x28>)
   d7860:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7862:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7866:	6020      	str	r0, [r4, #0]
   d7868:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d786a:	71a0      	strb	r0, [r4, #6]
   d786c:	8120      	strh	r0, [r4, #8]
   d786e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7870:	f7fd fe7e 	bl	d5570 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7874:	4620      	mov	r0, r4
   d7876:	4a04      	ldr	r2, [pc, #16]	; (d7888 <_GLOBAL__sub_I_System+0x2c>)
   d7878:	4904      	ldr	r1, [pc, #16]	; (d788c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d787e:	f000 badd 	b.w	d7e3c <__aeabi_atexit>
   d7882:	bf00      	nop
   d7884:	2003e6c4 	.word	0x2003e6c4
   d7888:	2003e438 	.word	0x2003e438
   d788c:	000d7747 	.word	0x000d7747

000d7890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7890:	4b02      	ldr	r3, [pc, #8]	; (d789c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7892:	681a      	ldr	r2, [r3, #0]
   d7894:	4b02      	ldr	r3, [pc, #8]	; (d78a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7896:	601a      	str	r2, [r3, #0]
   d7898:	4770      	bx	lr
   d789a:	bf00      	nop
   d789c:	2003e3cc 	.word	0x2003e3cc
   d78a0:	2003e6d0 	.word	0x2003e6d0

000d78a4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d78a4:	4770      	bx	lr

000d78a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78a6:	7441      	strb	r1, [r0, #17]
   d78a8:	4770      	bx	lr

000d78aa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d78aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d78ac:	7c00      	ldrb	r0, [r0, #16]
   d78ae:	f7fd fe0f 	bl	d54d0 <HAL_USART_Available_Data_For_Write>
}
   d78b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78b6:	bd08      	pop	{r3, pc}

000d78b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d78b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d78ba:	7c00      	ldrb	r0, [r0, #16]
   d78bc:	f7fd fde0 	bl	d5480 <HAL_USART_Available_Data>
}
   d78c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78c4:	bd08      	pop	{r3, pc}

000d78c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d78c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d78c8:	7c00      	ldrb	r0, [r0, #16]
   d78ca:	f7fd fde9 	bl	d54a0 <HAL_USART_Peek_Data>
}
   d78ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78d2:	bf28      	it	cs
   d78d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78d8:	bd08      	pop	{r3, pc}

000d78da <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d78da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d78dc:	7c00      	ldrb	r0, [r0, #16]
   d78de:	f7fd fdd7 	bl	d5490 <HAL_USART_Read_Data>
}
   d78e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78e6:	bf28      	it	cs
   d78e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d78ec:	bd08      	pop	{r3, pc}

000d78ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d78ee:	7c00      	ldrb	r0, [r0, #16]
   d78f0:	f7fd bdde 	b.w	d54b0 <HAL_USART_Flush_Data>

000d78f4 <_ZN11USARTSerialD0Ev>:
   d78f4:	b510      	push	{r4, lr}
   d78f6:	2114      	movs	r1, #20
   d78f8:	4604      	mov	r4, r0
   d78fa:	f000 faa4 	bl	d7e46 <_ZdlPvj>
   d78fe:	4620      	mov	r0, r4
   d7900:	bd10      	pop	{r4, pc}

000d7902 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7902:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7904:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7906:	4604      	mov	r4, r0
   d7908:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d790a:	b925      	cbnz	r5, d7916 <_ZN11USARTSerial5writeEh+0x14>
   d790c:	7c00      	ldrb	r0, [r0, #16]
   d790e:	f7fd fddf 	bl	d54d0 <HAL_USART_Available_Data_For_Write>
   d7912:	2800      	cmp	r0, #0
   d7914:	dd05      	ble.n	d7922 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7916:	4631      	mov	r1, r6
   d7918:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d791a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d791e:	f7fd bda7 	b.w	d5470 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7922:	4628      	mov	r0, r5
   d7924:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7928 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7928:	b510      	push	{r4, lr}
   d792a:	4604      	mov	r4, r0
   d792c:	4608      	mov	r0, r1
   d792e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7930:	2200      	movs	r2, #0
   d7932:	6062      	str	r2, [r4, #4]
   d7934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7938:	60a2      	str	r2, [r4, #8]
   d793a:	4a05      	ldr	r2, [pc, #20]	; (d7950 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d793c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d793e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7940:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7942:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7944:	461a      	mov	r2, r3
   d7946:	f7fd fd8b 	bl	d5460 <HAL_USART_Init>
}
   d794a:	4620      	mov	r0, r4
   d794c:	bd10      	pop	{r4, pc}
   d794e:	bf00      	nop
   d7950:	000d94e4 	.word	0x000d94e4

000d7954 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7954:	7c00      	ldrb	r0, [r0, #16]
   d7956:	f7fd bdb3 	b.w	d54c0 <HAL_USART_Is_Enabled>
	...

000d795c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d795e:	4c19      	ldr	r4, [pc, #100]	; (d79c4 <_Z22__fetch_global_Serial1v+0x68>)
   d7960:	6825      	ldr	r5, [r4, #0]
   d7962:	b94d      	cbnz	r5, d7978 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d7964:	2084      	movs	r0, #132	; 0x84
   d7966:	f7fc fb98 	bl	d409a <_Znwj>
   d796a:	4606      	mov	r6, r0
   d796c:	b118      	cbz	r0, d7976 <_Z22__fetch_global_Serial1v+0x1a>
   d796e:	2284      	movs	r2, #132	; 0x84
   d7970:	4629      	mov	r1, r5
   d7972:	f001 fa72 	bl	d8e5a <memset>
   d7976:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d7978:	4d13      	ldr	r5, [pc, #76]	; (d79c8 <_Z22__fetch_global_Serial1v+0x6c>)
   d797a:	682e      	ldr	r6, [r5, #0]
   d797c:	b94e      	cbnz	r6, d7992 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d797e:	2084      	movs	r0, #132	; 0x84
   d7980:	f7fc fb8b 	bl	d409a <_Znwj>
   d7984:	4607      	mov	r7, r0
   d7986:	b118      	cbz	r0, d7990 <_Z22__fetch_global_Serial1v+0x34>
   d7988:	2284      	movs	r2, #132	; 0x84
   d798a:	4631      	mov	r1, r6
   d798c:	f001 fa65 	bl	d8e5a <memset>
   d7990:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7992:	4f0e      	ldr	r7, [pc, #56]	; (d79cc <_Z22__fetch_global_Serial1v+0x70>)
   d7994:	6839      	ldr	r1, [r7, #0]
   d7996:	f011 0601 	ands.w	r6, r1, #1
   d799a:	d111      	bne.n	d79c0 <_Z22__fetch_global_Serial1v+0x64>
   d799c:	4638      	mov	r0, r7
   d799e:	f7fc fb82 	bl	d40a6 <__cxa_guard_acquire>
   d79a2:	b168      	cbz	r0, d79c0 <_Z22__fetch_global_Serial1v+0x64>
   d79a4:	6822      	ldr	r2, [r4, #0]
   d79a6:	682b      	ldr	r3, [r5, #0]
   d79a8:	4809      	ldr	r0, [pc, #36]	; (d79d0 <_Z22__fetch_global_Serial1v+0x74>)
   d79aa:	4631      	mov	r1, r6
   d79ac:	f7ff ffbc 	bl	d7928 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d79b0:	4638      	mov	r0, r7
   d79b2:	f7fc fb7d 	bl	d40b0 <__cxa_guard_release>
   d79b6:	4a07      	ldr	r2, [pc, #28]	; (d79d4 <_Z22__fetch_global_Serial1v+0x78>)
   d79b8:	4907      	ldr	r1, [pc, #28]	; (d79d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d79ba:	4805      	ldr	r0, [pc, #20]	; (d79d0 <_Z22__fetch_global_Serial1v+0x74>)
   d79bc:	f000 fa3e 	bl	d7e3c <__aeabi_atexit>
#endif
	return serial1;
}
   d79c0:	4803      	ldr	r0, [pc, #12]	; (d79d0 <_Z22__fetch_global_Serial1v+0x74>)
   d79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d79c4:	2003e6f0 	.word	0x2003e6f0
   d79c8:	2003e6e8 	.word	0x2003e6e8
   d79cc:	2003e6ec 	.word	0x2003e6ec
   d79d0:	2003e6d4 	.word	0x2003e6d4
   d79d4:	2003e438 	.word	0x2003e438
   d79d8:	000d78a5 	.word	0x000d78a5

000d79dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d79dc:	7441      	strb	r1, [r0, #17]
   d79de:	4770      	bx	lr

000d79e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d79e0:	4770      	bx	lr

000d79e2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d79e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d79e4:	2100      	movs	r1, #0
   d79e6:	7c00      	ldrb	r0, [r0, #16]
   d79e8:	f7fd fd9a 	bl	d5520 <HAL_USB_USART_Receive_Data>
}
   d79ec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79f0:	bf28      	it	cs
   d79f2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d79f6:	bd08      	pop	{r3, pc}

000d79f8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d79f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d79fa:	2101      	movs	r1, #1
   d79fc:	7c00      	ldrb	r0, [r0, #16]
   d79fe:	f7fd fd8f 	bl	d5520 <HAL_USB_USART_Receive_Data>
}
   d7a02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a06:	bf28      	it	cs
   d7a08:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7a0c:	bd08      	pop	{r3, pc}

000d7a0e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7a0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7a10:	7c00      	ldrb	r0, [r0, #16]
   d7a12:	f7fd fd7d 	bl	d5510 <HAL_USB_USART_Available_Data_For_Write>
}
   d7a16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a1a:	bd08      	pop	{r3, pc}

000d7a1c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7a1c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7a1e:	7c00      	ldrb	r0, [r0, #16]
   d7a20:	f7fd fd6e 	bl	d5500 <HAL_USB_USART_Available_Data>
}
   d7a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a28:	bd08      	pop	{r3, pc}

000d7a2a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a2a:	7c00      	ldrb	r0, [r0, #16]
   d7a2c:	f7fd bd88 	b.w	d5540 <HAL_USB_USART_Flush_Data>

000d7a30 <_ZN9USBSerialD0Ev>:
   d7a30:	b510      	push	{r4, lr}
   d7a32:	2114      	movs	r1, #20
   d7a34:	4604      	mov	r4, r0
   d7a36:	f000 fa06 	bl	d7e46 <_ZdlPvj>
   d7a3a:	4620      	mov	r0, r4
   d7a3c:	bd10      	pop	{r4, pc}

000d7a3e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a3e:	b538      	push	{r3, r4, r5, lr}
   d7a40:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a42:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a44:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a46:	f7fd fd63 	bl	d5510 <HAL_USB_USART_Available_Data_For_Write>
   d7a4a:	2800      	cmp	r0, #0
   d7a4c:	dc01      	bgt.n	d7a52 <_ZN9USBSerial5writeEh+0x14>
   d7a4e:	7c60      	ldrb	r0, [r4, #17]
   d7a50:	b128      	cbz	r0, d7a5e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7a52:	4629      	mov	r1, r5
   d7a54:	7c20      	ldrb	r0, [r4, #16]
   d7a56:	f7fd fd6b 	bl	d5530 <HAL_USB_USART_Send_Data>
   d7a5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7a5e:	bd38      	pop	{r3, r4, r5, pc}

000d7a60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a60:	b510      	push	{r4, lr}
   d7a62:	4604      	mov	r4, r0
   d7a64:	2300      	movs	r3, #0
   d7a66:	6063      	str	r3, [r4, #4]
   d7a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a6c:	60a3      	str	r3, [r4, #8]
   d7a6e:	4b05      	ldr	r3, [pc, #20]	; (d7a84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a70:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7a72:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a74:	4608      	mov	r0, r1
{
  _serial = serial;
   d7a76:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7a78:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7a7a:	4611      	mov	r1, r2
   d7a7c:	f7fd fd30 	bl	d54e0 <HAL_USB_USART_Init>
}
   d7a80:	4620      	mov	r0, r4
   d7a82:	bd10      	pop	{r4, pc}
   d7a84:	000d9514 	.word	0x000d9514

000d7a88 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a88:	2200      	movs	r2, #0
   d7a8a:	7c00      	ldrb	r0, [r0, #16]
   d7a8c:	f7fd bd30 	b.w	d54f0 <HAL_USB_USART_Begin>

000d7a90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a92:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a96:	2100      	movs	r1, #0
   d7a98:	f001 f9df 	bl	d8e5a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a9c:	4620      	mov	r0, r4
   d7a9e:	bd10      	pop	{r4, pc}

000d7aa0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7aa0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7aa2:	4d0e      	ldr	r5, [pc, #56]	; (d7adc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7aa4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7aa6:	a801      	add	r0, sp, #4
   d7aa8:	f7ff fff2 	bl	d7a90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7aac:	6829      	ldr	r1, [r5, #0]
   d7aae:	f011 0401 	ands.w	r4, r1, #1
   d7ab2:	d110      	bne.n	d7ad6 <_Z16_fetch_usbserialv+0x36>
   d7ab4:	4628      	mov	r0, r5
   d7ab6:	f7fc faf6 	bl	d40a6 <__cxa_guard_acquire>
   d7aba:	b160      	cbz	r0, d7ad6 <_Z16_fetch_usbserialv+0x36>
   d7abc:	aa01      	add	r2, sp, #4
   d7abe:	4621      	mov	r1, r4
   d7ac0:	4807      	ldr	r0, [pc, #28]	; (d7ae0 <_Z16_fetch_usbserialv+0x40>)
   d7ac2:	f7ff ffcd 	bl	d7a60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ac6:	4628      	mov	r0, r5
   d7ac8:	f7fc faf2 	bl	d40b0 <__cxa_guard_release>
   d7acc:	4a05      	ldr	r2, [pc, #20]	; (d7ae4 <_Z16_fetch_usbserialv+0x44>)
   d7ace:	4906      	ldr	r1, [pc, #24]	; (d7ae8 <_Z16_fetch_usbserialv+0x48>)
   d7ad0:	4803      	ldr	r0, [pc, #12]	; (d7ae0 <_Z16_fetch_usbserialv+0x40>)
   d7ad2:	f000 f9b3 	bl	d7e3c <__aeabi_atexit>
	return _usbserial;
}
   d7ad6:	4802      	ldr	r0, [pc, #8]	; (d7ae0 <_Z16_fetch_usbserialv+0x40>)
   d7ad8:	b007      	add	sp, #28
   d7ada:	bd30      	pop	{r4, r5, pc}
   d7adc:	2003e6f4 	.word	0x2003e6f4
   d7ae0:	2003e6f8 	.word	0x2003e6f8
   d7ae4:	2003e438 	.word	0x2003e438
   d7ae8:	000d79e1 	.word	0x000d79e1

000d7aec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7aec:	2200      	movs	r2, #0
   d7aee:	4611      	mov	r1, r2
   d7af0:	6840      	ldr	r0, [r0, #4]
   d7af2:	f7fd bddd 	b.w	d56b0 <network_ready>

000d7af6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7af6:	2200      	movs	r2, #0
   d7af8:	4611      	mov	r1, r2
   d7afa:	6840      	ldr	r0, [r0, #4]
   d7afc:	f7fd bdf8 	b.w	d56f0 <network_listening>

000d7b00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7b00:	2200      	movs	r2, #0
   d7b02:	4611      	mov	r1, r2
   d7b04:	6840      	ldr	r0, [r0, #4]
   d7b06:	f7fd be03 	b.w	d5710 <network_get_listen_timeout>

000d7b0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7b0a:	2200      	movs	r2, #0
   d7b0c:	6840      	ldr	r0, [r0, #4]
   d7b0e:	f7fd bdf7 	b.w	d5700 <network_set_listen_timeout>

000d7b12 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7b12:	2200      	movs	r2, #0
   d7b14:	f081 0101 	eor.w	r1, r1, #1
   d7b18:	6840      	ldr	r0, [r0, #4]
   d7b1a:	f7fd bde1 	b.w	d56e0 <network_listen>

000d7b1e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7b1e:	2300      	movs	r3, #0
   d7b20:	461a      	mov	r2, r3
   d7b22:	4619      	mov	r1, r3
   d7b24:	6840      	ldr	r0, [r0, #4]
   d7b26:	f7fd bdd3 	b.w	d56d0 <network_off>

000d7b2a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7b2a:	2300      	movs	r3, #0
   d7b2c:	461a      	mov	r2, r3
   d7b2e:	4619      	mov	r1, r3
   d7b30:	6840      	ldr	r0, [r0, #4]
   d7b32:	f7fd bdc5 	b.w	d56c0 <network_on>

000d7b36 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7b36:	2200      	movs	r2, #0
   d7b38:	4611      	mov	r1, r2
   d7b3a:	6840      	ldr	r0, [r0, #4]
   d7b3c:	f7fd bda8 	b.w	d5690 <network_connecting>

000d7b40 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7b40:	2200      	movs	r2, #0
   d7b42:	2102      	movs	r1, #2
   d7b44:	6840      	ldr	r0, [r0, #4]
   d7b46:	f7fd bdab 	b.w	d56a0 <network_disconnect>

000d7b4a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7b4a:	2300      	movs	r3, #0
   d7b4c:	461a      	mov	r2, r3
   d7b4e:	6840      	ldr	r0, [r0, #4]
   d7b50:	f7fd bd96 	b.w	d5680 <network_connect>

000d7b54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7b54:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7b56:	2204      	movs	r2, #4
   d7b58:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7b5a:	4a02      	ldr	r2, [pc, #8]	; (d7b64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7b5c:	601a      	str	r2, [r3, #0]
   d7b5e:	4770      	bx	lr
   d7b60:	2003e70c 	.word	0x2003e70c
   d7b64:	000d9544 	.word	0x000d9544

000d7b68 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7b68:	b510      	push	{r4, lr}
   d7b6a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7b6c:	f001 f9cf 	bl	d8f0e <strlen>
   d7b70:	3801      	subs	r0, #1
   d7b72:	1823      	adds	r3, r4, r0
   d7b74:	4620      	mov	r0, r4
	while(i<j){
   d7b76:	4298      	cmp	r0, r3
   d7b78:	d206      	bcs.n	d7b88 <_Z11str_reversePc+0x20>
		c = *i;
   d7b7a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7b7c:	7819      	ldrb	r1, [r3, #0]
   d7b7e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7b82:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d7b86:	e7f6      	b.n	d7b76 <_Z11str_reversePc+0xe>
   d7b88:	bd10      	pop	{r4, pc}

000d7b8a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7b8a:	b570      	push	{r4, r5, r6, lr}
   d7b8c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7b8e:	1e91      	subs	r1, r2, #2
   d7b90:	2922      	cmp	r1, #34	; 0x22
   d7b92:	d820      	bhi.n	d7bd6 <ultoa+0x4c>
   d7b94:	4625      	mov	r5, r4
   d7b96:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7b98:	b910      	cbnz	r0, d7ba0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7b9a:	4423      	add	r3, r4
            *ptr++ = '0';
   d7b9c:	2230      	movs	r2, #48	; 0x30
   d7b9e:	e00e      	b.n	d7bbe <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7ba0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d7ba4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7ba8:	b2c1      	uxtb	r1, r0
   d7baa:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d7bae:	2809      	cmp	r0, #9
                *ptr += '0';
   d7bb0:	bf94      	ite	ls
   d7bb2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7bb4:	3157      	addhi	r1, #87	; 0x57
   d7bb6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d7bba:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7bbc:	e7eb      	b.n	d7b96 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7bbe:	4299      	cmp	r1, r3
   d7bc0:	d202      	bcs.n	d7bc8 <ultoa+0x3e>
            *ptr++ = '0';
   d7bc2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7bc6:	e7fa      	b.n	d7bbe <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d7bc8:	2300      	movs	r3, #0
	str_reverse(buffer);
   d7bca:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d7bcc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d7bce:	f7ff ffcb 	bl	d7b68 <_Z11str_reversePc>
	return buffer;
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d7bd6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d7bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7bdc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7bdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7bde:	4b0c      	ldr	r3, [pc, #48]	; (d7c10 <serialEventRun+0x34>)
   d7be0:	b133      	cbz	r3, d7bf0 <serialEventRun+0x14>
   d7be2:	f7ff ff5d 	bl	d7aa0 <_Z16_fetch_usbserialv>
   d7be6:	6803      	ldr	r3, [r0, #0]
   d7be8:	691b      	ldr	r3, [r3, #16]
   d7bea:	4798      	blx	r3
   d7bec:	2800      	cmp	r0, #0
   d7bee:	dc09      	bgt.n	d7c04 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7bf0:	4b08      	ldr	r3, [pc, #32]	; (d7c14 <serialEventRun+0x38>)
   d7bf2:	b163      	cbz	r3, d7c0e <serialEventRun+0x32>
   d7bf4:	f7ff feb2 	bl	d795c <_Z22__fetch_global_Serial1v>
   d7bf8:	6803      	ldr	r3, [r0, #0]
   d7bfa:	691b      	ldr	r3, [r3, #16]
   d7bfc:	4798      	blx	r3
   d7bfe:	2800      	cmp	r0, #0
   d7c00:	dc03      	bgt.n	d7c0a <serialEventRun+0x2e>
   d7c02:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7c04:	f3af 8000 	nop.w
   d7c08:	e7f2      	b.n	d7bf0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7c0a:	f3af 8000 	nop.w
   d7c0e:	bd08      	pop	{r3, pc}
	...

000d7c18 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7c18:	b508      	push	{r3, lr}
	serialEventRun();
   d7c1a:	f7ff ffdf 	bl	d7bdc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7c1e:	f7fd fb67 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7c22:	4b01      	ldr	r3, [pc, #4]	; (d7c28 <_post_loop+0x10>)
   d7c24:	6018      	str	r0, [r3, #0]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	2003e71c 	.word	0x2003e71c

000d7c2c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7c2c:	4802      	ldr	r0, [pc, #8]	; (d7c38 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7c2e:	4a03      	ldr	r2, [pc, #12]	; (d7c3c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7c30:	4903      	ldr	r1, [pc, #12]	; (d7c40 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7c32:	1a12      	subs	r2, r2, r0
   d7c34:	f001 b8eb 	b.w	d8e0e <memcpy>
   d7c38:	2003f400 	.word	0x2003f400
   d7c3c:	2003f404 	.word	0x2003f404
   d7c40:	000d9638 	.word	0x000d9638

000d7c44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7c44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7c46:	2300      	movs	r3, #0
   d7c48:	9300      	str	r3, [sp, #0]
   d7c4a:	461a      	mov	r2, r3
   d7c4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7c50:	f7fd fcd2 	bl	d55f8 <system_ctrl_set_result>
}
   d7c54:	b003      	add	sp, #12
   d7c56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7c5c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7c5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7c5e:	8843      	ldrh	r3, [r0, #2]
   d7c60:	2b0a      	cmp	r3, #10
   d7c62:	d008      	beq.n	d7c76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7c64:	2b50      	cmp	r3, #80	; 0x50
   d7c66:	d109      	bne.n	d7c7c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7c68:	4b09      	ldr	r3, [pc, #36]	; (d7c90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7c6a:	681b      	ldr	r3, [r3, #0]
   d7c6c:	b13b      	cbz	r3, d7c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7c6e:	b003      	add	sp, #12
   d7c70:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7c74:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7c76:	f7ff ffe5 	bl	d7c44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7c7a:	e006      	b.n	d7c8a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7c7c:	2300      	movs	r3, #0
   d7c7e:	9300      	str	r3, [sp, #0]
   d7c80:	461a      	mov	r2, r3
   d7c82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7c86:	f7fd fcb7 	bl	d55f8 <system_ctrl_set_result>
        break;
    }
}
   d7c8a:	b003      	add	sp, #12
   d7c8c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7c90:	2003e714 	.word	0x2003e714

000d7c94 <module_user_init_hook>:

void module_user_init_hook()
{
   d7c94:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7c96:	4c10      	ldr	r4, [pc, #64]	; (d7cd8 <module_user_init_hook+0x44>)
   d7c98:	4d10      	ldr	r5, [pc, #64]	; (d7cdc <module_user_init_hook+0x48>)
   d7c9a:	6823      	ldr	r3, [r4, #0]
   d7c9c:	42ab      	cmp	r3, r5
   d7c9e:	4b10      	ldr	r3, [pc, #64]	; (d7ce0 <module_user_init_hook+0x4c>)
   d7ca0:	bf0c      	ite	eq
   d7ca2:	2201      	moveq	r2, #1
   d7ca4:	2200      	movne	r2, #0
   d7ca6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ca8:	d002      	beq.n	d7cb0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7caa:	f7ff ffbf 	bl	d7c2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7cae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7cb0:	f7fd fb0e 	bl	d52d0 <HAL_RNG_GetRandomNumber>
   d7cb4:	4604      	mov	r4, r0
    srand(seed);
   d7cb6:	f001 f8e7 	bl	d8e88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7cba:	4b0a      	ldr	r3, [pc, #40]	; (d7ce4 <module_user_init_hook+0x50>)
   d7cbc:	b113      	cbz	r3, d7cc4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7cbe:	4620      	mov	r0, r4
   d7cc0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7cc4:	2100      	movs	r1, #0
   d7cc6:	4807      	ldr	r0, [pc, #28]	; (d7ce4 <module_user_init_hook+0x50>)
   d7cc8:	f7fd fcca 	bl	d5660 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7ccc:	2100      	movs	r1, #0
   d7cce:	4806      	ldr	r0, [pc, #24]	; (d7ce8 <module_user_init_hook+0x54>)
}
   d7cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7cd4:	f7fd bc86 	b.w	d55e4 <system_ctrl_set_app_request_handler>
   d7cd8:	2003f400 	.word	0x2003f400
   d7cdc:	9a271c1e 	.word	0x9a271c1e
   d7ce0:	2003e718 	.word	0x2003e718
   d7ce4:	00000000 	.word	0x00000000
   d7ce8:	000d7c5d 	.word	0x000d7c5d

000d7cec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7cec:	b510      	push	{r4, lr}
   d7cee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7cf0:	480f      	ldr	r0, [pc, #60]	; (d7d30 <pinAvailable+0x44>)
   d7cf2:	f7ff fc11 	bl	d7518 <_ZN8SPIClass9isEnabledEv>
   d7cf6:	b128      	cbz	r0, d7d04 <pinAvailable+0x18>
   d7cf8:	f1a4 030b 	sub.w	r3, r4, #11
   d7cfc:	2b02      	cmp	r3, #2
   d7cfe:	d801      	bhi.n	d7d04 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7d00:	2000      	movs	r0, #0
   d7d02:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7d04:	f000 f858 	bl	d7db8 <_Z19__fetch_global_Wirev>
   d7d08:	f7ff f96a 	bl	d6fe0 <_ZN7TwoWire9isEnabledEv>
   d7d0c:	b108      	cbz	r0, d7d12 <pinAvailable+0x26>
   d7d0e:	2c01      	cmp	r4, #1
   d7d10:	d9f6      	bls.n	d7d00 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7d12:	f7ff fe23 	bl	d795c <_Z22__fetch_global_Serial1v>
   d7d16:	f7ff fe1d 	bl	d7954 <_ZN11USARTSerial9isEnabledEv>
   d7d1a:	b118      	cbz	r0, d7d24 <pinAvailable+0x38>
   d7d1c:	f1a4 0309 	sub.w	r3, r4, #9
   d7d20:	2b01      	cmp	r3, #1
   d7d22:	d9ed      	bls.n	d7d00 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7d24:	2c23      	cmp	r4, #35	; 0x23
   d7d26:	bf8c      	ite	hi
   d7d28:	2000      	movhi	r0, #0
   d7d2a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7d2c:	bd10      	pop	{r4, pc}
   d7d2e:	bf00      	nop
   d7d30:	2003e73c 	.word	0x2003e73c

000d7d34 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7d34:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7d36:	b538      	push	{r3, r4, r5, lr}
   d7d38:	4604      	mov	r4, r0
   d7d3a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7d3c:	d80a      	bhi.n	d7d54 <pinMode+0x20>
   d7d3e:	29ff      	cmp	r1, #255	; 0xff
   d7d40:	d008      	beq.n	d7d54 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7d42:	f7ff ffd3 	bl	d7cec <pinAvailable>
   d7d46:	b128      	cbz	r0, d7d54 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7d48:	4629      	mov	r1, r5
   d7d4a:	4620      	mov	r0, r4
}
   d7d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7d50:	f7fd bae6 	b.w	d5320 <HAL_Pin_Mode>
   d7d54:	bd38      	pop	{r3, r4, r5, pc}

000d7d56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7d56:	b538      	push	{r3, r4, r5, lr}
   d7d58:	4604      	mov	r4, r0
   d7d5a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7d5c:	f7fd fae8 	bl	d5330 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7d60:	28ff      	cmp	r0, #255	; 0xff
   d7d62:	d010      	beq.n	d7d86 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7d64:	2806      	cmp	r0, #6
   d7d66:	d804      	bhi.n	d7d72 <digitalWrite+0x1c>
   d7d68:	234d      	movs	r3, #77	; 0x4d
   d7d6a:	fa23 f000 	lsr.w	r0, r3, r0
   d7d6e:	07c3      	lsls	r3, r0, #31
   d7d70:	d409      	bmi.n	d7d86 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7d72:	4620      	mov	r0, r4
   d7d74:	f7ff ffba 	bl	d7cec <pinAvailable>
   d7d78:	b128      	cbz	r0, d7d86 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7d7a:	4629      	mov	r1, r5
   d7d7c:	4620      	mov	r0, r4
}
   d7d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7d82:	f7fd badd 	b.w	d5340 <HAL_GPIO_Write>
   d7d86:	bd38      	pop	{r3, r4, r5, pc}

000d7d88 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7d88:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7d8a:	b510      	push	{r4, lr}
   d7d8c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7d8e:	bf9c      	itt	ls
   d7d90:	340e      	addls	r4, #14
   d7d92:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7d94:	4620      	mov	r0, r4
   d7d96:	f7ff ffa9 	bl	d7cec <pinAvailable>
   d7d9a:	b150      	cbz	r0, d7db2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7d9c:	2103      	movs	r1, #3
   d7d9e:	4620      	mov	r0, r4
   d7da0:	f7fd fab6 	bl	d5310 <HAL_Validate_Pin_Function>
   d7da4:	2803      	cmp	r0, #3
   d7da6:	d104      	bne.n	d7db2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7da8:	4620      	mov	r0, r4
}
   d7daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7dae:	f7fd badf 	b.w	d5370 <HAL_ADC_Read>
}
   d7db2:	2000      	movs	r0, #0
   d7db4:	bd10      	pop	{r4, pc}
	...

000d7db8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7db8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7dba:	4d0b      	ldr	r5, [pc, #44]	; (d7de8 <_Z19__fetch_global_Wirev+0x30>)
   d7dbc:	6829      	ldr	r1, [r5, #0]
   d7dbe:	f011 0401 	ands.w	r4, r1, #1
   d7dc2:	d10f      	bne.n	d7de4 <_Z19__fetch_global_Wirev+0x2c>
   d7dc4:	4628      	mov	r0, r5
   d7dc6:	f7fc f96e 	bl	d40a6 <__cxa_guard_acquire>
   d7dca:	b158      	cbz	r0, d7de4 <_Z19__fetch_global_Wirev+0x2c>
   d7dcc:	4621      	mov	r1, r4
   d7dce:	4807      	ldr	r0, [pc, #28]	; (d7dec <_Z19__fetch_global_Wirev+0x34>)
   d7dd0:	f7ff f8f4 	bl	d6fbc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7dd4:	4628      	mov	r0, r5
   d7dd6:	f7fc f96b 	bl	d40b0 <__cxa_guard_release>
   d7dda:	4a05      	ldr	r2, [pc, #20]	; (d7df0 <_Z19__fetch_global_Wirev+0x38>)
   d7ddc:	4905      	ldr	r1, [pc, #20]	; (d7df4 <_Z19__fetch_global_Wirev+0x3c>)
   d7dde:	4803      	ldr	r0, [pc, #12]	; (d7dec <_Z19__fetch_global_Wirev+0x34>)
   d7de0:	f000 f82c 	bl	d7e3c <__aeabi_atexit>
	return wire;
}
   d7de4:	4801      	ldr	r0, [pc, #4]	; (d7dec <_Z19__fetch_global_Wirev+0x34>)
   d7de6:	bd38      	pop	{r3, r4, r5, pc}
   d7de8:	2003e724 	.word	0x2003e724
   d7dec:	2003e728 	.word	0x2003e728
   d7df0:	2003e438 	.word	0x2003e438
   d7df4:	000d6f65 	.word	0x000d6f65

000d7df8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7df8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7dfa:	4c0c      	ldr	r4, [pc, #48]	; (d7e2c <_GLOBAL__sub_I_SPI+0x34>)
   d7dfc:	4e0c      	ldr	r6, [pc, #48]	; (d7e30 <_GLOBAL__sub_I_SPI+0x38>)
   d7dfe:	4d0d      	ldr	r5, [pc, #52]	; (d7e34 <_GLOBAL__sub_I_SPI+0x3c>)
   d7e00:	2100      	movs	r1, #0
   d7e02:	4620      	mov	r0, r4
   d7e04:	f7ff fb7a 	bl	d74fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e08:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e0a:	4c0b      	ldr	r4, [pc, #44]	; (d7e38 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e0c:	4632      	mov	r2, r6
   d7e0e:	4629      	mov	r1, r5
   d7e10:	f000 f814 	bl	d7e3c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e14:	2101      	movs	r1, #1
   d7e16:	4620      	mov	r0, r4
   d7e18:	f7ff fb70 	bl	d74fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e1c:	4632      	mov	r2, r6
   d7e1e:	4629      	mov	r1, r5
   d7e20:	4620      	mov	r0, r4
   d7e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e26:	f000 b809 	b.w	d7e3c <__aeabi_atexit>
   d7e2a:	bf00      	nop
   d7e2c:	2003e73c 	.word	0x2003e73c
   d7e30:	2003e438 	.word	0x2003e438
   d7e34:	000d74e1 	.word	0x000d74e1
   d7e38:	2003e748 	.word	0x2003e748

000d7e3c <__aeabi_atexit>:
   d7e3c:	460b      	mov	r3, r1
   d7e3e:	4601      	mov	r1, r0
   d7e40:	4618      	mov	r0, r3
   d7e42:	f000 bfc7 	b.w	d8dd4 <__cxa_atexit>

000d7e46 <_ZdlPvj>:
   d7e46:	f7fc b92a 	b.w	d409e <_ZdlPv>

000d7e4a <_ZSt25__throw_bad_function_callv>:
   d7e4a:	b508      	push	{r3, lr}
   d7e4c:	f7fd fc88 	bl	d5760 <abort>

000d7e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7e50:	4b24      	ldr	r3, [pc, #144]	; (d7ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7e52:	681a      	ldr	r2, [r3, #0]
   d7e54:	07d0      	lsls	r0, r2, #31
   d7e56:	bf5c      	itt	pl
   d7e58:	2201      	movpl	r2, #1
   d7e5a:	601a      	strpl	r2, [r3, #0]
   d7e5c:	4b22      	ldr	r3, [pc, #136]	; (d7ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7e5e:	681a      	ldr	r2, [r3, #0]
   d7e60:	07d1      	lsls	r1, r2, #31
   d7e62:	bf5c      	itt	pl
   d7e64:	2201      	movpl	r2, #1
   d7e66:	601a      	strpl	r2, [r3, #0]
   d7e68:	4b20      	ldr	r3, [pc, #128]	; (d7eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7e6a:	681a      	ldr	r2, [r3, #0]
   d7e6c:	07d2      	lsls	r2, r2, #31
   d7e6e:	bf5c      	itt	pl
   d7e70:	2201      	movpl	r2, #1
   d7e72:	601a      	strpl	r2, [r3, #0]
   d7e74:	4b1e      	ldr	r3, [pc, #120]	; (d7ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7e76:	681a      	ldr	r2, [r3, #0]
   d7e78:	07d0      	lsls	r0, r2, #31
   d7e7a:	bf5c      	itt	pl
   d7e7c:	2201      	movpl	r2, #1
   d7e7e:	601a      	strpl	r2, [r3, #0]
   d7e80:	4b1c      	ldr	r3, [pc, #112]	; (d7ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7e82:	681a      	ldr	r2, [r3, #0]
   d7e84:	07d1      	lsls	r1, r2, #31
   d7e86:	bf5c      	itt	pl
   d7e88:	2201      	movpl	r2, #1
   d7e8a:	601a      	strpl	r2, [r3, #0]
   d7e8c:	4b1a      	ldr	r3, [pc, #104]	; (d7ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7e8e:	681a      	ldr	r2, [r3, #0]
   d7e90:	07d2      	lsls	r2, r2, #31
   d7e92:	bf5c      	itt	pl
   d7e94:	2201      	movpl	r2, #1
   d7e96:	601a      	strpl	r2, [r3, #0]
   d7e98:	4b18      	ldr	r3, [pc, #96]	; (d7efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7e9a:	681a      	ldr	r2, [r3, #0]
   d7e9c:	07d0      	lsls	r0, r2, #31
   d7e9e:	bf5c      	itt	pl
   d7ea0:	2201      	movpl	r2, #1
   d7ea2:	601a      	strpl	r2, [r3, #0]
   d7ea4:	4b16      	ldr	r3, [pc, #88]	; (d7f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7ea6:	681a      	ldr	r2, [r3, #0]
   d7ea8:	07d1      	lsls	r1, r2, #31
   d7eaa:	bf5c      	itt	pl
   d7eac:	2201      	movpl	r2, #1
   d7eae:	601a      	strpl	r2, [r3, #0]
   d7eb0:	4b14      	ldr	r3, [pc, #80]	; (d7f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7eb2:	681a      	ldr	r2, [r3, #0]
   d7eb4:	07d2      	lsls	r2, r2, #31
   d7eb6:	bf5c      	itt	pl
   d7eb8:	2201      	movpl	r2, #1
   d7eba:	601a      	strpl	r2, [r3, #0]
   d7ebc:	4b12      	ldr	r3, [pc, #72]	; (d7f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7ebe:	681a      	ldr	r2, [r3, #0]
   d7ec0:	07d0      	lsls	r0, r2, #31
   d7ec2:	bf5c      	itt	pl
   d7ec4:	2201      	movpl	r2, #1
   d7ec6:	601a      	strpl	r2, [r3, #0]
   d7ec8:	4b10      	ldr	r3, [pc, #64]	; (d7f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7eca:	681a      	ldr	r2, [r3, #0]
   d7ecc:	07d1      	lsls	r1, r2, #31
   d7ece:	bf5c      	itt	pl
   d7ed0:	2201      	movpl	r2, #1
   d7ed2:	601a      	strpl	r2, [r3, #0]
   d7ed4:	4b0e      	ldr	r3, [pc, #56]	; (d7f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7ed6:	681a      	ldr	r2, [r3, #0]
   d7ed8:	07d2      	lsls	r2, r2, #31
   d7eda:	bf5c      	itt	pl
   d7edc:	2201      	movpl	r2, #1
   d7ede:	601a      	strpl	r2, [r3, #0]
   d7ee0:	4770      	bx	lr
   d7ee2:	bf00      	nop
   d7ee4:	2003e780 	.word	0x2003e780
   d7ee8:	2003e77c 	.word	0x2003e77c
   d7eec:	2003e778 	.word	0x2003e778
   d7ef0:	2003e774 	.word	0x2003e774
   d7ef4:	2003e770 	.word	0x2003e770
   d7ef8:	2003e76c 	.word	0x2003e76c
   d7efc:	2003e768 	.word	0x2003e768
   d7f00:	2003e764 	.word	0x2003e764
   d7f04:	2003e760 	.word	0x2003e760
   d7f08:	2003e75c 	.word	0x2003e75c
   d7f0c:	2003e758 	.word	0x2003e758
   d7f10:	2003e754 	.word	0x2003e754

000d7f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f14:	4b18      	ldr	r3, [pc, #96]	; (d7f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f16:	681a      	ldr	r2, [r3, #0]
   d7f18:	07d1      	lsls	r1, r2, #31
   d7f1a:	bf5c      	itt	pl
   d7f1c:	2201      	movpl	r2, #1
   d7f1e:	601a      	strpl	r2, [r3, #0]
   d7f20:	4b16      	ldr	r3, [pc, #88]	; (d7f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f22:	681a      	ldr	r2, [r3, #0]
   d7f24:	07d2      	lsls	r2, r2, #31
   d7f26:	bf5c      	itt	pl
   d7f28:	2201      	movpl	r2, #1
   d7f2a:	601a      	strpl	r2, [r3, #0]
   d7f2c:	4b14      	ldr	r3, [pc, #80]	; (d7f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f2e:	681a      	ldr	r2, [r3, #0]
   d7f30:	07d0      	lsls	r0, r2, #31
   d7f32:	bf5c      	itt	pl
   d7f34:	2201      	movpl	r2, #1
   d7f36:	601a      	strpl	r2, [r3, #0]
   d7f38:	4b12      	ldr	r3, [pc, #72]	; (d7f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f3a:	681a      	ldr	r2, [r3, #0]
   d7f3c:	07d1      	lsls	r1, r2, #31
   d7f3e:	bf5c      	itt	pl
   d7f40:	2201      	movpl	r2, #1
   d7f42:	601a      	strpl	r2, [r3, #0]
   d7f44:	4b10      	ldr	r3, [pc, #64]	; (d7f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f46:	681a      	ldr	r2, [r3, #0]
   d7f48:	07d2      	lsls	r2, r2, #31
   d7f4a:	bf5c      	itt	pl
   d7f4c:	2201      	movpl	r2, #1
   d7f4e:	601a      	strpl	r2, [r3, #0]
   d7f50:	4b0e      	ldr	r3, [pc, #56]	; (d7f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f52:	681a      	ldr	r2, [r3, #0]
   d7f54:	07d0      	lsls	r0, r2, #31
   d7f56:	bf5c      	itt	pl
   d7f58:	2201      	movpl	r2, #1
   d7f5a:	601a      	strpl	r2, [r3, #0]
   d7f5c:	4b0c      	ldr	r3, [pc, #48]	; (d7f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f5e:	681a      	ldr	r2, [r3, #0]
   d7f60:	07d1      	lsls	r1, r2, #31
   d7f62:	bf5c      	itt	pl
   d7f64:	2201      	movpl	r2, #1
   d7f66:	601a      	strpl	r2, [r3, #0]
   d7f68:	4b0a      	ldr	r3, [pc, #40]	; (d7f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f6a:	681a      	ldr	r2, [r3, #0]
   d7f6c:	07d2      	lsls	r2, r2, #31
   d7f6e:	bf5c      	itt	pl
   d7f70:	2201      	movpl	r2, #1
   d7f72:	601a      	strpl	r2, [r3, #0]
   d7f74:	4770      	bx	lr
   d7f76:	bf00      	nop
   d7f78:	2003e7a0 	.word	0x2003e7a0
   d7f7c:	2003e79c 	.word	0x2003e79c
   d7f80:	2003e798 	.word	0x2003e798
   d7f84:	2003e794 	.word	0x2003e794
   d7f88:	2003e790 	.word	0x2003e790
   d7f8c:	2003e78c 	.word	0x2003e78c
   d7f90:	2003e788 	.word	0x2003e788
   d7f94:	2003e784 	.word	0x2003e784

000d7f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f98:	4b18      	ldr	r3, [pc, #96]	; (d7ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f9a:	681a      	ldr	r2, [r3, #0]
   d7f9c:	07d1      	lsls	r1, r2, #31
   d7f9e:	bf5c      	itt	pl
   d7fa0:	2201      	movpl	r2, #1
   d7fa2:	601a      	strpl	r2, [r3, #0]
   d7fa4:	4b16      	ldr	r3, [pc, #88]	; (d8000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7fa6:	681a      	ldr	r2, [r3, #0]
   d7fa8:	07d2      	lsls	r2, r2, #31
   d7faa:	bf5c      	itt	pl
   d7fac:	2201      	movpl	r2, #1
   d7fae:	601a      	strpl	r2, [r3, #0]
   d7fb0:	4b14      	ldr	r3, [pc, #80]	; (d8004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7fb2:	681a      	ldr	r2, [r3, #0]
   d7fb4:	07d0      	lsls	r0, r2, #31
   d7fb6:	bf5c      	itt	pl
   d7fb8:	2201      	movpl	r2, #1
   d7fba:	601a      	strpl	r2, [r3, #0]
   d7fbc:	4b12      	ldr	r3, [pc, #72]	; (d8008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7fbe:	681a      	ldr	r2, [r3, #0]
   d7fc0:	07d1      	lsls	r1, r2, #31
   d7fc2:	bf5c      	itt	pl
   d7fc4:	2201      	movpl	r2, #1
   d7fc6:	601a      	strpl	r2, [r3, #0]
   d7fc8:	4b10      	ldr	r3, [pc, #64]	; (d800c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7fca:	681a      	ldr	r2, [r3, #0]
   d7fcc:	07d2      	lsls	r2, r2, #31
   d7fce:	bf5c      	itt	pl
   d7fd0:	2201      	movpl	r2, #1
   d7fd2:	601a      	strpl	r2, [r3, #0]
   d7fd4:	4b0e      	ldr	r3, [pc, #56]	; (d8010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7fd6:	681a      	ldr	r2, [r3, #0]
   d7fd8:	07d0      	lsls	r0, r2, #31
   d7fda:	bf5c      	itt	pl
   d7fdc:	2201      	movpl	r2, #1
   d7fde:	601a      	strpl	r2, [r3, #0]
   d7fe0:	4b0c      	ldr	r3, [pc, #48]	; (d8014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7fe2:	681a      	ldr	r2, [r3, #0]
   d7fe4:	07d1      	lsls	r1, r2, #31
   d7fe6:	bf5c      	itt	pl
   d7fe8:	2201      	movpl	r2, #1
   d7fea:	601a      	strpl	r2, [r3, #0]
   d7fec:	4b0a      	ldr	r3, [pc, #40]	; (d8018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7fee:	681a      	ldr	r2, [r3, #0]
   d7ff0:	07d2      	lsls	r2, r2, #31
   d7ff2:	bf5c      	itt	pl
   d7ff4:	2201      	movpl	r2, #1
   d7ff6:	601a      	strpl	r2, [r3, #0]
   d7ff8:	4770      	bx	lr
   d7ffa:	bf00      	nop
   d7ffc:	2003e7c0 	.word	0x2003e7c0
   d8000:	2003e7bc 	.word	0x2003e7bc
   d8004:	2003e7b8 	.word	0x2003e7b8
   d8008:	2003e7b4 	.word	0x2003e7b4
   d800c:	2003e7b0 	.word	0x2003e7b0
   d8010:	2003e7ac 	.word	0x2003e7ac
   d8014:	2003e7a8 	.word	0x2003e7a8
   d8018:	2003e7a4 	.word	0x2003e7a4

000d801c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d801c:	4b24      	ldr	r3, [pc, #144]	; (d80b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d801e:	681a      	ldr	r2, [r3, #0]
   d8020:	07d0      	lsls	r0, r2, #31
   d8022:	bf5c      	itt	pl
   d8024:	2201      	movpl	r2, #1
   d8026:	601a      	strpl	r2, [r3, #0]
   d8028:	4b22      	ldr	r3, [pc, #136]	; (d80b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d802a:	681a      	ldr	r2, [r3, #0]
   d802c:	07d1      	lsls	r1, r2, #31
   d802e:	bf5c      	itt	pl
   d8030:	2201      	movpl	r2, #1
   d8032:	601a      	strpl	r2, [r3, #0]
   d8034:	4b20      	ldr	r3, [pc, #128]	; (d80b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8036:	681a      	ldr	r2, [r3, #0]
   d8038:	07d2      	lsls	r2, r2, #31
   d803a:	bf5c      	itt	pl
   d803c:	2201      	movpl	r2, #1
   d803e:	601a      	strpl	r2, [r3, #0]
   d8040:	4b1e      	ldr	r3, [pc, #120]	; (d80bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8042:	681a      	ldr	r2, [r3, #0]
   d8044:	07d0      	lsls	r0, r2, #31
   d8046:	bf5c      	itt	pl
   d8048:	2201      	movpl	r2, #1
   d804a:	601a      	strpl	r2, [r3, #0]
   d804c:	4b1c      	ldr	r3, [pc, #112]	; (d80c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d804e:	681a      	ldr	r2, [r3, #0]
   d8050:	07d1      	lsls	r1, r2, #31
   d8052:	bf5c      	itt	pl
   d8054:	2201      	movpl	r2, #1
   d8056:	601a      	strpl	r2, [r3, #0]
   d8058:	4b1a      	ldr	r3, [pc, #104]	; (d80c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d805a:	681a      	ldr	r2, [r3, #0]
   d805c:	07d2      	lsls	r2, r2, #31
   d805e:	bf5c      	itt	pl
   d8060:	2201      	movpl	r2, #1
   d8062:	601a      	strpl	r2, [r3, #0]
   d8064:	4b18      	ldr	r3, [pc, #96]	; (d80c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8066:	681a      	ldr	r2, [r3, #0]
   d8068:	07d0      	lsls	r0, r2, #31
   d806a:	bf5c      	itt	pl
   d806c:	2201      	movpl	r2, #1
   d806e:	601a      	strpl	r2, [r3, #0]
   d8070:	4b16      	ldr	r3, [pc, #88]	; (d80cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8072:	681a      	ldr	r2, [r3, #0]
   d8074:	07d1      	lsls	r1, r2, #31
   d8076:	bf5c      	itt	pl
   d8078:	2201      	movpl	r2, #1
   d807a:	601a      	strpl	r2, [r3, #0]
   d807c:	4b14      	ldr	r3, [pc, #80]	; (d80d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d807e:	681a      	ldr	r2, [r3, #0]
   d8080:	07d2      	lsls	r2, r2, #31
   d8082:	bf5c      	itt	pl
   d8084:	2201      	movpl	r2, #1
   d8086:	601a      	strpl	r2, [r3, #0]
   d8088:	4b12      	ldr	r3, [pc, #72]	; (d80d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d808a:	681a      	ldr	r2, [r3, #0]
   d808c:	07d0      	lsls	r0, r2, #31
   d808e:	bf5c      	itt	pl
   d8090:	2201      	movpl	r2, #1
   d8092:	601a      	strpl	r2, [r3, #0]
   d8094:	4b10      	ldr	r3, [pc, #64]	; (d80d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8096:	681a      	ldr	r2, [r3, #0]
   d8098:	07d1      	lsls	r1, r2, #31
   d809a:	bf5c      	itt	pl
   d809c:	2201      	movpl	r2, #1
   d809e:	601a      	strpl	r2, [r3, #0]
   d80a0:	4b0e      	ldr	r3, [pc, #56]	; (d80dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d80a2:	681a      	ldr	r2, [r3, #0]
   d80a4:	07d2      	lsls	r2, r2, #31
   d80a6:	bf5c      	itt	pl
   d80a8:	2201      	movpl	r2, #1
   d80aa:	601a      	strpl	r2, [r3, #0]
   d80ac:	4770      	bx	lr
   d80ae:	bf00      	nop
   d80b0:	2003e7f0 	.word	0x2003e7f0
   d80b4:	2003e7ec 	.word	0x2003e7ec
   d80b8:	2003e7e8 	.word	0x2003e7e8
   d80bc:	2003e7e4 	.word	0x2003e7e4
   d80c0:	2003e7e0 	.word	0x2003e7e0
   d80c4:	2003e7dc 	.word	0x2003e7dc
   d80c8:	2003e7d8 	.word	0x2003e7d8
   d80cc:	2003e7d4 	.word	0x2003e7d4
   d80d0:	2003e7d0 	.word	0x2003e7d0
   d80d4:	2003e7cc 	.word	0x2003e7cc
   d80d8:	2003e7c8 	.word	0x2003e7c8
   d80dc:	2003e7c4 	.word	0x2003e7c4

000d80e0 <__aeabi_drsub>:
   d80e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d80e4:	e002      	b.n	d80ec <__adddf3>
   d80e6:	bf00      	nop

000d80e8 <__aeabi_dsub>:
   d80e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d80ec <__adddf3>:
   d80ec:	b530      	push	{r4, r5, lr}
   d80ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d80f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d80f6:	ea94 0f05 	teq	r4, r5
   d80fa:	bf08      	it	eq
   d80fc:	ea90 0f02 	teqeq	r0, r2
   d8100:	bf1f      	itttt	ne
   d8102:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8106:	ea55 0c02 	orrsne.w	ip, r5, r2
   d810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8112:	f000 80e2 	beq.w	d82da <__adddf3+0x1ee>
   d8116:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d811e:	bfb8      	it	lt
   d8120:	426d      	neglt	r5, r5
   d8122:	dd0c      	ble.n	d813e <__adddf3+0x52>
   d8124:	442c      	add	r4, r5
   d8126:	ea80 0202 	eor.w	r2, r0, r2
   d812a:	ea81 0303 	eor.w	r3, r1, r3
   d812e:	ea82 0000 	eor.w	r0, r2, r0
   d8132:	ea83 0101 	eor.w	r1, r3, r1
   d8136:	ea80 0202 	eor.w	r2, r0, r2
   d813a:	ea81 0303 	eor.w	r3, r1, r3
   d813e:	2d36      	cmp	r5, #54	; 0x36
   d8140:	bf88      	it	hi
   d8142:	bd30      	pophi	{r4, r5, pc}
   d8144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8148:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8154:	d002      	beq.n	d815c <__adddf3+0x70>
   d8156:	4240      	negs	r0, r0
   d8158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8160:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8168:	d002      	beq.n	d8170 <__adddf3+0x84>
   d816a:	4252      	negs	r2, r2
   d816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8170:	ea94 0f05 	teq	r4, r5
   d8174:	f000 80a7 	beq.w	d82c6 <__adddf3+0x1da>
   d8178:	f1a4 0401 	sub.w	r4, r4, #1
   d817c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8180:	db0d      	blt.n	d819e <__adddf3+0xb2>
   d8182:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8186:	fa22 f205 	lsr.w	r2, r2, r5
   d818a:	1880      	adds	r0, r0, r2
   d818c:	f141 0100 	adc.w	r1, r1, #0
   d8190:	fa03 f20e 	lsl.w	r2, r3, lr
   d8194:	1880      	adds	r0, r0, r2
   d8196:	fa43 f305 	asr.w	r3, r3, r5
   d819a:	4159      	adcs	r1, r3
   d819c:	e00e      	b.n	d81bc <__adddf3+0xd0>
   d819e:	f1a5 0520 	sub.w	r5, r5, #32
   d81a2:	f10e 0e20 	add.w	lr, lr, #32
   d81a6:	2a01      	cmp	r2, #1
   d81a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d81ac:	bf28      	it	cs
   d81ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d81b2:	fa43 f305 	asr.w	r3, r3, r5
   d81b6:	18c0      	adds	r0, r0, r3
   d81b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d81bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81c0:	d507      	bpl.n	d81d2 <__adddf3+0xe6>
   d81c2:	f04f 0e00 	mov.w	lr, #0
   d81c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d81ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d81ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d81d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d81d6:	d31b      	bcc.n	d8210 <__adddf3+0x124>
   d81d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d81dc:	d30c      	bcc.n	d81f8 <__adddf3+0x10c>
   d81de:	0849      	lsrs	r1, r1, #1
   d81e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d81e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d81e8:	f104 0401 	add.w	r4, r4, #1
   d81ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d81f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d81f4:	f080 809a 	bcs.w	d832c <__adddf3+0x240>
   d81f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d81fc:	bf08      	it	eq
   d81fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8202:	f150 0000 	adcs.w	r0, r0, #0
   d8206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d820a:	ea41 0105 	orr.w	r1, r1, r5
   d820e:	bd30      	pop	{r4, r5, pc}
   d8210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8214:	4140      	adcs	r0, r0
   d8216:	eb41 0101 	adc.w	r1, r1, r1
   d821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d821e:	f1a4 0401 	sub.w	r4, r4, #1
   d8222:	d1e9      	bne.n	d81f8 <__adddf3+0x10c>
   d8224:	f091 0f00 	teq	r1, #0
   d8228:	bf04      	itt	eq
   d822a:	4601      	moveq	r1, r0
   d822c:	2000      	moveq	r0, #0
   d822e:	fab1 f381 	clz	r3, r1
   d8232:	bf08      	it	eq
   d8234:	3320      	addeq	r3, #32
   d8236:	f1a3 030b 	sub.w	r3, r3, #11
   d823a:	f1b3 0220 	subs.w	r2, r3, #32
   d823e:	da0c      	bge.n	d825a <__adddf3+0x16e>
   d8240:	320c      	adds	r2, #12
   d8242:	dd08      	ble.n	d8256 <__adddf3+0x16a>
   d8244:	f102 0c14 	add.w	ip, r2, #20
   d8248:	f1c2 020c 	rsb	r2, r2, #12
   d824c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8250:	fa21 f102 	lsr.w	r1, r1, r2
   d8254:	e00c      	b.n	d8270 <__adddf3+0x184>
   d8256:	f102 0214 	add.w	r2, r2, #20
   d825a:	bfd8      	it	le
   d825c:	f1c2 0c20 	rsble	ip, r2, #32
   d8260:	fa01 f102 	lsl.w	r1, r1, r2
   d8264:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8268:	bfdc      	itt	le
   d826a:	ea41 010c 	orrle.w	r1, r1, ip
   d826e:	4090      	lslle	r0, r2
   d8270:	1ae4      	subs	r4, r4, r3
   d8272:	bfa2      	ittt	ge
   d8274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8278:	4329      	orrge	r1, r5
   d827a:	bd30      	popge	{r4, r5, pc}
   d827c:	ea6f 0404 	mvn.w	r4, r4
   d8280:	3c1f      	subs	r4, #31
   d8282:	da1c      	bge.n	d82be <__adddf3+0x1d2>
   d8284:	340c      	adds	r4, #12
   d8286:	dc0e      	bgt.n	d82a6 <__adddf3+0x1ba>
   d8288:	f104 0414 	add.w	r4, r4, #20
   d828c:	f1c4 0220 	rsb	r2, r4, #32
   d8290:	fa20 f004 	lsr.w	r0, r0, r4
   d8294:	fa01 f302 	lsl.w	r3, r1, r2
   d8298:	ea40 0003 	orr.w	r0, r0, r3
   d829c:	fa21 f304 	lsr.w	r3, r1, r4
   d82a0:	ea45 0103 	orr.w	r1, r5, r3
   d82a4:	bd30      	pop	{r4, r5, pc}
   d82a6:	f1c4 040c 	rsb	r4, r4, #12
   d82aa:	f1c4 0220 	rsb	r2, r4, #32
   d82ae:	fa20 f002 	lsr.w	r0, r0, r2
   d82b2:	fa01 f304 	lsl.w	r3, r1, r4
   d82b6:	ea40 0003 	orr.w	r0, r0, r3
   d82ba:	4629      	mov	r1, r5
   d82bc:	bd30      	pop	{r4, r5, pc}
   d82be:	fa21 f004 	lsr.w	r0, r1, r4
   d82c2:	4629      	mov	r1, r5
   d82c4:	bd30      	pop	{r4, r5, pc}
   d82c6:	f094 0f00 	teq	r4, #0
   d82ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d82ce:	bf06      	itte	eq
   d82d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d82d4:	3401      	addeq	r4, #1
   d82d6:	3d01      	subne	r5, #1
   d82d8:	e74e      	b.n	d8178 <__adddf3+0x8c>
   d82da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d82de:	bf18      	it	ne
   d82e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d82e4:	d029      	beq.n	d833a <__adddf3+0x24e>
   d82e6:	ea94 0f05 	teq	r4, r5
   d82ea:	bf08      	it	eq
   d82ec:	ea90 0f02 	teqeq	r0, r2
   d82f0:	d005      	beq.n	d82fe <__adddf3+0x212>
   d82f2:	ea54 0c00 	orrs.w	ip, r4, r0
   d82f6:	bf04      	itt	eq
   d82f8:	4619      	moveq	r1, r3
   d82fa:	4610      	moveq	r0, r2
   d82fc:	bd30      	pop	{r4, r5, pc}
   d82fe:	ea91 0f03 	teq	r1, r3
   d8302:	bf1e      	ittt	ne
   d8304:	2100      	movne	r1, #0
   d8306:	2000      	movne	r0, #0
   d8308:	bd30      	popne	{r4, r5, pc}
   d830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d830e:	d105      	bne.n	d831c <__adddf3+0x230>
   d8310:	0040      	lsls	r0, r0, #1
   d8312:	4149      	adcs	r1, r1
   d8314:	bf28      	it	cs
   d8316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d831a:	bd30      	pop	{r4, r5, pc}
   d831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8320:	bf3c      	itt	cc
   d8322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8326:	bd30      	popcc	{r4, r5, pc}
   d8328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8334:	f04f 0000 	mov.w	r0, #0
   d8338:	bd30      	pop	{r4, r5, pc}
   d833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d833e:	bf1a      	itte	ne
   d8340:	4619      	movne	r1, r3
   d8342:	4610      	movne	r0, r2
   d8344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8348:	bf1c      	itt	ne
   d834a:	460b      	movne	r3, r1
   d834c:	4602      	movne	r2, r0
   d834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8352:	bf06      	itte	eq
   d8354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8358:	ea91 0f03 	teqeq	r1, r3
   d835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8360:	bd30      	pop	{r4, r5, pc}
   d8362:	bf00      	nop

000d8364 <__aeabi_ui2d>:
   d8364:	f090 0f00 	teq	r0, #0
   d8368:	bf04      	itt	eq
   d836a:	2100      	moveq	r1, #0
   d836c:	4770      	bxeq	lr
   d836e:	b530      	push	{r4, r5, lr}
   d8370:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8374:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8378:	f04f 0500 	mov.w	r5, #0
   d837c:	f04f 0100 	mov.w	r1, #0
   d8380:	e750      	b.n	d8224 <__adddf3+0x138>
   d8382:	bf00      	nop

000d8384 <__aeabi_i2d>:
   d8384:	f090 0f00 	teq	r0, #0
   d8388:	bf04      	itt	eq
   d838a:	2100      	moveq	r1, #0
   d838c:	4770      	bxeq	lr
   d838e:	b530      	push	{r4, r5, lr}
   d8390:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8394:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d839c:	bf48      	it	mi
   d839e:	4240      	negmi	r0, r0
   d83a0:	f04f 0100 	mov.w	r1, #0
   d83a4:	e73e      	b.n	d8224 <__adddf3+0x138>
   d83a6:	bf00      	nop

000d83a8 <__aeabi_f2d>:
   d83a8:	0042      	lsls	r2, r0, #1
   d83aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d83ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d83b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d83b6:	bf1f      	itttt	ne
   d83b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d83bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d83c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d83c4:	4770      	bxne	lr
   d83c6:	f092 0f00 	teq	r2, #0
   d83ca:	bf14      	ite	ne
   d83cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d83d0:	4770      	bxeq	lr
   d83d2:	b530      	push	{r4, r5, lr}
   d83d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d83d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d83dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d83e0:	e720      	b.n	d8224 <__adddf3+0x138>
   d83e2:	bf00      	nop

000d83e4 <__aeabi_ul2d>:
   d83e4:	ea50 0201 	orrs.w	r2, r0, r1
   d83e8:	bf08      	it	eq
   d83ea:	4770      	bxeq	lr
   d83ec:	b530      	push	{r4, r5, lr}
   d83ee:	f04f 0500 	mov.w	r5, #0
   d83f2:	e00a      	b.n	d840a <__aeabi_l2d+0x16>

000d83f4 <__aeabi_l2d>:
   d83f4:	ea50 0201 	orrs.w	r2, r0, r1
   d83f8:	bf08      	it	eq
   d83fa:	4770      	bxeq	lr
   d83fc:	b530      	push	{r4, r5, lr}
   d83fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8402:	d502      	bpl.n	d840a <__aeabi_l2d+0x16>
   d8404:	4240      	negs	r0, r0
   d8406:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d840a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d840e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8412:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8416:	f43f aedc 	beq.w	d81d2 <__adddf3+0xe6>
   d841a:	f04f 0203 	mov.w	r2, #3
   d841e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8422:	bf18      	it	ne
   d8424:	3203      	addne	r2, #3
   d8426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d842a:	bf18      	it	ne
   d842c:	3203      	addne	r2, #3
   d842e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8432:	f1c2 0320 	rsb	r3, r2, #32
   d8436:	fa00 fc03 	lsl.w	ip, r0, r3
   d843a:	fa20 f002 	lsr.w	r0, r0, r2
   d843e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8442:	ea40 000e 	orr.w	r0, r0, lr
   d8446:	fa21 f102 	lsr.w	r1, r1, r2
   d844a:	4414      	add	r4, r2
   d844c:	e6c1      	b.n	d81d2 <__adddf3+0xe6>
   d844e:	bf00      	nop

000d8450 <__aeabi_dmul>:
   d8450:	b570      	push	{r4, r5, r6, lr}
   d8452:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d845a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d845e:	bf1d      	ittte	ne
   d8460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8464:	ea94 0f0c 	teqne	r4, ip
   d8468:	ea95 0f0c 	teqne	r5, ip
   d846c:	f000 f8de 	bleq	d862c <__aeabi_dmul+0x1dc>
   d8470:	442c      	add	r4, r5
   d8472:	ea81 0603 	eor.w	r6, r1, r3
   d8476:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d847a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d847e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8482:	bf18      	it	ne
   d8484:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d848c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8490:	d038      	beq.n	d8504 <__aeabi_dmul+0xb4>
   d8492:	fba0 ce02 	umull	ip, lr, r0, r2
   d8496:	f04f 0500 	mov.w	r5, #0
   d849a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d849e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d84a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d84a6:	f04f 0600 	mov.w	r6, #0
   d84aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d84ae:	f09c 0f00 	teq	ip, #0
   d84b2:	bf18      	it	ne
   d84b4:	f04e 0e01 	orrne.w	lr, lr, #1
   d84b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d84bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d84c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d84c4:	d204      	bcs.n	d84d0 <__aeabi_dmul+0x80>
   d84c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d84ca:	416d      	adcs	r5, r5
   d84cc:	eb46 0606 	adc.w	r6, r6, r6
   d84d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d84d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d84d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d84dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d84e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d84e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d84e8:	bf88      	it	hi
   d84ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d84ee:	d81e      	bhi.n	d852e <__aeabi_dmul+0xde>
   d84f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d84f4:	bf08      	it	eq
   d84f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d84fa:	f150 0000 	adcs.w	r0, r0, #0
   d84fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8502:	bd70      	pop	{r4, r5, r6, pc}
   d8504:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8508:	ea46 0101 	orr.w	r1, r6, r1
   d850c:	ea40 0002 	orr.w	r0, r0, r2
   d8510:	ea81 0103 	eor.w	r1, r1, r3
   d8514:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8518:	bfc2      	ittt	gt
   d851a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d851e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8522:	bd70      	popgt	{r4, r5, r6, pc}
   d8524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8528:	f04f 0e00 	mov.w	lr, #0
   d852c:	3c01      	subs	r4, #1
   d852e:	f300 80ab 	bgt.w	d8688 <__aeabi_dmul+0x238>
   d8532:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8536:	bfde      	ittt	le
   d8538:	2000      	movle	r0, #0
   d853a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d853e:	bd70      	pople	{r4, r5, r6, pc}
   d8540:	f1c4 0400 	rsb	r4, r4, #0
   d8544:	3c20      	subs	r4, #32
   d8546:	da35      	bge.n	d85b4 <__aeabi_dmul+0x164>
   d8548:	340c      	adds	r4, #12
   d854a:	dc1b      	bgt.n	d8584 <__aeabi_dmul+0x134>
   d854c:	f104 0414 	add.w	r4, r4, #20
   d8550:	f1c4 0520 	rsb	r5, r4, #32
   d8554:	fa00 f305 	lsl.w	r3, r0, r5
   d8558:	fa20 f004 	lsr.w	r0, r0, r4
   d855c:	fa01 f205 	lsl.w	r2, r1, r5
   d8560:	ea40 0002 	orr.w	r0, r0, r2
   d8564:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d856c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8570:	fa21 f604 	lsr.w	r6, r1, r4
   d8574:	eb42 0106 	adc.w	r1, r2, r6
   d8578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d857c:	bf08      	it	eq
   d857e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8582:	bd70      	pop	{r4, r5, r6, pc}
   d8584:	f1c4 040c 	rsb	r4, r4, #12
   d8588:	f1c4 0520 	rsb	r5, r4, #32
   d858c:	fa00 f304 	lsl.w	r3, r0, r4
   d8590:	fa20 f005 	lsr.w	r0, r0, r5
   d8594:	fa01 f204 	lsl.w	r2, r1, r4
   d8598:	ea40 0002 	orr.w	r0, r0, r2
   d859c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85a4:	f141 0100 	adc.w	r1, r1, #0
   d85a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85ac:	bf08      	it	eq
   d85ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85b2:	bd70      	pop	{r4, r5, r6, pc}
   d85b4:	f1c4 0520 	rsb	r5, r4, #32
   d85b8:	fa00 f205 	lsl.w	r2, r0, r5
   d85bc:	ea4e 0e02 	orr.w	lr, lr, r2
   d85c0:	fa20 f304 	lsr.w	r3, r0, r4
   d85c4:	fa01 f205 	lsl.w	r2, r1, r5
   d85c8:	ea43 0302 	orr.w	r3, r3, r2
   d85cc:	fa21 f004 	lsr.w	r0, r1, r4
   d85d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d4:	fa21 f204 	lsr.w	r2, r1, r4
   d85d8:	ea20 0002 	bic.w	r0, r0, r2
   d85dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d85e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85e4:	bf08      	it	eq
   d85e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85ea:	bd70      	pop	{r4, r5, r6, pc}
   d85ec:	f094 0f00 	teq	r4, #0
   d85f0:	d10f      	bne.n	d8612 <__aeabi_dmul+0x1c2>
   d85f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d85f6:	0040      	lsls	r0, r0, #1
   d85f8:	eb41 0101 	adc.w	r1, r1, r1
   d85fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8600:	bf08      	it	eq
   d8602:	3c01      	subeq	r4, #1
   d8604:	d0f7      	beq.n	d85f6 <__aeabi_dmul+0x1a6>
   d8606:	ea41 0106 	orr.w	r1, r1, r6
   d860a:	f095 0f00 	teq	r5, #0
   d860e:	bf18      	it	ne
   d8610:	4770      	bxne	lr
   d8612:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8616:	0052      	lsls	r2, r2, #1
   d8618:	eb43 0303 	adc.w	r3, r3, r3
   d861c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8620:	bf08      	it	eq
   d8622:	3d01      	subeq	r5, #1
   d8624:	d0f7      	beq.n	d8616 <__aeabi_dmul+0x1c6>
   d8626:	ea43 0306 	orr.w	r3, r3, r6
   d862a:	4770      	bx	lr
   d862c:	ea94 0f0c 	teq	r4, ip
   d8630:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8634:	bf18      	it	ne
   d8636:	ea95 0f0c 	teqne	r5, ip
   d863a:	d00c      	beq.n	d8656 <__aeabi_dmul+0x206>
   d863c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8640:	bf18      	it	ne
   d8642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8646:	d1d1      	bne.n	d85ec <__aeabi_dmul+0x19c>
   d8648:	ea81 0103 	eor.w	r1, r1, r3
   d864c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8650:	f04f 0000 	mov.w	r0, #0
   d8654:	bd70      	pop	{r4, r5, r6, pc}
   d8656:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d865a:	bf06      	itte	eq
   d865c:	4610      	moveq	r0, r2
   d865e:	4619      	moveq	r1, r3
   d8660:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8664:	d019      	beq.n	d869a <__aeabi_dmul+0x24a>
   d8666:	ea94 0f0c 	teq	r4, ip
   d866a:	d102      	bne.n	d8672 <__aeabi_dmul+0x222>
   d866c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8670:	d113      	bne.n	d869a <__aeabi_dmul+0x24a>
   d8672:	ea95 0f0c 	teq	r5, ip
   d8676:	d105      	bne.n	d8684 <__aeabi_dmul+0x234>
   d8678:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d867c:	bf1c      	itt	ne
   d867e:	4610      	movne	r0, r2
   d8680:	4619      	movne	r1, r3
   d8682:	d10a      	bne.n	d869a <__aeabi_dmul+0x24a>
   d8684:	ea81 0103 	eor.w	r1, r1, r3
   d8688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d868c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8694:	f04f 0000 	mov.w	r0, #0
   d8698:	bd70      	pop	{r4, r5, r6, pc}
   d869a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d869e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d86a2:	bd70      	pop	{r4, r5, r6, pc}

000d86a4 <__aeabi_ddiv>:
   d86a4:	b570      	push	{r4, r5, r6, lr}
   d86a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86b2:	bf1d      	ittte	ne
   d86b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86b8:	ea94 0f0c 	teqne	r4, ip
   d86bc:	ea95 0f0c 	teqne	r5, ip
   d86c0:	f000 f8a7 	bleq	d8812 <__aeabi_ddiv+0x16e>
   d86c4:	eba4 0405 	sub.w	r4, r4, r5
   d86c8:	ea81 0e03 	eor.w	lr, r1, r3
   d86cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d86d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d86d4:	f000 8088 	beq.w	d87e8 <__aeabi_ddiv+0x144>
   d86d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d86dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d86e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d86e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d86e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d86ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d86f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d86f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d86f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d86fc:	429d      	cmp	r5, r3
   d86fe:	bf08      	it	eq
   d8700:	4296      	cmpeq	r6, r2
   d8702:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8706:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d870a:	d202      	bcs.n	d8712 <__aeabi_ddiv+0x6e>
   d870c:	085b      	lsrs	r3, r3, #1
   d870e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8712:	1ab6      	subs	r6, r6, r2
   d8714:	eb65 0503 	sbc.w	r5, r5, r3
   d8718:	085b      	lsrs	r3, r3, #1
   d871a:	ea4f 0232 	mov.w	r2, r2, rrx
   d871e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8722:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8726:	ebb6 0e02 	subs.w	lr, r6, r2
   d872a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d872e:	bf22      	ittt	cs
   d8730:	1ab6      	subcs	r6, r6, r2
   d8732:	4675      	movcs	r5, lr
   d8734:	ea40 000c 	orrcs.w	r0, r0, ip
   d8738:	085b      	lsrs	r3, r3, #1
   d873a:	ea4f 0232 	mov.w	r2, r2, rrx
   d873e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8742:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8746:	bf22      	ittt	cs
   d8748:	1ab6      	subcs	r6, r6, r2
   d874a:	4675      	movcs	r5, lr
   d874c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8750:	085b      	lsrs	r3, r3, #1
   d8752:	ea4f 0232 	mov.w	r2, r2, rrx
   d8756:	ebb6 0e02 	subs.w	lr, r6, r2
   d875a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d875e:	bf22      	ittt	cs
   d8760:	1ab6      	subcs	r6, r6, r2
   d8762:	4675      	movcs	r5, lr
   d8764:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8768:	085b      	lsrs	r3, r3, #1
   d876a:	ea4f 0232 	mov.w	r2, r2, rrx
   d876e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8772:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8776:	bf22      	ittt	cs
   d8778:	1ab6      	subcs	r6, r6, r2
   d877a:	4675      	movcs	r5, lr
   d877c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8780:	ea55 0e06 	orrs.w	lr, r5, r6
   d8784:	d018      	beq.n	d87b8 <__aeabi_ddiv+0x114>
   d8786:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d878a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d878e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8792:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8796:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d879a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d879e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d87a2:	d1c0      	bne.n	d8726 <__aeabi_ddiv+0x82>
   d87a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87a8:	d10b      	bne.n	d87c2 <__aeabi_ddiv+0x11e>
   d87aa:	ea41 0100 	orr.w	r1, r1, r0
   d87ae:	f04f 0000 	mov.w	r0, #0
   d87b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d87b6:	e7b6      	b.n	d8726 <__aeabi_ddiv+0x82>
   d87b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87bc:	bf04      	itt	eq
   d87be:	4301      	orreq	r1, r0
   d87c0:	2000      	moveq	r0, #0
   d87c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d87c6:	bf88      	it	hi
   d87c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d87cc:	f63f aeaf 	bhi.w	d852e <__aeabi_dmul+0xde>
   d87d0:	ebb5 0c03 	subs.w	ip, r5, r3
   d87d4:	bf04      	itt	eq
   d87d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d87da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d87de:	f150 0000 	adcs.w	r0, r0, #0
   d87e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87e6:	bd70      	pop	{r4, r5, r6, pc}
   d87e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d87ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d87f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d87f4:	bfc2      	ittt	gt
   d87f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87fe:	bd70      	popgt	{r4, r5, r6, pc}
   d8800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8804:	f04f 0e00 	mov.w	lr, #0
   d8808:	3c01      	subs	r4, #1
   d880a:	e690      	b.n	d852e <__aeabi_dmul+0xde>
   d880c:	ea45 0e06 	orr.w	lr, r5, r6
   d8810:	e68d      	b.n	d852e <__aeabi_dmul+0xde>
   d8812:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8816:	ea94 0f0c 	teq	r4, ip
   d881a:	bf08      	it	eq
   d881c:	ea95 0f0c 	teqeq	r5, ip
   d8820:	f43f af3b 	beq.w	d869a <__aeabi_dmul+0x24a>
   d8824:	ea94 0f0c 	teq	r4, ip
   d8828:	d10a      	bne.n	d8840 <__aeabi_ddiv+0x19c>
   d882a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d882e:	f47f af34 	bne.w	d869a <__aeabi_dmul+0x24a>
   d8832:	ea95 0f0c 	teq	r5, ip
   d8836:	f47f af25 	bne.w	d8684 <__aeabi_dmul+0x234>
   d883a:	4610      	mov	r0, r2
   d883c:	4619      	mov	r1, r3
   d883e:	e72c      	b.n	d869a <__aeabi_dmul+0x24a>
   d8840:	ea95 0f0c 	teq	r5, ip
   d8844:	d106      	bne.n	d8854 <__aeabi_ddiv+0x1b0>
   d8846:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d884a:	f43f aefd 	beq.w	d8648 <__aeabi_dmul+0x1f8>
   d884e:	4610      	mov	r0, r2
   d8850:	4619      	mov	r1, r3
   d8852:	e722      	b.n	d869a <__aeabi_dmul+0x24a>
   d8854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8858:	bf18      	it	ne
   d885a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d885e:	f47f aec5 	bne.w	d85ec <__aeabi_dmul+0x19c>
   d8862:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8866:	f47f af0d 	bne.w	d8684 <__aeabi_dmul+0x234>
   d886a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d886e:	f47f aeeb 	bne.w	d8648 <__aeabi_dmul+0x1f8>
   d8872:	e712      	b.n	d869a <__aeabi_dmul+0x24a>

000d8874 <__gedf2>:
   d8874:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8878:	e006      	b.n	d8888 <__cmpdf2+0x4>
   d887a:	bf00      	nop

000d887c <__ledf2>:
   d887c:	f04f 0c01 	mov.w	ip, #1
   d8880:	e002      	b.n	d8888 <__cmpdf2+0x4>
   d8882:	bf00      	nop

000d8884 <__cmpdf2>:
   d8884:	f04f 0c01 	mov.w	ip, #1
   d8888:	f84d cd04 	str.w	ip, [sp, #-4]!
   d888c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8894:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8898:	bf18      	it	ne
   d889a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d889e:	d01b      	beq.n	d88d8 <__cmpdf2+0x54>
   d88a0:	b001      	add	sp, #4
   d88a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d88a6:	bf0c      	ite	eq
   d88a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d88ac:	ea91 0f03 	teqne	r1, r3
   d88b0:	bf02      	ittt	eq
   d88b2:	ea90 0f02 	teqeq	r0, r2
   d88b6:	2000      	moveq	r0, #0
   d88b8:	4770      	bxeq	lr
   d88ba:	f110 0f00 	cmn.w	r0, #0
   d88be:	ea91 0f03 	teq	r1, r3
   d88c2:	bf58      	it	pl
   d88c4:	4299      	cmppl	r1, r3
   d88c6:	bf08      	it	eq
   d88c8:	4290      	cmpeq	r0, r2
   d88ca:	bf2c      	ite	cs
   d88cc:	17d8      	asrcs	r0, r3, #31
   d88ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d88d2:	f040 0001 	orr.w	r0, r0, #1
   d88d6:	4770      	bx	lr
   d88d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88e0:	d102      	bne.n	d88e8 <__cmpdf2+0x64>
   d88e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d88e6:	d107      	bne.n	d88f8 <__cmpdf2+0x74>
   d88e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88f0:	d1d6      	bne.n	d88a0 <__cmpdf2+0x1c>
   d88f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d88f6:	d0d3      	beq.n	d88a0 <__cmpdf2+0x1c>
   d88f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d88fc:	4770      	bx	lr
   d88fe:	bf00      	nop

000d8900 <__aeabi_cdrcmple>:
   d8900:	4684      	mov	ip, r0
   d8902:	4610      	mov	r0, r2
   d8904:	4662      	mov	r2, ip
   d8906:	468c      	mov	ip, r1
   d8908:	4619      	mov	r1, r3
   d890a:	4663      	mov	r3, ip
   d890c:	e000      	b.n	d8910 <__aeabi_cdcmpeq>
   d890e:	bf00      	nop

000d8910 <__aeabi_cdcmpeq>:
   d8910:	b501      	push	{r0, lr}
   d8912:	f7ff ffb7 	bl	d8884 <__cmpdf2>
   d8916:	2800      	cmp	r0, #0
   d8918:	bf48      	it	mi
   d891a:	f110 0f00 	cmnmi.w	r0, #0
   d891e:	bd01      	pop	{r0, pc}

000d8920 <__aeabi_dcmpeq>:
   d8920:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8924:	f7ff fff4 	bl	d8910 <__aeabi_cdcmpeq>
   d8928:	bf0c      	ite	eq
   d892a:	2001      	moveq	r0, #1
   d892c:	2000      	movne	r0, #0
   d892e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8932:	bf00      	nop

000d8934 <__aeabi_dcmplt>:
   d8934:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8938:	f7ff ffea 	bl	d8910 <__aeabi_cdcmpeq>
   d893c:	bf34      	ite	cc
   d893e:	2001      	movcc	r0, #1
   d8940:	2000      	movcs	r0, #0
   d8942:	f85d fb08 	ldr.w	pc, [sp], #8
   d8946:	bf00      	nop

000d8948 <__aeabi_dcmple>:
   d8948:	f84d ed08 	str.w	lr, [sp, #-8]!
   d894c:	f7ff ffe0 	bl	d8910 <__aeabi_cdcmpeq>
   d8950:	bf94      	ite	ls
   d8952:	2001      	movls	r0, #1
   d8954:	2000      	movhi	r0, #0
   d8956:	f85d fb08 	ldr.w	pc, [sp], #8
   d895a:	bf00      	nop

000d895c <__aeabi_dcmpge>:
   d895c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8960:	f7ff ffce 	bl	d8900 <__aeabi_cdrcmple>
   d8964:	bf94      	ite	ls
   d8966:	2001      	movls	r0, #1
   d8968:	2000      	movhi	r0, #0
   d896a:	f85d fb08 	ldr.w	pc, [sp], #8
   d896e:	bf00      	nop

000d8970 <__aeabi_dcmpgt>:
   d8970:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8974:	f7ff ffc4 	bl	d8900 <__aeabi_cdrcmple>
   d8978:	bf34      	ite	cc
   d897a:	2001      	movcc	r0, #1
   d897c:	2000      	movcs	r0, #0
   d897e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8982:	bf00      	nop

000d8984 <__aeabi_d2uiz>:
   d8984:	004a      	lsls	r2, r1, #1
   d8986:	d211      	bcs.n	d89ac <__aeabi_d2uiz+0x28>
   d8988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d898c:	d211      	bcs.n	d89b2 <__aeabi_d2uiz+0x2e>
   d898e:	d50d      	bpl.n	d89ac <__aeabi_d2uiz+0x28>
   d8990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8998:	d40e      	bmi.n	d89b8 <__aeabi_d2uiz+0x34>
   d899a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d899e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d89a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d89a6:	fa23 f002 	lsr.w	r0, r3, r2
   d89aa:	4770      	bx	lr
   d89ac:	f04f 0000 	mov.w	r0, #0
   d89b0:	4770      	bx	lr
   d89b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d89b6:	d102      	bne.n	d89be <__aeabi_d2uiz+0x3a>
   d89b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d89bc:	4770      	bx	lr
   d89be:	f04f 0000 	mov.w	r0, #0
   d89c2:	4770      	bx	lr

000d89c4 <__aeabi_d2f>:
   d89c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d89cc:	bf24      	itt	cs
   d89ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d89d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d89d6:	d90d      	bls.n	d89f4 <__aeabi_d2f+0x30>
   d89d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d89dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d89e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d89e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d89e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d89ec:	bf08      	it	eq
   d89ee:	f020 0001 	biceq.w	r0, r0, #1
   d89f2:	4770      	bx	lr
   d89f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d89f8:	d121      	bne.n	d8a3e <__aeabi_d2f+0x7a>
   d89fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d89fe:	bfbc      	itt	lt
   d8a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8a04:	4770      	bxlt	lr
   d8a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a0e:	f1c2 0218 	rsb	r2, r2, #24
   d8a12:	f1c2 0c20 	rsb	ip, r2, #32
   d8a16:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a1a:	fa20 f002 	lsr.w	r0, r0, r2
   d8a1e:	bf18      	it	ne
   d8a20:	f040 0001 	orrne.w	r0, r0, #1
   d8a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a30:	ea40 000c 	orr.w	r0, r0, ip
   d8a34:	fa23 f302 	lsr.w	r3, r3, r2
   d8a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a3c:	e7cc      	b.n	d89d8 <__aeabi_d2f+0x14>
   d8a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a42:	d107      	bne.n	d8a54 <__aeabi_d2f+0x90>
   d8a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a48:	bf1e      	ittt	ne
   d8a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a52:	4770      	bxne	lr
   d8a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a60:	4770      	bx	lr
   d8a62:	bf00      	nop

000d8a64 <__aeabi_uldivmod>:
   d8a64:	b953      	cbnz	r3, d8a7c <__aeabi_uldivmod+0x18>
   d8a66:	b94a      	cbnz	r2, d8a7c <__aeabi_uldivmod+0x18>
   d8a68:	2900      	cmp	r1, #0
   d8a6a:	bf08      	it	eq
   d8a6c:	2800      	cmpeq	r0, #0
   d8a6e:	bf1c      	itt	ne
   d8a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d8a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d8a78:	f000 b9a2 	b.w	d8dc0 <__aeabi_idiv0>
   d8a7c:	f1ad 0c08 	sub.w	ip, sp, #8
   d8a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8a84:	f000 f82a 	bl	d8adc <__udivmoddi4>
   d8a88:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a90:	b004      	add	sp, #16
   d8a92:	4770      	bx	lr

000d8a94 <__aeabi_d2ulz>:
   d8a94:	b5d0      	push	{r4, r6, r7, lr}
   d8a96:	2200      	movs	r2, #0
   d8a98:	4b0e      	ldr	r3, [pc, #56]	; (d8ad4 <__aeabi_d2ulz+0x40>)
   d8a9a:	4606      	mov	r6, r0
   d8a9c:	460f      	mov	r7, r1
   d8a9e:	f7ff fcd7 	bl	d8450 <__aeabi_dmul>
   d8aa2:	f7ff ff6f 	bl	d8984 <__aeabi_d2uiz>
   d8aa6:	4604      	mov	r4, r0
   d8aa8:	f7ff fc5c 	bl	d8364 <__aeabi_ui2d>
   d8aac:	2200      	movs	r2, #0
   d8aae:	4b0a      	ldr	r3, [pc, #40]	; (d8ad8 <__aeabi_d2ulz+0x44>)
   d8ab0:	f7ff fcce 	bl	d8450 <__aeabi_dmul>
   d8ab4:	4602      	mov	r2, r0
   d8ab6:	460b      	mov	r3, r1
   d8ab8:	4630      	mov	r0, r6
   d8aba:	4639      	mov	r1, r7
   d8abc:	f7ff fb14 	bl	d80e8 <__aeabi_dsub>
   d8ac0:	f7ff ff60 	bl	d8984 <__aeabi_d2uiz>
   d8ac4:	4623      	mov	r3, r4
   d8ac6:	2200      	movs	r2, #0
   d8ac8:	ea42 0200 	orr.w	r2, r2, r0
   d8acc:	4610      	mov	r0, r2
   d8ace:	4619      	mov	r1, r3
   d8ad0:	bdd0      	pop	{r4, r6, r7, pc}
   d8ad2:	bf00      	nop
   d8ad4:	3df00000 	.word	0x3df00000
   d8ad8:	41f00000 	.word	0x41f00000

000d8adc <__udivmoddi4>:
   d8adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ae0:	468c      	mov	ip, r1
   d8ae2:	460e      	mov	r6, r1
   d8ae4:	4604      	mov	r4, r0
   d8ae6:	9d08      	ldr	r5, [sp, #32]
   d8ae8:	2b00      	cmp	r3, #0
   d8aea:	d150      	bne.n	d8b8e <__udivmoddi4+0xb2>
   d8aec:	428a      	cmp	r2, r1
   d8aee:	4617      	mov	r7, r2
   d8af0:	d96c      	bls.n	d8bcc <__udivmoddi4+0xf0>
   d8af2:	fab2 fe82 	clz	lr, r2
   d8af6:	f1be 0f00 	cmp.w	lr, #0
   d8afa:	d00b      	beq.n	d8b14 <__udivmoddi4+0x38>
   d8afc:	f1ce 0420 	rsb	r4, lr, #32
   d8b00:	fa20 f404 	lsr.w	r4, r0, r4
   d8b04:	fa01 f60e 	lsl.w	r6, r1, lr
   d8b08:	ea44 0c06 	orr.w	ip, r4, r6
   d8b0c:	fa02 f70e 	lsl.w	r7, r2, lr
   d8b10:	fa00 f40e 	lsl.w	r4, r0, lr
   d8b14:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8b18:	0c22      	lsrs	r2, r4, #16
   d8b1a:	fbbc f0f9 	udiv	r0, ip, r9
   d8b1e:	fa1f f887 	uxth.w	r8, r7
   d8b22:	fb09 c610 	mls	r6, r9, r0, ip
   d8b26:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8b2a:	fb00 f308 	mul.w	r3, r0, r8
   d8b2e:	42b3      	cmp	r3, r6
   d8b30:	d909      	bls.n	d8b46 <__udivmoddi4+0x6a>
   d8b32:	19f6      	adds	r6, r6, r7
   d8b34:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d8b38:	f080 8122 	bcs.w	d8d80 <__udivmoddi4+0x2a4>
   d8b3c:	42b3      	cmp	r3, r6
   d8b3e:	f240 811f 	bls.w	d8d80 <__udivmoddi4+0x2a4>
   d8b42:	3802      	subs	r0, #2
   d8b44:	443e      	add	r6, r7
   d8b46:	1af6      	subs	r6, r6, r3
   d8b48:	b2a2      	uxth	r2, r4
   d8b4a:	fbb6 f3f9 	udiv	r3, r6, r9
   d8b4e:	fb09 6613 	mls	r6, r9, r3, r6
   d8b52:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8b56:	fb03 f808 	mul.w	r8, r3, r8
   d8b5a:	45a0      	cmp	r8, r4
   d8b5c:	d909      	bls.n	d8b72 <__udivmoddi4+0x96>
   d8b5e:	19e4      	adds	r4, r4, r7
   d8b60:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d8b64:	f080 810a 	bcs.w	d8d7c <__udivmoddi4+0x2a0>
   d8b68:	45a0      	cmp	r8, r4
   d8b6a:	f240 8107 	bls.w	d8d7c <__udivmoddi4+0x2a0>
   d8b6e:	3b02      	subs	r3, #2
   d8b70:	443c      	add	r4, r7
   d8b72:	ebc8 0404 	rsb	r4, r8, r4
   d8b76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8b7a:	2100      	movs	r1, #0
   d8b7c:	2d00      	cmp	r5, #0
   d8b7e:	d062      	beq.n	d8c46 <__udivmoddi4+0x16a>
   d8b80:	fa24 f40e 	lsr.w	r4, r4, lr
   d8b84:	2300      	movs	r3, #0
   d8b86:	602c      	str	r4, [r5, #0]
   d8b88:	606b      	str	r3, [r5, #4]
   d8b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b8e:	428b      	cmp	r3, r1
   d8b90:	d907      	bls.n	d8ba2 <__udivmoddi4+0xc6>
   d8b92:	2d00      	cmp	r5, #0
   d8b94:	d055      	beq.n	d8c42 <__udivmoddi4+0x166>
   d8b96:	2100      	movs	r1, #0
   d8b98:	e885 0041 	stmia.w	r5, {r0, r6}
   d8b9c:	4608      	mov	r0, r1
   d8b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ba2:	fab3 f183 	clz	r1, r3
   d8ba6:	2900      	cmp	r1, #0
   d8ba8:	f040 8090 	bne.w	d8ccc <__udivmoddi4+0x1f0>
   d8bac:	42b3      	cmp	r3, r6
   d8bae:	d302      	bcc.n	d8bb6 <__udivmoddi4+0xda>
   d8bb0:	4282      	cmp	r2, r0
   d8bb2:	f200 80f8 	bhi.w	d8da6 <__udivmoddi4+0x2ca>
   d8bb6:	1a84      	subs	r4, r0, r2
   d8bb8:	eb66 0603 	sbc.w	r6, r6, r3
   d8bbc:	2001      	movs	r0, #1
   d8bbe:	46b4      	mov	ip, r6
   d8bc0:	2d00      	cmp	r5, #0
   d8bc2:	d040      	beq.n	d8c46 <__udivmoddi4+0x16a>
   d8bc4:	e885 1010 	stmia.w	r5, {r4, ip}
   d8bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8bcc:	b912      	cbnz	r2, d8bd4 <__udivmoddi4+0xf8>
   d8bce:	2701      	movs	r7, #1
   d8bd0:	fbb7 f7f2 	udiv	r7, r7, r2
   d8bd4:	fab7 fe87 	clz	lr, r7
   d8bd8:	f1be 0f00 	cmp.w	lr, #0
   d8bdc:	d135      	bne.n	d8c4a <__udivmoddi4+0x16e>
   d8bde:	1bf3      	subs	r3, r6, r7
   d8be0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8be4:	fa1f fc87 	uxth.w	ip, r7
   d8be8:	2101      	movs	r1, #1
   d8bea:	fbb3 f0f8 	udiv	r0, r3, r8
   d8bee:	0c22      	lsrs	r2, r4, #16
   d8bf0:	fb08 3610 	mls	r6, r8, r0, r3
   d8bf4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8bf8:	fb0c f300 	mul.w	r3, ip, r0
   d8bfc:	42b3      	cmp	r3, r6
   d8bfe:	d907      	bls.n	d8c10 <__udivmoddi4+0x134>
   d8c00:	19f6      	adds	r6, r6, r7
   d8c02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d8c06:	d202      	bcs.n	d8c0e <__udivmoddi4+0x132>
   d8c08:	42b3      	cmp	r3, r6
   d8c0a:	f200 80ce 	bhi.w	d8daa <__udivmoddi4+0x2ce>
   d8c0e:	4610      	mov	r0, r2
   d8c10:	1af6      	subs	r6, r6, r3
   d8c12:	b2a2      	uxth	r2, r4
   d8c14:	fbb6 f3f8 	udiv	r3, r6, r8
   d8c18:	fb08 6613 	mls	r6, r8, r3, r6
   d8c1c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8c20:	fb0c fc03 	mul.w	ip, ip, r3
   d8c24:	45a4      	cmp	ip, r4
   d8c26:	d907      	bls.n	d8c38 <__udivmoddi4+0x15c>
   d8c28:	19e4      	adds	r4, r4, r7
   d8c2a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d8c2e:	d202      	bcs.n	d8c36 <__udivmoddi4+0x15a>
   d8c30:	45a4      	cmp	ip, r4
   d8c32:	f200 80b5 	bhi.w	d8da0 <__udivmoddi4+0x2c4>
   d8c36:	4613      	mov	r3, r2
   d8c38:	ebcc 0404 	rsb	r4, ip, r4
   d8c3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8c40:	e79c      	b.n	d8b7c <__udivmoddi4+0xa0>
   d8c42:	4629      	mov	r1, r5
   d8c44:	4628      	mov	r0, r5
   d8c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c4a:	f1ce 0120 	rsb	r1, lr, #32
   d8c4e:	fa06 f30e 	lsl.w	r3, r6, lr
   d8c52:	fa07 f70e 	lsl.w	r7, r7, lr
   d8c56:	fa20 f901 	lsr.w	r9, r0, r1
   d8c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8c5e:	40ce      	lsrs	r6, r1
   d8c60:	ea49 0903 	orr.w	r9, r9, r3
   d8c64:	fbb6 faf8 	udiv	sl, r6, r8
   d8c68:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d8c6c:	fb08 661a 	mls	r6, r8, sl, r6
   d8c70:	fa1f fc87 	uxth.w	ip, r7
   d8c74:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d8c78:	fb0a f20c 	mul.w	r2, sl, ip
   d8c7c:	429a      	cmp	r2, r3
   d8c7e:	fa00 f40e 	lsl.w	r4, r0, lr
   d8c82:	d90a      	bls.n	d8c9a <__udivmoddi4+0x1be>
   d8c84:	19db      	adds	r3, r3, r7
   d8c86:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d8c8a:	f080 8087 	bcs.w	d8d9c <__udivmoddi4+0x2c0>
   d8c8e:	429a      	cmp	r2, r3
   d8c90:	f240 8084 	bls.w	d8d9c <__udivmoddi4+0x2c0>
   d8c94:	f1aa 0a02 	sub.w	sl, sl, #2
   d8c98:	443b      	add	r3, r7
   d8c9a:	1a9b      	subs	r3, r3, r2
   d8c9c:	fa1f f989 	uxth.w	r9, r9
   d8ca0:	fbb3 f1f8 	udiv	r1, r3, r8
   d8ca4:	fb08 3311 	mls	r3, r8, r1, r3
   d8ca8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d8cac:	fb01 f60c 	mul.w	r6, r1, ip
   d8cb0:	429e      	cmp	r6, r3
   d8cb2:	d907      	bls.n	d8cc4 <__udivmoddi4+0x1e8>
   d8cb4:	19db      	adds	r3, r3, r7
   d8cb6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d8cba:	d26b      	bcs.n	d8d94 <__udivmoddi4+0x2b8>
   d8cbc:	429e      	cmp	r6, r3
   d8cbe:	d969      	bls.n	d8d94 <__udivmoddi4+0x2b8>
   d8cc0:	3902      	subs	r1, #2
   d8cc2:	443b      	add	r3, r7
   d8cc4:	1b9b      	subs	r3, r3, r6
   d8cc6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d8cca:	e78e      	b.n	d8bea <__udivmoddi4+0x10e>
   d8ccc:	f1c1 0e20 	rsb	lr, r1, #32
   d8cd0:	fa22 f40e 	lsr.w	r4, r2, lr
   d8cd4:	408b      	lsls	r3, r1
   d8cd6:	4323      	orrs	r3, r4
   d8cd8:	fa20 f70e 	lsr.w	r7, r0, lr
   d8cdc:	fa06 f401 	lsl.w	r4, r6, r1
   d8ce0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8ce4:	fa26 f60e 	lsr.w	r6, r6, lr
   d8ce8:	433c      	orrs	r4, r7
   d8cea:	fbb6 f9fc 	udiv	r9, r6, ip
   d8cee:	0c27      	lsrs	r7, r4, #16
   d8cf0:	fb0c 6619 	mls	r6, ip, r9, r6
   d8cf4:	fa1f f883 	uxth.w	r8, r3
   d8cf8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8cfc:	fb09 f708 	mul.w	r7, r9, r8
   d8d00:	42b7      	cmp	r7, r6
   d8d02:	fa02 f201 	lsl.w	r2, r2, r1
   d8d06:	fa00 fa01 	lsl.w	sl, r0, r1
   d8d0a:	d908      	bls.n	d8d1e <__udivmoddi4+0x242>
   d8d0c:	18f6      	adds	r6, r6, r3
   d8d0e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d8d12:	d241      	bcs.n	d8d98 <__udivmoddi4+0x2bc>
   d8d14:	42b7      	cmp	r7, r6
   d8d16:	d93f      	bls.n	d8d98 <__udivmoddi4+0x2bc>
   d8d18:	f1a9 0902 	sub.w	r9, r9, #2
   d8d1c:	441e      	add	r6, r3
   d8d1e:	1bf6      	subs	r6, r6, r7
   d8d20:	b2a0      	uxth	r0, r4
   d8d22:	fbb6 f4fc 	udiv	r4, r6, ip
   d8d26:	fb0c 6614 	mls	r6, ip, r4, r6
   d8d2a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d8d2e:	fb04 f808 	mul.w	r8, r4, r8
   d8d32:	45b8      	cmp	r8, r7
   d8d34:	d907      	bls.n	d8d46 <__udivmoddi4+0x26a>
   d8d36:	18ff      	adds	r7, r7, r3
   d8d38:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d8d3c:	d228      	bcs.n	d8d90 <__udivmoddi4+0x2b4>
   d8d3e:	45b8      	cmp	r8, r7
   d8d40:	d926      	bls.n	d8d90 <__udivmoddi4+0x2b4>
   d8d42:	3c02      	subs	r4, #2
   d8d44:	441f      	add	r7, r3
   d8d46:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d8d4a:	ebc8 0707 	rsb	r7, r8, r7
   d8d4e:	fba0 8902 	umull	r8, r9, r0, r2
   d8d52:	454f      	cmp	r7, r9
   d8d54:	4644      	mov	r4, r8
   d8d56:	464e      	mov	r6, r9
   d8d58:	d314      	bcc.n	d8d84 <__udivmoddi4+0x2a8>
   d8d5a:	d029      	beq.n	d8db0 <__udivmoddi4+0x2d4>
   d8d5c:	b365      	cbz	r5, d8db8 <__udivmoddi4+0x2dc>
   d8d5e:	ebba 0304 	subs.w	r3, sl, r4
   d8d62:	eb67 0706 	sbc.w	r7, r7, r6
   d8d66:	fa07 fe0e 	lsl.w	lr, r7, lr
   d8d6a:	40cb      	lsrs	r3, r1
   d8d6c:	40cf      	lsrs	r7, r1
   d8d6e:	ea4e 0303 	orr.w	r3, lr, r3
   d8d72:	e885 0088 	stmia.w	r5, {r3, r7}
   d8d76:	2100      	movs	r1, #0
   d8d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d7c:	4613      	mov	r3, r2
   d8d7e:	e6f8      	b.n	d8b72 <__udivmoddi4+0x96>
   d8d80:	4610      	mov	r0, r2
   d8d82:	e6e0      	b.n	d8b46 <__udivmoddi4+0x6a>
   d8d84:	ebb8 0402 	subs.w	r4, r8, r2
   d8d88:	eb69 0603 	sbc.w	r6, r9, r3
   d8d8c:	3801      	subs	r0, #1
   d8d8e:	e7e5      	b.n	d8d5c <__udivmoddi4+0x280>
   d8d90:	4604      	mov	r4, r0
   d8d92:	e7d8      	b.n	d8d46 <__udivmoddi4+0x26a>
   d8d94:	4611      	mov	r1, r2
   d8d96:	e795      	b.n	d8cc4 <__udivmoddi4+0x1e8>
   d8d98:	4681      	mov	r9, r0
   d8d9a:	e7c0      	b.n	d8d1e <__udivmoddi4+0x242>
   d8d9c:	468a      	mov	sl, r1
   d8d9e:	e77c      	b.n	d8c9a <__udivmoddi4+0x1be>
   d8da0:	3b02      	subs	r3, #2
   d8da2:	443c      	add	r4, r7
   d8da4:	e748      	b.n	d8c38 <__udivmoddi4+0x15c>
   d8da6:	4608      	mov	r0, r1
   d8da8:	e70a      	b.n	d8bc0 <__udivmoddi4+0xe4>
   d8daa:	3802      	subs	r0, #2
   d8dac:	443e      	add	r6, r7
   d8dae:	e72f      	b.n	d8c10 <__udivmoddi4+0x134>
   d8db0:	45c2      	cmp	sl, r8
   d8db2:	d3e7      	bcc.n	d8d84 <__udivmoddi4+0x2a8>
   d8db4:	463e      	mov	r6, r7
   d8db6:	e7d1      	b.n	d8d5c <__udivmoddi4+0x280>
   d8db8:	4629      	mov	r1, r5
   d8dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8dbe:	bf00      	nop

000d8dc0 <__aeabi_idiv0>:
   d8dc0:	4770      	bx	lr
   d8dc2:	bf00      	nop

000d8dc4 <calloc>:
   d8dc4:	4b02      	ldr	r3, [pc, #8]	; (d8dd0 <calloc+0xc>)
   d8dc6:	460a      	mov	r2, r1
   d8dc8:	4601      	mov	r1, r0
   d8dca:	6818      	ldr	r0, [r3, #0]
   d8dcc:	f000 b84d 	b.w	d8e6a <_calloc_r>
   d8dd0:	2003e430 	.word	0x2003e430

000d8dd4 <__cxa_atexit>:
   d8dd4:	b510      	push	{r4, lr}
   d8dd6:	4c05      	ldr	r4, [pc, #20]	; (d8dec <__cxa_atexit+0x18>)
   d8dd8:	4613      	mov	r3, r2
   d8dda:	b12c      	cbz	r4, d8de8 <__cxa_atexit+0x14>
   d8ddc:	460a      	mov	r2, r1
   d8dde:	4601      	mov	r1, r0
   d8de0:	2002      	movs	r0, #2
   d8de2:	f3af 8000 	nop.w
   d8de6:	bd10      	pop	{r4, pc}
   d8de8:	4620      	mov	r0, r4
   d8dea:	bd10      	pop	{r4, pc}
   d8dec:	00000000 	.word	0x00000000

000d8df0 <memcmp>:
   d8df0:	b510      	push	{r4, lr}
   d8df2:	3901      	subs	r1, #1
   d8df4:	4402      	add	r2, r0
   d8df6:	4290      	cmp	r0, r2
   d8df8:	d007      	beq.n	d8e0a <memcmp+0x1a>
   d8dfa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8dfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8e02:	42a3      	cmp	r3, r4
   d8e04:	d0f7      	beq.n	d8df6 <memcmp+0x6>
   d8e06:	1b18      	subs	r0, r3, r4
   d8e08:	bd10      	pop	{r4, pc}
   d8e0a:	2000      	movs	r0, #0
   d8e0c:	bd10      	pop	{r4, pc}

000d8e0e <memcpy>:
   d8e0e:	b510      	push	{r4, lr}
   d8e10:	1e43      	subs	r3, r0, #1
   d8e12:	440a      	add	r2, r1
   d8e14:	4291      	cmp	r1, r2
   d8e16:	d004      	beq.n	d8e22 <memcpy+0x14>
   d8e18:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8e20:	e7f8      	b.n	d8e14 <memcpy+0x6>
   d8e22:	bd10      	pop	{r4, pc}

000d8e24 <memmove>:
   d8e24:	4288      	cmp	r0, r1
   d8e26:	b510      	push	{r4, lr}
   d8e28:	eb01 0302 	add.w	r3, r1, r2
   d8e2c:	d801      	bhi.n	d8e32 <memmove+0xe>
   d8e2e:	1e42      	subs	r2, r0, #1
   d8e30:	e00b      	b.n	d8e4a <memmove+0x26>
   d8e32:	4298      	cmp	r0, r3
   d8e34:	d2fb      	bcs.n	d8e2e <memmove+0xa>
   d8e36:	1881      	adds	r1, r0, r2
   d8e38:	1ad2      	subs	r2, r2, r3
   d8e3a:	42d3      	cmn	r3, r2
   d8e3c:	d004      	beq.n	d8e48 <memmove+0x24>
   d8e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8e42:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8e46:	e7f8      	b.n	d8e3a <memmove+0x16>
   d8e48:	bd10      	pop	{r4, pc}
   d8e4a:	4299      	cmp	r1, r3
   d8e4c:	d004      	beq.n	d8e58 <memmove+0x34>
   d8e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8e52:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8e56:	e7f8      	b.n	d8e4a <memmove+0x26>
   d8e58:	bd10      	pop	{r4, pc}

000d8e5a <memset>:
   d8e5a:	4402      	add	r2, r0
   d8e5c:	4603      	mov	r3, r0
   d8e5e:	4293      	cmp	r3, r2
   d8e60:	d002      	beq.n	d8e68 <memset+0xe>
   d8e62:	f803 1b01 	strb.w	r1, [r3], #1
   d8e66:	e7fa      	b.n	d8e5e <memset+0x4>
   d8e68:	4770      	bx	lr

000d8e6a <_calloc_r>:
   d8e6a:	b538      	push	{r3, r4, r5, lr}
   d8e6c:	fb02 f401 	mul.w	r4, r2, r1
   d8e70:	4621      	mov	r1, r4
   d8e72:	f7fc fc7d 	bl	d5770 <_malloc_r>
   d8e76:	4605      	mov	r5, r0
   d8e78:	b118      	cbz	r0, d8e82 <_calloc_r+0x18>
   d8e7a:	4622      	mov	r2, r4
   d8e7c:	2100      	movs	r1, #0
   d8e7e:	f7ff ffec 	bl	d8e5a <memset>
   d8e82:	4628      	mov	r0, r5
   d8e84:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8e88 <srand>:
   d8e88:	b538      	push	{r3, r4, r5, lr}
   d8e8a:	4b12      	ldr	r3, [pc, #72]	; (d8ed4 <srand+0x4c>)
   d8e8c:	681c      	ldr	r4, [r3, #0]
   d8e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8e90:	4605      	mov	r5, r0
   d8e92:	b9d3      	cbnz	r3, d8eca <srand+0x42>
   d8e94:	2018      	movs	r0, #24
   d8e96:	f7fc fc43 	bl	d5720 <malloc>
   d8e9a:	f243 330e 	movw	r3, #13070	; 0x330e
   d8e9e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8ea0:	8003      	strh	r3, [r0, #0]
   d8ea2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8ea6:	8043      	strh	r3, [r0, #2]
   d8ea8:	f241 2334 	movw	r3, #4660	; 0x1234
   d8eac:	8083      	strh	r3, [r0, #4]
   d8eae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8eb2:	80c3      	strh	r3, [r0, #6]
   d8eb4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8eb8:	8103      	strh	r3, [r0, #8]
   d8eba:	2305      	movs	r3, #5
   d8ebc:	8143      	strh	r3, [r0, #10]
   d8ebe:	230b      	movs	r3, #11
   d8ec0:	8183      	strh	r3, [r0, #12]
   d8ec2:	2201      	movs	r2, #1
   d8ec4:	2300      	movs	r3, #0
   d8ec6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8ecc:	2200      	movs	r2, #0
   d8ece:	611d      	str	r5, [r3, #16]
   d8ed0:	615a      	str	r2, [r3, #20]
   d8ed2:	bd38      	pop	{r3, r4, r5, pc}
   d8ed4:	2003e430 	.word	0x2003e430

000d8ed8 <strdup>:
   d8ed8:	4b02      	ldr	r3, [pc, #8]	; (d8ee4 <strdup+0xc>)
   d8eda:	4601      	mov	r1, r0
   d8edc:	6818      	ldr	r0, [r3, #0]
   d8ede:	f000 b803 	b.w	d8ee8 <_strdup_r>
   d8ee2:	bf00      	nop
   d8ee4:	2003e430 	.word	0x2003e430

000d8ee8 <_strdup_r>:
   d8ee8:	b570      	push	{r4, r5, r6, lr}
   d8eea:	4606      	mov	r6, r0
   d8eec:	4608      	mov	r0, r1
   d8eee:	460c      	mov	r4, r1
   d8ef0:	f000 f80d 	bl	d8f0e <strlen>
   d8ef4:	1c45      	adds	r5, r0, #1
   d8ef6:	4629      	mov	r1, r5
   d8ef8:	4630      	mov	r0, r6
   d8efa:	f7fc fc39 	bl	d5770 <_malloc_r>
   d8efe:	4606      	mov	r6, r0
   d8f00:	b118      	cbz	r0, d8f0a <_strdup_r+0x22>
   d8f02:	462a      	mov	r2, r5
   d8f04:	4621      	mov	r1, r4
   d8f06:	f7ff ff82 	bl	d8e0e <memcpy>
   d8f0a:	4630      	mov	r0, r6
   d8f0c:	bd70      	pop	{r4, r5, r6, pc}

000d8f0e <strlen>:
   d8f0e:	4603      	mov	r3, r0
   d8f10:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8f14:	2a00      	cmp	r2, #0
   d8f16:	d1fb      	bne.n	d8f10 <strlen+0x2>
   d8f18:	1a18      	subs	r0, r3, r0
   d8f1a:	3801      	subs	r0, #1
   d8f1c:	4770      	bx	lr

000d8f1e <strnlen>:
   d8f1e:	b510      	push	{r4, lr}
   d8f20:	4603      	mov	r3, r0
   d8f22:	4401      	add	r1, r0
   d8f24:	428b      	cmp	r3, r1
   d8f26:	d004      	beq.n	d8f32 <strnlen+0x14>
   d8f28:	781a      	ldrb	r2, [r3, #0]
   d8f2a:	1c5c      	adds	r4, r3, #1
   d8f2c:	b10a      	cbz	r2, d8f32 <strnlen+0x14>
   d8f2e:	4623      	mov	r3, r4
   d8f30:	e7f8      	b.n	d8f24 <strnlen+0x6>
   d8f32:	1a18      	subs	r0, r3, r0
   d8f34:	bd10      	pop	{r4, pc}

000d8f36 <link_code_end>:
	...

000d8f38 <dynalib_user>:
   d8f38:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8f48:	0000 0000                                   ....

000d8f4c <_ZTV16JsonWriterStaticILj256EE>:
	...
   d8f54:	4105 000d 4119 000d 6574 706d 6800 6d75     .A...A..temp.hum
   d8f64:	6469 7469 0079 6f74 6767 656c 654c 0064     idity.toggleLed.
   d8f74:	696c 6867 0074 6e65 2d76 6176 736c 5400     light.env-vals.T
   d8f84:	6d65 3a70 2520 0066 7548 696d 6964 7974     emp: %f.Humidity
   d8f94:	203a 6625 6c00 6769 7468 6d2d 7465 7265     : %f.light-meter
   d8fa4:	6c2f 7665 6c65 5500 7470 6d69 3a65 2520     /level.Uptime: %
   d8fb4:	0064 7453 6572 676e 6874 203a 6600 6572     d.Strength: .fre
   d8fc4:	2065 656d 6f6d 7972 203a 3500 3163 3962     e memory: .5c1b9
   d8fd4:	3061 2d64 3562 6562 342d 3461 2d30 6638     a0d-b5be-4a40-8f
   d8fe4:	6137 362d 6236 3633 3064 3561 3731 0036     7a-66b36d0a5176.
   d8ff4:	6466 6663 6134 6633 332d 6566 2d64 6534     fdcf4a3f-3fed-4e
   d9004:	3264 382d 6534 2d36 3430 6262 3962 6561     d2-84e6-04bbb9ae
   d9014:	3430 3464 7500 7470 6d69 0065 6363 3739     04d4.uptime.cc97
   d9024:	3263 6330 352d 3238 2d32 3834 3030 612d     c20c-5822-4800-a
   d9034:	6564 2d35 6631 3636 6431 3132 3333 6565     de5-1f661d2133ee
   d9044:	7300 7274 6e65 7467 0068 3264 3262 6236     .strength.d2b26b
   d9054:	3366 392d 3937 2d32 3234 6366 392d 3865     f3-9792-42fc-9e8
   d9064:	2d61 3134 3666 3031 6437 3066 6334 6600     a-41f6107df04c.f
   d9074:	6572 4d65 6d65 726f 0079 0000               reeMemory...

000d9080 <_ZTV10JsonBuffer>:
	...
   d9088:	4ed1 000d 4eed 000d                         .N...N..

000d9090 <_ZTV10JsonWriter>:
	...
   d9098:	4f01 000d 4f15 000d 6c25 0075 3025 7834     .O...O..%lu.%04x
   d90a8:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d90b8:	6573 2500 2a2e 0066 2e25 6c2a 0066 6c25     se.%.*f.%.*lf.%l
   d90c8:	0066 0000                                   f...

000d90cc <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d90d4:	584d 000d 5853 000d 64d5 000d 587d 000d     MX..SX...d..}X..
   d90e4:	584f 000d                                   OX..

000d90e8 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d90f0:	5847 000d 5861 000d 65e1 000d 5881 000d     GX..aX...e...X..
   d9100:	5849 000d                                   IX..

000d9104 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d910c:	5841 000d 586f 000d 5fbf 000d 5885 000d     AX..oX..._...X..
   d911c:	5843 000d                                   CX..

000d9120 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9120:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d9130:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d9140:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d9150:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d9160:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d9170:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d9180:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d9190:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d91a0:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d91b0:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d91c0:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d91d0:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d91e0:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d91f0:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d9200:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d9210:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d9220:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d9230:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d9240:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d9250:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d9260:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d9270:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d9280:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d9290:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d92a0:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d92b0:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d92c0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d92d0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d92d8:	68cd 000d 68d3 000d 6929 000d 68e1 000d     .h...h..)i...h..
   d92e8:	68cf 000d                                   .h..

000d92ec <_ZTVN5spark13EthernetClassE>:
	...
   d92f4:	6f47 000d 6f3d 000d 6f33 000d 6f29 000d     Go..=o..3o..)o..
   d9304:	6f1d 000d 6f11 000d 6f05 000d 6efd 000d     .o...o...o...n..
   d9314:	6ef3 000d 6ee9 000d 72b1 000d               .n...n...r..

000d9320 <_ZTV7TwoWire>:
	...
   d9328:	6f65 000d 6faf 000d 6f87 000d 6f67 000d     eo...o...o..go..
   d9338:	6f8f 000d 6f97 000d 6f9f 000d 6fa7 000d     .o...o...o...o..

000d9348 <_ZTV9IPAddress>:
	...
   d9350:	7001 000d 6ff1 000d 6ff3 000d 6162 6475     .p...o...o..baud
   d9360:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9370:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9380:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9390:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d93a0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d93b0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d93c0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d93d0:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d93e0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d93f0:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d9400:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d9410:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d9420:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d9430:	696e 0063 6c61 006c                         nic.all.

000d9438 <_ZTVN5spark9MeshClassE>:
	...
   d9440:	7143 000d 7139 000d 712f 000d 7125 000d     Cq..9q../q..%q..
   d9450:	7119 000d 710d 000d 7101 000d 70f9 000d     .q...q...q...p..
   d9460:	70ef 000d 70e5 000d 72b1 000d               .p...p...r..

000d946c <_ZTVN5spark12NetworkClassE>:
	...
   d9474:	7249 000d 7253 000d 725d 000d 7267 000d     Ir..Sr..]r..gr..
   d9484:	7271 000d 727d 000d 7289 000d 7295 000d     qr..}r...r...r..
   d9494:	729d 000d 72a7 000d 72b1 000d               .r...r...r..

000d94a0 <_ZTV8SPIClass>:
	...
   d94a8:	74e1 000d 74e3 000d 005a 2b25 3330 3a64     .t...t..Z.%+03d:
   d94b8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d94c8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d94d8:	0000 0000                                   ....

000d94dc <_ZTV11USARTSerial>:
	...
   d94e4:	78a5 000d 78f5 000d 7903 000d 7391 000d     .x...x...y...s..
   d94f4:	78b9 000d 78db 000d 78c7 000d 78ef 000d     .x...x...x...x..
   d9504:	78a7 000d 78ab 000d                         .x...x..

000d950c <_ZTV9USBSerial>:
	...
   d9514:	79e1 000d 7a31 000d 7a3f 000d 7391 000d     .y..1z..?z...s..
   d9524:	7a1d 000d 79e3 000d 79f9 000d 7a2b 000d     .z...y...y..+z..
   d9534:	7a0f 000d 79dd 000d                         .z...y..

000d953c <_ZTVN5spark9WiFiClassE>:
	...
   d9544:	7b4b 000d 7b41 000d 7b37 000d 7aed 000d     K{..A{..7{...z..
   d9554:	7b2b 000d 7b1f 000d 7b13 000d 7b0b 000d     +{...{...{...{..
   d9564:	7b01 000d 7af7 000d 72b1 000d               .{...z...r..

000d9570 <__sf_fake_stdin>:
	...

000d9590 <__sf_fake_stdout>:
	...

000d95b0 <__sf_fake_stderr>:
	...
   d95d0:	0043                                        C.

000d95d2 <link_const_variable_data_end>:
	...

000d95d4 <link_constructors_location>:
   d95d4:	000d4649 	.word	0x000d4649
   d95d8:	000d47e5 	.word	0x000d47e5
   d95dc:	000d47e9 	.word	0x000d47e9
   d95e0:	000d4c25 	.word	0x000d4c25
   d95e4:	000d4ec1 	.word	0x000d4ec1
   d95e8:	000d5179 	.word	0x000d5179
   d95ec:	000d68bd 	.word	0x000d68bd
   d95f0:	000d6f51 	.word	0x000d6f51
   d95f4:	000d70d5 	.word	0x000d70d5
   d95f8:	000d71f9 	.word	0x000d71f9
   d95fc:	000d737d 	.word	0x000d737d
   d9600:	000d74c5 	.word	0x000d74c5
   d9604:	000d785d 	.word	0x000d785d
   d9608:	000d7891 	.word	0x000d7891
   d960c:	000d7b55 	.word	0x000d7b55
   d9610:	000d7df9 	.word	0x000d7df9
   d9614:	000d7e51 	.word	0x000d7e51
   d9618:	000d7f15 	.word	0x000d7f15
   d961c:	000d7f99 	.word	0x000d7f99
   d9620:	000d801d 	.word	0x000d801d

000d9624 <link_constructors_end>:
	...
