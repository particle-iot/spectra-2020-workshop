
/Users/bsatrom/Development/particle/workshops/roadshow-workshop-2019/labs/lab2/target/lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d8e40  000d8e40  00008e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00018edc  2**0
                  CONTENTS
  4 .data         00000068  2003e2ec  000d8e48  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000049c  2003e358  2003e358  0001e358  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d8eb0  000d8eb0  00018eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8ed8  000d8ed8  00018ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fa87c  00000000  00000000  00018edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013fa9  00000000  00000000  00113758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000207ab  00000000  00000000  00127701  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a60  00000000  00000000  00147eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004be8  00000000  00000000  0014a90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b46c  00000000  00000000  0014f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003105a  00000000  00000000  0018a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001061e5  00000000  00000000  001bb9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db40  00000000  00000000  002c1ba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	dc 87 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fb40 	bl	d86b2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fb60 	bl	d86fe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ec 	.word	0x2003e2ec
   d4048:	000d8e48 	.word	0x000d8e48
   d404c:	2003e354 	.word	0x2003e354
   d4050:	2003e358 	.word	0x2003e358
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fa7f 	bl	d755c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8e38 	.word	0x000d8e38
   d4080:	000d8df0 	.word	0x000d8df0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b890 	b.w	d41a8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f901 	bl	d4290 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 ba31 	b.w	d74f8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b883 	b.w	d51a0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b889 	b.w	d51b0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b887 	b.w	d51b0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z9toggleLed6String>:
    }
  }
}

int toggleLed(String args)
{
   d40b4:	b510      	push	{r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40b6:	4c10      	ldr	r4, [pc, #64]	; (d40f8 <_Z9toggleLed6String+0x44>)
    }
  }
}

int toggleLed(String args)
{
   d40b8:	ed2d 8b02 	vpush	{d8}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40bc:	ed9f 8a0f 	vldr	s16, [pc, #60]	; d40fc <_Z9toggleLed6String+0x48>
   d40c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d40c4:	eeb0 0a48 	vmov.f32	s0, s16
   d40c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d40cc:	2100      	movs	r1, #0
   d40ce:	4620      	mov	r0, r4
   d40d0:	f000 fbba 	bl	d4848 <_ZN12ChainableLED11setColorHSBEhfff>

  delay(1000);
   d40d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40d8:	f001 f8db 	bl	d5292 <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d40dc:	eeb0 1a48 	vmov.f32	s2, s16
   d40e0:	eef0 0a48 	vmov.f32	s1, s16
   d40e4:	eeb0 0a48 	vmov.f32	s0, s16
   d40e8:	4620      	mov	r0, r4
   d40ea:	2100      	movs	r1, #0
   d40ec:	f000 fbac 	bl	d4848 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
   d40f0:	ecbd 8b02 	vpop	{d8}
   d40f4:	2001      	movs	r0, #1
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	2003e35c 	.word	0x2003e35c
   d40fc:	00000000 	.word	0x00000000

000d4100 <_Z12configureBLEv>:

int temp, humidity;
double currentLightLevel;

void configureBLE()
{
   d4100:	b510      	push	{r4, lr}
   d4102:	b096      	sub	sp, #88	; 0x58
  BLE.addCharacteristic(batStateCharacteristic);
   d4104:	f001 fba4 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4108:	4a23      	ldr	r2, [pc, #140]	; (d4198 <_Z12configureBLEv+0x98>)
   d410a:	4601      	mov	r1, r0
   d410c:	a80d      	add	r0, sp, #52	; 0x34
   d410e:	f001 ffed 	bl	d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4112:	a80d      	add	r0, sp, #52	; 0x34
   d4114:	f001 fc5e 	bl	d59d4 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(powerSourceCharacteristic);
   d4118:	f001 fb9a 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d411c:	4a1f      	ldr	r2, [pc, #124]	; (d419c <_Z12configureBLEv+0x9c>)
   d411e:	4601      	mov	r1, r0
   d4120:	a80d      	add	r0, sp, #52	; 0x34
   d4122:	f001 ffe3 	bl	d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4126:	a80d      	add	r0, sp, #52	; 0x34
   d4128:	f001 fc54 	bl	d59d4 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(batLevelCharacteristic);
   d412c:	f001 fb90 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4130:	4a1b      	ldr	r2, [pc, #108]	; (d41a0 <_Z12configureBLEv+0xa0>)
   d4132:	4601      	mov	r1, r0
   d4134:	a80d      	add	r0, sp, #52	; 0x34
   d4136:	f001 ffd9 	bl	d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d413a:	a80d      	add	r0, sp, #52	; 0x34
   d413c:	f001 fc4a 	bl	d59d4 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData advData;
   d4140:	a80d      	add	r0, sp, #52	; 0x34
   d4142:	f001 fa96 	bl	d5672 <_ZN8particle18BleAdvertisingDataC1Ev>

  // Advertise our private service only
  advData.appendServiceUUID(serviceUuid);
   d4146:	4917      	ldr	r1, [pc, #92]	; (d41a4 <_Z12configureBLEv+0xa4>)
   d4148:	a803      	add	r0, sp, #12
   d414a:	f001 f93d 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d414e:	a903      	add	r1, sp, #12
   d4150:	a808      	add	r0, sp, #32
   d4152:	f001 f939 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4156:	a808      	add	r0, sp, #32
   d4158:	f001 f974 	bl	d5444 <_ZNK8particle7BleUuid4typeEv>
   d415c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d415e:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4160:	b944      	cbnz	r4, d4174 <_Z12configureBLEv+0x74>
            uint16_t uuid16 = tempUUID.shorted();
   d4162:	f001 f98c 	bl	d547e <_ZNK8particle7BleUuid7shortedEv>
   d4166:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4168:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d416a:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d416e:	2103      	movs	r1, #3
   d4170:	9400      	str	r4, [sp, #0]
   d4172:	e006      	b.n	d4182 <_Z12configureBLEv+0x82>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4174:	f001 f985 	bl	d5482 <_ZNK8particle7BleUuid8rawBytesEv>
   d4178:	2300      	movs	r3, #0
   d417a:	9300      	str	r3, [sp, #0]
   d417c:	4602      	mov	r2, r0
   d417e:	2310      	movs	r3, #16
   d4180:	2107      	movs	r1, #7
   d4182:	a80d      	add	r0, sp, #52	; 0x34
   d4184:	f001 fa2e 	bl	d55e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  // Continuously advertise when not connected
  BLE.advertise(&advData);
   d4188:	f001 fb62 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d418c:	2200      	movs	r2, #0
   d418e:	a90d      	add	r1, sp, #52	; 0x34
   d4190:	f001 fbd1 	bl	d5936 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4194:	b016      	add	sp, #88	; 0x58
   d4196:	bd10      	pop	{r4, pc}
   d4198:	2003e390 	.word	0x2003e390
   d419c:	2003e364 	.word	0x2003e364
   d41a0:	2003e384 	.word	0x2003e384
   d41a4:	2003e36c 	.word	0x2003e36c

000d41a8 <setup>:

void setup()
{
   d41a8:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d41aa:	f003 f8e9 	bl	d7380 <_Z16_fetch_usbserialv>

  dht.begin();

  leds.init();
   d41ae:	4c17      	ldr	r4, [pc, #92]	; (d420c <setup+0x64>)
  BLE.advertise(&advData);
}

void setup()
{
  Serial.begin(9600);
   d41b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b4:	f003 f8d8 	bl	d7368 <_ZN9USBSerial5beginEl>

  dht.begin();
   d41b8:	4815      	ldr	r0, [pc, #84]	; (d4210 <setup+0x68>)
   d41ba:	f000 fc47 	bl	d4a4c <_ZN3DHT5beginEv>

  leds.init();
   d41be:	4620      	mov	r0, r4
   d41c0:	f000 faa0 	bl	d4704 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d41c4:	ed9f 1a13 	vldr	s2, [pc, #76]	; d4214 <setup+0x6c>
   d41c8:	4620      	mov	r0, r4
   d41ca:	eef0 0a41 	vmov.f32	s1, s2
   d41ce:	eeb0 0a41 	vmov.f32	s0, s2
   d41d2:	2100      	movs	r1, #0
   d41d4:	f000 fb38 	bl	d4848 <_ZN12ChainableLED11setColorHSBEhfff>

  pinMode(A0, INPUT);
   d41d8:	2100      	movs	r1, #0
   d41da:	2013      	movs	r0, #19
   d41dc:	f003 f9fc 	bl	d75d8 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d41e0:	2300      	movs	r3, #0
   d41e2:	2202      	movs	r2, #2
   d41e4:	490c      	ldr	r1, [pc, #48]	; (d4218 <setup+0x70>)
   d41e6:	480d      	ldr	r0, [pc, #52]	; (d421c <setup+0x74>)
   d41e8:	f000 ff62 	bl	d50b0 <spark_variable>
   d41ec:	2300      	movs	r3, #0
   d41ee:	2202      	movs	r2, #2
   d41f0:	490b      	ldr	r1, [pc, #44]	; (d4220 <setup+0x78>)
   d41f2:	480c      	ldr	r0, [pc, #48]	; (d4224 <setup+0x7c>)
   d41f4:	f000 ff5c 	bl	d50b0 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d41f8:	4a0b      	ldr	r2, [pc, #44]	; (d4228 <setup+0x80>)
   d41fa:	490c      	ldr	r1, [pc, #48]	; (d422c <setup+0x84>)
   d41fc:	480c      	ldr	r0, [pc, #48]	; (d4230 <setup+0x88>)
   d41fe:	f002 f900 	bl	d6402 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("humidity", humidity);

  Particle.function("toggleLed", toggleLed);

  configureBLE();
}
   d4202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Particle.variable("temp", temp);
  Particle.variable("humidity", humidity);

  Particle.function("toggleLed", toggleLed);

  configureBLE();
   d4206:	f7ff bf7b 	b.w	d4100 <_Z12configureBLEv>
   d420a:	bf00      	nop
   d420c:	2003e35c 	.word	0x2003e35c
   d4210:	2003e3a4 	.word	0x2003e3a4
   d4214:	00000000 	.word	0x00000000
   d4218:	2003e3a0 	.word	0x2003e3a0
   d421c:	000d87f0 	.word	0x000d87f0
   d4220:	2003e380 	.word	0x2003e380
   d4224:	000d87f5 	.word	0x000d87f5
   d4228:	000d87fe 	.word	0x000d87fe
   d422c:	000d40b5 	.word	0x000d40b5
   d4230:	000d63d7 	.word	0x000d63d7

000d4234 <_ZN8particle17BleCharacteristicC1INS_7BleUuidEEEPKcNS_25BleCharacteristicPropertyET_S6_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4234:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4236:	460e      	mov	r6, r1
   d4238:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d423a:	2100      	movs	r1, #0
   d423c:	4604      	mov	r4, r0
   d423e:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4240:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4242:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4244:	4619      	mov	r1, r3
   d4246:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4248:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d424a:	f001 f8bd 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d424e:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4250:	4628      	mov	r0, r5
   d4252:	f001 f8b9 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4256:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4258:	9302      	str	r3, [sp, #8]
   d425a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	4620      	mov	r0, r4
   d4260:	9500      	str	r5, [sp, #0]
   d4262:	ab04      	add	r3, sp, #16
   d4264:	463a      	mov	r2, r7
   d4266:	4631      	mov	r1, r6
   d4268:	f001 fe8e 	bl	d5f88 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d426c:	4620      	mov	r0, r4
   d426e:	b00f      	add	sp, #60	; 0x3c
   d4270:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4272 <_ZN8particle17BleCharacteristic8setValueIhEEiT_>:
    ssize_t setValue(const uint8_t* buf, size_t len);
    ssize_t setValue(const String& str);
    ssize_t setValue(const char* str);

    template<typename T>
    ssize_t setValue(T val) {
   d4272:	b500      	push	{lr}
   d4274:	b0bf      	sub	sp, #252	; 0xfc
        uint8_t buf[BLE_MAX_ATTR_VALUE_PACKET_SIZE];
        size_t len = std::min(sizeof(T), (unsigned)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
        for (size_t i = 0, j = len - 1; i < len; i++, j--) {
            buf[i] = reinterpret_cast<const uint8_t*>(&val)[j];
   d4276:	ab3e      	add	r3, sp, #248	; 0xf8
        }
        return setValue(buf, len);
   d4278:	2201      	movs	r2, #1
    template<typename T>
    ssize_t setValue(T val) {
        uint8_t buf[BLE_MAX_ATTR_VALUE_PACKET_SIZE];
        size_t len = std::min(sizeof(T), (unsigned)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
        for (size_t i = 0, j = len - 1; i < len; i++, j--) {
            buf[i] = reinterpret_cast<const uint8_t*>(&val)[j];
   d427a:	f803 1df4 	strb.w	r1, [r3, #-244]!
        }
        return setValue(buf, len);
   d427e:	4619      	mov	r1, r3
   d4280:	f001 fa60 	bl	d5744 <_ZN8particle17BleCharacteristic8setValueEPKhj>
    }
   d4284:	b03f      	add	sp, #252	; 0xfc
   d4286:	f85d fb04 	ldr.w	pc, [sp], #4
   d428a:	0000      	movs	r0, r0
   d428c:	0000      	movs	r0, r0
	...

000d4290 <loop>:
}

void loop()
{
   d4290:	b530      	push	{r4, r5, lr}
   d4292:	ed2d 8b02 	vpush	{d8}
  if (millis() - lastUpdate >= UPDATE_INTERVAL)
   d4296:	4c50      	ldr	r4, [pc, #320]	; (d43d8 <loop+0x148>)

  configureBLE();
}

void loop()
{
   d4298:	b089      	sub	sp, #36	; 0x24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d429a:	f000 fd9b 	bl	d4dd4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastUpdate >= UPDATE_INTERVAL)
   d429e:	6823      	ldr	r3, [r4, #0]
   d42a0:	1ac0      	subs	r0, r0, r3
   d42a2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42a6:	f0c0 8084 	bcc.w	d43b2 <loop+0x122>
   d42aa:	f000 fd93 	bl	d4dd4 <HAL_Timer_Get_Milli_Seconds>
  {
    lastUpdate = millis();
   d42ae:	6020      	str	r0, [r4, #0]

    temp = (int)dht.getTempFarenheit();
   d42b0:	484a      	ldr	r0, [pc, #296]	; (d43dc <loop+0x14c>)
   d42b2:	4d4b      	ldr	r5, [pc, #300]	; (d43e0 <loop+0x150>)
    humidity = (int)dht.getHumidity();
   d42b4:	4c4b      	ldr	r4, [pc, #300]	; (d43e4 <loop+0x154>)
{
  if (millis() - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = (int)dht.getTempFarenheit();
   d42b6:	f000 fcb3 	bl	d4c20 <_ZN3DHT16getTempFarenheitEv>
   d42ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    humidity = (int)dht.getHumidity();
   d42be:	4847      	ldr	r0, [pc, #284]	; (d43dc <loop+0x14c>)
{
  if (millis() - lastUpdate >= UPDATE_INTERVAL)
  {
    lastUpdate = millis();

    temp = (int)dht.getTempFarenheit();
   d42c0:	ed85 0a00 	vstr	s0, [r5]
    humidity = (int)dht.getHumidity();
   d42c4:	f000 fcce 	bl	d4c64 <_ZN3DHT11getHumidityEv>
   d42c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d42cc:	ed84 0a00 	vstr	s0, [r4]

    Serial.printlnf("Temp: %f", temp);
   d42d0:	f003 f856 	bl	d7380 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42d4:	682b      	ldr	r3, [r5, #0]
   d42d6:	4a44      	ldr	r2, [pc, #272]	; (d43e8 <loop+0x158>)
   d42d8:	2101      	movs	r1, #1
   d42da:	f002 fded 	bl	d6eb8 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %f", humidity);
   d42de:	f003 f84f 	bl	d7380 <_Z16_fetch_usbserialv>
   d42e2:	6823      	ldr	r3, [r4, #0]
   d42e4:	4a41      	ldr	r2, [pc, #260]	; (d43ec <loop+0x15c>)
   d42e6:	2101      	movs	r1, #1
   d42e8:	f002 fde6 	bl	d6eb8 <_ZN5Print11printf_implEbPKcz>

    double lightAnalogVal = analogRead(A0);
   d42ec:	2013      	movs	r0, #19
   d42ee:	f003 f99d 	bl	d762c <analogRead>
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d42f2:	f003 fc99 	bl	d7c28 <__aeabi_i2d>
   d42f6:	ed9f 3b32 	vldr	d3, [pc, #200]	; d43c0 <loop+0x130>
   d42fa:	ec41 0b10 	vmov	d0, r0, r1
   d42fe:	eeb0 1a43 	vmov.f32	s2, s6
   d4302:	eef0 1a63 	vmov.f32	s3, s7
   d4306:	ed9f 4b30 	vldr	d4, [pc, #192]	; d43c8 <loop+0x138>
   d430a:	ed9f 2b31 	vldr	d2, [pc, #196]	; d43d0 <loop+0x140>
   d430e:	f000 ff77 	bl	d5200 <_Z3mapddddd>
   d4312:	4b37      	ldr	r3, [pc, #220]	; (d43f0 <loop+0x160>)
   d4314:	eeb0 8a40 	vmov.f32	s16, s0
   d4318:	eef0 8a60 	vmov.f32	s17, s1
   d431c:	ed83 0b00 	vstr	d0, [r3]

    if (currentLightLevel > 50)
   d4320:	2200      	movs	r2, #0
   d4322:	4b34      	ldr	r3, [pc, #208]	; (d43f4 <loop+0x164>)
   d4324:	ec51 0b10 	vmov	r0, r1, d0
   d4328:	f003 ff74 	bl	d8214 <__aeabi_dcmpgt>
   d432c:	b330      	cbz	r0, d437c <loop+0xec>
    {
      Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   d432e:	eeb0 0a48 	vmov.f32	s0, s16
   d4332:	eef0 0a68 	vmov.f32	s1, s17
   d4336:	2106      	movs	r1, #6
   d4338:	a804      	add	r0, sp, #16
   d433a:	f002 ff14 	bl	d7166 <_ZN6StringC1Edi>
   d433e:	4b2e      	ldr	r3, [pc, #184]	; (d43f8 <loop+0x168>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4340:	9a04      	ldr	r2, [sp, #16]
   d4342:	781b      	ldrb	r3, [r3, #0]
   d4344:	f88d 3000 	strb.w	r3, [sp]
   d4348:	492c      	ldr	r1, [pc, #176]	; (d43fc <loop+0x16c>)
   d434a:	233c      	movs	r3, #60	; 0x3c
   d434c:	a802      	add	r0, sp, #8
   d434e:	f002 f979 	bl	d6644 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4352:	9c03      	ldr	r4, [sp, #12]
   d4354:	b17c      	cbz	r4, d4376 <loop+0xe6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4356:	6863      	ldr	r3, [r4, #4]
   d4358:	3b01      	subs	r3, #1
   d435a:	6063      	str	r3, [r4, #4]
   d435c:	b95b      	cbnz	r3, d4376 <loop+0xe6>
        {
          _M_dispose();
   d435e:	6823      	ldr	r3, [r4, #0]
   d4360:	4620      	mov	r0, r4
   d4362:	689b      	ldr	r3, [r3, #8]
   d4364:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4366:	68a3      	ldr	r3, [r4, #8]
   d4368:	3b01      	subs	r3, #1
   d436a:	60a3      	str	r3, [r4, #8]
   d436c:	b91b      	cbnz	r3, d4376 <loop+0xe6>
            _M_destroy();
   d436e:	6823      	ldr	r3, [r4, #0]
   d4370:	4620      	mov	r0, r4
   d4372:	68db      	ldr	r3, [r3, #12]
   d4374:	4798      	blx	r3
   d4376:	a804      	add	r0, sp, #16
   d4378:	f002 fe70 	bl	d705c <_ZN6StringD1Ev>
    }

    if (BLE.connected())
   d437c:	f001 fa68 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4380:	f001 faf6 	bl	d5970 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4384:	b1a8      	cbz	r0, d43b2 <loop+0x122>
    {
      uint8_t powerSource = (uint8_t)DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   d4386:	2018      	movs	r0, #24
   d4388:	f000 f8e2 	bl	d4550 <_ZN17DiagnosticsHelper8getValueEt>
      powerSourceCharacteristic.setValue(powerSource);
   d438c:	b2c1      	uxtb	r1, r0
   d438e:	481c      	ldr	r0, [pc, #112]	; (d4400 <loop+0x170>)
   d4390:	f7ff ff6f 	bl	d4272 <_ZN8particle17BleCharacteristic8setValueIhEEiT_>

      uint8_t batState = (uint8_t)DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_BATTERY_STATE);
   d4394:	2007      	movs	r0, #7
   d4396:	f000 f8db 	bl	d4550 <_ZN17DiagnosticsHelper8getValueEt>
      batStateCharacteristic.setValue(batState);
   d439a:	b2c1      	uxtb	r1, r0
   d439c:	4819      	ldr	r0, [pc, #100]	; (d4404 <loop+0x174>)
   d439e:	f7ff ff68 	bl	d4272 <_ZN8particle17BleCharacteristic8setValueIhEEiT_>

      uint8_t batLevel = (uint8_t)(DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_BATTERY_CHARGE) >> 8);
   d43a2:	2003      	movs	r0, #3
   d43a4:	f000 f8d4 	bl	d4550 <_ZN17DiagnosticsHelper8getValueEt>
      batLevelCharacteristic.setValue(batLevel);
   d43a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
   d43ac:	4816      	ldr	r0, [pc, #88]	; (d4408 <loop+0x178>)
   d43ae:	f7ff ff60 	bl	d4272 <_ZN8particle17BleCharacteristic8setValueIhEEiT_>
    }
  }
}
   d43b2:	b009      	add	sp, #36	; 0x24
   d43b4:	ecbd 8b02 	vpop	{d8}
   d43b8:	bd30      	pop	{r4, r5, pc}
   d43ba:	bf00      	nop
   d43bc:	f3af 8000 	nop.w
	...
   d43cc:	40590000 	.word	0x40590000
   d43d0:	00000000 	.word	0x00000000
   d43d4:	40affe00 	.word	0x40affe00
   d43d8:	2003e3b8 	.word	0x2003e3b8
   d43dc:	2003e3a4 	.word	0x2003e3a4
   d43e0:	2003e3a0 	.word	0x2003e3a0
   d43e4:	2003e380 	.word	0x2003e380
   d43e8:	000d8808 	.word	0x000d8808
   d43ec:	000d8811 	.word	0x000d8811
   d43f0:	2003e398 	.word	0x2003e398
   d43f4:	40490000 	.word	0x40490000
   d43f8:	2003e38c 	.word	0x2003e38c
   d43fc:	000d881e 	.word	0x000d881e
   d4400:	2003e364 	.word	0x2003e364
   d4404:	2003e390 	.word	0x2003e390
   d4408:	2003e384 	.word	0x2003e384

000d440c <_GLOBAL__sub_I_lastUpdate>:
  delay(1000);

  leds.setColorHSB(0, 0.0, 0.0, 0.0);

  return 1;
   d440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4410:	4b36      	ldr	r3, [pc, #216]	; (d44ec <_GLOBAL__sub_I_lastUpdate+0xe0>)

const unsigned long UPDATE_INTERVAL = 2000;
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4412:	4f37      	ldr	r7, [pc, #220]	; (d44f0 <_GLOBAL__sub_I_lastUpdate+0xe4>)

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4414:	f8df a10c 	ldr.w	sl, [pc, #268]	; d4524 <_GLOBAL__sub_I_lastUpdate+0x118>
   d4418:	4e36      	ldr	r6, [pc, #216]	; (d44f4 <_GLOBAL__sub_I_lastUpdate+0xe8>)
   d441a:	f8df 810c 	ldr.w	r8, [pc, #268]	; d4528 <_GLOBAL__sub_I_lastUpdate+0x11c>
  delay(1000);

  leds.setColorHSB(0, 0.0, 0.0, 0.0);

  return 1;
   d441e:	b08e      	sub	sp, #56	; 0x38
   d4420:	f04f 0901 	mov.w	r9, #1
   d4424:	f883 9000 	strb.w	r9, [r3]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4428:	f000 fcdc 	bl	d4de4 <HAL_Pin_Map>

const unsigned long UPDATE_INTERVAL = 2000;
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d442c:	4932      	ldr	r1, [pc, #200]	; (d44f8 <_GLOBAL__sub_I_lastUpdate+0xec>)
   d442e:	4638      	mov	r0, r7

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4430:	ac09      	add	r4, sp, #36	; 0x24

const unsigned long UPDATE_INTERVAL = 2000;
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4432:	f001 f8b4 	bl	d559e <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4436:	4931      	ldr	r1, [pc, #196]	; (d44fc <_GLOBAL__sub_I_lastUpdate+0xf0>)
   d4438:	a804      	add	r0, sp, #16
   d443a:	2500      	movs	r5, #0
   d443c:	f001 f8af 	bl	d559e <_ZN8particle7BleUuidC1EPKc>
   d4440:	4639      	mov	r1, r7
   d4442:	4620      	mov	r0, r4
   d4444:	f000 ffc0 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
   d4448:	ab04      	add	r3, sp, #16
   d444a:	e88d 0030 	stmia.w	sp, {r4, r5}
   d444e:	9502      	str	r5, [sp, #8]
   d4450:	2210      	movs	r2, #16
   d4452:	492b      	ldr	r1, [pc, #172]	; (d4500 <_GLOBAL__sub_I_lastUpdate+0xf4>)
   d4454:	4650      	mov	r0, sl
   d4456:	f7ff feed 	bl	d4234 <_ZN8particle17BleCharacteristicC1INS_7BleUuidEEEPKcNS_25BleCharacteristicPropertyET_S6_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d445a:	4632      	mov	r2, r6
   d445c:	4641      	mov	r1, r8
   d445e:	4650      	mov	r0, sl
   d4460:	f003 f93e 	bl	d76e0 <__aeabi_atexit>
BleCharacteristic powerSourceCharacteristic("powerSource", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
   d4464:	f8df a0c4 	ldr.w	sl, [pc, #196]	; d452c <_GLOBAL__sub_I_lastUpdate+0x120>
   d4468:	4926      	ldr	r1, [pc, #152]	; (d4504 <_GLOBAL__sub_I_lastUpdate+0xf8>)
   d446a:	a804      	add	r0, sp, #16
   d446c:	f001 f897 	bl	d559e <_ZN8particle7BleUuidC1EPKc>
   d4470:	4639      	mov	r1, r7
   d4472:	4620      	mov	r0, r4
   d4474:	f000 ffa8 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
   d4478:	ab04      	add	r3, sp, #16
   d447a:	e88d 0030 	stmia.w	sp, {r4, r5}
   d447e:	9502      	str	r5, [sp, #8]
   d4480:	2210      	movs	r2, #16
   d4482:	4921      	ldr	r1, [pc, #132]	; (d4508 <_GLOBAL__sub_I_lastUpdate+0xfc>)
   d4484:	4650      	mov	r0, sl
   d4486:	f7ff fed5 	bl	d4234 <_ZN8particle17BleCharacteristicC1INS_7BleUuidEEEPKcNS_25BleCharacteristicPropertyET_S6_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d448a:	4632      	mov	r2, r6
   d448c:	4641      	mov	r1, r8
   d448e:	4650      	mov	r0, sl
   d4490:	f003 f926 	bl	d76e0 <__aeabi_atexit>
BleCharacteristic batLevelCharacteristic("batLevel", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   d4494:	491d      	ldr	r1, [pc, #116]	; (d450c <_GLOBAL__sub_I_lastUpdate+0x100>)
   d4496:	a804      	add	r0, sp, #16
   d4498:	f001 f881 	bl	d559e <_ZN8particle7BleUuidC1EPKc>
   d449c:	4639      	mov	r1, r7
   d449e:	4f1c      	ldr	r7, [pc, #112]	; (d4510 <_GLOBAL__sub_I_lastUpdate+0x104>)
   d44a0:	4620      	mov	r0, r4
   d44a2:	f000 ff91 	bl	d53c8 <_ZN8particle7BleUuidC1ERKS0_>
   d44a6:	ab04      	add	r3, sp, #16
   d44a8:	e88d 0030 	stmia.w	sp, {r4, r5}
   d44ac:	9502      	str	r5, [sp, #8]
   d44ae:	2210      	movs	r2, #16
   d44b0:	4918      	ldr	r1, [pc, #96]	; (d4514 <_GLOBAL__sub_I_lastUpdate+0x108>)

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d44b2:	4c19      	ldr	r4, [pc, #100]	; (d4518 <_GLOBAL__sub_I_lastUpdate+0x10c>)
// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
BleCharacteristic powerSourceCharacteristic("powerSource", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
BleCharacteristic batLevelCharacteristic("batLevel", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   d44b4:	4638      	mov	r0, r7
   d44b6:	f7ff febd 	bl	d4234 <_ZN8particle17BleCharacteristicC1INS_7BleUuidEEEPKcNS_25BleCharacteristicPropertyET_S6_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d44ba:	4632      	mov	r2, r6
   d44bc:	4641      	mov	r1, r8
   d44be:	4638      	mov	r0, r7
   d44c0:	f003 f90e 	bl	d76e0 <__aeabi_atexit>

DHT dht(D2);
   d44c4:	2206      	movs	r2, #6
   d44c6:	2102      	movs	r1, #2
   d44c8:	4814      	ldr	r0, [pc, #80]	; (d451c <_GLOBAL__sub_I_lastUpdate+0x110>)
   d44ca:	f000 fab9 	bl	d4a40 <_ZN3DHTC1Ehh>
ChainableLED leds(A4, A5, 1);
   d44ce:	464b      	mov	r3, r9
   d44d0:	220e      	movs	r2, #14
   d44d2:	210f      	movs	r1, #15
   d44d4:	4620      	mov	r0, r4
   d44d6:	f000 f85b 	bl	d4590 <_ZN12ChainableLEDC1Ehhh>
   d44da:	4632      	mov	r2, r6
   d44dc:	4910      	ldr	r1, [pc, #64]	; (d4520 <_GLOBAL__sub_I_lastUpdate+0x114>)
   d44de:	4620      	mov	r0, r4
   d44e0:	f003 f8fe 	bl	d76e0 <__aeabi_atexit>
  delay(1000);

  leds.setColorHSB(0, 0.0, 0.0, 0.0);

  return 1;
   d44e4:	b00e      	add	sp, #56	; 0x38
   d44e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d44ea:	bf00      	nop
   d44ec:	2003e38c 	.word	0x2003e38c
   d44f0:	2003e36c 	.word	0x2003e36c
   d44f4:	2003e358 	.word	0x2003e358
   d44f8:	000d8830 	.word	0x000d8830
   d44fc:	000d8855 	.word	0x000d8855
   d4500:	000d887a 	.word	0x000d887a
   d4504:	000d8883 	.word	0x000d8883
   d4508:	000d88a8 	.word	0x000d88a8
   d450c:	000d88b4 	.word	0x000d88b4
   d4510:	2003e384 	.word	0x2003e384
   d4514:	000d88d9 	.word	0x000d88d9
   d4518:	2003e35c 	.word	0x2003e35c
   d451c:	2003e3a4 	.word	0x2003e3a4
   d4520:	000d45ab 	.word	0x000d45ab
   d4524:	2003e390 	.word	0x2003e390
   d4528:	000d59d5 	.word	0x000d59d5
   d452c:	2003e364 	.word	0x2003e364

000d4530 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d4530:	b538      	push	{r3, r4, r5, lr}
   d4532:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d4534:	68c0      	ldr	r0, [r0, #12]
   d4536:	1883      	adds	r3, r0, r2
   d4538:	2b0a      	cmp	r3, #10
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   d453a:	4615      	mov	r5, r2
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   d453c:	d805      	bhi.n	d454a <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   d453e:	4420      	add	r0, r4
   d4540:	f004 f8b7 	bl	d86b2 <memcpy>
                d->offset += size;
   d4544:	68e3      	ldr	r3, [r4, #12]
   d4546:	441d      	add	r5, r3
   d4548:	60e5      	str	r5, [r4, #12]
            }
            return true;
        }
   d454a:	2001      	movs	r0, #1
   d454c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4550 <_ZN17DiagnosticsHelper8getValueEt>:

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d4550:	b510      	push	{r4, lr}
   d4552:	b088      	sub	sp, #32
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d4554:	2400      	movs	r4, #0
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d4556:	ab04      	add	r3, sp, #16
   d4558:	2201      	movs	r2, #1

// Location: https://github.com/rickkas7/DiagnosticsHelperRK
// License: MIT

// [static]
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   d455a:	f8ad 000e 	strh.w	r0, [sp, #14]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d455e:	9300      	str	r3, [sp, #0]
   d4560:	9401      	str	r4, [sp, #4]
   d4562:	4b09      	ldr	r3, [pc, #36]	; (d4588 <_ZN17DiagnosticsHelper8getValueEt+0x38>)
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d4564:	f8ad 4016 	strh.w	r4, [sp, #22]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d4568:	4611      	mov	r1, r2
   d456a:	f10d 000e 	add.w	r0, sp, #14
			uint8_t b[10];
		} u;
		size_t offset;
	};
    Data data;
    data.offset = data.u.d.value = 0;
   d456e:	f8ad 4018 	strh.w	r4, [sp, #24]
   d4572:	9407      	str	r4, [sp, #28]
            }
            return true;
        }
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   d4574:	f000 fd7e 	bl	d5074 <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   d4578:	9b07      	ldr	r3, [sp, #28]
   d457a:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   d457c:	bf0c      	ite	eq
   d457e:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   d4582:	4620      	movne	r0, r4
    }
}
   d4584:	b008      	add	sp, #32
   d4586:	bd10      	pop	{r4, pc}
   d4588:	000d4531 	.word	0x000d4531

000d458c <_GLOBAL__sub_I__ZN17DiagnosticsHelper8getValueEt>:
   d458c:	f000 bc2a 	b.w	d4de4 <HAL_Pin_Map>

000d4590 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4590:	b510      	push	{r4, lr}
   d4592:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4594:	7001      	strb	r1, [r0, #0]
   d4596:	7042      	strb	r2, [r0, #1]
   d4598:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d459a:	2101      	movs	r1, #1
   d459c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d45a0:	f004 f862 	bl	d8668 <calloc>
   d45a4:	6060      	str	r0, [r4, #4]
}
   d45a6:	4620      	mov	r0, r4
   d45a8:	bd10      	pop	{r4, pc}

000d45aa <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d45aa:	b510      	push	{r4, lr}
   d45ac:	4604      	mov	r4, r0
{
    free(_led_state);
   d45ae:	6840      	ldr	r0, [r0, #4]
   d45b0:	f000 fdfe 	bl	d51b0 <free>
}
   d45b4:	4620      	mov	r0, r4
   d45b6:	bd10      	pop	{r4, pc}

000d45b8 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d45b8:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d45ba:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d45bc:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d45be:	7800      	ldrb	r0, [r0, #0]
   d45c0:	f003 f81b 	bl	d75fa <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d45c4:	2014      	movs	r0, #20
   d45c6:	f000 fbfd 	bl	d4dc4 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d45ca:	7820      	ldrb	r0, [r4, #0]
   d45cc:	2101      	movs	r1, #1
   d45ce:	f003 f814 	bl	d75fa <digitalWrite>
   d45d2:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d45d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d45d8:	f000 bbf4 	b.w	d4dc4 <HAL_Delay_Microseconds>

000d45dc <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d45dc:	b570      	push	{r4, r5, r6, lr}
   d45de:	4606      	mov	r6, r0
   d45e0:	460d      	mov	r5, r1
   d45e2:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d45e4:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d45e8:	bf14      	ite	ne
   d45ea:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d45ec:	2100      	moveq	r1, #0
   d45ee:	7870      	ldrb	r0, [r6, #1]
   d45f0:	f003 f803 	bl	d75fa <digitalWrite>
   d45f4:	3c01      	subs	r4, #1
        clk();
   d45f6:	4630      	mov	r0, r6
   d45f8:	f7ff ffde 	bl	d45b8 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d45fc:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d45fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d4602:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4604:	d1ee      	bne.n	d45e4 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d4606:	bd70      	pop	{r4, r5, r6, pc}

000d4608 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4608:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d460e:	460d      	mov	r5, r1
   d4610:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4612:	bf14      	ite	ne
   d4614:	21c0      	movne	r1, #192	; 0xc0
   d4616:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4618:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d461a:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d461c:	bf58      	it	pl
   d461e:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4622:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4624:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4626:	bf58      	it	pl
   d4628:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d462c:	0670      	lsls	r0, r6, #25
   d462e:	bf58      	it	pl
   d4630:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4634:	062a      	lsls	r2, r5, #24
   d4636:	bf58      	it	pl
   d4638:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d463c:	066b      	lsls	r3, r5, #25
   d463e:	bf58      	it	pl
   d4640:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff ffc9 	bl	d45dc <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d464a:	4639      	mov	r1, r7
   d464c:	4620      	mov	r0, r4
   d464e:	f7ff ffc5 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4652:	4631      	mov	r1, r6
   d4654:	4620      	mov	r0, r4
   d4656:	f7ff ffc1 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d465a:	4629      	mov	r1, r5
   d465c:	4620      	mov	r0, r4
}
   d465e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d4662:	f7ff bfbb 	b.w	d45dc <_ZN12ChainableLED8sendByteEh>

000d4666 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4666:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d466a:	4604      	mov	r4, r0
   d466c:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d466e:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4670:	4691      	mov	r9, r2
   d4672:	469a      	mov	sl, r3
   d4674:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4678:	f7ff ffb0 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d467c:	2100      	movs	r1, #0
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff ffac 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4684:	2100      	movs	r1, #0
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff ffa8 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d468c:	2100      	movs	r1, #0
   d468e:	4620      	mov	r0, r4
   d4690:	f7ff ffa4 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d4694:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d4696:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d469a:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d469c:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d46a0:	78a2      	ldrb	r2, [r4, #2]
   d46a2:	b2f3      	uxtb	r3, r6
   d46a4:	429a      	cmp	r2, r3
   d46a6:	d91b      	bls.n	d46e0 <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d46a8:	42ab      	cmp	r3, r5
   d46aa:	d10d      	bne.n	d46c8 <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d46ac:	6861      	ldr	r1, [r4, #4]
   d46ae:	fb15 f207 	smulbb	r2, r5, r7
   d46b2:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d46b6:	6862      	ldr	r2, [r4, #4]
   d46b8:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d46bc:	2202      	movs	r2, #2
   d46be:	fb17 2205 	smlabb	r2, r7, r5, r2
   d46c2:	6861      	ldr	r1, [r4, #4]
   d46c4:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d46c8:	6860      	ldr	r0, [r4, #4]
   d46ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d46ce:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d46d0:	5c41      	ldrb	r1, [r0, r1]
   d46d2:	7893      	ldrb	r3, [r2, #2]
   d46d4:	7852      	ldrb	r2, [r2, #1]
   d46d6:	4620      	mov	r0, r4
   d46d8:	f7ff ff96 	bl	d4608 <_ZN12ChainableLED9sendColorEhhh>
   d46dc:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d46de:	e7df      	b.n	d46a0 <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d46e0:	4620      	mov	r0, r4
   d46e2:	2100      	movs	r1, #0
   d46e4:	f7ff ff7a 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d46e8:	4620      	mov	r0, r4
   d46ea:	2100      	movs	r1, #0
   d46ec:	f7ff ff76 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d46f0:	4620      	mov	r0, r4
   d46f2:	2100      	movs	r1, #0
   d46f4:	f7ff ff72 	bl	d45dc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d46f8:	4620      	mov	r0, r4
   d46fa:	2100      	movs	r1, #0
}
   d46fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d4700:	f7ff bf6c 	b.w	d45dc <_ZN12ChainableLED8sendByteEh>

000d4704 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d4704:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4706:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4708:	2101      	movs	r1, #1
   d470a:	7800      	ldrb	r0, [r0, #0]
   d470c:	f002 ff64 	bl	d75d8 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4710:	2101      	movs	r1, #1
   d4712:	7860      	ldrb	r0, [r4, #1]
   d4714:	f002 ff60 	bl	d75d8 <pinMode>
   d4718:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d471a:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d471c:	78a3      	ldrb	r3, [r4, #2]
   d471e:	b2e9      	uxtb	r1, r5
   d4720:	428b      	cmp	r3, r1
   d4722:	f105 0501 	add.w	r5, r5, #1
   d4726:	d906      	bls.n	d4736 <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d4728:	2300      	movs	r3, #0
   d472a:	9600      	str	r6, [sp, #0]
   d472c:	461a      	mov	r2, r3
   d472e:	4620      	mov	r0, r4
   d4730:	f7ff ff99 	bl	d4666 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4734:	e7f2      	b.n	d471c <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d4736:	b002      	add	sp, #8
   d4738:	bd70      	pop	{r4, r5, r6, pc}
   d473a:	0000      	movs	r0, r0
   d473c:	0000      	movs	r0, r0
	...

000d4740 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d4742:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d4746:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d474e:	ed2d 8b04 	vpush	{d8-d9}
   d4752:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d4756:	bf48      	it	mi
   d4758:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d475c:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d4760:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d4768:	bfc4      	itt	gt
   d476a:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d476e:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4772:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d4776:	ee18 0a90 	vmov	r0, s17
   d477a:	f003 fa67 	bl	d7c4c <__aeabi_f2d>
   d477e:	a32f      	add	r3, pc, #188	; (adr r3, d483c <_Z7hue2rgbfff+0xfc>)
   d4780:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4784:	4604      	mov	r4, r0
   d4786:	460d      	mov	r5, r1
   d4788:	f003 fd26 	bl	d81d8 <__aeabi_dcmplt>
   d478c:	b160      	cbz	r0, d47a8 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d478e:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4792:	ee17 0a90 	vmov	r0, s15
   d4796:	f003 fa59 	bl	d7c4c <__aeabi_f2d>
   d479a:	2200      	movs	r2, #0
   d479c:	4b26      	ldr	r3, [pc, #152]	; (d4838 <_Z7hue2rgbfff+0xf8>)
   d479e:	f003 faa9 	bl	d7cf4 <__aeabi_dmul>
   d47a2:	4622      	mov	r2, r4
   d47a4:	462b      	mov	r3, r5
   d47a6:	e025      	b.n	d47f4 <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d47a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d47ac:	eef4 8ae7 	vcmpe.f32	s17, s15
   d47b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47b4:	d42f      	bmi.n	d4816 <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d47b6:	a31e      	add	r3, pc, #120	; (adr r3, d4830 <_Z7hue2rgbfff+0xf0>)
   d47b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47bc:	4620      	mov	r0, r4
   d47be:	4629      	mov	r1, r5
   d47c0:	f003 fd0a 	bl	d81d8 <__aeabi_dcmplt>
   d47c4:	b350      	cbz	r0, d481c <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d47c6:	ee79 7a48 	vsub.f32	s15, s18, s16
   d47ca:	ee17 0a90 	vmov	r0, s15
   d47ce:	f003 fa3d 	bl	d7c4c <__aeabi_f2d>
   d47d2:	4622      	mov	r2, r4
   d47d4:	4606      	mov	r6, r0
   d47d6:	460f      	mov	r7, r1
   d47d8:	462b      	mov	r3, r5
   d47da:	a115      	add	r1, pc, #84	; (adr r1, d4830 <_Z7hue2rgbfff+0xf0>)
   d47dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d47e0:	f003 f8d4 	bl	d798c <__aeabi_dsub>
   d47e4:	4602      	mov	r2, r0
   d47e6:	460b      	mov	r3, r1
   d47e8:	4630      	mov	r0, r6
   d47ea:	4639      	mov	r1, r7
   d47ec:	f003 fa82 	bl	d7cf4 <__aeabi_dmul>
   d47f0:	4b11      	ldr	r3, [pc, #68]	; (d4838 <_Z7hue2rgbfff+0xf8>)
   d47f2:	2200      	movs	r2, #0
   d47f4:	f003 fa7e 	bl	d7cf4 <__aeabi_dmul>
   d47f8:	4604      	mov	r4, r0
   d47fa:	ee18 0a10 	vmov	r0, s16
   d47fe:	460d      	mov	r5, r1
   d4800:	f003 fa24 	bl	d7c4c <__aeabi_f2d>
   d4804:	4602      	mov	r2, r0
   d4806:	460b      	mov	r3, r1
   d4808:	4620      	mov	r0, r4
   d480a:	4629      	mov	r1, r5
   d480c:	f003 f8c0 	bl	d7990 <__adddf3>
   d4810:	f003 fd2a 	bl	d8268 <__aeabi_d2f>
   d4814:	e004      	b.n	d4820 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d4816:	ee19 0a10 	vmov	r0, s18
   d481a:	e001      	b.n	d4820 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d481c:	ee18 0a10 	vmov	r0, s16
}
   d4820:	ecbd 8b04 	vpop	{d8-d9}
   d4824:	ee00 0a10 	vmov	s0, r0
   d4828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d482a:	bf00      	nop
   d482c:	f3af 8000 	nop.w
   d4830:	55555555 	.word	0x55555555
   d4834:	3fe55555 	.word	0x3fe55555
   d4838:	40180000 	.word	0x40180000
   d483c:	55555555 	.word	0x55555555
   d4840:	3fc55555 	.word	0x3fc55555
   d4844:	00000000 	.word	0x00000000

000d4848 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d484c:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4850:	eef5 0a40 	vcmp.f32	s1, #0.0
   d4854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4858:	b083      	sub	sp, #12
   d485a:	4680      	mov	r8, r0
   d485c:	4689      	mov	r9, r1
   d485e:	eef0 9a40 	vmov.f32	s19, s0
   d4862:	eeb0 9a60 	vmov.f32	s18, s1
   d4866:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d486a:	d06e      	beq.n	d494a <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d486c:	ee11 0a10 	vmov	r0, s2
   d4870:	f003 f9ec 	bl	d7c4c <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d4874:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4878:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4880:	4606      	mov	r6, r0
   d4882:	460f      	mov	r7, r1
   d4884:	d510      	bpl.n	d48a8 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d4886:	ee19 0a10 	vmov	r0, s18
   d488a:	f003 f9df 	bl	d7c4c <__aeabi_f2d>
   d488e:	2200      	movs	r2, #0
   d4890:	4b4d      	ldr	r3, [pc, #308]	; (d49c8 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d4892:	f003 f87d 	bl	d7990 <__adddf3>
   d4896:	4632      	mov	r2, r6
   d4898:	463b      	mov	r3, r7
   d489a:	f003 fa2b 	bl	d7cf4 <__aeabi_dmul>
   d489e:	f003 fce3 	bl	d8268 <__aeabi_d2f>
   d48a2:	ee08 0a90 	vmov	s17, r0
   d48a6:	e003      	b.n	d48b0 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d48a8:	ee79 8a08 	vadd.f32	s17, s18, s16
   d48ac:	eee9 8a48 	vfms.f32	s17, s18, s16
   d48b0:	ee19 0a90 	vmov	r0, s19
   d48b4:	f003 f9ca 	bl	d7c4c <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d48b8:	4632      	mov	r2, r6
   d48ba:	463b      	mov	r3, r7
   d48bc:	4604      	mov	r4, r0
   d48be:	460d      	mov	r5, r1
   d48c0:	4630      	mov	r0, r6
   d48c2:	4639      	mov	r1, r7
   d48c4:	f003 f864 	bl	d7990 <__adddf3>
   d48c8:	4606      	mov	r6, r0
   d48ca:	ee18 0a90 	vmov	r0, s17
   d48ce:	460f      	mov	r7, r1
   d48d0:	f003 f9bc 	bl	d7c4c <__aeabi_f2d>
   d48d4:	4602      	mov	r2, r0
   d48d6:	460b      	mov	r3, r1
   d48d8:	4630      	mov	r0, r6
   d48da:	4639      	mov	r1, r7
   d48dc:	f003 f856 	bl	d798c <__aeabi_dsub>
   d48e0:	f003 fcc2 	bl	d8268 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d48e4:	a334      	add	r3, pc, #208	; (adr r3, d49b8 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d48e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d48ea:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d48ee:	4629      	mov	r1, r5
   d48f0:	4620      	mov	r0, r4
   d48f2:	f003 f84d 	bl	d7990 <__adddf3>
   d48f6:	f003 fcb7 	bl	d8268 <__aeabi_d2f>
   d48fa:	eef0 0a68 	vmov.f32	s1, s17
   d48fe:	ee01 0a10 	vmov	s2, r0
   d4902:	eeb0 0a49 	vmov.f32	s0, s18
   d4906:	f7ff ff1b 	bl	d4740 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d490a:	eeb0 1a69 	vmov.f32	s2, s19
   d490e:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4912:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d4916:	eeb0 0a49 	vmov.f32	s0, s18
   d491a:	f7ff ff11 	bl	d4740 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d491e:	a326      	add	r3, pc, #152	; (adr r3, d49b8 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4920:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4924:	4620      	mov	r0, r4
   d4926:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d4928:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d492c:	f003 f82e 	bl	d798c <__aeabi_dsub>
   d4930:	f003 fc9a 	bl	d8268 <__aeabi_d2f>
   d4934:	eef0 0a68 	vmov.f32	s1, s17
   d4938:	ee01 0a10 	vmov	s2, r0
   d493c:	eeb0 0a49 	vmov.f32	s0, s18
   d4940:	f7ff fefe 	bl	d4740 <_Z7hue2rgbfff>
   d4944:	eef0 8a40 	vmov.f32	s17, s0
   d4948:	e003      	b.n	d4952 <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d494a:	eef0 8a41 	vmov.f32	s17, s2
   d494e:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d4952:	ee19 0a90 	vmov	r0, s19
   d4956:	f003 f979 	bl	d7c4c <__aeabi_f2d>
   d495a:	a319      	add	r3, pc, #100	; (adr r3, d49c0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d495c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4960:	f003 f9c8 	bl	d7cf4 <__aeabi_dmul>
   d4964:	f003 fc60 	bl	d8228 <__aeabi_d2uiz>
   d4968:	b2c5      	uxtb	r5, r0
   d496a:	ee18 0a10 	vmov	r0, s16
   d496e:	f003 f96d 	bl	d7c4c <__aeabi_f2d>
   d4972:	a313      	add	r3, pc, #76	; (adr r3, d49c0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4974:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4978:	f003 f9bc 	bl	d7cf4 <__aeabi_dmul>
   d497c:	f003 fc54 	bl	d8228 <__aeabi_d2uiz>
   d4980:	b2c4      	uxtb	r4, r0
   d4982:	ee18 0a90 	vmov	r0, s17
   d4986:	f003 f961 	bl	d7c4c <__aeabi_f2d>
   d498a:	a30d      	add	r3, pc, #52	; (adr r3, d49c0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d498c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4990:	f003 f9b0 	bl	d7cf4 <__aeabi_dmul>
   d4994:	f003 fc48 	bl	d8228 <__aeabi_d2uiz>
   d4998:	b2c0      	uxtb	r0, r0
   d499a:	9000      	str	r0, [sp, #0]
   d499c:	462b      	mov	r3, r5
   d499e:	4622      	mov	r2, r4
   d49a0:	4649      	mov	r1, r9
   d49a2:	4640      	mov	r0, r8
   d49a4:	f7ff fe5f 	bl	d4666 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d49a8:	b003      	add	sp, #12
   d49aa:	ecbd 8b04 	vpop	{d8-d9}
   d49ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d49b2:	bf00      	nop
   d49b4:	f3af 8000 	nop.w
   d49b8:	55555555 	.word	0x55555555
   d49bc:	3fd55555 	.word	0x3fd55555
   d49c0:	00000000 	.word	0x00000000
   d49c4:	406fe000 	.word	0x406fe000
   d49c8:	3ff00000 	.word	0x3ff00000

000d49cc <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d49cc:	f000 ba0a 	b.w	d4de4 <HAL_Pin_Map>

000d49d0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d49d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d49d2:	6803      	ldr	r3, [r0, #0]
   d49d4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d49d6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d49d8:	d904      	bls.n	d49e4 <nrf_gpio_pin_port_decode+0x14>
   d49da:	4a07      	ldr	r2, [pc, #28]	; (d49f8 <nrf_gpio_pin_port_decode+0x28>)
   d49dc:	2100      	movs	r1, #0
   d49de:	200a      	movs	r0, #10
   d49e0:	f000 fb18 	bl	d5014 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d49e4:	6823      	ldr	r3, [r4, #0]
   d49e6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d49e8:	bf83      	ittte	hi
   d49ea:	f003 031f 	andhi.w	r3, r3, #31
   d49ee:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d49f0:	4802      	ldrhi	r0, [pc, #8]	; (d49fc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d49f2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d49f6:	bd10      	pop	{r4, pc}
   d49f8:	000d4dc5 	.word	0x000d4dc5
   d49fc:	50000300 	.word	0x50000300

000d4a00 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4a00:	b507      	push	{r0, r1, r2, lr}
   d4a02:	ab02      	add	r3, sp, #8
   d4a04:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a08:	4618      	mov	r0, r3
   d4a0a:	f7ff ffe1 	bl	d49d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4a0e:	9a01      	ldr	r2, [sp, #4]
   d4a10:	2301      	movs	r3, #1
   d4a12:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4a14:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4a18:	b003      	add	sp, #12
   d4a1a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a1e <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4a1e:	b507      	push	{r0, r1, r2, lr}
   d4a20:	ab02      	add	r3, sp, #8
   d4a22:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a26:	4618      	mov	r0, r3
   d4a28:	f7ff ffd2 	bl	d49d0 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4a2c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4a30:	9801      	ldr	r0, [sp, #4]
   d4a32:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4a36:	f000 0001 	and.w	r0, r0, #1
   d4a3a:	b003      	add	sp, #12
   d4a3c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a40 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d4a40:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d4a42:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d4a44:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d4a46:	7402      	strb	r2, [r0, #16]
}
   d4a48:	4770      	bx	lr
	...

000d4a4c <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d4a4c:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d4a4e:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d4a50:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d4a52:	7980      	ldrb	r0, [r0, #6]
   d4a54:	f002 fdc0 	bl	d75d8 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4a58:	4a07      	ldr	r2, [pc, #28]	; (d4a78 <_ZN3DHT5beginEv+0x2c>)
   d4a5a:	79a3      	ldrb	r3, [r4, #6]
   d4a5c:	6812      	ldr	r2, [r2, #0]
   d4a5e:	011b      	lsls	r3, r3, #4
   d4a60:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4a62:	5cd0      	ldrb	r0, [r2, r3]
   d4a64:	784b      	ldrb	r3, [r1, #1]
   d4a66:	f003 031f 	and.w	r3, r3, #31
   d4a6a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4a6e:	f7ff ffc7 	bl	d4a00 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d4a72:	2300      	movs	r3, #0
   d4a74:	60e3      	str	r3, [r4, #12]
   d4a76:	bd10      	pop	{r4, pc}
   d4a78:	2003e3bc 	.word	0x2003e3bc

000d4a7c <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a80:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a82:	f000 f9a7 	bl	d4dd4 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d4a86:	68e3      	ldr	r3, [r4, #12]
   d4a88:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4a8a:	bf84      	itt	hi
   d4a8c:	2300      	movhi	r3, #0
   d4a8e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4a90:	7c23      	ldrb	r3, [r4, #16]
   d4a92:	b933      	cbnz	r3, d4aa2 <_ZN3DHT4readEv+0x26>
   d4a94:	68e3      	ldr	r3, [r4, #12]
   d4a96:	1ac0      	subs	r0, r0, r3
   d4a98:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4a9c:	d201      	bcs.n	d4aa2 <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4a9e:	2001      	movs	r0, #1
   d4aa0:	e0a8      	b.n	d4bf4 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4aa2:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4aa4:	4e55      	ldr	r6, [pc, #340]	; (d4bfc <_ZN3DHT4readEv+0x180>)
   d4aa6:	7425      	strb	r5, [r4, #16]
   d4aa8:	f000 f994 	bl	d4dd4 <HAL_Timer_Get_Milli_Seconds>
   d4aac:	79a3      	ldrb	r3, [r4, #6]
   d4aae:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4ab0:	60e0      	str	r0, [r4, #12]
   d4ab2:	011b      	lsls	r3, r3, #4
   d4ab4:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4ab6:	7125      	strb	r5, [r4, #4]
   d4ab8:	70e5      	strb	r5, [r4, #3]
   d4aba:	70a5      	strb	r5, [r4, #2]
   d4abc:	7065      	strb	r5, [r4, #1]
   d4abe:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4ac0:	5cd0      	ldrb	r0, [r2, r3]
   d4ac2:	784b      	ldrb	r3, [r1, #1]
   d4ac4:	f003 031f 	and.w	r3, r3, #31
   d4ac8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4acc:	f7ff ff98 	bl	d4a00 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4ad0:	20fa      	movs	r0, #250	; 0xfa
   d4ad2:	f000 fbde 	bl	d5292 <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4ad6:	2101      	movs	r1, #1
   d4ad8:	79a0      	ldrb	r0, [r4, #6]
   d4ada:	f002 fd7d 	bl	d75d8 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ade:	79a3      	ldrb	r3, [r4, #6]
   d4ae0:	6832      	ldr	r2, [r6, #0]
   d4ae2:	011b      	lsls	r3, r3, #4
   d4ae4:	18d1      	adds	r1, r2, r3
   d4ae6:	5cd2      	ldrb	r2, [r2, r3]
   d4ae8:	784b      	ldrb	r3, [r1, #1]
   d4aea:	a802      	add	r0, sp, #8
   d4aec:	f003 031f 	and.w	r3, r3, #31
   d4af0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4af4:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4af8:	f7ff ff6a 	bl	d49d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4afc:	9b01      	ldr	r3, [sp, #4]
   d4afe:	f04f 0801 	mov.w	r8, #1
   d4b02:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4b06:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4b0a:	2014      	movs	r0, #20
   d4b0c:	f000 fbc1 	bl	d5292 <delay>
	noInterrupts();
   d4b10:	f001 ff9a 	bl	d6a48 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4b14:	79a3      	ldrb	r3, [r4, #6]
   d4b16:	6832      	ldr	r2, [r6, #0]
   d4b18:	011b      	lsls	r3, r3, #4
   d4b1a:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4b1c:	5cd0      	ldrb	r0, [r2, r3]
   d4b1e:	784b      	ldrb	r3, [r1, #1]
   d4b20:	f003 031f 	and.w	r3, r3, #31
   d4b24:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4b28:	f7ff ff6a 	bl	d4a00 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4b2c:	2028      	movs	r0, #40	; 0x28
   d4b2e:	f000 f949 	bl	d4dc4 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4b32:	4629      	mov	r1, r5
   d4b34:	79a0      	ldrb	r0, [r4, #6]
   d4b36:	f002 fd4f 	bl	d75d8 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d4b3a:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d4b3c:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4b40:	79a3      	ldrb	r3, [r4, #6]
   d4b42:	6832      	ldr	r2, [r6, #0]
   d4b44:	011b      	lsls	r3, r3, #4
   d4b46:	18d1      	adds	r1, r2, r3
   d4b48:	f812 a003 	ldrb.w	sl, [r2, r3]
   d4b4c:	784b      	ldrb	r3, [r1, #1]
   d4b4e:	f003 031f 	and.w	r3, r3, #31
   d4b52:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b56:	4650      	mov	r0, sl
   d4b58:	f7ff ff61 	bl	d4a1e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b5c:	4650      	mov	r0, sl
   d4b5e:	f7ff ff5e 	bl	d4a1e <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d4b62:	4580      	cmp	r8, r0
   d4b64:	fa5f f98b 	uxtb.w	r9, fp
   d4b68:	d108      	bne.n	d4b7c <_ZN3DHT4readEv+0x100>
   d4b6a:	2001      	movs	r0, #1
   d4b6c:	f10b 0b01 	add.w	fp, fp, #1
   d4b70:	f000 f928 	bl	d4dc4 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4b74:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d4b78:	d1e2      	bne.n	d4b40 <_ZN3DHT4readEv+0xc4>
   d4b7a:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4b7c:	79a3      	ldrb	r3, [r4, #6]
   d4b7e:	6832      	ldr	r2, [r6, #0]
   d4b80:	011b      	lsls	r3, r3, #4
   d4b82:	18d1      	adds	r1, r2, r3
   d4b84:	f812 8003 	ldrb.w	r8, [r2, r3]
   d4b88:	784b      	ldrb	r3, [r1, #1]
   d4b8a:	f003 031f 	and.w	r3, r3, #31
   d4b8e:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b92:	4640      	mov	r0, r8
   d4b94:	f7ff ff43 	bl	d4a1e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b98:	4640      	mov	r0, r8
   d4b9a:	f7ff ff40 	bl	d4a1e <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4b9e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4ba2:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4ba6:	d014      	beq.n	d4bd2 <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4ba8:	2d03      	cmp	r5, #3
   d4baa:	d90e      	bls.n	d4bca <_ZN3DHT4readEv+0x14e>
   d4bac:	07eb      	lsls	r3, r5, #31
   d4bae:	d40c      	bmi.n	d4bca <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4bb0:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4bb2:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4bb4:	5ca3      	ldrb	r3, [r4, r2]
   d4bb6:	005b      	lsls	r3, r3, #1
   d4bb8:	b2db      	uxtb	r3, r3
   d4bba:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4bbc:	7a21      	ldrb	r1, [r4, #8]
   d4bbe:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4bc0:	bf3c      	itt	cc
   d4bc2:	f043 0301 	orrcc.w	r3, r3, #1
   d4bc6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4bc8:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4bca:	3501      	adds	r5, #1
   d4bcc:	b2ed      	uxtb	r5, r5
   d4bce:	2d55      	cmp	r5, #85	; 0x55
   d4bd0:	d1b4      	bne.n	d4b3c <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4bd2:	f001 ff3b 	bl	d6a4c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4bd6:	2f27      	cmp	r7, #39	; 0x27
   d4bd8:	d90b      	bls.n	d4bf2 <_ZN3DHT4readEv+0x176>
   d4bda:	7822      	ldrb	r2, [r4, #0]
   d4bdc:	7863      	ldrb	r3, [r4, #1]
   d4bde:	7921      	ldrb	r1, [r4, #4]
   d4be0:	4413      	add	r3, r2
   d4be2:	78a2      	ldrb	r2, [r4, #2]
   d4be4:	4413      	add	r3, r2
   d4be6:	78e2      	ldrb	r2, [r4, #3]
   d4be8:	4413      	add	r3, r2
   d4bea:	b2db      	uxtb	r3, r3
   d4bec:	4299      	cmp	r1, r3
   d4bee:	f43f af56 	beq.w	d4a9e <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4bf2:	2000      	movs	r0, #0

}
   d4bf4:	b003      	add	sp, #12
   d4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4bfa:	bf00      	nop
   d4bfc:	2003e3bc 	.word	0x2003e3bc

000d4c00 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4c00:	b510      	push	{r4, lr}
   d4c02:	4604      	mov	r4, r0
	float f;

	if (read())
   d4c04:	f7ff ff3a 	bl	d4a7c <_ZN3DHT4readEv>
   d4c08:	b128      	cbz	r0, d4c16 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4c0a:	78a3      	ldrb	r3, [r4, #2]
   d4c0c:	ee00 3a10 	vmov	s0, r3
   d4c10:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4c14:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4c16:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4c1c <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4c1a:	bd10      	pop	{r4, pc}
   d4c1c:	7fc00000 	.word	0x7fc00000

000d4c20 <_ZN3DHT16getTempFarenheitEv>:
{
	return readTemperature();
}

float DHT::getTempFarenheit()
{
   d4c20:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4c22:	f7ff ffed 	bl	d4c00 <_ZN3DHT15readTemperatureEv>
   d4c26:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4c2a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4c2e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d4c32:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4c36:	eddf 7a02 	vldr	s15, [pc, #8]	; d4c40 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4c3a:	ee30 0a27 	vadd.f32	s0, s0, s15
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	42000000 	.word	0x42000000

000d4c44 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4c44:	b510      	push	{r4, lr}
   d4c46:	4604      	mov	r4, r0
	float f;

	if (read())
   d4c48:	f7ff ff18 	bl	d4a7c <_ZN3DHT4readEv>
   d4c4c:	b128      	cbz	r0, d4c5a <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4c4e:	7823      	ldrb	r3, [r4, #0]
   d4c50:	ee00 3a10 	vmov	s0, r3
   d4c54:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4c58:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4c5a:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4c60 <_ZN3DHT12readHumidityEv+0x1c>
}
   d4c5e:	bd10      	pop	{r4, pc}
   d4c60:	7fc00000 	.word	0x7fc00000

000d4c64 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4c64:	f7ff bfee 	b.w	d4c44 <_ZN3DHT12readHumidityEv>

000d4c68 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4c68:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c6a:	f000 f8bb 	bl	d4de4 <HAL_Pin_Map>
   d4c6e:	4b01      	ldr	r3, [pc, #4]	; (d4c74 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4c70:	6018      	str	r0, [r3, #0]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	2003e3bc 	.word	0x2003e3bc

000d4c78 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <hal_ble_stack_init+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	689b      	ldr	r3, [r3, #8]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030278 	.word	0x00030278

000d4c88 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <hal_ble_gap_set_advertising_data+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030278 	.word	0x00030278

000d4c98 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <hal_ble_gap_set_scan_response_data+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030278 	.word	0x00030278

000d4ca8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <hal_ble_gap_start_advertising+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030278 	.word	0x00030278

000d4cb8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b03      	ldr	r3, [pc, #12]	; (d4cc8 <hal_ble_gap_disconnect+0x10>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4cc2:	9301      	str	r3, [sp, #4]
   d4cc4:	bd08      	pop	{r3, pc}
   d4cc6:	0000      	.short	0x0000
   d4cc8:	00030278 	.word	0x00030278

000d4ccc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b03      	ldr	r3, [pc, #12]	; (d4cdc <hal_ble_gatt_server_add_service+0x10>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4cd6:	9301      	str	r3, [sp, #4]
   d4cd8:	bd08      	pop	{r3, pc}
   d4cda:	0000      	.short	0x0000
   d4cdc:	00030278 	.word	0x00030278

000d4ce0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b03      	ldr	r3, [pc, #12]	; (d4cf0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4cea:	9301      	str	r3, [sp, #4]
   d4cec:	bd08      	pop	{r3, pc}
   d4cee:	0000      	.short	0x0000
   d4cf0:	00030278 	.word	0x00030278

000d4cf4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b03      	ldr	r3, [pc, #12]	; (d4d04 <hal_ble_gatt_client_write_with_response+0x10>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4cfe:	9301      	str	r3, [sp, #4]
   d4d00:	bd08      	pop	{r3, pc}
   d4d02:	0000      	.short	0x0000
   d4d04:	00030278 	.word	0x00030278

000d4d08 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b03      	ldr	r3, [pc, #12]	; (d4d18 <hal_ble_gatt_client_write_without_response+0x10>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4d12:	9301      	str	r3, [sp, #4]
   d4d14:	bd08      	pop	{r3, pc}
   d4d16:	0000      	.short	0x0000
   d4d18:	00030278 	.word	0x00030278

000d4d1c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b03      	ldr	r3, [pc, #12]	; (d4d2c <hal_ble_gatt_server_add_characteristic+0x10>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4d26:	9301      	str	r3, [sp, #4]
   d4d28:	bd08      	pop	{r3, pc}
   d4d2a:	0000      	.short	0x0000
   d4d2c:	00030278 	.word	0x00030278

000d4d30 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b03      	ldr	r3, [pc, #12]	; (d4d40 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4d3a:	9301      	str	r3, [sp, #4]
   d4d3c:	bd08      	pop	{r3, pc}
   d4d3e:	0000      	.short	0x0000
   d4d40:	00030278 	.word	0x00030278

000d4d44 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <os_thread_is_current+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	689b      	ldr	r3, [r3, #8]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030248 	.word	0x00030248

000d4d54 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <os_thread_join+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	691b      	ldr	r3, [r3, #16]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030248 	.word	0x00030248

000d4d64 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <os_thread_cleanup+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	695b      	ldr	r3, [r3, #20]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030248 	.word	0x00030248

000d4d74 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <os_mutex_create+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030248 	.word	0x00030248

000d4d84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <os_mutex_recursive_create+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030248 	.word	0x00030248

000d4d94 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <os_mutex_recursive_lock+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030248 	.word	0x00030248

000d4da4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <os_mutex_recursive_unlock+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030248 	.word	0x00030248

000d4db4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_RNG_GetRandomNumber+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	685b      	ldr	r3, [r3, #4]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030218 	.word	0x00030218

000d4dc4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_Delay_Microseconds+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	68db      	ldr	r3, [r3, #12]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030218 	.word	0x00030218

000d4dd4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	695b      	ldr	r3, [r3, #20]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030218 	.word	0x00030218

000d4de4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_Pin_Map+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	681b      	ldr	r3, [r3, #0]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003022c 	.word	0x0003022c

000d4df4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_Validate_Pin_Function+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	685b      	ldr	r3, [r3, #4]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003022c 	.word	0x0003022c

000d4e04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_Pin_Mode+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	689b      	ldr	r3, [r3, #8]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	0003022c 	.word	0x0003022c

000d4e14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_Get_Pin_Mode+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	68db      	ldr	r3, [r3, #12]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003022c 	.word	0x0003022c

000d4e24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_GPIO_Write+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	691b      	ldr	r3, [r3, #16]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003022c 	.word	0x0003022c

000d4e34 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_Interrupts_Enable_All+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6a1b      	ldr	r3, [r3, #32]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003022c 	.word	0x0003022c

000d4e44 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_Interrupts_Disable_All+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003022c 	.word	0x0003022c

000d4e54 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_ADC_Read+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003022c 	.word	0x0003022c

000d4e64 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_I2C_Write_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6a1b      	ldr	r3, [r3, #32]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_I2C_Available_Data+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_I2C_Read_Data+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030228 	.word	0x00030228

000d4e94 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_I2C_Peek_Data+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030228 	.word	0x00030228

000d4ea4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_I2C_Flush_Data+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030228 	.word	0x00030228

000d4eb4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_I2C_Is_Enabled+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030228 	.word	0x00030228

000d4ec4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_I2C_Init+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030228 	.word	0x00030228

000d4ed4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <inet_inet_ntop+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030264 	.word	0x00030264

000d4ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <netdb_freeaddrinfo+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	689b      	ldr	r3, [r3, #8]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030268 	.word	0x00030268

000d4ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <netdb_getaddrinfo+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	68db      	ldr	r3, [r3, #12]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030268 	.word	0x00030268

000d4f04 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_SPI_Init+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	69db      	ldr	r3, [r3, #28]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030230 	.word	0x00030230

000d4f14 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_SPI_Is_Enabled+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6a1b      	ldr	r3, [r3, #32]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030230 	.word	0x00030230

000d4f24 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_USART_Init+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	681b      	ldr	r3, [r3, #0]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003023c 	.word	0x0003023c

000d4f34 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_USART_Write_Data+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	68db      	ldr	r3, [r3, #12]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003023c 	.word	0x0003023c

000d4f44 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_USART_Available_Data+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	691b      	ldr	r3, [r3, #16]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003023c 	.word	0x0003023c

000d4f54 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_USART_Read_Data+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	695b      	ldr	r3, [r3, #20]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003023c 	.word	0x0003023c

000d4f64 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_USART_Peek_Data+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	699b      	ldr	r3, [r3, #24]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003023c 	.word	0x0003023c

000d4f74 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_USART_Flush_Data+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	69db      	ldr	r3, [r3, #28]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003023c 	.word	0x0003023c

000d4f84 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_USART_Is_Enabled+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6a1b      	ldr	r3, [r3, #32]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	0003023c 	.word	0x0003023c

000d4f94 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003023c 	.word	0x0003023c

000d4fa4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_USB_USART_Init+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	681b      	ldr	r3, [r3, #0]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003024c 	.word	0x0003024c

000d4fb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_USB_USART_Begin+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	685b      	ldr	r3, [r3, #4]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003024c 	.word	0x0003024c

000d4fc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_USB_USART_Available_Data+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	691b      	ldr	r3, [r3, #16]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003024c 	.word	0x0003024c

000d4fd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	695b      	ldr	r3, [r3, #20]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003024c 	.word	0x0003024c

000d4fe4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_USB_USART_Receive_Data+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	699b      	ldr	r3, [r3, #24]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003024c 	.word	0x0003024c

000d4ff4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_USB_USART_Send_Data+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	69db      	ldr	r3, [r3, #28]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003024c 	.word	0x0003024c

000d5004 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_USB_USART_Flush_Data+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6a1b      	ldr	r3, [r3, #32]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003024c 	.word	0x0003024c

000d5014 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <panic_+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030260 	.word	0x00030260

000d5024 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <log_message+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030260 	.word	0x00030260

000d5034 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <set_system_mode+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	685b      	ldr	r3, [r3, #4]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030220 	.word	0x00030220

000d5044 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <system_delay_ms+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	695b      	ldr	r3, [r3, #20]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030220 	.word	0x00030220

000d5054 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <application_thread_current+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030220 	.word	0x00030220

000d5064 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <application_thread_invoke+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030220 	.word	0x00030220

000d5074 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b03      	ldr	r3, [pc, #12]	; (d5084 <system_format_diag_data+0x10>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d507e:	9301      	str	r3, [sp, #4]
   d5080:	bd08      	pop	{r3, pc}
   d5082:	0000      	.short	0x0000
   d5084:	00030220 	.word	0x00030220

000d5088 <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b03      	ldr	r3, [pc, #12]	; (d5098 <system_ctrl_set_app_request_handler+0x10>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5092:	9301      	str	r3, [sp, #4]
   d5094:	bd08      	pop	{r3, pc}
   d5096:	0000      	.short	0x0000
   d5098:	00030220 	.word	0x00030220

000d509c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b03      	ldr	r3, [pc, #12]	; (d50ac <system_ctrl_set_result+0x10>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d50a6:	9301      	str	r3, [sp, #4]
   d50a8:	bd08      	pop	{r3, pc}
   d50aa:	0000      	.short	0x0000
   d50ac:	00030220 	.word	0x00030220

000d50b0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <spark_variable+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	681b      	ldr	r3, [r3, #0]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	00030244 	.word	0x00030244

000d50c0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <spark_function+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	685b      	ldr	r3, [r3, #4]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	00030244 	.word	0x00030244

000d50d0 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <spark_cloud_flag_connected+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	695b      	ldr	r3, [r3, #20]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030244 	.word	0x00030244

000d50e0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <spark_send_event+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	6a1b      	ldr	r3, [r3, #32]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030244 	.word	0x00030244

000d50f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030244 	.word	0x00030244

000d5100 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <network_connect+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	685b      	ldr	r3, [r3, #4]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030240 	.word	0x00030240

000d5110 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <network_connecting+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	689b      	ldr	r3, [r3, #8]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030240 	.word	0x00030240

000d5120 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <network_disconnect+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	68db      	ldr	r3, [r3, #12]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030240 	.word	0x00030240

000d5130 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <network_ready+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	691b      	ldr	r3, [r3, #16]
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030240 	.word	0x00030240

000d5140 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <network_on+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	695b      	ldr	r3, [r3, #20]
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030240 	.word	0x00030240

000d5150 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <network_off+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	699b      	ldr	r3, [r3, #24]
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030240 	.word	0x00030240

000d5160 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <network_listen+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	69db      	ldr	r3, [r3, #28]
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030240 	.word	0x00030240

000d5170 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <network_listening+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	6a1b      	ldr	r3, [r3, #32]
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030240 	.word	0x00030240

000d5180 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <network_set_listen_timeout+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	00030240 	.word	0x00030240

000d5190 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <network_get_listen_timeout+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	00030240 	.word	0x00030240

000d51a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <malloc+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	681b      	ldr	r3, [r3, #0]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003021c 	.word	0x0003021c

000d51b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <free+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	685b      	ldr	r3, [r3, #4]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003021c 	.word	0x0003021c

000d51c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <realloc+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	689b      	ldr	r3, [r3, #8]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003021c 	.word	0x0003021c

000d51d0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <vsnprintf+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	0003021c 	.word	0x0003021c

000d51e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <abort+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	0003021c 	.word	0x0003021c

000d51f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <_malloc_r+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	0003021c 	.word	0x0003021c

000d5200 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d5200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5204:	ed2d 8b02 	vpush	{d8}
   d5208:	eeb0 8a44 	vmov.f32	s16, s8
   d520c:	eef0 8a64 	vmov.f32	s17, s9
   d5210:	ec55 4b11 	vmov	r4, r5, d1
   d5214:	ec57 6b12 	vmov	r6, r7, d2
   d5218:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d521a:	ee11 2a10 	vmov	r2, s2
   d521e:	462b      	mov	r3, r5
   d5220:	ee12 0a10 	vmov	r0, s4
   d5224:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d5226:	ed8d 0b00 	vstr	d0, [sp]
   d522a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d522e:	f002 ffc9 	bl	d81c4 <__aeabi_dcmpeq>
   d5232:	ed9d 0b00 	vldr	d0, [sp]
   d5236:	bb38      	cbnz	r0, d5288 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5238:	ec51 0b10 	vmov	r0, r1, d0
   d523c:	4622      	mov	r2, r4
   d523e:	462b      	mov	r3, r5
   d5240:	f002 fba4 	bl	d798c <__aeabi_dsub>
   d5244:	4652      	mov	r2, sl
   d5246:	4680      	mov	r8, r0
   d5248:	4689      	mov	r9, r1
   d524a:	465b      	mov	r3, fp
   d524c:	ec51 0b18 	vmov	r0, r1, d8
   d5250:	f002 fb9c 	bl	d798c <__aeabi_dsub>
   d5254:	4602      	mov	r2, r0
   d5256:	460b      	mov	r3, r1
   d5258:	4640      	mov	r0, r8
   d525a:	4649      	mov	r1, r9
   d525c:	f002 fd4a 	bl	d7cf4 <__aeabi_dmul>
   d5260:	4622      	mov	r2, r4
   d5262:	4680      	mov	r8, r0
   d5264:	4689      	mov	r9, r1
   d5266:	462b      	mov	r3, r5
   d5268:	4630      	mov	r0, r6
   d526a:	4639      	mov	r1, r7
   d526c:	f002 fb8e 	bl	d798c <__aeabi_dsub>
   d5270:	4602      	mov	r2, r0
   d5272:	460b      	mov	r3, r1
   d5274:	4640      	mov	r0, r8
   d5276:	4649      	mov	r1, r9
   d5278:	f002 fe66 	bl	d7f48 <__aeabi_ddiv>
   d527c:	4652      	mov	r2, sl
   d527e:	465b      	mov	r3, fp
   d5280:	f002 fb86 	bl	d7990 <__adddf3>
   d5284:	ec41 0b10 	vmov	d0, r0, r1
}
   d5288:	b003      	add	sp, #12
   d528a:	ecbd 8b02 	vpop	{d8}
   d528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5292 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5292:	2100      	movs	r1, #0
   d5294:	f7ff bed6 	b.w	d5044 <system_delay_ms>

000d5298 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5298:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d529a:	6883      	ldr	r3, [r0, #8]
   d529c:	4604      	mov	r4, r0
   d529e:	b90b      	cbnz	r3, d52a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d52a0:	f002 fa25 	bl	d76ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52a4:	68c3      	ldr	r3, [r0, #12]
   d52a6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d52a8:	68a3      	ldr	r3, [r4, #8]
   d52aa:	b11b      	cbz	r3, d52b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52ac:	2203      	movs	r2, #3
   d52ae:	4621      	mov	r1, r4
   d52b0:	4620      	mov	r0, r4
   d52b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52b4:	4620      	mov	r0, r4
   d52b6:	2110      	movs	r1, #16
}
   d52b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52bc:	f002 ba15 	b.w	d76ea <_ZdlPvj>

000d52c0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d52c0:	4770      	bx	lr

000d52c2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d52c2:	2000      	movs	r0, #0
   d52c4:	4770      	bx	lr

000d52c6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d52c6:	4770      	bx	lr

000d52c8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d52c8:	2000      	movs	r0, #0
   d52ca:	4770      	bx	lr

000d52cc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d52cc:	4770      	bx	lr

000d52ce <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d52ce:	2000      	movs	r0, #0
   d52d0:	4770      	bx	lr

000d52d2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d52d2:	b510      	push	{r4, lr}
   d52d4:	2114      	movs	r1, #20
   d52d6:	4604      	mov	r4, r0
   d52d8:	f002 fa07 	bl	d76ea <_ZdlPvj>
   d52dc:	4620      	mov	r0, r4
   d52de:	bd10      	pop	{r4, pc}

000d52e0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d52e0:	b510      	push	{r4, lr}
   d52e2:	2114      	movs	r1, #20
   d52e4:	4604      	mov	r4, r0
   d52e6:	f002 fa00 	bl	d76ea <_ZdlPvj>
   d52ea:	4620      	mov	r0, r4
   d52ec:	bd10      	pop	{r4, pc}

000d52ee <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d52ee:	b510      	push	{r4, lr}
   d52f0:	2114      	movs	r1, #20
   d52f2:	4604      	mov	r4, r0
   d52f4:	f002 f9f9 	bl	d76ea <_ZdlPvj>
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d52fc:	f7fe becd 	b.w	d409a <_ZdlPv>

000d5300 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5300:	f7fe becb 	b.w	d409a <_ZdlPv>

000d5304 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5304:	f7fe bec9 	b.w	d409a <_ZdlPv>

000d5308 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5308:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d530a:	200a      	movs	r0, #10
   d530c:	4a02      	ldr	r2, [pc, #8]	; (d5318 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100+0x10>)
   d530e:	2100      	movs	r1, #0
   d5310:	f7ff fe80 	bl	d5014 <panic_>
    }
}
   d5314:	bd08      	pop	{r3, pc}
   d5316:	bf00      	nop
   d5318:	000d4dc5 	.word	0x000d4dc5

000d531c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d531c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d531e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5320:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5322:	689b      	ldr	r3, [r3, #8]
   d5324:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5326:	68a3      	ldr	r3, [r4, #8]
   d5328:	3b01      	subs	r3, #1
   d532a:	60a3      	str	r3, [r4, #8]
   d532c:	b92b      	cbnz	r3, d533a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109+0x1e>
            _M_destroy();
   d532e:	6823      	ldr	r3, [r4, #0]
   d5330:	4620      	mov	r0, r4
   d5332:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5338:	4718      	bx	r3
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d533c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5340:	b2da      	uxtb	r2, r3
   d5342:	2a09      	cmp	r2, #9
   d5344:	d801      	bhi.n	d534a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5346:	4618      	mov	r0, r3
   d5348:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d534a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d534e:	2b05      	cmp	r3, #5
   d5350:	d801      	bhi.n	d5356 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5352:	3857      	subs	r0, #87	; 0x57
   d5354:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5356:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d535a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d535c:	bf94      	ite	ls
   d535e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5360:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5364:	4770      	bx	lr
	...

000d5368 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5368:	b510      	push	{r4, lr}
            locked_(false) {
   d536a:	2300      	movs	r3, #0
   d536c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d536e:	4b04      	ldr	r3, [pc, #16]	; (d5380 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5370:	4604      	mov	r4, r0
   d5372:	6818      	ldr	r0, [r3, #0]
   d5374:	f7ff fd0e 	bl	d4d94 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5378:	2301      	movs	r3, #1
   d537a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d537c:	4620      	mov	r0, r4
   d537e:	bd10      	pop	{r4, pc}
   d5380:	2003e3cc 	.word	0x2003e3cc

000d5384 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5384:	b510      	push	{r4, lr}
        if (locked_) {
   d5386:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5388:	4604      	mov	r4, r0
        if (locked_) {
   d538a:	b11b      	cbz	r3, d5394 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d538c:	4b02      	ldr	r3, [pc, #8]	; (d5398 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d538e:	6818      	ldr	r0, [r3, #0]
   d5390:	f7ff fd08 	bl	d4da4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5394:	4620      	mov	r0, r4
   d5396:	bd10      	pop	{r4, pc}
   d5398:	2003e3cc 	.word	0x2003e3cc

000d539c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d539c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d539e:	7982      	ldrb	r2, [r0, #6]
   d53a0:	798b      	ldrb	r3, [r1, #6]
   d53a2:	429a      	cmp	r2, r3
   d53a4:	d106      	bne.n	d53b4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d53a6:	2206      	movs	r2, #6
   d53a8:	f003 f974 	bl	d8694 <memcmp>
   d53ac:	fab0 f080 	clz	r0, r0
   d53b0:	0940      	lsrs	r0, r0, #5
   d53b2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d53b4:	2000      	movs	r0, #0
}
   d53b6:	bd08      	pop	{r3, pc}

000d53b8 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d53b8:	b510      	push	{r4, lr}
        : uuid_() {
   d53ba:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d53bc:	4604      	mov	r4, r0
        : uuid_() {
   d53be:	2100      	movs	r1, #0
   d53c0:	f003 f99d 	bl	d86fe <memset>
}
   d53c4:	4620      	mov	r0, r4
   d53c6:	bd10      	pop	{r4, pc}

000d53c8 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d53c8:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d53ca:	4603      	mov	r3, r0
   d53cc:	f101 0214 	add.w	r2, r1, #20
   d53d0:	f851 4b04 	ldr.w	r4, [r1], #4
   d53d4:	f843 4b04 	str.w	r4, [r3], #4
   d53d8:	4291      	cmp	r1, r2
   d53da:	d1f9      	bne.n	d53d0 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d53dc:	bd10      	pop	{r4, pc}

000d53de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d53de:	b570      	push	{r4, r5, r6, lr}
   d53e0:	460c      	mov	r4, r1
   d53e2:	4605      	mov	r5, r0
   d53e4:	4616      	mov	r6, r2
        : BleUuid() {
   d53e6:	f7ff ffe7 	bl	d53b8 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d53ea:	b92c      	cbnz	r4, d53f8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d53ec:	2210      	movs	r2, #16
   d53ee:	4621      	mov	r1, r4
   d53f0:	4628      	mov	r0, r5
   d53f2:	f003 f984 	bl	d86fe <memset>
   d53f6:	e016      	b.n	d5426 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d53f8:	2e01      	cmp	r6, #1
   d53fa:	d109      	bne.n	d5410 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d53fc:	462b      	mov	r3, r5
   d53fe:	f104 0210 	add.w	r2, r4, #16
   d5402:	f854 1b04 	ldr.w	r1, [r4], #4
   d5406:	f843 1b04 	str.w	r1, [r3], #4
   d540a:	4294      	cmp	r4, r2
   d540c:	d1f9      	bne.n	d5402 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d540e:	e008      	b.n	d5422 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5410:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d5412:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d5414:	5ce1      	ldrb	r1, [r4, r3]
   d5416:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d541a:	3b01      	subs	r3, #1
   d541c:	b2db      	uxtb	r3, r3
   d541e:	2bff      	cmp	r3, #255	; 0xff
   d5420:	d1f8      	bne.n	d5414 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5422:	2301      	movs	r3, #1
   d5424:	742b      	strb	r3, [r5, #16]
    }
}
   d5426:	4628      	mov	r0, r5
   d5428:	bd70      	pop	{r4, r5, r6, pc}

000d542a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d542a:	b538      	push	{r3, r4, r5, lr}
   d542c:	4604      	mov	r4, r0
   d542e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5430:	461a      	mov	r2, r3
   d5432:	f7ff ffd4 	bl	d53de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d5436:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5438:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d543a:	0a2d      	lsrs	r5, r5, #8
   d543c:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d543e:	7423      	strb	r3, [r4, #16]
}
   d5440:	4620      	mov	r0, r4
   d5442:	bd38      	pop	{r3, r4, r5, pc}

000d5444 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d5444:	7c03      	ldrb	r3, [r0, #16]
   d5446:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d544a:	bf14      	ite	ne
   d544c:	2001      	movne	r0, #1
   d544e:	2000      	moveq	r0, #0
   d5450:	4770      	bx	lr

000d5452 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d5452:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5454:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5456:	f7ff fff5 	bl	d5444 <_ZNK8particle7BleUuid4typeEv>
   d545a:	b908      	cbnz	r0, d5460 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d545c:	8820      	ldrh	r0, [r4, #0]
   d545e:	e009      	b.n	d5474 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d5460:	2210      	movs	r2, #16
   d5462:	2100      	movs	r1, #0
   d5464:	4668      	mov	r0, sp
   d5466:	f003 f94a 	bl	d86fe <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d546a:	2210      	movs	r2, #16
   d546c:	4669      	mov	r1, sp
   d546e:	4620      	mov	r0, r4
   d5470:	f003 f910 	bl	d8694 <memcmp>
   d5474:	3000      	adds	r0, #0
   d5476:	bf18      	it	ne
   d5478:	2001      	movne	r0, #1
    }
}
   d547a:	b004      	add	sp, #16
   d547c:	bd10      	pop	{r4, pc}

000d547e <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d547e:	8800      	ldrh	r0, [r0, #0]
   d5480:	4770      	bx	lr

000d5482 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d5482:	4770      	bx	lr

000d5484 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5484:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d5486:	4603      	mov	r3, r0
   d5488:	f101 0214 	add.w	r2, r1, #20
   d548c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5490:	f843 4b04 	str.w	r4, [r3], #4
   d5494:	4291      	cmp	r1, r2
   d5496:	d1f9      	bne.n	d548c <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d5498:	bd10      	pop	{r4, pc}

000d549a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d549a:	b510      	push	{r4, lr}
    if (uuid128) {
   d549c:	b151      	cbz	r1, d54b4 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d549e:	4603      	mov	r3, r0
   d54a0:	f101 0210 	add.w	r2, r1, #16
   d54a4:	f851 4b04 	ldr.w	r4, [r1], #4
   d54a8:	f843 4b04 	str.w	r4, [r3], #4
   d54ac:	4291      	cmp	r1, r2
   d54ae:	d1f9      	bne.n	d54a4 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d54b0:	2301      	movs	r3, #1
   d54b2:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d54b4:	bd10      	pop	{r4, pc}

000d54b6 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d54b6:	b510      	push	{r4, lr}
   d54b8:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d54ba:	f7ff ffc3 	bl	d5444 <_ZNK8particle7BleUuid4typeEv>
   d54be:	b928      	cbnz	r0, d54cc <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d54c0:	8808      	ldrh	r0, [r1, #0]
   d54c2:	8823      	ldrh	r3, [r4, #0]
   d54c4:	1a1b      	subs	r3, r3, r0
   d54c6:	4258      	negs	r0, r3
   d54c8:	4158      	adcs	r0, r3
   d54ca:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d54cc:	2210      	movs	r2, #16
   d54ce:	4620      	mov	r0, r4
   d54d0:	f003 f8e0 	bl	d8694 <memcmp>
   d54d4:	fab0 f080 	clz	r0, r0
   d54d8:	0940      	lsrs	r0, r0, #5
    }
}
   d54da:	bd10      	pop	{r4, pc}

000d54dc <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d54dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d54de:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d54e0:	460e      	mov	r6, r1
   d54e2:	b919      	cbnz	r1, d54ec <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d54e4:	2210      	movs	r2, #16
   d54e6:	f003 f90a 	bl	d86fe <memset>
   d54ea:	e051      	b.n	d5590 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d54ec:	2124      	movs	r1, #36	; 0x24
   d54ee:	4630      	mov	r0, r6
   d54f0:	f003 f967 	bl	d87c2 <strnlen>
   d54f4:	2804      	cmp	r0, #4
   d54f6:	d002      	beq.n	d54fe <_ZN8particle7BleUuid9constructEPKc+0x22>
   d54f8:	2700      	movs	r7, #0
   d54fa:	2410      	movs	r4, #16
   d54fc:	e03b      	b.n	d5576 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d54fe:	7830      	ldrb	r0, [r6, #0]
   d5500:	f7ff ff1c 	bl	d533c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5504:	1e04      	subs	r4, r0, #0
   d5506:	db47      	blt.n	d5598 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5508:	7870      	ldrb	r0, [r6, #1]
   d550a:	f7ff ff17 	bl	d533c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d550e:	2800      	cmp	r0, #0
   d5510:	db42      	blt.n	d5598 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5512:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5516:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d551a:	78b0      	ldrb	r0, [r6, #2]
   d551c:	f7ff ff0e 	bl	d533c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5520:	1e04      	subs	r4, r0, #0
   d5522:	db39      	blt.n	d5598 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5524:	78f0      	ldrb	r0, [r6, #3]
   d5526:	f7ff ff09 	bl	d533c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d552a:	2800      	cmp	r0, #0
   d552c:	db34      	blt.n	d5598 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d552e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d5532:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5536:	b2c0      	uxtb	r0, r0
   d5538:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d553c:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d553e:	2300      	movs	r3, #0
   d5540:	e027      	b.n	d5592 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5542:	b32c      	cbz	r4, d5590 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d5544:	5df0      	ldrb	r0, [r6, r7]
   d5546:	f7ff fef9 	bl	d533c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d554a:	0603      	lsls	r3, r0, #24
   d554c:	d412      	bmi.n	d5574 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d554e:	3c01      	subs	r4, #1
   d5550:	0100      	lsls	r0, r0, #4
   d5552:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5554:	2124      	movs	r1, #36	; 0x24
   d5556:	4630      	mov	r0, r6
   d5558:	f003 f933 	bl	d87c2 <strnlen>
   d555c:	3701      	adds	r7, #1
   d555e:	4287      	cmp	r7, r0
   d5560:	d208      	bcs.n	d5574 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d5562:	5df0      	ldrb	r0, [r6, r7]
   d5564:	f7ff feea 	bl	d533c <_ZN8particle11hexToNibbleEc>
   d5568:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d556a:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d556c:	bfa2      	ittt	ge
   d556e:	5d2b      	ldrbge	r3, [r5, r4]
   d5570:	4318      	orrge	r0, r3
   d5572:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5574:	3701      	adds	r7, #1
   d5576:	2124      	movs	r1, #36	; 0x24
   d5578:	4630      	mov	r0, r6
   d557a:	f003 f922 	bl	d87c2 <strnlen>
   d557e:	4287      	cmp	r7, r0
   d5580:	d3df      	bcc.n	d5542 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d5582:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d5584:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5586:	42a5      	cmp	r5, r4
   d5588:	d002      	beq.n	d5590 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d558a:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d558e:	e7fa      	b.n	d5586 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5590:	2301      	movs	r3, #1
   d5592:	742b      	strb	r3, [r5, #16]
}
   d5594:	b003      	add	sp, #12
   d5596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d5598:	2300      	movs	r3, #0
   d559a:	802b      	strh	r3, [r5, #0]
   d559c:	e7cf      	b.n	d553e <_ZN8particle7BleUuid9constructEPKc+0x62>

000d559e <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d559e:	b538      	push	{r3, r4, r5, lr}
   d55a0:	4604      	mov	r4, r0
   d55a2:	460d      	mov	r5, r1
        : BleUuid() {
   d55a4:	f7ff ff08 	bl	d53b8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d55a8:	4620      	mov	r0, r4
   d55aa:	4629      	mov	r1, r5
   d55ac:	f7ff ff96 	bl	d54dc <_ZN8particle7BleUuid9constructEPKc>
}
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd38      	pop	{r3, r4, r5, pc}

000d55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d55b6:	b18b      	cbz	r3, d55dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d55b8:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d55ba:	1ce5      	adds	r5, r4, #3
   d55bc:	428d      	cmp	r5, r1
   d55be:	d80f      	bhi.n	d55e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d55c0:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d55c2:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d55c4:	5d87      	ldrb	r7, [r0, r6]
   d55c6:	4297      	cmp	r7, r2
   d55c8:	d105      	bne.n	d55d6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d55ca:	442e      	add	r6, r5
   d55cc:	42b1      	cmp	r1, r6
   d55ce:	d307      	bcc.n	d55e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d55d0:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d55d2:	1c68      	adds	r0, r5, #1
                return adsLen;
   d55d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d55d6:	3501      	adds	r5, #1
   d55d8:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d55da:	e7ee      	b.n	d55ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d55dc:	4618      	mov	r0, r3
   d55de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55e0:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d55e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d55e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d55e8:	4604      	mov	r4, r0
   d55ea:	460e      	mov	r6, r1
   d55ec:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d55ee:	4617      	mov	r7, r2
   d55f0:	2a00      	cmp	r2, #0
   d55f2:	d03a      	beq.n	d566a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d55f4:	460a      	mov	r2, r1
   d55f6:	ab01      	add	r3, sp, #4
   d55f8:	6a01      	ldr	r1, [r0, #32]
   d55fa:	f7ff ffdb 	bl	d55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d55fe:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5602:	6a22      	ldr	r2, [r4, #32]
   d5604:	bb03      	cbnz	r3, d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5606:	b1f8      	cbz	r0, d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5608:	1c96      	adds	r6, r2, #2
   d560a:	442e      	add	r6, r5
   d560c:	1a36      	subs	r6, r6, r0
   d560e:	2e1f      	cmp	r6, #31
   d5610:	d82b      	bhi.n	d566a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5612:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5616:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d561a:	ebc8 0202 	rsb	r2, r8, r2
   d561e:	1a12      	subs	r2, r2, r0
   d5620:	eb00 0108 	add.w	r1, r0, r8
   d5624:	eb05 0009 	add.w	r0, r5, r9
   d5628:	b292      	uxth	r2, r2
   d562a:	4421      	add	r1, r4
   d562c:	4420      	add	r0, r4
   d562e:	f003 f84b 	bl	d86c8 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5632:	1c6b      	adds	r3, r5, #1
   d5634:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5638:	462a      	mov	r2, r5
   d563a:	4639      	mov	r1, r7
   d563c:	eb04 0009 	add.w	r0, r4, r9
   d5640:	f003 f837 	bl	d86b2 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5644:	6226      	str	r6, [r4, #32]
   d5646:	e010      	b.n	d566a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5648:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d564a:	182b      	adds	r3, r5, r0
   d564c:	2b1f      	cmp	r3, #31
   d564e:	d80c      	bhi.n	d566a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5650:	1c6b      	adds	r3, r5, #1
   d5652:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5654:	4422      	add	r2, r4
   d5656:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5658:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d565a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d565c:	4420      	add	r0, r4
   d565e:	462a      	mov	r2, r5
   d5660:	f003 f827 	bl	d86b2 <memcpy>
        selfLen_ += len;
   d5664:	6a22      	ldr	r2, [r4, #32]
   d5666:	442a      	add	r2, r5
   d5668:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d566a:	6a20      	ldr	r0, [r4, #32]
}
   d566c:	b003      	add	sp, #12
   d566e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5672 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5672:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5674:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5676:	4603      	mov	r3, r0
   d5678:	f100 021f 	add.w	r2, r0, #31
   d567c:	2000      	movs	r0, #0
   d567e:	f803 0b01 	strb.w	r0, [r3], #1
   d5682:	4293      	cmp	r3, r2
   d5684:	f04f 0100 	mov.w	r1, #0
   d5688:	d1f9      	bne.n	d567e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d568a:	aa04      	add	r2, sp, #16
   d568c:	2306      	movs	r3, #6
   d568e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5692:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5694:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5696:	9100      	str	r1, [sp, #0]
   d5698:	4620      	mov	r0, r4
   d569a:	4619      	mov	r1, r3
   d569c:	f7ff ffa2 	bl	d55e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d56a0:	4620      	mov	r0, r4
   d56a2:	b004      	add	sp, #16
   d56a4:	bd10      	pop	{r4, pc}

000d56a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d56a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d56a8:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d56aa:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d56ac:	ab01      	add	r3, sp, #4
   d56ae:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d56b0:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d56b2:	f7ff ff7f 	bl	d55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d56b6:	4605      	mov	r5, r0
   d56b8:	b178      	cbz	r0, d56da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d56ba:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d56bc:	6a22      	ldr	r2, [r4, #32]
   d56be:	1829      	adds	r1, r5, r0
   d56c0:	1a12      	subs	r2, r2, r0
   d56c2:	1b52      	subs	r2, r2, r5
   d56c4:	4421      	add	r1, r4
   d56c6:	4420      	add	r0, r4
   d56c8:	f002 fff3 	bl	d86b2 <memcpy>
        selfLen_ -= len;
   d56cc:	6a23      	ldr	r3, [r4, #32]
   d56ce:	1b5d      	subs	r5, r3, r5
   d56d0:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d56d2:	4631      	mov	r1, r6
   d56d4:	4620      	mov	r0, r4
   d56d6:	f7ff ffe6 	bl	d56a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d56da:	b002      	add	sp, #8
   d56dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56e0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56e0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56e2:	2500      	movs	r5, #0
   d56e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56e8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56ea:	8043      	strh	r3, [r0, #2]
   d56ec:	220e      	movs	r2, #14
   d56ee:	4629      	mov	r1, r5
   d56f0:	7005      	strb	r5, [r0, #0]
   d56f2:	7105      	strb	r5, [r0, #4]
   d56f4:	3006      	adds	r0, #6
   d56f6:	f003 f802 	bl	d86fe <memset>
   d56fa:	f104 0014 	add.w	r0, r4, #20
   d56fe:	f7ff fe5b 	bl	d53b8 <_ZN8particle7BleUuidC1Ev>
   d5702:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5706:	f7ff fe57 	bl	d53b8 <_ZN8particle7BleUuidC1Ev>
   d570a:	4904      	ldr	r1, [pc, #16]	; (d571c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d570c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5710:	f001 fceb 	bl	d70ea <_ZN6StringC1EPK19__FlashStringHelper>
   d5714:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5716:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5718:	4620      	mov	r0, r4
   d571a:	bd38      	pop	{r3, r4, r5, pc}
   d571c:	000d8b88 	.word	0x000d8b88

000d5720 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5720:	b510      	push	{r4, lr}
   d5722:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5724:	69c2      	ldr	r2, [r0, #28]
   d5726:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d572a:	4293      	cmp	r3, r2
   d572c:	4618      	mov	r0, r3
   d572e:	d006      	beq.n	d573e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5730:	6804      	ldr	r4, [r0, #0]
   d5732:	8824      	ldrh	r4, [r4, #0]
   d5734:	428c      	cmp	r4, r1
   d5736:	f103 0308 	add.w	r3, r3, #8
   d573a:	d1f6      	bne.n	d572a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d573c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d573e:	2000      	movs	r0, #0
    }
   d5740:	bd10      	pop	{r4, pc}
	...

000d5744 <_ZN8particle17BleCharacteristic8setValueEPKhj>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
   d5744:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5746:	4614      	mov	r4, r2
    if (buf == nullptr || len == 0) {
   d5748:	460a      	mov	r2, r1
   d574a:	b341      	cbz	r1, d579e <_ZN8particle17BleCharacteristic8setValueEPKhj+0x5a>
   d574c:	b33c      	cbz	r4, d579e <_ZN8particle17BleCharacteristic8setValueEPKhj+0x5a>
   d574e:	6805      	ldr	r5, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5750:	782e      	ldrb	r6, [r5, #0]
   d5752:	2cf4      	cmp	r4, #244	; 0xf4
   d5754:	bf28      	it	cs
   d5756:	24f4      	movcs	r4, #244	; 0xf4
   d5758:	b13e      	cbz	r6, d576a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x26>
        return hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d575a:	89a8      	ldrh	r0, [r5, #12]
   d575c:	2300      	movs	r3, #0
   d575e:	4622      	mov	r2, r4
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5760:	b002      	add	sp, #8
   d5762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        return hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5766:	f7ff babb 	b.w	d4ce0 <hal_ble_gatt_server_set_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d576a:	8868      	ldrh	r0, [r5, #2]
   d576c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5770:	4298      	cmp	r0, r3
   d5772:	d016      	beq.n	d57a2 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x5e>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
   d5774:	792b      	ldrb	r3, [r5, #4]
   d5776:	f043 0108 	orr.w	r1, r3, #8
   d577a:	2908      	cmp	r1, #8
   d577c:	d105      	bne.n	d578a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x46>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d577e:	89a9      	ldrh	r1, [r5, #12]
   d5780:	9600      	str	r6, [sp, #0]
   d5782:	4623      	mov	r3, r4
   d5784:	f7ff fab6 	bl	d4cf4 <hal_ble_gatt_client_write_with_response>
   d5788:	e00d      	b.n	d57a6 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x62>
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
   d578a:	f043 0304 	orr.w	r3, r3, #4
   d578e:	2b04      	cmp	r3, #4
   d5790:	d107      	bne.n	d57a2 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x5e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5792:	89a9      	ldrh	r1, [r5, #12]
   d5794:	9600      	str	r6, [sp, #0]
   d5796:	4623      	mov	r3, r4
   d5798:	f7ff fab6 	bl	d4d08 <hal_ble_gatt_client_write_without_response>
   d579c:	e003      	b.n	d57a6 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x62>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d579e:	4803      	ldr	r0, [pc, #12]	; (d57ac <_ZN8particle17BleCharacteristic8setValueEPKhj+0x68>)
   d57a0:	e001      	b.n	d57a6 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x62>
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d57a2:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
}
   d57a6:	b002      	add	sp, #8
   d57a8:	bd70      	pop	{r4, r5, r6, pc}
   d57aa:	bf00      	nop
   d57ac:	fffffef2 	.word	0xfffffef2

000d57b0 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d57b0:	b510      	push	{r4, lr}
    return impl()->address();
   d57b2:	680a      	ldr	r2, [r1, #0]
   d57b4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d57b8:	6003      	str	r3, [r0, #0]
   d57ba:	6853      	ldr	r3, [r2, #4]
   d57bc:	6043      	str	r3, [r0, #4]
}
   d57be:	bd10      	pop	{r4, pc}

000d57c0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d57c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d57c2:	6802      	ldr	r2, [r0, #0]
   d57c4:	680b      	ldr	r3, [r1, #0]
   d57c6:	8812      	ldrh	r2, [r2, #0]
   d57c8:	881b      	ldrh	r3, [r3, #0]
   d57ca:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d57cc:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d57ce:	d10c      	bne.n	d57ea <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d57d0:	4601      	mov	r1, r0
   d57d2:	4668      	mov	r0, sp
   d57d4:	f7ff ffec 	bl	d57b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d57d8:	4621      	mov	r1, r4
   d57da:	a802      	add	r0, sp, #8
   d57dc:	f7ff ffe8 	bl	d57b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d57e0:	a902      	add	r1, sp, #8
   d57e2:	4668      	mov	r0, sp
   d57e4:	f7ff fdda 	bl	d539c <_ZNK8particle10BleAddresseqERKS0_>
   d57e8:	b900      	cbnz	r0, d57ec <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d57ea:	2000      	movs	r0, #0
}
   d57ec:	b004      	add	sp, #16
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d57f4:	2034      	movs	r0, #52	; 0x34
   d57f6:	f7fe fc4e 	bl	d4096 <_Znwj>
   d57fa:	4601      	mov	r1, r0
   d57fc:	b168      	cbz	r0, d581a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d57fe:	2300      	movs	r3, #0
   d5800:	6003      	str	r3, [r0, #0]
   d5802:	6043      	str	r3, [r0, #4]
   d5804:	6083      	str	r3, [r0, #8]
   d5806:	60c3      	str	r3, [r0, #12]
   d5808:	6103      	str	r3, [r0, #16]
   d580a:	6143      	str	r3, [r0, #20]
   d580c:	6183      	str	r3, [r0, #24]
   d580e:	61c3      	str	r3, [r0, #28]
   d5810:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5812:	6243      	str	r3, [r0, #36]	; 0x24
   d5814:	6283      	str	r3, [r0, #40]	; 0x28
   d5816:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5818:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d581a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d581c:	b919      	cbnz	r1, d5826 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d581e:	4a0a      	ldr	r2, [pc, #40]	; (d5848 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5820:	200a      	movs	r0, #10
   d5822:	f7ff fbf7 	bl	d5014 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5826:	2000      	movs	r0, #0
   d5828:	f7ff fa26 	bl	d4c78 <hal_ble_stack_init>
   d582c:	b120      	cbz	r0, d5838 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d582e:	4a06      	ldr	r2, [pc, #24]	; (d5848 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5830:	2100      	movs	r1, #0
   d5832:	200a      	movs	r0, #10
   d5834:	f7ff fbee 	bl	d5014 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5838:	2200      	movs	r2, #0
   d583a:	6821      	ldr	r1, [r4, #0]
   d583c:	4803      	ldr	r0, [pc, #12]	; (d584c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d583e:	f7ff fa77 	bl	d4d30 <hal_ble_set_callback_on_periph_link_events>
}
   d5842:	4620      	mov	r0, r4
   d5844:	bd10      	pop	{r4, pc}
   d5846:	bf00      	nop
   d5848:	000d4dc5 	.word	0x000d4dc5
   d584c:	000d5c35 	.word	0x000d5c35

000d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5850:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5852:	4c0a      	ldr	r4, [pc, #40]	; (d587c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5854:	6823      	ldr	r3, [r4, #0]
   d5856:	07db      	lsls	r3, r3, #31
   d5858:	d40e      	bmi.n	d5878 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d585a:	4620      	mov	r0, r4
   d585c:	f7fe fc21 	bl	d40a2 <__cxa_guard_acquire>
   d5860:	b150      	cbz	r0, d5878 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5862:	4807      	ldr	r0, [pc, #28]	; (d5880 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5864:	f7ff ffc4 	bl	d57f0 <_ZN8particle14BleLocalDeviceC1Ev>
   d5868:	4620      	mov	r0, r4
   d586a:	f7fe fc1f 	bl	d40ac <__cxa_guard_release>
   d586e:	4a05      	ldr	r2, [pc, #20]	; (d5884 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5870:	4905      	ldr	r1, [pc, #20]	; (d5888 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5872:	4803      	ldr	r0, [pc, #12]	; (d5880 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5874:	f001 ff34 	bl	d76e0 <__aeabi_atexit>
    return instance;
}
   d5878:	4801      	ldr	r0, [pc, #4]	; (d5880 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d587a:	bd10      	pop	{r4, pc}
   d587c:	2003e3c4 	.word	0x2003e3c4
   d5880:	2003e3c0 	.word	0x2003e3c0
   d5884:	2003e358 	.word	0x2003e358
   d5888:	000d5a49 	.word	0x000d5a49

000d588c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d588c:	b570      	push	{r4, r5, r6, lr}
   d588e:	4604      	mov	r4, r0
   d5890:	b08c      	sub	sp, #48	; 0x30
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d5892:	a803      	add	r0, sp, #12
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5894:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d5896:	f7ff fd67 	bl	d5368 <_ZN8particle3ble13WiringBleLockC1Ev>
    switch (event->type) {
   d589a:	6823      	ldr	r3, [r4, #0]
   d589c:	3b09      	subs	r3, #9
   d589e:	2b01      	cmp	r3, #1
   d58a0:	d819      	bhi.n	d58d6 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d58a2:	f7ff ffd5 	bl	d5850 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d58a6:	88a1      	ldrh	r1, [r4, #4]
   d58a8:	6800      	ldr	r0, [r0, #0]
   d58aa:	f7ff ff39 	bl	d5720 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d58ae:	4602      	mov	r2, r0
   d58b0:	b958      	cbnz	r0, d58ca <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3e>
                LOG(ERROR, "Peer device is missing!");
   d58b2:	2320      	movs	r3, #32
   d58b4:	9304      	str	r3, [sp, #16]
   d58b6:	4b0a      	ldr	r3, [pc, #40]	; (d58e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d58b8:	9005      	str	r0, [sp, #20]
   d58ba:	9300      	str	r3, [sp, #0]
   d58bc:	aa04      	add	r2, sp, #16
   d58be:	4603      	mov	r3, r0
   d58c0:	4908      	ldr	r1, [pc, #32]	; (d58e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d58c2:	2032      	movs	r0, #50	; 0x32
   d58c4:	f7ff fbae 	bl	d5024 <log_message>
                break;
   d58c8:	e005      	b.n	d58d6 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
            }
            if (impl->callback_) {
   d58ca:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d58cc:	b11d      	cbz	r5, d58d6 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4a>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d58ce:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d58d0:	68e1      	ldr	r1, [r4, #12]
   d58d2:	6920      	ldr	r0, [r4, #16]
   d58d4:	47a8      	blx	r5
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    WiringBleLock lk;
   d58d6:	a803      	add	r0, sp, #12
   d58d8:	f7ff fd54 	bl	d5384 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default: {
            break;
        }
    }
}
   d58dc:	b00c      	add	sp, #48	; 0x30
   d58de:	bd70      	pop	{r4, r5, r6, pc}
   d58e0:	000d8992 	.word	0x000d8992
   d58e4:	000d8948 	.word	0x000d8948

000d58e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d58e8:	4608      	mov	r0, r1
   d58ea:	b909      	cbnz	r1, d58f0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d58ec:	460a      	mov	r2, r1
   d58ee:	e001      	b.n	d58f4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d58f0:	6a09      	ldr	r1, [r1, #32]
   d58f2:	2200      	movs	r2, #0
   d58f4:	f7ff b9c8 	b.w	d4c88 <hal_ble_gap_set_advertising_data>

000d58f8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d58f8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d58fa:	460c      	mov	r4, r1
   d58fc:	b911      	cbnz	r1, d5904 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d58fe:	460a      	mov	r2, r1
   d5900:	4608      	mov	r0, r1
   d5902:	e006      	b.n	d5912 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5904:	2101      	movs	r1, #1
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff fecd 	bl	d56a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d590c:	6a21      	ldr	r1, [r4, #32]
   d590e:	2200      	movs	r2, #0
   d5910:	4620      	mov	r0, r4
    }
}
   d5912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5916:	f7ff b9bf 	b.w	d4c98 <hal_ble_gap_set_scan_response_data>

000d591a <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d591a:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d591c:	a801      	add	r0, sp, #4
   d591e:	f7ff fd23 	bl	d5368 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5922:	2000      	movs	r0, #0
   d5924:	f7ff f9c0 	bl	d4ca8 <hal_ble_gap_start_advertising>
   d5928:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d592a:	a801      	add	r0, sp, #4
   d592c:	f7ff fd2a 	bl	d5384 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5930:	4620      	mov	r0, r4
   d5932:	b002      	add	sp, #8
   d5934:	bd10      	pop	{r4, pc}

000d5936 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5936:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5938:	4605      	mov	r5, r0
   d593a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d593c:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d593e:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5940:	f7ff fd12 	bl	d5368 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5944:	4621      	mov	r1, r4
   d5946:	4628      	mov	r0, r5
   d5948:	f7ff ffce 	bl	d58e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d594c:	2800      	cmp	r0, #0
   d594e:	db08      	blt.n	d5962 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5950:	4631      	mov	r1, r6
   d5952:	4628      	mov	r0, r5
   d5954:	f7ff ffd0 	bl	d58f8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5958:	2800      	cmp	r0, #0
   d595a:	db02      	blt.n	d5962 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d595c:	4628      	mov	r0, r5
   d595e:	f7ff ffdc 	bl	d591a <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5962:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5964:	a801      	add	r0, sp, #4
   d5966:	f7ff fd0d 	bl	d5384 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d596a:	4620      	mov	r0, r4
   d596c:	b002      	add	sp, #8
   d596e:	bd70      	pop	{r4, r5, r6, pc}

000d5970 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5970:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5972:	69d8      	ldr	r0, [r3, #28]
}
   d5974:	2800      	cmp	r0, #0
   d5976:	bfd4      	ite	le
   d5978:	2000      	movle	r0, #0
   d597a:	2001      	movgt	r0, #1
   d597c:	4770      	bx	lr

000d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d597e:	680b      	ldr	r3, [r1, #0]
   d5980:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5982:	b113      	cbz	r3, d598a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5984:	685a      	ldr	r2, [r3, #4]
   d5986:	3201      	adds	r2, #1
   d5988:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d598a:	4770      	bx	lr

000d598c <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d598c:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d598e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5992:	4604      	mov	r4, r0
   d5994:	f840 3b04 	str.w	r3, [r0], #4
   d5998:	f7ff fff1 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d599c:	6823      	ldr	r3, [r4, #0]
   d599e:	b90b      	cbnz	r3, d59a4 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d59a0:	f7ff fcb2 	bl	d5308 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d59a4:	4620      	mov	r0, r4
   d59a6:	bd10      	pop	{r4, pc}

000d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d59a8:	b510      	push	{r4, lr}
   d59aa:	f851 3b04 	ldr.w	r3, [r1], #4
   d59ae:	4604      	mov	r4, r0
   d59b0:	f840 3b04 	str.w	r3, [r0], #4
   d59b4:	f7ff ffe3 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d59b8:	4620      	mov	r0, r4
   d59ba:	bd10      	pop	{r4, pc}

000d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d59bc:	b510      	push	{r4, lr}
   d59be:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d59c0:	6800      	ldr	r0, [r0, #0]
   d59c2:	b128      	cbz	r0, d59d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d59c4:	6843      	ldr	r3, [r0, #4]
   d59c6:	3b01      	subs	r3, #1
   d59c8:	6043      	str	r3, [r0, #4]
   d59ca:	b90b      	cbnz	r3, d59d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d59cc:	f7ff fca6 	bl	d531c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d59d0:	4620      	mov	r0, r4
   d59d2:	bd10      	pop	{r4, pc}

000d59d4 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d59d4:	b510      	push	{r4, lr}
   d59d6:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59d8:	3004      	adds	r0, #4
   d59da:	f7ff ffef 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d59de:	4620      	mov	r0, r4
   d59e0:	bd10      	pop	{r4, pc}

000d59e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59e2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d59e4:	6804      	ldr	r4, [r0, #0]
   d59e6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59e8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d59ea:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d59ee:	42a6      	cmp	r6, r4
   d59f0:	d004      	beq.n	d59fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d59f2:	1d20      	adds	r0, r4, #4
   d59f4:	f7ff ffe2 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59f8:	3408      	adds	r4, #8
   d59fa:	e7f8      	b.n	d59ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d59fc:	6828      	ldr	r0, [r5, #0]
   d59fe:	f7ff fbd7 	bl	d51b0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5a02:	4628      	mov	r0, r5
   d5a04:	bd70      	pop	{r4, r5, r6, pc}

000d5a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a06:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5a08:	6804      	ldr	r4, [r0, #0]
   d5a0a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a0c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5a0e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5a12:	42a6      	cmp	r6, r4
   d5a14:	d004      	beq.n	d5a20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5a16:	1d20      	adds	r0, r4, #4
   d5a18:	f7ff ffd0 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a1c:	3408      	adds	r4, #8
   d5a1e:	e7f8      	b.n	d5a12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a20:	6828      	ldr	r0, [r5, #0]
   d5a22:	f7ff fbc5 	bl	d51b0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5a26:	4628      	mov	r0, r5
   d5a28:	bd70      	pop	{r4, r5, r6, pc}

000d5a2a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5a2a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a2c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5a2e:	f104 0018 	add.w	r0, r4, #24
   d5a32:	f7ff ffe8 	bl	d5a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a36:	f104 000c 	add.w	r0, r4, #12
   d5a3a:	f7ff ffd2 	bl	d59e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5a3e:	4620      	mov	r0, r4
   d5a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5a44:	f7fe bb29 	b.w	d409a <_ZdlPv>

000d5a48 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a4a:	6804      	ldr	r4, [r0, #0]
   d5a4c:	4607      	mov	r7, r0
   d5a4e:	b1c4      	cbz	r4, d5a82 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5a50:	69a5      	ldr	r5, [r4, #24]
   d5a52:	69e3      	ldr	r3, [r4, #28]
   d5a54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5a58:	42ae      	cmp	r6, r5
   d5a5a:	d004      	beq.n	d5a66 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a5c:	1d28      	adds	r0, r5, #4
   d5a5e:	f7ff ffad 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a62:	3508      	adds	r5, #8
   d5a64:	e7f8      	b.n	d5a58 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a66:	69a0      	ldr	r0, [r4, #24]
   d5a68:	f7ff fba2 	bl	d51b0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5a6c:	f104 000c 	add.w	r0, r4, #12
   d5a70:	f7ff ffc9 	bl	d5a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a74:	4620      	mov	r0, r4
   d5a76:	f7ff ffb4 	bl	d59e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a7a:	2134      	movs	r1, #52	; 0x34
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	f001 fe34 	bl	d76ea <_ZdlPvj>
   d5a82:	4638      	mov	r0, r7
   d5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5a88 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5a8a:	2500      	movs	r5, #0
   d5a8c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a8e:	6045      	str	r5, [r0, #4]
   d5a90:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a92:	2024      	movs	r0, #36	; 0x24
   d5a94:	f7fe faff 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a98:	4604      	mov	r4, r0
   d5a9a:	b178      	cbz	r0, d5abc <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5a9c:	4603      	mov	r3, r0
   d5a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5aa2:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5aa6:	f8c0 5002 	str.w	r5, [r0, #2]
   d5aaa:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5aac:	7285      	strb	r5, [r0, #10]
   d5aae:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ab0:	60c5      	str	r5, [r0, #12]
   d5ab2:	6105      	str	r5, [r0, #16]
   d5ab4:	6145      	str	r5, [r0, #20]
   d5ab6:	6185      	str	r5, [r0, #24]
   d5ab8:	61c5      	str	r5, [r0, #28]
   d5aba:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5abc:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5abe:	2014      	movs	r0, #20
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	f7fe fae8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5ac6:	4603      	mov	r3, r0
   d5ac8:	b128      	cbz	r0, d5ad6 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5aca:	2201      	movs	r2, #1
   d5acc:	6042      	str	r2, [r0, #4]
   d5ace:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5ad0:	4a08      	ldr	r2, [pc, #32]	; (d5af4 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5ad2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5ad4:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5ad6:	a802      	add	r0, sp, #8
   d5ad8:	6872      	ldr	r2, [r6, #4]
   d5ada:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5ade:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5ae0:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ae2:	f7ff ff6b 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5ae6:	6833      	ldr	r3, [r6, #0]
   d5ae8:	b90b      	cbnz	r3, d5aee <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5aea:	f7ff fc0d 	bl	d5308 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
}
   d5aee:	4630      	mov	r0, r6
   d5af0:	b002      	add	sp, #8
   d5af2:	bd70      	pop	{r4, r5, r6, pc}
   d5af4:	000d8924 	.word	0x000d8924

000d5af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5af8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5afa:	b570      	push	{r4, r5, r6, lr}
   d5afc:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5afe:	d91a      	bls.n	d5b36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5b00:	4290      	cmp	r0, r2
   d5b02:	d219      	bcs.n	d5b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5b04:	f1a1 0608 	sub.w	r6, r1, #8
   d5b08:	1a51      	subs	r1, r2, r1
   d5b0a:	3904      	subs	r1, #4
   d5b0c:	1f15      	subs	r5, r2, #4
   d5b0e:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5b10:	1f2b      	subs	r3, r5, #4
   d5b12:	429e      	cmp	r6, r3
   d5b14:	d025      	beq.n	d5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5b16:	2c04      	cmp	r4, #4
   d5b18:	d007      	beq.n	d5b2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5b1e:	f844 3c04 	str.w	r3, [r4, #-4]
   d5b22:	4629      	mov	r1, r5
   d5b24:	4620      	mov	r0, r4
   d5b26:	f7ff ff2a 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b2a:	4628      	mov	r0, r5
   d5b2c:	f7ff ff46 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b30:	3d08      	subs	r5, #8
   d5b32:	3c08      	subs	r4, #8
   d5b34:	e7ec      	b.n	d5b10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5b36:	d014      	beq.n	d5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5b38:	1d0c      	adds	r4, r1, #4
   d5b3a:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5b3c:	1f23      	subs	r3, r4, #4
   d5b3e:	429d      	cmp	r5, r3
   d5b40:	d00f      	beq.n	d5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5b42:	2e04      	cmp	r6, #4
   d5b44:	d007      	beq.n	d5b56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5b4a:	f846 3c04 	str.w	r3, [r6, #-4]
   d5b4e:	4621      	mov	r1, r4
   d5b50:	4630      	mov	r0, r6
   d5b52:	f7ff ff14 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff ff30 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b5c:	3408      	adds	r4, #8
   d5b5e:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5b60:	e7ec      	b.n	d5b3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5b62:	bd70      	pop	{r4, r5, r6, pc}

000d5b64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5b68:	6804      	ldr	r4, [r0, #0]
   d5b6a:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b6c:	4605      	mov	r5, r0
   d5b6e:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5b70:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5b74:	42a7      	cmp	r7, r4
   d5b76:	d018      	beq.n	d5baa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5b78:	4641      	mov	r1, r8
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f7ff fe20 	bl	d57c0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5b80:	4606      	mov	r6, r0
   d5b82:	b908      	cbnz	r0, d5b88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5b84:	3408      	adds	r4, #8
   d5b86:	e7f5      	b.n	d5b74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5b88:	b18c      	cbz	r4, d5bae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5b8a:	1d20      	adds	r0, r4, #4
   d5b8c:	f7ff ff16 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5b90:	682b      	ldr	r3, [r5, #0]
   d5b92:	686a      	ldr	r2, [r5, #4]
   d5b94:	f104 0108 	add.w	r1, r4, #8
   d5b98:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f7ff ffab 	bl	d5af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5ba2:	686b      	ldr	r3, [r5, #4]
   d5ba4:	3b01      	subs	r3, #1
   d5ba6:	606b      	str	r3, [r5, #4]
    return true;
   d5ba8:	e002      	b.n	d5bb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5baa:	2600      	movs	r6, #0
   d5bac:	e000      	b.n	d5bb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5bae:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5bb0:	4630      	mov	r0, r6
   d5bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5bb8:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5bba:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5bbe:	6847      	ldr	r7, [r0, #4]
   d5bc0:	9300      	str	r3, [sp, #0]
   d5bc2:	a801      	add	r0, sp, #4
   d5bc4:	f7ff fedb 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5bc8:	6866      	ldr	r6, [r4, #4]
   d5bca:	68a3      	ldr	r3, [r4, #8]
   d5bcc:	429e      	cmp	r6, r3
   d5bce:	db14      	blt.n	d5bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5bd0:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5bd2:	2e00      	cmp	r6, #0
   d5bd4:	dd0b      	ble.n	d5bee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5bd6:	00f0      	lsls	r0, r6, #3
   d5bd8:	f7ff fae2 	bl	d51a0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5bdc:	4605      	mov	r5, r0
   d5bde:	b318      	cbz	r0, d5c28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5be0:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5be4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5be8:	f7ff ff86 	bl	d5af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5bec:	e000      	b.n	d5bf0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5bee:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5bf0:	6820      	ldr	r0, [r4, #0]
   d5bf2:	f7ff fadd 	bl	d51b0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5bf6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5bf8:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5bfa:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5bfc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5bfe:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5c02:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5c06:	4629      	mov	r1, r5
   d5c08:	f105 0008 	add.w	r0, r5, #8
   d5c0c:	f7ff ff74 	bl	d5af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5c10:	b135      	cbz	r5, d5c20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5c12:	9b00      	ldr	r3, [sp, #0]
   d5c14:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5c18:	a901      	add	r1, sp, #4
   d5c1a:	1d28      	adds	r0, r5, #4
   d5c1c:	f7ff feaf 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5c20:	6863      	ldr	r3, [r4, #4]
   d5c22:	3301      	adds	r3, #1
   d5c24:	6063      	str	r3, [r4, #4]
   d5c26:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c28:	a801      	add	r0, sp, #4
   d5c2a:	f7ff fec7 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5c2e:	4628      	mov	r0, r5
   d5c30:	b003      	add	sp, #12
   d5c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c38:	4604      	mov	r4, r0
   d5c3a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5c3c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5c3e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5c40:	f7ff fb92 	bl	d5368 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5c44:	6823      	ldr	r3, [r4, #0]
   d5c46:	2b03      	cmp	r3, #3
   d5c48:	d002      	beq.n	d5c50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5c4a:	2b04      	cmp	r3, #4
   d5c4c:	d042      	beq.n	d5cd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5c4e:	e087      	b.n	d5d60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5c50:	a804      	add	r0, sp, #16
   d5c52:	f7ff ff19 	bl	d5a88 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5c56:	9b04      	ldr	r3, [sp, #16]
   d5c58:	8922      	ldrh	r2, [r4, #8]
   d5c5a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5c5c:	6862      	ldr	r2, [r4, #4]
   d5c5e:	9904      	ldr	r1, [sp, #16]
   d5c60:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5c64:	f8c1 3002 	str.w	r3, [r1, #2]
   d5c68:	6853      	ldr	r3, [r2, #4]
   d5c6a:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c6e:	a807      	add	r0, sp, #28
   d5c70:	9b04      	ldr	r3, [sp, #16]
   d5c72:	9306      	str	r3, [sp, #24]
   d5c74:	a905      	add	r1, sp, #20
   d5c76:	f7ff fe82 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5c7a:	a906      	add	r1, sp, #24
   d5c7c:	f105 0018 	add.w	r0, r5, #24
   d5c80:	f7ff ff99 	bl	d5bb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5c84:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c86:	a807      	add	r0, sp, #28
   d5c88:	f7ff fe98 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c8c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c8e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5c90:	b974      	cbnz	r4, d5cb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c92:	4b36      	ldr	r3, [pc, #216]	; (d5d6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5c94:	9300      	str	r3, [sp, #0]
   d5c96:	aa06      	add	r2, sp, #24
   d5c98:	4623      	mov	r3, r4
   d5c9a:	4935      	ldr	r1, [pc, #212]	; (d5d70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5c9c:	9407      	str	r4, [sp, #28]
   d5c9e:	2032      	movs	r0, #50	; 0x32
   d5ca0:	f7ff f9c0 	bl	d5024 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5ca4:	9b04      	ldr	r3, [sp, #16]
   d5ca6:	4621      	mov	r1, r4
   d5ca8:	8818      	ldrh	r0, [r3, #0]
   d5caa:	f7ff f805 	bl	d4cb8 <hal_ble_gap_disconnect>
   d5cae:	e00d      	b.n	d5ccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5cb0:	4a30      	ldr	r2, [pc, #192]	; (d5d74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5cb2:	9200      	str	r2, [sp, #0]
   d5cb4:	2300      	movs	r3, #0
   d5cb6:	aa06      	add	r2, sp, #24
   d5cb8:	492d      	ldr	r1, [pc, #180]	; (d5d70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5cba:	9307      	str	r3, [sp, #28]
   d5cbc:	2001      	movs	r0, #1
   d5cbe:	f7ff f9b1 	bl	d5024 <log_message>
                if (impl->connectedCb_) {
   d5cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5cc4:	b113      	cbz	r3, d5ccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5cc6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5cc8:	a804      	add	r0, sp, #16
   d5cca:	4798      	blx	r3
   d5ccc:	a805      	add	r0, sp, #20
   d5cce:	f7ff fe75 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cd2:	e045      	b.n	d5d60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5cd4:	8921      	ldrh	r1, [r4, #8]
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	f7ff fd22 	bl	d5720 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5cdc:	4607      	mov	r7, r0
   d5cde:	2800      	cmp	r0, #0
   d5ce0:	d03e      	beq.n	d5d60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5ce2:	6804      	ldr	r4, [r0, #0]
   d5ce4:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ce6:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5cec:	8022      	strh	r2, [r4, #0]
   d5cee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5cf2:	4299      	cmp	r1, r3
   d5cf4:	d003      	beq.n	d5cfe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5cf6:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5cfa:	8042      	strh	r2, [r0, #2]
   d5cfc:	e7f9      	b.n	d5cf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5cfe:	68e6      	ldr	r6, [r4, #12]
   d5d00:	6923      	ldr	r3, [r4, #16]
   d5d02:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5d06:	45b0      	cmp	r8, r6
   d5d08:	d004      	beq.n	d5d14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5d0a:	1d30      	adds	r0, r6, #4
   d5d0c:	f7ff fe56 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d10:	3608      	adds	r6, #8
   d5d12:	e7f8      	b.n	d5d06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5d14:	2300      	movs	r3, #0
   d5d16:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5d18:	69a6      	ldr	r6, [r4, #24]
   d5d1a:	69e3      	ldr	r3, [r4, #28]
   d5d1c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5d20:	45b0      	cmp	r8, r6
   d5d22:	d004      	beq.n	d5d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5d24:	1d30      	adds	r0, r6, #4
   d5d26:	f7ff fe49 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d2a:	3608      	adds	r6, #8
   d5d2c:	e7f8      	b.n	d5d20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5d2e:	2300      	movs	r3, #0
   d5d30:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5d32:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5d34:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5d36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5d38:	b113      	cbz	r3, d5d40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5d3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5d3c:	4638      	mov	r0, r7
   d5d3e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5d40:	2320      	movs	r3, #32
   d5d42:	4a0d      	ldr	r2, [pc, #52]	; (d5d78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5d44:	9306      	str	r3, [sp, #24]
   d5d46:	9200      	str	r2, [sp, #0]
   d5d48:	2300      	movs	r3, #0
   d5d4a:	4909      	ldr	r1, [pc, #36]	; (d5d70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5d4c:	9307      	str	r3, [sp, #28]
   d5d4e:	2001      	movs	r0, #1
   d5d50:	aa06      	add	r2, sp, #24
   d5d52:	f7ff f967 	bl	d5024 <log_message>
                    impl->peers_.removeOne(*peer);
   d5d56:	4639      	mov	r1, r7
   d5d58:	f105 0018 	add.w	r0, r5, #24
   d5d5c:	f7ff ff02 	bl	d5b64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5d60:	a803      	add	r0, sp, #12
   d5d62:	f7ff fb0f 	bl	d5384 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5d66:	b00e      	add	sp, #56	; 0x38
   d5d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d6c:	000d89aa 	.word	0x000d89aa
   d5d70:	000d8948 	.word	0x000d8948
   d5d74:	000d89d0 	.word	0x000d89d0
   d5d78:	000d89ed 	.word	0x000d89ed

000d5d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5d7c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d80:	4606      	mov	r6, r0
   d5d82:	460c      	mov	r4, r1
   d5d84:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5d86:	d914      	bls.n	d5db2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5d88:	4290      	cmp	r0, r2
   d5d8a:	d213      	bcs.n	d5db4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5d8c:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5d90:	1a6c      	subs	r4, r5, r1
   d5d92:	f1a1 0708 	sub.w	r7, r1, #8
   d5d96:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5d98:	42af      	cmp	r7, r5
   d5d9a:	d018      	beq.n	d5dce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5d9c:	b11c      	cbz	r4, d5da6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5d9e:	4629      	mov	r1, r5
   d5da0:	4620      	mov	r0, r4
   d5da2:	f7ff fe01 	bl	d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5da6:	1d28      	adds	r0, r5, #4
   d5da8:	f7ff fe08 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5dac:	3d08      	subs	r5, #8
   d5dae:	3c08      	subs	r4, #8
   d5db0:	e7f2      	b.n	d5d98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5db2:	d00c      	beq.n	d5dce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5db4:	42ac      	cmp	r4, r5
   d5db6:	d00a      	beq.n	d5dce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5db8:	b11e      	cbz	r6, d5dc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5dba:	4621      	mov	r1, r4
   d5dbc:	4630      	mov	r0, r6
   d5dbe:	f7ff fdf3 	bl	d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5dc2:	1d20      	adds	r0, r4, #4
   d5dc4:	f7ff fdfa 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5dc8:	3408      	adds	r4, #8
   d5dca:	3608      	adds	r6, #8
   d5dcc:	e7f2      	b.n	d5db4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dd0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5dd0:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5dd2:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5dd4:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5dd6:	dd0b      	ble.n	d5df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5dd8:	00f0      	lsls	r0, r6, #3
   d5dda:	f7ff f9e1 	bl	d51a0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5dde:	4604      	mov	r4, r0
   d5de0:	b170      	cbz	r0, d5e00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5de2:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5de6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5dea:	f7ff ffc7 	bl	d5d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5dee:	e000      	b.n	d5df2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5df0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5df2:	6828      	ldr	r0, [r5, #0]
   d5df4:	f7ff f9dc 	bl	d51b0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5df8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5dfa:	60ae      	str	r6, [r5, #8]
        return true;
   d5dfc:	2001      	movs	r0, #1
   d5dfe:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5e00:	bd70      	pop	{r4, r5, r6, pc}

000d5e02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e04:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5e06:	6845      	ldr	r5, [r0, #4]
   d5e08:	4668      	mov	r0, sp
   d5e0a:	f7ff fdcd 	bl	d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e0e:	6861      	ldr	r1, [r4, #4]
   d5e10:	68a3      	ldr	r3, [r4, #8]
   d5e12:	4299      	cmp	r1, r3
   d5e14:	db05      	blt.n	d5e22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5e16:	3101      	adds	r1, #1
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff ffd9 	bl	d5dd0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5e1e:	4606      	mov	r6, r0
   d5e20:	b198      	cbz	r0, d5e4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5e22:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5e24:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5e2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e2e:	4629      	mov	r1, r5
   d5e30:	f105 0008 	add.w	r0, r5, #8
   d5e34:	f7ff ffa2 	bl	d5d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5e38:	b11d      	cbz	r5, d5e42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5e3a:	4669      	mov	r1, sp
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f7ff fdb3 	bl	d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5e42:	6863      	ldr	r3, [r4, #4]
   d5e44:	3301      	adds	r3, #1
   d5e46:	6063      	str	r3, [r4, #4]
   d5e48:	2601      	movs	r6, #1
   d5e4a:	a801      	add	r0, sp, #4
   d5e4c:	f7ff fdb6 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5e50:	4630      	mov	r0, r6
   d5e52:	b002      	add	sp, #8
   d5e54:	bd70      	pop	{r4, r5, r6, pc}

000d5e56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5e56:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e5a:	4606      	mov	r6, r0
   d5e5c:	460c      	mov	r4, r1
   d5e5e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5e60:	d914      	bls.n	d5e8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5e62:	4290      	cmp	r0, r2
   d5e64:	d213      	bcs.n	d5e8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5e66:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5e6a:	1a6c      	subs	r4, r5, r1
   d5e6c:	f1a1 0708 	sub.w	r7, r1, #8
   d5e70:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5e72:	42af      	cmp	r7, r5
   d5e74:	d018      	beq.n	d5ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5e76:	b11c      	cbz	r4, d5e80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5e78:	4629      	mov	r1, r5
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f7ff fd86 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5e80:	1d28      	adds	r0, r5, #4
   d5e82:	f7ff fd9b 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5e86:	3d08      	subs	r5, #8
   d5e88:	3c08      	subs	r4, #8
   d5e8a:	e7f2      	b.n	d5e72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5e8c:	d00c      	beq.n	d5ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5e8e:	42ac      	cmp	r4, r5
   d5e90:	d00a      	beq.n	d5ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5e92:	b11e      	cbz	r6, d5e9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5e94:	4621      	mov	r1, r4
   d5e96:	4630      	mov	r0, r6
   d5e98:	f7ff fd78 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5e9c:	1d20      	adds	r0, r4, #4
   d5e9e:	f7ff fd8d 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5ea2:	3408      	adds	r4, #8
   d5ea4:	3608      	adds	r6, #8
   d5ea6:	e7f2      	b.n	d5e8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5eaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5eaa:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5eac:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5eae:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5eb0:	dd0b      	ble.n	d5eca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5eb2:	00f0      	lsls	r0, r6, #3
   d5eb4:	f7ff f974 	bl	d51a0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5eb8:	4604      	mov	r4, r0
   d5eba:	b170      	cbz	r0, d5eda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5ebc:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5ec0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5ec4:	f7ff ffc7 	bl	d5e56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5ec8:	e000      	b.n	d5ecc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5eca:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ecc:	6828      	ldr	r0, [r5, #0]
   d5ece:	f7ff f96f 	bl	d51b0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5ed2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5ed4:	60ae      	str	r6, [r5, #8]
        return true;
   d5ed6:	2001      	movs	r0, #1
   d5ed8:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5eda:	bd70      	pop	{r4, r5, r6, pc}

000d5edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5ede:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5ee0:	6845      	ldr	r5, [r0, #4]
   d5ee2:	4668      	mov	r0, sp
   d5ee4:	f7ff fd52 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ee8:	6861      	ldr	r1, [r4, #4]
   d5eea:	68a3      	ldr	r3, [r4, #8]
   d5eec:	4299      	cmp	r1, r3
   d5eee:	db05      	blt.n	d5efc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5ef0:	3101      	adds	r1, #1
   d5ef2:	4620      	mov	r0, r4
   d5ef4:	f7ff ffd9 	bl	d5eaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5ef8:	4606      	mov	r6, r0
   d5efa:	b198      	cbz	r0, d5f24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5efc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5efe:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5f04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5f08:	4629      	mov	r1, r5
   d5f0a:	f105 0008 	add.w	r0, r5, #8
   d5f0e:	f7ff ffa2 	bl	d5e56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5f12:	b11d      	cbz	r5, d5f1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5f14:	4669      	mov	r1, sp
   d5f16:	4628      	mov	r0, r5
   d5f18:	f7ff fd38 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5f1c:	6863      	ldr	r3, [r4, #4]
   d5f1e:	3301      	adds	r3, #1
   d5f20:	6063      	str	r3, [r4, #4]
   d5f22:	2601      	movs	r6, #1
   d5f24:	a801      	add	r0, sp, #4
   d5f26:	f7ff fd49 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5f2a:	4630      	mov	r0, r6
   d5f2c:	b002      	add	sp, #8
   d5f2e:	bd70      	pop	{r4, r5, r6, pc}

000d5f30 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	b108      	cbz	r0, d5f3c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5f38:	f7fe f8af 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	bd10      	pop	{r4, pc}

000d5f40 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5f40:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5f42:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5f44:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5f46:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5f4a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5f4e:	f001 f885 	bl	d705c <_ZN6StringD1Ev>
   d5f52:	4668      	mov	r0, sp
   d5f54:	f7ff ffec 	bl	d5f30 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5f58:	b003      	add	sp, #12
   d5f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5f60:	b538      	push	{r3, r4, r5, lr}
   d5f62:	2300      	movs	r3, #0
   d5f64:	4604      	mov	r4, r0
   d5f66:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5f68:	2014      	movs	r0, #20
   d5f6a:	460d      	mov	r5, r1
   d5f6c:	f7fe f893 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5f70:	b128      	cbz	r0, d5f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5f72:	2301      	movs	r3, #1
   d5f74:	6043      	str	r3, [r0, #4]
   d5f76:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5f78:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5f7a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5f7c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5f7e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5f80:	4620      	mov	r0, r4
   d5f82:	bd38      	pop	{r3, r4, r5, pc}
   d5f84:	000d88ec 	.word	0x000d88ec

000d5f88 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f8c:	b088      	sub	sp, #32
   d5f8e:	4605      	mov	r5, r0
   d5f90:	461e      	mov	r6, r3
   d5f92:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5f94:	2300      	movs	r3, #0
   d5f96:	460f      	mov	r7, r1
   d5f98:	4690      	mov	r8, r2
   d5f9a:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f9c:	9305      	str	r3, [sp, #20]
   d5f9e:	f7fe f87a 	bl	d4096 <_Znwj>
   d5fa2:	f8cd d018 	str.w	sp, [sp, #24]
   d5fa6:	4604      	mov	r4, r0
   d5fa8:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5faa:	b1b0      	cbz	r0, d5fda <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5fac:	f7ff fb98 	bl	d56e0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5fb0:	4639      	mov	r1, r7
   d5fb2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5fb6:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5fba:	f001 f8c3 	bl	d7144 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5fc0:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5fc2:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5fc6:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5fc8:	f104 0014 	add.w	r0, r4, #20
   d5fcc:	f7ff fa5a 	bl	d5484 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5fd0:	990e      	ldr	r1, [sp, #56]	; 0x38
   d5fd2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5fd6:	f7ff fa55 	bl	d5484 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5fda:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5fdc:	2600      	movs	r6, #0
   d5fde:	ab01      	add	r3, sp, #4
   d5fe0:	aa02      	add	r2, sp, #8
   d5fe2:	a803      	add	r0, sp, #12
   d5fe4:	9607      	str	r6, [sp, #28]
   d5fe6:	f7ff ffbb 	bl	d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5fea:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5fec:	9a05      	ldr	r2, [sp, #20]
   d5fee:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ff0:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ff2:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5ff4:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ff6:	f7ff fce1 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5ffa:	a806      	add	r0, sp, #24
   d5ffc:	f7ff ff98 	bl	d5f30 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6000:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6002:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6004:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6006:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6008:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d600a:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d600c:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d600e:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d6010:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6014:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6016:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6018:	f7ff fcd0 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d601c:	a805      	add	r0, sp, #20
   d601e:	f7ff fccd 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d6022:	6829      	ldr	r1, [r5, #0]
   d6024:	b919      	cbnz	r1, d602e <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d6026:	4a03      	ldr	r2, [pc, #12]	; (d6034 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d6028:	200a      	movs	r0, #10
   d602a:	f7fe fff3 	bl	d5014 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d602e:	b008      	add	sp, #32
   d6030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6034:	000d4dc5 	.word	0x000d4dc5

000d6038 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6038:	b510      	push	{r4, lr}
   d603a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	b108      	cbz	r0, d6044 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6040:	f7fe f82b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6044:	4620      	mov	r0, r4
   d6046:	bd10      	pop	{r4, pc}

000d6048 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6048:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d604a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d604c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d604e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6052:	4668      	mov	r0, sp
   d6054:	f7ff fff0 	bl	d6038 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6058:	b003      	add	sp, #12
   d605a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6060:	b538      	push	{r3, r4, r5, lr}
   d6062:	2300      	movs	r3, #0
   d6064:	4604      	mov	r4, r0
   d6066:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6068:	2014      	movs	r0, #20
   d606a:	460d      	mov	r5, r1
   d606c:	f7fe f813 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6070:	b128      	cbz	r0, d607e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6072:	2301      	movs	r3, #1
   d6074:	6043      	str	r3, [r0, #4]
   d6076:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6078:	4b02      	ldr	r3, [pc, #8]	; (d6084 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d607a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d607c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d607e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6080:	4620      	mov	r0, r4
   d6082:	bd38      	pop	{r3, r4, r5, pc}
   d6084:	000d8908 	.word	0x000d8908

000d6088 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6088:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d608a:	2600      	movs	r6, #0
   d608c:	b087      	sub	sp, #28
   d608e:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6090:	6046      	str	r6, [r0, #4]
   d6092:	4604      	mov	r4, r0
   d6094:	2018      	movs	r0, #24
   d6096:	460f      	mov	r7, r1
   d6098:	f7fd fffd 	bl	d4096 <_Znwj>
   d609c:	f8cd d010 	str.w	sp, [sp, #16]
   d60a0:	4605      	mov	r5, r0
   d60a2:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d60a4:	b138      	cbz	r0, d60b6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d60a6:	f7ff f987 	bl	d53b8 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d60aa:	4639      	mov	r1, r7
   d60ac:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d60ae:	82ae      	strh	r6, [r5, #20]
   d60b0:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d60b2:	f7ff f9e7 	bl	d5484 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d60b6:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d60b8:	4629      	mov	r1, r5
   d60ba:	9305      	str	r3, [sp, #20]
   d60bc:	aa02      	add	r2, sp, #8
   d60be:	ab01      	add	r3, sp, #4
   d60c0:	a803      	add	r0, sp, #12
   d60c2:	f7ff ffcd 	bl	d6060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d60c6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d60c8:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d60ca:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d60cc:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d60ce:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d60d0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d60d2:	f7ff fc73 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d60d6:	a804      	add	r0, sp, #16
   d60d8:	f7ff ffae 	bl	d6038 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d60dc:	6823      	ldr	r3, [r4, #0]
   d60de:	b90b      	cbnz	r3, d60e4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d60e0:	f7ff f912 	bl	d5308 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	b007      	add	sp, #28
   d60e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d60ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60f0:	4617      	mov	r7, r2
   d60f2:	b09f      	sub	sp, #124	; 0x7c
   d60f4:	4680      	mov	r8, r0
    WiringBleLock lk;
   d60f6:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d60f8:	460e      	mov	r6, r1
    WiringBleLock lk;
   d60fa:	f7ff f935 	bl	d5368 <_ZN8particle3ble13WiringBleLockC1Ev>
   d60fe:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6100:	7923      	ldrb	r3, [r4, #4]
   d6102:	2b00      	cmp	r3, #0
   d6104:	f000 80f3 	beq.w	d62ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6108:	6833      	ldr	r3, [r6, #0]
   d610a:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d610c:	691b      	ldr	r3, [r3, #16]
   d610e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6112:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6114:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d6118:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d611c:	9b03      	ldr	r3, [sp, #12]
   d611e:	42ab      	cmp	r3, r5
   d6120:	d023      	beq.n	d616a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d6122:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6126:	4650      	mov	r0, sl
   d6128:	f109 0114 	add.w	r1, r9, #20
   d612c:	f7ff f9c3 	bl	d54b6 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6130:	2800      	cmp	r0, #0
   d6132:	f000 80e1 	beq.w	d62f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d6136:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d613a:	4658      	mov	r0, fp
   d613c:	f7ff f9bb 	bl	d54b6 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6140:	2800      	cmp	r0, #0
   d6142:	f000 80d9 	beq.w	d62f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6146:	6823      	ldr	r3, [r4, #0]
   d6148:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d614c:	f8d9 3000 	ldr.w	r3, [r9]
   d6150:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d6154:	4299      	cmp	r1, r3
   d6156:	f040 80cf 	bne.w	d62f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d615a:	2320      	movs	r3, #32
   d615c:	4a6b      	ldr	r2, [pc, #428]	; (d630c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d615e:	9313      	str	r3, [sp, #76]	; 0x4c
   d6160:	2300      	movs	r3, #0
   d6162:	9200      	str	r2, [sp, #0]
   d6164:	9314      	str	r3, [sp, #80]	; 0x50
   d6166:	aa13      	add	r2, sp, #76	; 0x4c
   d6168:	e0bd      	b.n	d62e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d616a:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d616e:	4628      	mov	r0, r5
   d6170:	f7ff f96f 	bl	d5452 <_ZNK8particle7BleUuid7isValidEv>
   d6174:	b918      	cbnz	r0, d617e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6176:	4966      	ldr	r1, [pc, #408]	; (d6310 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6178:	4628      	mov	r0, r5
   d617a:	f7ff f98e 	bl	d549a <_ZN8particle7BleUuidaSEPKh>
   d617e:	6833      	ldr	r3, [r6, #0]
   d6180:	f8d3 9000 	ldr.w	r9, [r3]
   d6184:	685b      	ldr	r3, [r3, #4]
   d6186:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d618a:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d618c:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d618e:	d008      	beq.n	d61a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6190:	f8d9 0000 	ldr.w	r0, [r9]
   d6194:	f7ff f98f 	bl	d54b6 <_ZNK8particle7BleUuideqERKS0_>
   d6198:	2800      	cmp	r0, #0
   d619a:	d137      	bne.n	d620c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d619c:	f109 0908 	add.w	r9, r9, #8
   d61a0:	e7f3      	b.n	d618a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d61a2:	a806      	add	r0, sp, #24
   d61a4:	f7ff ff70 	bl	d6088 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d61a8:	aa13      	add	r2, sp, #76	; 0x4c
   d61aa:	462b      	mov	r3, r5
   d61ac:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d61b0:	4696      	mov	lr, r2
   d61b2:	6818      	ldr	r0, [r3, #0]
   d61b4:	6859      	ldr	r1, [r3, #4]
   d61b6:	4615      	mov	r5, r2
   d61b8:	c503      	stmia	r5!, {r0, r1}
   d61ba:	3308      	adds	r3, #8
   d61bc:	4563      	cmp	r3, ip
   d61be:	462a      	mov	r2, r5
   d61c0:	d1f7      	bne.n	d61b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d61c2:	6818      	ldr	r0, [r3, #0]
   d61c4:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d61c6:	9a06      	ldr	r2, [sp, #24]
   d61c8:	2300      	movs	r3, #0
   d61ca:	3214      	adds	r2, #20
   d61cc:	4671      	mov	r1, lr
   d61ce:	2001      	movs	r0, #1
   d61d0:	f7fe fd7c 	bl	d4ccc <hal_ble_gatt_server_add_service>
   d61d4:	2800      	cmp	r0, #0
   d61d6:	d17e      	bne.n	d62d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d61d8:	6835      	ldr	r5, [r6, #0]
   d61da:	a906      	add	r1, sp, #24
   d61dc:	a80b      	add	r0, sp, #44	; 0x2c
   d61de:	f7ff fbe3 	bl	d59a8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d61e2:	4628      	mov	r0, r5
   d61e4:	a90b      	add	r1, sp, #44	; 0x2c
   d61e6:	f7ff fe0c 	bl	d5e02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d61ea:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d61ec:	a80c      	add	r0, sp, #48	; 0x30
   d61ee:	f7ff fbe5 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61f2:	2d00      	cmp	r5, #0
   d61f4:	d06f      	beq.n	d62d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d61f6:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d61f8:	6853      	ldr	r3, [r2, #4]
   d61fa:	6812      	ldr	r2, [r2, #0]
   d61fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6200:	3b01      	subs	r3, #1
   d6202:	a807      	add	r0, sp, #28
   d6204:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6208:	f7ff fbd8 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            charImpl.context_ = nullptr;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d620c:	f104 0514 	add.w	r5, r4, #20
   d6210:	4628      	mov	r0, r5
   d6212:	f7ff f91e 	bl	d5452 <_ZNK8particle7BleUuid7isValidEv>
   d6216:	b968      	cbnz	r0, d6234 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6218:	4b3e      	ldr	r3, [pc, #248]	; (d6314 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d621a:	493d      	ldr	r1, [pc, #244]	; (d6310 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d621c:	881a      	ldrh	r2, [r3, #0]
   d621e:	3201      	adds	r2, #1
   d6220:	b292      	uxth	r2, r2
   d6222:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6224:	a813      	add	r0, sp, #76	; 0x4c
   d6226:	2301      	movs	r3, #1
   d6228:	f7ff f8ff 	bl	d542a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d622c:	a913      	add	r1, sp, #76	; 0x4c
   d622e:	4628      	mov	r0, r5
   d6230:	f7ff f928 	bl	d5484 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6234:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6238:	4652      	mov	r2, sl
   d623a:	2100      	movs	r1, #0
   d623c:	a813      	add	r0, sp, #76	; 0x4c
   d623e:	f002 fa5e 	bl	d86fe <memset>
    charInit.version = BLE_API_VERSION;
   d6242:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6244:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d6246:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d624a:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d624e:	462b      	mov	r3, r5
   d6250:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d6254:	4615      	mov	r5, r2
   d6256:	6818      	ldr	r0, [r3, #0]
   d6258:	6859      	ldr	r1, [r3, #4]
   d625a:	4696      	mov	lr, r2
   d625c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6260:	3308      	adds	r3, #8
   d6262:	4563      	cmp	r3, ip
   d6264:	4672      	mov	r2, lr
   d6266:	d1f6      	bne.n	d6256 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d6268:	6818      	ldr	r0, [r3, #0]
   d626a:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d626e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6270:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d6274:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6278:	682b      	ldr	r3, [r5, #0]
   d627a:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d627e:	7923      	ldrb	r3, [r4, #4]
   d6280:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d6284:	f8d9 3000 	ldr.w	r3, [r9]
   d6288:	8a9b      	ldrh	r3, [r3, #20]
   d628a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d628e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6290:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6292:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6294:	4b20      	ldr	r3, [pc, #128]	; (d6318 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d6296:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6298:	1da1      	adds	r1, r4, #6
   d629a:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d629c:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d629e:	f7fe fd3d 	bl	d4d1c <hal_ble_gatt_server_add_characteristic>
   d62a2:	bb20      	cbnz	r0, d62ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d62a4:	2301      	movs	r3, #1
   d62a6:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d62a8:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d62aa:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d62ac:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d62ae:	a80b      	add	r0, sp, #44	; 0x2c
   d62b0:	f7ff fb6c 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d62b4:	4620      	mov	r0, r4
   d62b6:	a90b      	add	r1, sp, #44	; 0x2c
   d62b8:	f7ff fe10 	bl	d5edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d62bc:	4604      	mov	r4, r0
   d62be:	a80c      	add	r0, sp, #48	; 0x30
   d62c0:	f7ff fb7c 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62c4:	b99c      	cbnz	r4, d62ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d62c6:	2320      	movs	r3, #32
   d62c8:	930b      	str	r3, [sp, #44]	; 0x2c
   d62ca:	4b14      	ldr	r3, [pc, #80]	; (d631c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d62cc:	9300      	str	r3, [sp, #0]
   d62ce:	940c      	str	r4, [sp, #48]	; 0x30
   d62d0:	4623      	mov	r3, r4
   d62d2:	aa0b      	add	r2, sp, #44	; 0x2c
   d62d4:	e007      	b.n	d62e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d62d6:	4639      	mov	r1, r7
   d62d8:	4640      	mov	r0, r8
   d62da:	f7ff fb57 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d62de:	a807      	add	r0, sp, #28
   d62e0:	f7ff fb6c 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62e4:	e00a      	b.n	d62fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d62e6:	490e      	ldr	r1, [pc, #56]	; (d6320 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d62e8:	2032      	movs	r0, #50	; 0x32
   d62ea:	f7fe fe9b 	bl	d5024 <log_message>
            return characteristic;
   d62ee:	4639      	mov	r1, r7
   d62f0:	4640      	mov	r0, r8
   d62f2:	f7ff fb4b 	bl	d598c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d62f6:	e001      	b.n	d62fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d62f8:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d62fa:	e70f      	b.n	d611c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d62fc:	a805      	add	r0, sp, #20
   d62fe:	f7ff f841 	bl	d5384 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6302:	4640      	mov	r0, r8
   d6304:	b01f      	add	sp, #124	; 0x7c
   d6306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d630a:	bf00      	nop
   d630c:	000d8abd 	.word	0x000d8abd
   d6310:	000d8938 	.word	0x000d8938
   d6314:	2003e3c8 	.word	0x2003e3c8
   d6318:	000d588d 	.word	0x000d588d
   d631c:	000d8a96 	.word	0x000d8a96
   d6320:	000d8948 	.word	0x000d8948

000d6324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6324:	4802      	ldr	r0, [pc, #8]	; (d6330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6326:	2300      	movs	r3, #0
   d6328:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d632a:	f7fe bd2b 	b.w	d4d84 <os_mutex_recursive_create>
   d632e:	bf00      	nop
   d6330:	2003e3cc 	.word	0x2003e3cc

000d6334 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6334:	4770      	bx	lr

000d6336 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6336:	2000      	movs	r0, #0
   d6338:	4770      	bx	lr

000d633a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d633a:	b510      	push	{r4, lr}
   d633c:	2110      	movs	r1, #16
   d633e:	4604      	mov	r4, r0
   d6340:	f001 f9d3 	bl	d76ea <_ZdlPvj>
   d6344:	4620      	mov	r0, r4
   d6346:	bd10      	pop	{r4, pc}

000d6348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6348:	b508      	push	{r3, lr}
      { delete this; }
   d634a:	b108      	cbz	r0, d6350 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d634c:	f7ff fff5 	bl	d633a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6350:	bd08      	pop	{r3, pc}

000d6352 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6352:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6354:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6356:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6358:	b113      	cbz	r3, d6360 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d635a:	2203      	movs	r2, #3
   d635c:	4601      	mov	r1, r0
   d635e:	4798      	blx	r3
    }
   d6360:	4620      	mov	r0, r4
   d6362:	bd10      	pop	{r4, pc}

000d6364 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6364:	2200      	movs	r2, #0
   d6366:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6368:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d636a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d636e:	8082      	strh	r2, [r0, #4]
   d6370:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6374:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6376:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6378:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d637a:	680c      	ldr	r4, [r1, #0]
   d637c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d637e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6380:	bd10      	pop	{r4, pc}

000d6382 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6382:	b510      	push	{r4, lr}
   d6384:	4604      	mov	r4, r0
    free((void*)msg_);
   d6386:	6800      	ldr	r0, [r0, #0]
   d6388:	f7fe ff12 	bl	d51b0 <free>
}
   d638c:	4620      	mov	r0, r4
   d638e:	bd10      	pop	{r4, pc}

000d6390 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6390:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6392:	68c4      	ldr	r4, [r0, #12]
   d6394:	b1f4      	cbz	r4, d63d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6396:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6398:	2b02      	cmp	r3, #2
   d639a:	d103      	bne.n	d63a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d639c:	f104 000c 	add.w	r0, r4, #12
   d63a0:	f7ff ffef 	bl	d6382 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d63a4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d63a6:	b135      	cbz	r5, d63b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63a8:	4628      	mov	r0, r5
   d63aa:	f7ff ffd2 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
   d63ae:	2110      	movs	r1, #16
   d63b0:	4628      	mov	r0, r5
   d63b2:	f001 f99a 	bl	d76ea <_ZdlPvj>
   d63b6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d63b8:	b135      	cbz	r5, d63c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d63ba:	4628      	mov	r0, r5
   d63bc:	f7ff ffc9 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
   d63c0:	2110      	movs	r1, #16
   d63c2:	4628      	mov	r0, r5
   d63c4:	f001 f991 	bl	d76ea <_ZdlPvj>
   d63c8:	4620      	mov	r0, r4
   d63ca:	2114      	movs	r1, #20
   d63cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d63d0:	f001 b98b 	b.w	d76ea <_ZdlPvj>
   d63d4:	bd38      	pop	{r3, r4, r5, pc}

000d63d6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d63d6:	b510      	push	{r4, lr}
   d63d8:	b088      	sub	sp, #32
   d63da:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d63dc:	4668      	mov	r0, sp
   d63de:	f000 fe84 	bl	d70ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d63e2:	4669      	mov	r1, sp
   d63e4:	a804      	add	r0, sp, #16
   d63e6:	f000 fea2 	bl	d712e <_ZN6StringC1ERKS_>
   d63ea:	a804      	add	r0, sp, #16
   d63ec:	47a0      	blx	r4
   d63ee:	4604      	mov	r4, r0
   d63f0:	a804      	add	r0, sp, #16
   d63f2:	f000 fe33 	bl	d705c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d63f6:	4668      	mov	r0, sp
   d63f8:	f000 fe30 	bl	d705c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d63fc:	4620      	mov	r0, r4
   d63fe:	b008      	add	sp, #32
   d6400:	bd10      	pop	{r4, pc}

000d6402 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6402:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6404:	2410      	movs	r4, #16
   d6406:	b085      	sub	sp, #20
   d6408:	4607      	mov	r7, r0
   d640a:	460e      	mov	r6, r1
   d640c:	4615      	mov	r5, r2
   d640e:	2100      	movs	r1, #0
   d6410:	4622      	mov	r2, r4
   d6412:	4668      	mov	r0, sp
   d6414:	f002 f973 	bl	d86fe <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6418:	2200      	movs	r2, #0
   d641a:	4669      	mov	r1, sp
   d641c:	4610      	mov	r0, r2
         size = sizeof(*this);
   d641e:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6422:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6424:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6426:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6428:	f7fe fe4a 	bl	d50c0 <spark_function>
}
   d642c:	b005      	add	sp, #20
   d642e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6430 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6430:	b513      	push	{r0, r1, r4, lr}
   d6432:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6434:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6438:	2300      	movs	r3, #0
   d643a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d643c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d643e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6440:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6442:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6444:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6446:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6448:	f7ff fab8 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d644c:	4620      	mov	r0, r4
   d644e:	b002      	add	sp, #8
   d6450:	bd10      	pop	{r4, pc}

000d6452 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6454:	460c      	mov	r4, r1
   d6456:	ad02      	add	r5, sp, #8
   d6458:	f854 3b04 	ldr.w	r3, [r4], #4
   d645c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6460:	4606      	mov	r6, r0
   d6462:	460f      	mov	r7, r1
   d6464:	a801      	add	r0, sp, #4
   d6466:	4621      	mov	r1, r4
   d6468:	f7ff fa89 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d646c:	4629      	mov	r1, r5
   d646e:	4630      	mov	r0, r6
   d6470:	f7ff ffde 	bl	d6430 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6474:	a801      	add	r0, sp, #4
   d6476:	f7ff faa1 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d647a:	4620      	mov	r0, r4
   d647c:	f7ff fa9e 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6480:	4638      	mov	r0, r7
   d6482:	2108      	movs	r1, #8
   d6484:	f001 f931 	bl	d76ea <_ZdlPvj>
        return p;
    }
   d6488:	4630      	mov	r0, r6
   d648a:	b003      	add	sp, #12
   d648c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d648e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d648e:	b513      	push	{r0, r1, r4, lr}
   d6490:	460b      	mov	r3, r1
   d6492:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6494:	c803      	ldmia	r0, {r0, r1}
   d6496:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d649a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d649e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d64a2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d64a6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d64aa:	b002      	add	sp, #8
   d64ac:	bd10      	pop	{r4, pc}
	...

000d64b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d64b0:	b538      	push	{r3, r4, r5, lr}
   d64b2:	2300      	movs	r3, #0
   d64b4:	4604      	mov	r4, r0
   d64b6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64b8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d64ba:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64bc:	f7fd fdeb 	bl	d4096 <_Znwj>
   d64c0:	b128      	cbz	r0, d64ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64c2:	2301      	movs	r3, #1
   d64c4:	6043      	str	r3, [r0, #4]
   d64c6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d64c8:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d64ca:	6003      	str	r3, [r0, #0]
   d64cc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64ce:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd38      	pop	{r3, r4, r5, pc}
   d64d4:	000d8af0 	.word	0x000d8af0

000d64d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64d8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d64da:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64dc:	b90a      	cbnz	r2, d64e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d64de:	f001 f906 	bl	d76ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64e2:	68c3      	ldr	r3, [r0, #12]
    }
   d64e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64e8:	4718      	bx	r3

000d64ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64ea:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d64ec:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d64ee:	f100 0110 	add.w	r1, r0, #16
   d64f2:	f7ff fff1 	bl	d64d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d64f6:	bd08      	pop	{r3, pc}

000d64f8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64f8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d64fa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64fc:	b90a      	cbnz	r2, d6502 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d64fe:	f001 f8f6 	bl	d76ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6502:	68c3      	ldr	r3, [r0, #12]
    }
   d6504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6508:	4718      	bx	r3

000d650a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d650a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d650c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d650e:	f100 0110 	add.w	r1, r0, #16
   d6512:	f7ff fff1 	bl	d64f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d6516:	bd08      	pop	{r3, pc}

000d6518 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6518:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d651a:	2300      	movs	r3, #0
   d651c:	6083      	str	r3, [r0, #8]
   d651e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6520:	4604      	mov	r4, r0
   d6522:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6524:	b12b      	cbz	r3, d6532 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6526:	2202      	movs	r2, #2
   d6528:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d652a:	68eb      	ldr	r3, [r5, #12]
   d652c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d652e:	68ab      	ldr	r3, [r5, #8]
   d6530:	60a3      	str	r3, [r4, #8]
	}
    }
   d6532:	4620      	mov	r0, r4
   d6534:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6538:	b5f0      	push	{r4, r5, r6, r7, lr}
   d653a:	b089      	sub	sp, #36	; 0x24
   d653c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d653e:	4668      	mov	r0, sp
   d6540:	f7ff ff10 	bl	d6364 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6544:	2300      	movs	r3, #0
   d6546:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d654a:	f04f 0202 	mov.w	r2, #2
   d654e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6552:	2b00      	cmp	r3, #0
   d6554:	d103      	bne.n	d655e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6556:	e8c4 2f41 	strexb	r1, r2, [r4]
   d655a:	2900      	cmp	r1, #0
   d655c:	d1f7      	bne.n	d654e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d655e:	d002      	beq.n	d6566 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6560:	f88d 3008 	strb.w	r3, [sp, #8]
   d6564:	e063      	b.n	d662e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6566:	f114 050c 	adds.w	r5, r4, #12
   d656a:	d003      	beq.n	d6574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d656c:	4669      	mov	r1, sp
   d656e:	4628      	mov	r0, r5
   d6570:	f7ff fef8 	bl	d6364 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6574:	f3bf 8f5f 	dmb	sy
   d6578:	2301      	movs	r3, #1
   d657a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d657c:	2000      	movs	r0, #0
   d657e:	f104 0308 	add.w	r3, r4, #8
   d6582:	f3bf 8f5f 	dmb	sy
   d6586:	e853 6f00 	ldrex	r6, [r3]
   d658a:	e843 0200 	strex	r2, r0, [r3]
   d658e:	2a00      	cmp	r2, #0
   d6590:	d1f9      	bne.n	d6586 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6592:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6596:	2e00      	cmp	r6, #0
   d6598:	d049      	beq.n	d662e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d659a:	f7fe fd5b 	bl	d5054 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d659e:	b120      	cbz	r0, d65aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65a0:	4629      	mov	r1, r5
   d65a2:	4630      	mov	r0, r6
   d65a4:	f7ff ff98 	bl	d64d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d65a8:	e03a      	b.n	d6620 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65aa:	4631      	mov	r1, r6
   d65ac:	a802      	add	r0, sp, #8
   d65ae:	f7ff ffb3 	bl	d6518 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d65b2:	68e0      	ldr	r0, [r4, #12]
   d65b4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d65b8:	b108      	cbz	r0, d65be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d65ba:	f002 f8df 	bl	d877c <strdup>
   d65be:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65c0:	2010      	movs	r0, #16
   d65c2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d65c6:	f7fd fd66 	bl	d4096 <_Znwj>
   d65ca:	4605      	mov	r5, r0
   d65cc:	b1e8      	cbz	r0, d660a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65ce:	2700      	movs	r7, #0
   d65d0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65d2:	2018      	movs	r0, #24
   d65d4:	f7fd fd5f 	bl	d4096 <_Znwj>
   d65d8:	4604      	mov	r4, r0
   d65da:	b188      	cbz	r0, d6600 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d65dc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65de:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d65e0:	a802      	add	r0, sp, #8
   d65e2:	f7ff ff54 	bl	d648e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65e6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d65e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65ea:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ec:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d65ee:	9204      	str	r2, [sp, #16]
   d65f0:	a906      	add	r1, sp, #24
   d65f2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d65f4:	60e3      	str	r3, [r4, #12]
   d65f6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d65fa:	9205      	str	r2, [sp, #20]
   d65fc:	f7ff feb2 	bl	d6364 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6600:	4b0d      	ldr	r3, [pc, #52]	; (d6638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6602:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6604:	4b0d      	ldr	r3, [pc, #52]	; (d663c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6606:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6608:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d660a:	a806      	add	r0, sp, #24
   d660c:	f7ff feb9 	bl	d6382 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6610:	a802      	add	r0, sp, #8
   d6612:	f7ff fe9e 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6616:	2200      	movs	r2, #0
   d6618:	4629      	mov	r1, r5
   d661a:	4809      	ldr	r0, [pc, #36]	; (d6640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d661c:	f7fe fd22 	bl	d5064 <application_thread_invoke>
   d6620:	4630      	mov	r0, r6
   d6622:	f7ff fe96 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6626:	2110      	movs	r1, #16
   d6628:	4630      	mov	r0, r6
   d662a:	f001 f85e 	bl	d76ea <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d662e:	4668      	mov	r0, sp
   d6630:	f7ff fea7 	bl	d6382 <_ZN8particle5ErrorD1Ev>
    }
   d6634:	b009      	add	sp, #36	; 0x24
   d6636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6638:	000d64eb 	.word	0x000d64eb
   d663c:	000d6761 	.word	0x000d6761
   d6640:	000d5299 	.word	0x000d5299

000d6644 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6648:	b08b      	sub	sp, #44	; 0x2c
   d664a:	4606      	mov	r6, r0
   d664c:	460f      	mov	r7, r1
   d664e:	4690      	mov	r8, r2
   d6650:	4699      	mov	r9, r3
   d6652:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6656:	f7fe fd3b 	bl	d50d0 <spark_cloud_flag_connected>
   d665a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d665c:	4683      	mov	fp, r0
   d665e:	bb30      	cbnz	r0, d66ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6660:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6664:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6666:	a905      	add	r1, sp, #20
   d6668:	4628      	mov	r0, r5
   d666a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d666e:	f7ff fe79 	bl	d6364 <_ZN8particle5ErrorC1EOS0_>
   d6672:	2014      	movs	r0, #20
   d6674:	f7fd fd0f 	bl	d4096 <_Znwj>
   d6678:	4604      	mov	r4, r0
   d667a:	b158      	cbz	r0, d6694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d667c:	2302      	movs	r3, #2
   d667e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6680:	2301      	movs	r3, #1
   d6682:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6684:	f8c0 b004 	str.w	fp, [r0, #4]
   d6688:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d668c:	4629      	mov	r1, r5
   d668e:	300c      	adds	r0, #12
   d6690:	f7ff fe68 	bl	d6364 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6694:	4630      	mov	r0, r6
   d6696:	4621      	mov	r1, r4
   d6698:	f840 4b04 	str.w	r4, [r0], #4
   d669c:	f7ff ff08 	bl	d64b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66a0:	4628      	mov	r0, r5
   d66a2:	f7ff fe6e 	bl	d6382 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d66a6:	a805      	add	r0, sp, #20
   d66a8:	f7ff fe6b 	bl	d6382 <_ZN8particle5ErrorD1Ev>
   d66ac:	e052      	b.n	d6754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66ae:	2400      	movs	r4, #0
   d66b0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66b2:	2014      	movs	r0, #20
   d66b4:	606c      	str	r4, [r5, #4]
   d66b6:	60ac      	str	r4, [r5, #8]
   d66b8:	9307      	str	r3, [sp, #28]
   d66ba:	f7fd fcec 	bl	d4096 <_Znwj>
   d66be:	4601      	mov	r1, r0
   d66c0:	b118      	cbz	r0, d66ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d66c2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66c4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66c6:	6044      	str	r4, [r0, #4]
   d66c8:	6084      	str	r4, [r0, #8]
   d66ca:	a804      	add	r0, sp, #16
   d66cc:	9103      	str	r1, [sp, #12]
   d66ce:	f7ff feef 	bl	d64b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d66d2:	4b22      	ldr	r3, [pc, #136]	; (d675c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d66d4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d66d6:	2008      	movs	r0, #8
   d66d8:	f7fd fcdd 	bl	d4096 <_Znwj>
   d66dc:	4604      	mov	r4, r0
   d66de:	b128      	cbz	r0, d66ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66e0:	9b03      	ldr	r3, [sp, #12]
   d66e2:	f840 3b04 	str.w	r3, [r0], #4
   d66e6:	a904      	add	r1, sp, #16
   d66e8:	f7ff f949 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66ec:	9500      	str	r5, [sp, #0]
   d66ee:	fa5f f38a 	uxtb.w	r3, sl
   d66f2:	464a      	mov	r2, r9
   d66f4:	4641      	mov	r1, r8
   d66f6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d66f8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66fa:	f7fe fcf1 	bl	d50e0 <spark_send_event>
   d66fe:	b920      	cbnz	r0, d670a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6700:	9b03      	ldr	r3, [sp, #12]
   d6702:	785b      	ldrb	r3, [r3, #1]
   d6704:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6708:	b183      	cbz	r3, d672c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d670a:	9b03      	ldr	r3, [sp, #12]
   d670c:	9305      	str	r3, [sp, #20]
   d670e:	a904      	add	r1, sp, #16
   d6710:	a806      	add	r0, sp, #24
   d6712:	f7ff f934 	bl	d597e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6716:	a905      	add	r1, sp, #20
   d6718:	4630      	mov	r0, r6
   d671a:	f7ff fe89 	bl	d6430 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d671e:	a806      	add	r0, sp, #24
   d6720:	f7ff f94c 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6724:	a804      	add	r0, sp, #16
   d6726:	f7ff f949 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d672a:	e013      	b.n	d6754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d672c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6730:	a905      	add	r1, sp, #20
   d6732:	a803      	add	r0, sp, #12
   d6734:	9205      	str	r2, [sp, #20]
   d6736:	f8ad 3018 	strh.w	r3, [sp, #24]
   d673a:	f7ff fefd 	bl	d6538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d673e:	a805      	add	r0, sp, #20
   d6740:	f7ff fe1f 	bl	d6382 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6744:	a805      	add	r0, sp, #20
   d6746:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6748:	f7ff fe83 	bl	d6452 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d674c:	a806      	add	r0, sp, #24
   d674e:	f7ff f935 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6752:	e7da      	b.n	d670a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6754:	4630      	mov	r0, r6
   d6756:	b00b      	add	sp, #44	; 0x2c
   d6758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d675c:	000d68d1 	.word	0x000d68d1

000d6760 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6760:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6764:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6766:	d006      	beq.n	d6776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6768:	2a03      	cmp	r2, #3
   d676a:	d017      	beq.n	d679c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d676c:	2a01      	cmp	r2, #1
   d676e:	d122      	bne.n	d67b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6770:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6772:	6003      	str	r3, [r0, #0]
	      break;
   d6774:	e01f      	b.n	d67b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6776:	2018      	movs	r0, #24
   d6778:	680e      	ldr	r6, [r1, #0]
   d677a:	f7fd fc8c 	bl	d4096 <_Znwj>
   d677e:	4605      	mov	r5, r0
   d6780:	b150      	cbz	r0, d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6782:	4631      	mov	r1, r6
   d6784:	f7ff fec8 	bl	d6518 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6788:	6930      	ldr	r0, [r6, #16]
   d678a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d678e:	b108      	cbz	r0, d6794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6790:	f001 fff4 	bl	d877c <strdup>
   d6794:	6128      	str	r0, [r5, #16]
   d6796:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6798:	6025      	str	r5, [r4, #0]
   d679a:	e00c      	b.n	d67b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d679c:	6804      	ldr	r4, [r0, #0]
   d679e:	b154      	cbz	r4, d67b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d67a0:	f104 0010 	add.w	r0, r4, #16
   d67a4:	f7ff fded 	bl	d6382 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67a8:	4620      	mov	r0, r4
   d67aa:	f7ff fdd2 	bl	d6352 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67ae:	2118      	movs	r1, #24
   d67b0:	4620      	mov	r0, r4
   d67b2:	f000 ff9a 	bl	d76ea <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d67b6:	2000      	movs	r0, #0
   d67b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67ba <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67ba:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67bc:	2300      	movs	r3, #0
   d67be:	6083      	str	r3, [r0, #8]
   d67c0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67c2:	4604      	mov	r4, r0
   d67c4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d67c6:	b12b      	cbz	r3, d67d4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67c8:	2202      	movs	r2, #2
   d67ca:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67cc:	68eb      	ldr	r3, [r5, #12]
   d67ce:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67d0:	68ab      	ldr	r3, [r5, #8]
   d67d2:	60a3      	str	r3, [r4, #8]
	}
    }
   d67d4:	4620      	mov	r0, r4
   d67d6:	bd38      	pop	{r3, r4, r5, pc}

000d67d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d67d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67da:	b570      	push	{r4, r5, r6, lr}
   d67dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d67de:	d006      	beq.n	d67ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d67e0:	2a03      	cmp	r2, #3
   d67e2:	d011      	beq.n	d6808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d67e4:	2a01      	cmp	r2, #1
   d67e6:	d118      	bne.n	d681a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67ea:	6003      	str	r3, [r0, #0]
	      break;
   d67ec:	e015      	b.n	d681a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67ee:	2014      	movs	r0, #20
   d67f0:	680e      	ldr	r6, [r1, #0]
   d67f2:	f7fd fc50 	bl	d4096 <_Znwj>
   d67f6:	4605      	mov	r5, r0
   d67f8:	b120      	cbz	r0, d6804 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67fa:	4631      	mov	r1, r6
   d67fc:	f7ff ffdd 	bl	d67ba <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6800:	7c33      	ldrb	r3, [r6, #16]
   d6802:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6804:	6025      	str	r5, [r4, #0]
   d6806:	e008      	b.n	d681a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6808:	6804      	ldr	r4, [r0, #0]
   d680a:	b134      	cbz	r4, d681a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d680c:	4620      	mov	r0, r4
   d680e:	f7ff fda0 	bl	d6352 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6812:	2114      	movs	r1, #20
   d6814:	4620      	mov	r0, r4
   d6816:	f000 ff68 	bl	d76ea <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d681a:	2000      	movs	r0, #0
   d681c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6820 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6820:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6822:	2300      	movs	r3, #0
   d6824:	b087      	sub	sp, #28
   d6826:	460c      	mov	r4, r1
   d6828:	f3bf 8f5f 	dmb	sy
   d682c:	e850 6f00 	ldrex	r6, [r0]
   d6830:	e840 3200 	strex	r2, r3, [r0]
   d6834:	2a00      	cmp	r2, #0
   d6836:	d1f9      	bne.n	d682c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6838:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d683c:	2e00      	cmp	r6, #0
   d683e:	d03f      	beq.n	d68c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6840:	4618      	mov	r0, r3
   d6842:	f7fe fc07 	bl	d5054 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6846:	4607      	mov	r7, r0
   d6848:	b120      	cbz	r0, d6854 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d684a:	4621      	mov	r1, r4
   d684c:	4630      	mov	r0, r6
   d684e:	f7ff fe53 	bl	d64f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d6852:	e02e      	b.n	d68b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6854:	4631      	mov	r1, r6
   d6856:	a801      	add	r0, sp, #4
   d6858:	f7ff ffaf 	bl	d67ba <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d685c:	7823      	ldrb	r3, [r4, #0]
   d685e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6862:	2010      	movs	r0, #16
   d6864:	f7fd fc17 	bl	d4096 <_Znwj>
   d6868:	4605      	mov	r5, r0
   d686a:	b1d0      	cbz	r0, d68a2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d686c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d686e:	2014      	movs	r0, #20
   d6870:	f7fd fc11 	bl	d4096 <_Znwj>
   d6874:	4604      	mov	r4, r0
   d6876:	b178      	cbz	r0, d6898 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6878:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d687a:	4601      	mov	r1, r0
   d687c:	a801      	add	r0, sp, #4
   d687e:	f7ff fe06 	bl	d648e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6882:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6884:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6886:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6888:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d688a:	9203      	str	r2, [sp, #12]
   d688c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d688e:	60e3      	str	r3, [r4, #12]
   d6890:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6894:	9204      	str	r2, [sp, #16]
   d6896:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6898:	4b0a      	ldr	r3, [pc, #40]	; (d68c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d689a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d689c:	4b0a      	ldr	r3, [pc, #40]	; (d68c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d689e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d68a0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68a2:	a801      	add	r0, sp, #4
   d68a4:	f7ff fd55 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d68a8:	2200      	movs	r2, #0
   d68aa:	4629      	mov	r1, r5
   d68ac:	4807      	ldr	r0, [pc, #28]	; (d68cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d68ae:	f7fe fbd9 	bl	d5064 <application_thread_invoke>
   d68b2:	4630      	mov	r0, r6
   d68b4:	f7ff fd4d 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d68b8:	2110      	movs	r1, #16
   d68ba:	4630      	mov	r0, r6
   d68bc:	f000 ff15 	bl	d76ea <_ZdlPvj>
        }
    }
   d68c0:	b007      	add	sp, #28
   d68c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68c4:	000d650b 	.word	0x000d650b
   d68c8:	000d67d9 	.word	0x000d67d9
   d68cc:	000d5299 	.word	0x000d5299

000d68d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d68d0:	b530      	push	{r4, r5, lr}
   d68d2:	b085      	sub	sp, #20
   d68d4:	4604      	mov	r4, r0
   d68d6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d68d8:	4668      	mov	r0, sp
   d68da:	4611      	mov	r1, r2
   d68dc:	f7ff fdb9 	bl	d6452 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d68e0:	b17c      	cbz	r4, d6902 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d68e2:	b224      	sxth	r4, r4
   d68e4:	4628      	mov	r0, r5
   d68e6:	b10d      	cbz	r5, d68ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d68e8:	f001 ff48 	bl	d877c <strdup>
   d68ec:	9002      	str	r0, [sp, #8]
   d68ee:	a902      	add	r1, sp, #8
   d68f0:	4668      	mov	r0, sp
   d68f2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d68f6:	f7ff fe1f 	bl	d6538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d68fa:	a802      	add	r0, sp, #8
   d68fc:	f7ff fd41 	bl	d6382 <_ZN8particle5ErrorD1Ev>
   d6900:	e01d      	b.n	d693e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6902:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6904:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6908:	f04f 0201 	mov.w	r2, #1
   d690c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6910:	42a3      	cmp	r3, r4
   d6912:	d103      	bne.n	d691c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6914:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6918:	2900      	cmp	r1, #0
   d691a:	d1f7      	bne.n	d690c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d691c:	d002      	beq.n	d6924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d691e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6922:	e00c      	b.n	d693e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6924:	f110 010c 	adds.w	r1, r0, #12
   d6928:	f04f 0301 	mov.w	r3, #1
   d692c:	bf18      	it	ne
   d692e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6930:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6934:	3004      	adds	r0, #4
   d6936:	f800 3c03 	strb.w	r3, [r0, #-3]
   d693a:	f7ff ff71 	bl	d6820 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d693e:	a801      	add	r0, sp, #4
   d6940:	f7ff f83c 	bl	d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6944:	b005      	add	sp, #20
   d6946:	bd30      	pop	{r4, r5, pc}

000d6948 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6948:	2200      	movs	r2, #0
   d694a:	4611      	mov	r1, r2
   d694c:	6840      	ldr	r0, [r0, #4]
   d694e:	f7fe bc0f 	b.w	d5170 <network_listening>

000d6952 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6952:	2200      	movs	r2, #0
   d6954:	4611      	mov	r1, r2
   d6956:	6840      	ldr	r0, [r0, #4]
   d6958:	f7fe bc1a 	b.w	d5190 <network_get_listen_timeout>

000d695c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d695c:	2200      	movs	r2, #0
   d695e:	6840      	ldr	r0, [r0, #4]
   d6960:	f7fe bc0e 	b.w	d5180 <network_set_listen_timeout>

000d6964 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6964:	2200      	movs	r2, #0
   d6966:	f081 0101 	eor.w	r1, r1, #1
   d696a:	6840      	ldr	r0, [r0, #4]
   d696c:	f7fe bbf8 	b.w	d5160 <network_listen>

000d6970 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6970:	2300      	movs	r3, #0
   d6972:	461a      	mov	r2, r3
   d6974:	4619      	mov	r1, r3
   d6976:	6840      	ldr	r0, [r0, #4]
   d6978:	f7fe bbea 	b.w	d5150 <network_off>

000d697c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d697c:	2300      	movs	r3, #0
   d697e:	461a      	mov	r2, r3
   d6980:	4619      	mov	r1, r3
   d6982:	6840      	ldr	r0, [r0, #4]
   d6984:	f7fe bbdc 	b.w	d5140 <network_on>

000d6988 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6988:	2200      	movs	r2, #0
   d698a:	4611      	mov	r1, r2
   d698c:	6840      	ldr	r0, [r0, #4]
   d698e:	f7fe bbcf 	b.w	d5130 <network_ready>

000d6992 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6992:	2200      	movs	r2, #0
   d6994:	4611      	mov	r1, r2
   d6996:	6840      	ldr	r0, [r0, #4]
   d6998:	f7fe bbba 	b.w	d5110 <network_connecting>

000d699c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d699c:	2200      	movs	r2, #0
   d699e:	2102      	movs	r1, #2
   d69a0:	6840      	ldr	r0, [r0, #4]
   d69a2:	f7fe bbbd 	b.w	d5120 <network_disconnect>

000d69a6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d69a6:	2300      	movs	r3, #0
   d69a8:	461a      	mov	r2, r3
   d69aa:	6840      	ldr	r0, [r0, #4]
   d69ac:	f7fe bba8 	b.w	d5100 <network_connect>

000d69b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d69b0:	4b02      	ldr	r3, [pc, #8]	; (d69bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d69b2:	2203      	movs	r2, #3
   d69b4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d69b6:	4a02      	ldr	r2, [pc, #8]	; (d69c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d69b8:	601a      	str	r2, [r3, #0]
   d69ba:	4770      	bx	lr
   d69bc:	2003e3d0 	.word	0x2003e3d0
   d69c0:	000d8b0c 	.word	0x000d8b0c

000d69c4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d69c4:	4770      	bx	lr

000d69c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d69c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69c8:	4606      	mov	r6, r0
   d69ca:	4615      	mov	r5, r2
   d69cc:	460c      	mov	r4, r1
   d69ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d69d0:	42bc      	cmp	r4, r7
   d69d2:	d006      	beq.n	d69e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d69d4:	6833      	ldr	r3, [r6, #0]
   d69d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d69da:	689b      	ldr	r3, [r3, #8]
   d69dc:	4630      	mov	r0, r6
   d69de:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d69e0:	e7f6      	b.n	d69d0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d69e2:	4628      	mov	r0, r5
   d69e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69e6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d69e6:	2200      	movs	r2, #0
   d69e8:	7c00      	ldrb	r0, [r0, #16]
   d69ea:	f7fe ba3b 	b.w	d4e64 <HAL_I2C_Write_Data>

000d69ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d69ee:	2100      	movs	r1, #0
   d69f0:	7c00      	ldrb	r0, [r0, #16]
   d69f2:	f7fe ba3f 	b.w	d4e74 <HAL_I2C_Available_Data>

000d69f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d69f6:	2100      	movs	r1, #0
   d69f8:	7c00      	ldrb	r0, [r0, #16]
   d69fa:	f7fe ba43 	b.w	d4e84 <HAL_I2C_Read_Data>

000d69fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d69fe:	2100      	movs	r1, #0
   d6a00:	7c00      	ldrb	r0, [r0, #16]
   d6a02:	f7fe ba47 	b.w	d4e94 <HAL_I2C_Peek_Data>

000d6a06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6a06:	2100      	movs	r1, #0
   d6a08:	7c00      	ldrb	r0, [r0, #16]
   d6a0a:	f7fe ba4b 	b.w	d4ea4 <HAL_I2C_Flush_Data>

000d6a0e <_ZN7TwoWireD0Ev>:
   d6a0e:	b510      	push	{r4, lr}
   d6a10:	2114      	movs	r1, #20
   d6a12:	4604      	mov	r4, r0
   d6a14:	f000 fe69 	bl	d76ea <_ZdlPvj>
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bd10      	pop	{r4, pc}

000d6a1c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6a1c:	b510      	push	{r4, lr}
   d6a1e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a24:	4608      	mov	r0, r1
   d6a26:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a28:	2100      	movs	r1, #0
   d6a2a:	4b04      	ldr	r3, [pc, #16]	; (d6a3c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6a2c:	7420      	strb	r0, [r4, #16]
   d6a2e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6a30:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6a32:	f7fe fa47 	bl	d4ec4 <HAL_I2C_Init>

}
   d6a36:	4620      	mov	r0, r4
   d6a38:	bd10      	pop	{r4, pc}
   d6a3a:	bf00      	nop
   d6a3c:	000d8b40 	.word	0x000d8b40

000d6a40 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6a40:	2100      	movs	r1, #0
   d6a42:	7c00      	ldrb	r0, [r0, #16]
   d6a44:	f7fe ba36 	b.w	d4eb4 <HAL_I2C_Is_Enabled>

000d6a48 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6a48:	f7fe b9fc 	b.w	d4e44 <HAL_Interrupts_Disable_All>

000d6a4c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6a4c:	f7fe b9f2 	b.w	d4e34 <HAL_Interrupts_Enable_All>

000d6a50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6a50:	4770      	bx	lr

000d6a52 <_ZN9IPAddressD0Ev>:
   d6a52:	b510      	push	{r4, lr}
   d6a54:	2118      	movs	r1, #24
   d6a56:	4604      	mov	r4, r0
   d6a58:	f000 fe47 	bl	d76ea <_ZdlPvj>
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a62:	7d03      	ldrb	r3, [r0, #20]
   d6a64:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a66:	b08d      	sub	sp, #52	; 0x34
   d6a68:	460e      	mov	r6, r1
   d6a6a:	f100 0704 	add.w	r7, r0, #4
   d6a6e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a72:	d002      	beq.n	d6a7a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6a74:	f100 0508 	add.w	r5, r0, #8
   d6a78:	e018      	b.n	d6aac <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a7a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a7c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a7e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a82:	232f      	movs	r3, #47	; 0x2f
   d6a84:	462a      	mov	r2, r5
   d6a86:	200a      	movs	r0, #10
   d6a88:	f7fe fa24 	bl	d4ed4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6a8c:	4628      	mov	r0, r5
   d6a8e:	f001 fe90 	bl	d87b2 <strlen>
   d6a92:	6833      	ldr	r3, [r6, #0]
   d6a94:	4602      	mov	r2, r0
   d6a96:	68db      	ldr	r3, [r3, #12]
   d6a98:	4629      	mov	r1, r5
   d6a9a:	4630      	mov	r0, r6
   d6a9c:	4798      	blx	r3
   d6a9e:	e00f      	b.n	d6ac0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6aa0:	b124      	cbz	r4, d6aac <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6aa2:	212e      	movs	r1, #46	; 0x2e
   d6aa4:	4630      	mov	r0, r6
   d6aa6:	f000 f9c9 	bl	d6e3c <_ZN5Print5printEc>
   d6aaa:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6aac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ab0:	220a      	movs	r2, #10
   d6ab2:	4630      	mov	r0, r6
   d6ab4:	f000 f9fe 	bl	d6eb4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ab8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6aba:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6abc:	d1f0      	bne.n	d6aa0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6abe:	4620      	mov	r0, r4
    }
    return n;
}
   d6ac0:	b00d      	add	sp, #52	; 0x34
   d6ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ac4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6ac4:	b510      	push	{r4, lr}
   d6ac6:	4b05      	ldr	r3, [pc, #20]	; (d6adc <_ZN9IPAddressC1Ev+0x18>)
   d6ac8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6aca:	2211      	movs	r2, #17
   d6acc:	f840 3b04 	str.w	r3, [r0], #4
   d6ad0:	2100      	movs	r1, #0
   d6ad2:	f001 fe14 	bl	d86fe <memset>
{
    clear();
}
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	bd10      	pop	{r4, pc}
   d6ada:	bf00      	nop
   d6adc:	000d8b68 	.word	0x000d8b68

000d6ae0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6ae0:	4603      	mov	r3, r0
   d6ae2:	4a07      	ldr	r2, [pc, #28]	; (d6b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6ae4:	b510      	push	{r4, lr}
   d6ae6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6aea:	f101 0210 	add.w	r2, r1, #16
   d6aee:	f851 4b04 	ldr.w	r4, [r1], #4
   d6af2:	f843 4b04 	str.w	r4, [r3], #4
   d6af6:	4291      	cmp	r1, r2
   d6af8:	d1f9      	bne.n	d6aee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6afa:	780a      	ldrb	r2, [r1, #0]
   d6afc:	701a      	strb	r2, [r3, #0]
}
   d6afe:	bd10      	pop	{r4, pc}
   d6b00:	000d8b68 	.word	0x000d8b68

000d6b04 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6b04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6b16:	2304      	movs	r3, #4
   d6b18:	6041      	str	r1, [r0, #4]
   d6b1a:	7503      	strb	r3, [r0, #20]
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6b20:	780d      	ldrb	r5, [r1, #0]
   d6b22:	788b      	ldrb	r3, [r1, #2]
   d6b24:	784a      	ldrb	r2, [r1, #1]
   d6b26:	78c9      	ldrb	r1, [r1, #3]
   d6b28:	9100      	str	r1, [sp, #0]
   d6b2a:	4629      	mov	r1, r5
   d6b2c:	f7ff ffea 	bl	d6b04 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6b30:	b003      	add	sp, #12
   d6b32:	bd30      	pop	{r4, r5, pc}

000d6b34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6b34:	4b01      	ldr	r3, [pc, #4]	; (d6b3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6b36:	4a02      	ldr	r2, [pc, #8]	; (d6b40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6b38:	601a      	str	r2, [r3, #0]
   d6b3a:	4770      	bx	lr
   d6b3c:	2003e3d8 	.word	0x2003e3d8
   d6b40:	000d8c2a 	.word	0x000d8c2a

000d6b44 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b44:	2200      	movs	r2, #0
   d6b46:	4611      	mov	r1, r2
   d6b48:	6840      	ldr	r0, [r0, #4]
   d6b4a:	f7fe bb11 	b.w	d5170 <network_listening>

000d6b4e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b4e:	2200      	movs	r2, #0
   d6b50:	4611      	mov	r1, r2
   d6b52:	6840      	ldr	r0, [r0, #4]
   d6b54:	f7fe bb1c 	b.w	d5190 <network_get_listen_timeout>

000d6b58 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b58:	2200      	movs	r2, #0
   d6b5a:	6840      	ldr	r0, [r0, #4]
   d6b5c:	f7fe bb10 	b.w	d5180 <network_set_listen_timeout>

000d6b60 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b60:	2200      	movs	r2, #0
   d6b62:	f081 0101 	eor.w	r1, r1, #1
   d6b66:	6840      	ldr	r0, [r0, #4]
   d6b68:	f7fe bafa 	b.w	d5160 <network_listen>

000d6b6c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b6c:	2300      	movs	r3, #0
   d6b6e:	461a      	mov	r2, r3
   d6b70:	2101      	movs	r1, #1
   d6b72:	6840      	ldr	r0, [r0, #4]
   d6b74:	f7fe baec 	b.w	d5150 <network_off>

000d6b78 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b78:	2300      	movs	r3, #0
   d6b7a:	461a      	mov	r2, r3
   d6b7c:	4619      	mov	r1, r3
   d6b7e:	6840      	ldr	r0, [r0, #4]
   d6b80:	f7fe bade 	b.w	d5140 <network_on>

000d6b84 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b84:	2200      	movs	r2, #0
   d6b86:	4611      	mov	r1, r2
   d6b88:	6840      	ldr	r0, [r0, #4]
   d6b8a:	f7fe bad1 	b.w	d5130 <network_ready>

000d6b8e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b8e:	2200      	movs	r2, #0
   d6b90:	4611      	mov	r1, r2
   d6b92:	6840      	ldr	r0, [r0, #4]
   d6b94:	f7fe babc 	b.w	d5110 <network_connecting>

000d6b98 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b98:	2200      	movs	r2, #0
   d6b9a:	2102      	movs	r1, #2
   d6b9c:	6840      	ldr	r0, [r0, #4]
   d6b9e:	f7fe babf 	b.w	d5120 <network_disconnect>

000d6ba2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ba2:	2300      	movs	r3, #0
   d6ba4:	461a      	mov	r2, r3
   d6ba6:	6840      	ldr	r0, [r0, #4]
   d6ba8:	f7fe baaa 	b.w	d5100 <network_connect>

000d6bac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6bac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bae:	4605      	mov	r5, r0
   d6bb0:	b188      	cbz	r0, d6bd6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bb2:	6804      	ldr	r4, [r0, #0]
   d6bb4:	b14c      	cbz	r4, d6bca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6bb6:	68a3      	ldr	r3, [r4, #8]
   d6bb8:	b11b      	cbz	r3, d6bc2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6bba:	2203      	movs	r2, #3
   d6bbc:	4621      	mov	r1, r4
   d6bbe:	4620      	mov	r0, r4
   d6bc0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bc2:	2110      	movs	r1, #16
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	f000 fd90 	bl	d76ea <_ZdlPvj>
   d6bca:	4628      	mov	r0, r5
   d6bcc:	2114      	movs	r1, #20
      }
   d6bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bd2:	f000 bd8a 	b.w	d76ea <_ZdlPvj>
   d6bd6:	bd38      	pop	{r3, r4, r5, pc}

000d6bd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6bd8:	b110      	cbz	r0, d6be0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6bda:	6803      	ldr	r3, [r0, #0]
   d6bdc:	685b      	ldr	r3, [r3, #4]
   d6bde:	4718      	bx	r3
   d6be0:	4770      	bx	lr

000d6be2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6be2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6be4:	6803      	ldr	r3, [r0, #0]
   d6be6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6be8:	b1bb      	cbz	r3, d6c1a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6bea:	6858      	ldr	r0, [r3, #4]
   d6bec:	f7fe f8aa 	bl	d4d44 <os_thread_is_current>
   d6bf0:	b978      	cbnz	r0, d6c12 <_ZN6ThreadD1Ev+0x30>
   d6bf2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6bf4:	7c5a      	ldrb	r2, [r3, #17]
   d6bf6:	b912      	cbnz	r2, d6bfe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6bf8:	6858      	ldr	r0, [r3, #4]
   d6bfa:	f7fe f8ab 	bl	d4d54 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6bfe:	6823      	ldr	r3, [r4, #0]
   d6c00:	6858      	ldr	r0, [r3, #4]
   d6c02:	f7fe f8af 	bl	d4d64 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c06:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c08:	2300      	movs	r3, #0
   d6c0a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6c0c:	b128      	cbz	r0, d6c1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6c0e:	f7ff ffcd 	bl	d6bac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c12:	6820      	ldr	r0, [r4, #0]
   d6c14:	b108      	cbz	r0, d6c1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6c16:	f7ff ffc9 	bl	d6bac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6c1a:	4620      	mov	r0, r4
   d6c1c:	bd10      	pop	{r4, pc}
	...

000d6c20 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6c20:	b538      	push	{r3, r4, r5, lr}
   d6c22:	4b0c      	ldr	r3, [pc, #48]	; (d6c54 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6c24:	6003      	str	r3, [r0, #0]
   d6c26:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c28:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6c2c:	b108      	cbz	r0, d6c32 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6c2e:	f7fd fa36 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c32:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6c36:	b135      	cbz	r5, d6c46 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c38:	4628      	mov	r0, r5
   d6c3a:	f7ff ffd2 	bl	d6be2 <_ZN6ThreadD1Ev>
   d6c3e:	2104      	movs	r1, #4
   d6c40:	4628      	mov	r0, r5
   d6c42:	f000 fd52 	bl	d76ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c46:	68a0      	ldr	r0, [r4, #8]
   d6c48:	b108      	cbz	r0, d6c4e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6c4a:	f7ff ffc5 	bl	d6bd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6c4e:	4620      	mov	r0, r4
   d6c50:	bd38      	pop	{r3, r4, r5, pc}
   d6c52:	bf00      	nop
   d6c54:	000d8c5c 	.word	0x000d8c5c

000d6c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c58:	b538      	push	{r3, r4, r5, lr}
   d6c5a:	4c0e      	ldr	r4, [pc, #56]	; (d6c94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6c5c:	4b0e      	ldr	r3, [pc, #56]	; (d6c98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6c5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6c60:	2500      	movs	r5, #0
   d6c62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6c64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6c68:	6063      	str	r3, [r4, #4]
   d6c6a:	60a5      	str	r5, [r4, #8]
   d6c6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6c70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6c74:	f7fe f886 	bl	d4d84 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6c78:	4b08      	ldr	r3, [pc, #32]	; (d6c9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6c7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6c82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6c84:	4620      	mov	r0, r4
   d6c86:	4a06      	ldr	r2, [pc, #24]	; (d6ca0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6c88:	4906      	ldr	r1, [pc, #24]	; (d6ca4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6c8e:	f000 bd27 	b.w	d76e0 <__aeabi_atexit>
   d6c92:	bf00      	nop
   d6c94:	2003e3dc 	.word	0x2003e3dc
   d6c98:	000d8c90 	.word	0x000d8c90
   d6c9c:	000d8c5c 	.word	0x000d8c5c
   d6ca0:	2003e358 	.word	0x2003e358
   d6ca4:	000d6c21 	.word	0x000d6c21

000d6ca8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6ca8:	2300      	movs	r3, #0
   d6caa:	461a      	mov	r2, r3
   d6cac:	6840      	ldr	r0, [r0, #4]
   d6cae:	f7fe ba27 	b.w	d5100 <network_connect>

000d6cb2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6cb2:	2200      	movs	r2, #0
   d6cb4:	2102      	movs	r1, #2
   d6cb6:	6840      	ldr	r0, [r0, #4]
   d6cb8:	f7fe ba32 	b.w	d5120 <network_disconnect>

000d6cbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6cbc:	2200      	movs	r2, #0
   d6cbe:	4611      	mov	r1, r2
   d6cc0:	6840      	ldr	r0, [r0, #4]
   d6cc2:	f7fe ba25 	b.w	d5110 <network_connecting>

000d6cc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6cc6:	2200      	movs	r2, #0
   d6cc8:	4611      	mov	r1, r2
   d6cca:	6840      	ldr	r0, [r0, #4]
   d6ccc:	f7fe ba30 	b.w	d5130 <network_ready>

000d6cd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6cd0:	2300      	movs	r3, #0
   d6cd2:	461a      	mov	r2, r3
   d6cd4:	4619      	mov	r1, r3
   d6cd6:	6840      	ldr	r0, [r0, #4]
   d6cd8:	f7fe ba32 	b.w	d5140 <network_on>

000d6cdc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6cdc:	2300      	movs	r3, #0
   d6cde:	461a      	mov	r2, r3
   d6ce0:	4619      	mov	r1, r3
   d6ce2:	6840      	ldr	r0, [r0, #4]
   d6ce4:	f7fe ba34 	b.w	d5150 <network_off>

000d6ce8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6ce8:	2200      	movs	r2, #0
   d6cea:	f081 0101 	eor.w	r1, r1, #1
   d6cee:	6840      	ldr	r0, [r0, #4]
   d6cf0:	f7fe ba36 	b.w	d5160 <network_listen>

000d6cf4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6cf4:	2200      	movs	r2, #0
   d6cf6:	6840      	ldr	r0, [r0, #4]
   d6cf8:	f7fe ba42 	b.w	d5180 <network_set_listen_timeout>

000d6cfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6cfc:	2200      	movs	r2, #0
   d6cfe:	4611      	mov	r1, r2
   d6d00:	6840      	ldr	r0, [r0, #4]
   d6d02:	f7fe ba45 	b.w	d5190 <network_get_listen_timeout>

000d6d06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6d06:	2200      	movs	r2, #0
   d6d08:	4611      	mov	r1, r2
   d6d0a:	6840      	ldr	r0, [r0, #4]
   d6d0c:	f7fe ba30 	b.w	d5170 <network_listening>

000d6d10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d14:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d16:	b095      	sub	sp, #84	; 0x54
   d6d18:	4616      	mov	r6, r2
   d6d1a:	460d      	mov	r5, r1
   d6d1c:	4607      	mov	r7, r0
    IPAddress addr;
   d6d1e:	f7ff fed1 	bl	d6ac4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6d22:	4621      	mov	r1, r4
   d6d24:	2220      	movs	r2, #32
   d6d26:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6d2a:	f001 fce8 	bl	d86fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6d2e:	2340      	movs	r3, #64	; 0x40
   d6d30:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6d32:	4621      	mov	r1, r4
   d6d34:	466b      	mov	r3, sp
   d6d36:	aa0c      	add	r2, sp, #48	; 0x30
   d6d38:	4630      	mov	r0, r6
   d6d3a:	f7fe f8db 	bl	d4ef4 <netdb_getaddrinfo>
    if (!r) {
   d6d3e:	4604      	mov	r4, r0
   d6d40:	2800      	cmp	r0, #0
   d6d42:	d144      	bne.n	d6dce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d44:	4602      	mov	r2, r0
   d6d46:	2101      	movs	r1, #1
   d6d48:	6868      	ldr	r0, [r5, #4]
   d6d4a:	f7fe f9f1 	bl	d5130 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d4e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d50:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d52:	4622      	mov	r2, r4
   d6d54:	6868      	ldr	r0, [r5, #4]
   d6d56:	f7fe f9eb 	bl	d5130 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d5a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d5c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6d5e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d60:	2e00      	cmp	r6, #0
   d6d62:	d034      	beq.n	d6dce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6d64:	2900      	cmp	r1, #0
   d6d66:	d132      	bne.n	d6dce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6d68:	6873      	ldr	r3, [r6, #4]
   d6d6a:	2b02      	cmp	r3, #2
   d6d6c:	d002      	beq.n	d6d74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6d6e:	2b0a      	cmp	r3, #10
   d6d70:	d009      	beq.n	d6d86 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6d72:	e02a      	b.n	d6dca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6d74:	f1b8 0f00 	cmp.w	r8, #0
   d6d78:	d027      	beq.n	d6dca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6d7a:	6971      	ldr	r1, [r6, #20]
   d6d7c:	4638      	mov	r0, r7
   d6d7e:	3104      	adds	r1, #4
   d6d80:	f7ff fecd 	bl	d6b1e <_ZN9IPAddressaSEPKh>
   d6d84:	e020      	b.n	d6dc8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6d86:	f1b9 0f00 	cmp.w	r9, #0
   d6d8a:	d01e      	beq.n	d6dca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6d8c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6d8e:	2211      	movs	r2, #17
   d6d90:	a801      	add	r0, sp, #4
   d6d92:	f001 fcb4 	bl	d86fe <memset>
                    a.v = 6;
   d6d96:	2306      	movs	r3, #6
   d6d98:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d9c:	ad01      	add	r5, sp, #4
   d6d9e:	f104 0308 	add.w	r3, r4, #8
   d6da2:	3418      	adds	r4, #24
   d6da4:	6818      	ldr	r0, [r3, #0]
   d6da6:	6859      	ldr	r1, [r3, #4]
   d6da8:	462a      	mov	r2, r5
   d6daa:	c203      	stmia	r2!, {r0, r1}
   d6dac:	3308      	adds	r3, #8
   d6dae:	42a3      	cmp	r3, r4
   d6db0:	4615      	mov	r5, r2
   d6db2:	d1f7      	bne.n	d6da4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6db4:	a901      	add	r1, sp, #4
   d6db6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6db8:	ad07      	add	r5, sp, #28
   d6dba:	f7ff fe91 	bl	d6ae0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6dc0:	1d3c      	adds	r4, r7, #4
   d6dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6dc4:	682b      	ldr	r3, [r5, #0]
   d6dc6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6dc8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dca:	69f6      	ldr	r6, [r6, #28]
   d6dcc:	e7c8      	b.n	d6d60 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6dce:	9800      	ldr	r0, [sp, #0]
   d6dd0:	f7fe f888 	bl	d4ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6dd4:	4638      	mov	r0, r7
   d6dd6:	b015      	add	sp, #84	; 0x54
   d6dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6ddc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ddc:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6dde:	4a03      	ldr	r2, [pc, #12]	; (d6dec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6de0:	601a      	str	r2, [r3, #0]
   d6de2:	2200      	movs	r2, #0
   d6de4:	605a      	str	r2, [r3, #4]
   d6de6:	4770      	bx	lr
   d6de8:	2003e5b0 	.word	0x2003e5b0
   d6dec:	000d8c90 	.word	0x000d8c90

000d6df0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6df2:	4606      	mov	r6, r0
   d6df4:	460d      	mov	r5, r1
   d6df6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6df8:	2400      	movs	r4, #0
  while (size--) {
   d6dfa:	42bd      	cmp	r5, r7
   d6dfc:	d00c      	beq.n	d6e18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6dfe:	6833      	ldr	r3, [r6, #0]
   d6e00:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e04:	689b      	ldr	r3, [r3, #8]
   d6e06:	4630      	mov	r0, r6
   d6e08:	4798      	blx	r3
     if (chunk>=0)
   d6e0a:	2800      	cmp	r0, #0
   d6e0c:	db01      	blt.n	d6e12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e0e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6e10:	e7f3      	b.n	d6dfa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e12:	2c00      	cmp	r4, #0
   d6e14:	bf08      	it	eq
   d6e16:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e18:	4620      	mov	r0, r4
   d6e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e1c:	b570      	push	{r4, r5, r6, lr}
   d6e1e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6e20:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6e22:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6e24:	b149      	cbz	r1, d6e3a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6e26:	f001 fcc4 	bl	d87b2 <strlen>
   d6e2a:	682b      	ldr	r3, [r5, #0]
   d6e2c:	4602      	mov	r2, r0
   d6e2e:	4621      	mov	r1, r4
   d6e30:	4628      	mov	r0, r5
   d6e32:	68db      	ldr	r3, [r3, #12]
    }
   d6e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e38:	4718      	bx	r3
    }
   d6e3a:	bd70      	pop	{r4, r5, r6, pc}

000d6e3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6e3c:	6803      	ldr	r3, [r0, #0]
   d6e3e:	689b      	ldr	r3, [r3, #8]
   d6e40:	4718      	bx	r3

000d6e42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6e44:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e46:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6e48:	f7ff fff8 	bl	d6e3c <_ZN5Print5printEc>
  n += print('\n');
   d6e4c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6e4e:	4604      	mov	r4, r0
  n += print('\n');
   d6e50:	4628      	mov	r0, r5
   d6e52:	f7ff fff3 	bl	d6e3c <_ZN5Print5printEc>
  return n;
}
   d6e56:	4420      	add	r0, r4
   d6e58:	bd38      	pop	{r3, r4, r5, pc}

000d6e5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6e5a:	b530      	push	{r4, r5, lr}
   d6e5c:	b08b      	sub	sp, #44	; 0x2c
   d6e5e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6e60:	2100      	movs	r1, #0
   d6e62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6e66:	2a01      	cmp	r2, #1
   d6e68:	bf98      	it	ls
   d6e6a:	220a      	movls	r2, #10
   d6e6c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6e70:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6e74:	fb05 3312 	mls	r3, r5, r2, r3
   d6e78:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6e7c:	2b09      	cmp	r3, #9
   d6e7e:	bf94      	ite	ls
   d6e80:	3330      	addls	r3, #48	; 0x30
   d6e82:	3337      	addhi	r3, #55	; 0x37
   d6e84:	b2db      	uxtb	r3, r3
   d6e86:	4621      	mov	r1, r4
   d6e88:	f804 3901 	strb.w	r3, [r4], #-1
   d6e8c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6e8e:	2d00      	cmp	r5, #0
   d6e90:	d1ee      	bne.n	d6e70 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6e92:	f7ff ffc3 	bl	d6e1c <_ZN5Print5writeEPKc>
}
   d6e96:	b00b      	add	sp, #44	; 0x2c
   d6e98:	bd30      	pop	{r4, r5, pc}

000d6e9a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6e9a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6e9c:	b92a      	cbnz	r2, d6eaa <_ZN5Print5printEmi+0x10>
   d6e9e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6ea4:	689b      	ldr	r3, [r3, #8]
   d6ea6:	b2c9      	uxtb	r1, r1
   d6ea8:	4718      	bx	r3
  else return printNumber(n, base);
   d6eaa:	b2d2      	uxtb	r2, r2
}
   d6eac:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6eb0:	f7ff bfd3 	b.w	d6e5a <_ZN5Print11printNumberEmh>

000d6eb4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6eb4:	f7ff bff1 	b.w	d6e9a <_ZN5Print5printEmi>

000d6eb8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6eb8:	b40c      	push	{r2, r3}
   d6eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6ebe:	b087      	sub	sp, #28
   d6ec0:	af00      	add	r7, sp, #0
   d6ec2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6ec6:	4605      	mov	r5, r0
   d6ec8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6ecc:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6ece:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6ed0:	4623      	mov	r3, r4
   d6ed2:	464a      	mov	r2, r9
   d6ed4:	2114      	movs	r1, #20
   d6ed6:	1d38      	adds	r0, r7, #4
   d6ed8:	f7fe f97a 	bl	d51d0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6edc:	2813      	cmp	r0, #19
   d6ede:	d805      	bhi.n	d6eec <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6ee0:	1d39      	adds	r1, r7, #4
   d6ee2:	4628      	mov	r0, r5
   d6ee4:	f7ff ff9a 	bl	d6e1c <_ZN5Print5writeEPKc>
   d6ee8:	4604      	mov	r4, r0
   d6eea:	e013      	b.n	d6f14 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6eec:	f100 0308 	add.w	r3, r0, #8
   d6ef0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6ef4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6ef6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6efa:	1c41      	adds	r1, r0, #1
   d6efc:	4623      	mov	r3, r4
   d6efe:	464a      	mov	r2, r9
   d6f00:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6f02:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6f04:	f7fe f964 	bl	d51d0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f08:	4669      	mov	r1, sp
   d6f0a:	4628      	mov	r0, r5
   d6f0c:	f7ff ff86 	bl	d6e1c <_ZN5Print5writeEPKc>
   d6f10:	4604      	mov	r4, r0
   d6f12:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6f14:	b11e      	cbz	r6, d6f1e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6f16:	4628      	mov	r0, r5
   d6f18:	f7ff ff93 	bl	d6e42 <_ZN5Print7printlnEv>
   d6f1c:	4404      	add	r4, r0
    return n;
}
   d6f1e:	4620      	mov	r0, r4
   d6f20:	371c      	adds	r7, #28
   d6f22:	46bd      	mov	sp, r7
   d6f24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f28:	b002      	add	sp, #8
   d6f2a:	4770      	bx	lr

000d6f2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f2c:	b510      	push	{r4, lr}
   d6f2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f30:	f7ff fa0f 	bl	d6352 <_ZNSt14_Function_baseD1Ev>
   d6f34:	4620      	mov	r0, r4
   d6f36:	bd10      	pop	{r4, pc}

000d6f38 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f38:	4803      	ldr	r0, [pc, #12]	; (d6f48 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f3a:	4a04      	ldr	r2, [pc, #16]	; (d6f4c <_GLOBAL__sub_I_RGB+0x14>)
   d6f3c:	4904      	ldr	r1, [pc, #16]	; (d6f50 <_GLOBAL__sub_I_RGB+0x18>)
   d6f3e:	2300      	movs	r3, #0
   d6f40:	6083      	str	r3, [r0, #8]
   d6f42:	f000 bbcd 	b.w	d76e0 <__aeabi_atexit>
   d6f46:	bf00      	nop
   d6f48:	2003e5b8 	.word	0x2003e5b8
   d6f4c:	2003e358 	.word	0x2003e358
   d6f50:	000d6f2d 	.word	0x000d6f2d

000d6f54 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6f54:	4770      	bx	lr

000d6f56 <_ZN8SPIClassD0Ev>:
   d6f56:	b510      	push	{r4, lr}
   d6f58:	2110      	movs	r1, #16
   d6f5a:	4604      	mov	r4, r0
   d6f5c:	f000 fbc5 	bl	d76ea <_ZdlPvj>
   d6f60:	4620      	mov	r0, r4
   d6f62:	bd10      	pop	{r4, pc}

000d6f64 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6f64:	b570      	push	{r4, r5, r6, lr}
   d6f66:	4b08      	ldr	r3, [pc, #32]	; (d6f88 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6f68:	6003      	str	r3, [r0, #0]
   d6f6a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6f6c:	2500      	movs	r5, #0
   d6f6e:	460e      	mov	r6, r1
   d6f70:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6f74:	f7fd fefe 	bl	d4d74 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6f78:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6f7a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6f7c:	f7fd ffc2 	bl	d4f04 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6f80:	60a5      	str	r5, [r4, #8]
}
   d6f82:	4620      	mov	r0, r4
   d6f84:	bd70      	pop	{r4, r5, r6, pc}
   d6f86:	bf00      	nop
   d6f88:	000d8cc4 	.word	0x000d8cc4

000d6f8c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6f8c:	7900      	ldrb	r0, [r0, #4]
   d6f8e:	f7fd bfc1 	b.w	d4f14 <HAL_SPI_Is_Enabled>
	...

000d6f94 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6f94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f98:	ec59 8b10 	vmov	r8, r9, d0
   d6f9c:	4607      	mov	r7, r0
   d6f9e:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d6fa0:	2200      	movs	r2, #0
   d6fa2:	2300      	movs	r3, #0
   d6fa4:	ee10 0a10 	vmov	r0, s0
   d6fa8:	4649      	mov	r1, r9
   d6faa:	f001 f915 	bl	d81d8 <__aeabi_dcmplt>
   d6fae:	b128      	cbz	r0, d6fbc <_Z4dtoadhPc+0x28>
        val = -val;
   d6fb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6fb4:	4699      	mov	r9, r3
        *sout++ = '-';
   d6fb6:	232d      	movs	r3, #45	; 0x2d
   d6fb8:	7033      	strb	r3, [r6, #0]
   d6fba:	3601      	adds	r6, #1
   d6fbc:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6fbe:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6fc0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6fc2:	b2d9      	uxtb	r1, r3
   d6fc4:	428f      	cmp	r7, r1
   d6fc6:	d902      	bls.n	d6fce <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d6fc8:	4354      	muls	r4, r2
   d6fca:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6fcc:	e7f9      	b.n	d6fc2 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d6fce:	4620      	mov	r0, r4
   d6fd0:	f000 fe2a 	bl	d7c28 <__aeabi_i2d>
   d6fd4:	4642      	mov	r2, r8
   d6fd6:	464b      	mov	r3, r9
   d6fd8:	f000 fe8c 	bl	d7cf4 <__aeabi_dmul>
   d6fdc:	4682      	mov	sl, r0
   d6fde:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6fe0:	f001 f9aa 	bl	d8338 <__aeabi_d2ulz>
   d6fe4:	4680      	mov	r8, r0
   d6fe6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6fe8:	f000 fe4e 	bl	d7c88 <__aeabi_ul2d>
   d6fec:	4602      	mov	r2, r0
   d6fee:	460b      	mov	r3, r1
   d6ff0:	4650      	mov	r0, sl
   d6ff2:	4659      	mov	r1, fp
   d6ff4:	f000 fcca 	bl	d798c <__aeabi_dsub>
   d6ff8:	2200      	movs	r2, #0
   d6ffa:	4b17      	ldr	r3, [pc, #92]	; (d7058 <_Z4dtoadhPc+0xc4>)
   d6ffc:	f001 f900 	bl	d8200 <__aeabi_dcmpge>
   d7000:	b118      	cbz	r0, d700a <_Z4dtoadhPc+0x76>
        fixed++;
   d7002:	f118 0801 	adds.w	r8, r8, #1
   d7006:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d700a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d700c:	4622      	mov	r2, r4
   d700e:	462b      	mov	r3, r5
   d7010:	4640      	mov	r0, r8
   d7012:	4649      	mov	r1, r9
   d7014:	f001 f978 	bl	d8308 <__aeabi_uldivmod>
   d7018:	2301      	movs	r3, #1
   d701a:	220a      	movs	r2, #10
   d701c:	4631      	mov	r1, r6
   d701e:	f000 fa24 	bl	d746a <ultoa>
    if (prec) {
   d7022:	b1af      	cbz	r7, d7050 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d7024:	4630      	mov	r0, r6
   d7026:	f001 fbc4 	bl	d87b2 <strlen>
        *sout++ = '.';
   d702a:	232e      	movs	r3, #46	; 0x2e
   d702c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d702e:	3001      	adds	r0, #1
   d7030:	4406      	add	r6, r0
   d7032:	4622      	mov	r2, r4
   d7034:	462b      	mov	r3, r5
   d7036:	4640      	mov	r0, r8
   d7038:	4649      	mov	r1, r9
   d703a:	f001 f965 	bl	d8308 <__aeabi_uldivmod>
   d703e:	463b      	mov	r3, r7
   d7040:	4610      	mov	r0, r2
   d7042:	4631      	mov	r1, r6
   d7044:	220a      	movs	r2, #10
    }
}
   d7046:	b001      	add	sp, #4
   d7048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d704c:	f000 ba0d 	b.w	d746a <ultoa>
    }
}
   d7050:	b001      	add	sp, #4
   d7052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7056:	bf00      	nop
   d7058:	3fe00000 	.word	0x3fe00000

000d705c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d705c:	b510      	push	{r4, lr}
   d705e:	4604      	mov	r4, r0
{
	free(buffer);
   d7060:	6800      	ldr	r0, [r0, #0]
   d7062:	f7fe f8a5 	bl	d51b0 <free>
}
   d7066:	4620      	mov	r0, r4
   d7068:	bd10      	pop	{r4, pc}

000d706a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d706a:	b510      	push	{r4, lr}
   d706c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d706e:	6800      	ldr	r0, [r0, #0]
   d7070:	b108      	cbz	r0, d7076 <_ZN6String10invalidateEv+0xc>
   d7072:	f7fe f89d 	bl	d51b0 <free>
	buffer = NULL;
   d7076:	2300      	movs	r3, #0
   d7078:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d707a:	60a3      	str	r3, [r4, #8]
   d707c:	6063      	str	r3, [r4, #4]
   d707e:	bd10      	pop	{r4, pc}

000d7080 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7080:	b538      	push	{r3, r4, r5, lr}
   d7082:	4604      	mov	r4, r0
   d7084:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7086:	6800      	ldr	r0, [r0, #0]
   d7088:	3101      	adds	r1, #1
   d708a:	f7fe f899 	bl	d51c0 <realloc>
	if (newbuffer) {
   d708e:	b110      	cbz	r0, d7096 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7090:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7094:	2001      	movs	r0, #1
	}
	return 0;
}
   d7096:	bd38      	pop	{r3, r4, r5, pc}

000d7098 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7098:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d709a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d709c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d709e:	b113      	cbz	r3, d70a6 <_ZN6String7reserveEj+0xe>
   d70a0:	6843      	ldr	r3, [r0, #4]
   d70a2:	428b      	cmp	r3, r1
   d70a4:	d207      	bcs.n	d70b6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d70a6:	4620      	mov	r0, r4
   d70a8:	f7ff ffea 	bl	d7080 <_ZN6String12changeBufferEj>
   d70ac:	b120      	cbz	r0, d70b8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d70ae:	68a3      	ldr	r3, [r4, #8]
   d70b0:	b90b      	cbnz	r3, d70b6 <_ZN6String7reserveEj+0x1e>
   d70b2:	6822      	ldr	r2, [r4, #0]
   d70b4:	7013      	strb	r3, [r2, #0]
   d70b6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d70b8:	bd10      	pop	{r4, pc}

000d70ba <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d70ba:	b570      	push	{r4, r5, r6, lr}
   d70bc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d70be:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d70c0:	4604      	mov	r4, r0
   d70c2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d70c4:	f7ff ffe8 	bl	d7098 <_ZN6String7reserveEj>
   d70c8:	b918      	cbnz	r0, d70d2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d70ca:	4620      	mov	r0, r4
   d70cc:	f7ff ffcd 	bl	d706a <_ZN6String10invalidateEv>
		return *this;
   d70d0:	e009      	b.n	d70e6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d70d2:	462a      	mov	r2, r5
   d70d4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d70d6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d70d8:	6820      	ldr	r0, [r4, #0]
   d70da:	f001 faea 	bl	d86b2 <memcpy>
	buffer[len] = 0;
   d70de:	6822      	ldr	r2, [r4, #0]
   d70e0:	68a3      	ldr	r3, [r4, #8]
   d70e2:	2100      	movs	r1, #0
   d70e4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d70e6:	4620      	mov	r0, r4
   d70e8:	bd70      	pop	{r4, r5, r6, pc}

000d70ea <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d70ea:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70ec:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d70ee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d70f2:	6043      	str	r3, [r0, #4]
	len = 0;
   d70f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d70f6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d70f8:	460d      	mov	r5, r1
   d70fa:	b139      	cbz	r1, d710c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d70fc:	4608      	mov	r0, r1
   d70fe:	f001 fb58 	bl	d87b2 <strlen>
   d7102:	4629      	mov	r1, r5
   d7104:	4602      	mov	r2, r0
   d7106:	4620      	mov	r0, r4
   d7108:	f7ff ffd7 	bl	d70ba <_ZN6String4copyEPKcj>
}
   d710c:	4620      	mov	r0, r4
   d710e:	bd38      	pop	{r3, r4, r5, pc}

000d7110 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7110:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7112:	b510      	push	{r4, lr}
   d7114:	460b      	mov	r3, r1
   d7116:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7118:	d007      	beq.n	d712a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d711a:	6809      	ldr	r1, [r1, #0]
   d711c:	b119      	cbz	r1, d7126 <_ZN6StringaSERKS_+0x16>
   d711e:	689a      	ldr	r2, [r3, #8]
   d7120:	f7ff ffcb 	bl	d70ba <_ZN6String4copyEPKcj>
   d7124:	e001      	b.n	d712a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7126:	f7ff ffa0 	bl	d706a <_ZN6String10invalidateEv>

	return *this;
}
   d712a:	4620      	mov	r0, r4
   d712c:	bd10      	pop	{r4, pc}

000d712e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d712e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7130:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7132:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7134:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7136:	6043      	str	r3, [r0, #4]
	len = 0;
   d7138:	6083      	str	r3, [r0, #8]
	flags = 0;
   d713a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d713c:	f7ff ffe8 	bl	d7110 <_ZN6StringaSERKS_>
}
   d7140:	4620      	mov	r0, r4
   d7142:	bd10      	pop	{r4, pc}

000d7144 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7144:	b538      	push	{r3, r4, r5, lr}
   d7146:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7148:	460c      	mov	r4, r1
   d714a:	b141      	cbz	r1, d715e <_ZN6StringaSEPKc+0x1a>
   d714c:	4608      	mov	r0, r1
   d714e:	f001 fb30 	bl	d87b2 <strlen>
   d7152:	4621      	mov	r1, r4
   d7154:	4602      	mov	r2, r0
   d7156:	4628      	mov	r0, r5
   d7158:	f7ff ffaf 	bl	d70ba <_ZN6String4copyEPKcj>
   d715c:	e001      	b.n	d7162 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d715e:	f7ff ff84 	bl	d706a <_ZN6String10invalidateEv>

	return *this;
}
   d7162:	4628      	mov	r0, r5
   d7164:	bd38      	pop	{r3, r4, r5, pc}

000d7166 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d7166:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7168:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d716a:	b08a      	sub	sp, #40	; 0x28
   d716c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d716e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7170:	6043      	str	r3, [r0, #4]
	len = 0;
   d7172:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7174:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d7176:	b2c8      	uxtb	r0, r1
   d7178:	a901      	add	r1, sp, #4
   d717a:	f7ff ff0b 	bl	d6f94 <_Z4dtoadhPc>
        *this = buf;
   d717e:	a901      	add	r1, sp, #4
   d7180:	4620      	mov	r0, r4
   d7182:	f7ff ffdf 	bl	d7144 <_ZN6StringaSEPKc>
}
   d7186:	4620      	mov	r0, r4
   d7188:	b00a      	add	sp, #40	; 0x28
   d718a:	bd10      	pop	{r4, pc}

000d718c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d718c:	4b04      	ldr	r3, [pc, #16]	; (d71a0 <_GLOBAL__sub_I_System+0x14>)
   d718e:	2000      	movs	r0, #0
   d7190:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7194:	7018      	strb	r0, [r3, #0]
   d7196:	8058      	strh	r0, [r3, #2]
   d7198:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d719a:	f7fd bf4b 	b.w	d5034 <set_system_mode>
   d719e:	bf00      	nop
   d71a0:	2003e5c8 	.word	0x2003e5c8

000d71a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d71a4:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d71a6:	681a      	ldr	r2, [r3, #0]
   d71a8:	4b02      	ldr	r3, [pc, #8]	; (d71b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d71aa:	601a      	str	r2, [r3, #0]
   d71ac:	4770      	bx	lr
   d71ae:	bf00      	nop
   d71b0:	2003e2ec 	.word	0x2003e2ec
   d71b4:	2003e5d0 	.word	0x2003e5d0

000d71b8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d71b8:	4770      	bx	lr

000d71ba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71ba:	7441      	strb	r1, [r0, #17]
   d71bc:	4770      	bx	lr

000d71be <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d71be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d71c0:	7c00      	ldrb	r0, [r0, #16]
   d71c2:	f7fd fee7 	bl	d4f94 <HAL_USART_Available_Data_For_Write>
}
   d71c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71ca:	bd08      	pop	{r3, pc}

000d71cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d71cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d71ce:	7c00      	ldrb	r0, [r0, #16]
   d71d0:	f7fd feb8 	bl	d4f44 <HAL_USART_Available_Data>
}
   d71d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71d8:	bd08      	pop	{r3, pc}

000d71da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d71da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d71dc:	7c00      	ldrb	r0, [r0, #16]
   d71de:	f7fd fec1 	bl	d4f64 <HAL_USART_Peek_Data>
}
   d71e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71e6:	bf28      	it	cs
   d71e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d71ec:	bd08      	pop	{r3, pc}

000d71ee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d71ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d71f0:	7c00      	ldrb	r0, [r0, #16]
   d71f2:	f7fd feaf 	bl	d4f54 <HAL_USART_Read_Data>
}
   d71f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71fa:	bf28      	it	cs
   d71fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7200:	bd08      	pop	{r3, pc}

000d7202 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7202:	7c00      	ldrb	r0, [r0, #16]
   d7204:	f7fd beb6 	b.w	d4f74 <HAL_USART_Flush_Data>

000d7208 <_ZN11USARTSerialD0Ev>:
   d7208:	b510      	push	{r4, lr}
   d720a:	2114      	movs	r1, #20
   d720c:	4604      	mov	r4, r0
   d720e:	f000 fa6c 	bl	d76ea <_ZdlPvj>
   d7212:	4620      	mov	r0, r4
   d7214:	bd10      	pop	{r4, pc}

000d7216 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7216:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7218:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d721a:	4604      	mov	r4, r0
   d721c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d721e:	b925      	cbnz	r5, d722a <_ZN11USARTSerial5writeEh+0x14>
   d7220:	7c00      	ldrb	r0, [r0, #16]
   d7222:	f7fd feb7 	bl	d4f94 <HAL_USART_Available_Data_For_Write>
   d7226:	2800      	cmp	r0, #0
   d7228:	dd05      	ble.n	d7236 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d722a:	4631      	mov	r1, r6
   d722c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d722e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7232:	f7fd be7f 	b.w	d4f34 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7236:	4628      	mov	r0, r5
   d7238:	bd70      	pop	{r4, r5, r6, pc}
	...

000d723c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d723c:	b510      	push	{r4, lr}
   d723e:	4604      	mov	r4, r0
   d7240:	4608      	mov	r0, r1
   d7242:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7244:	2200      	movs	r2, #0
   d7246:	6062      	str	r2, [r4, #4]
   d7248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d724c:	60a2      	str	r2, [r4, #8]
   d724e:	4a05      	ldr	r2, [pc, #20]	; (d7264 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7250:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7252:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7254:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7256:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7258:	461a      	mov	r2, r3
   d725a:	f7fd fe63 	bl	d4f24 <HAL_USART_Init>
}
   d725e:	4620      	mov	r0, r4
   d7260:	bd10      	pop	{r4, pc}
   d7262:	bf00      	nop
   d7264:	000d8d00 	.word	0x000d8d00

000d7268 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7268:	7c00      	ldrb	r0, [r0, #16]
   d726a:	f7fd be8b 	b.w	d4f84 <HAL_USART_Is_Enabled>
	...

000d7270 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7270:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7272:	4d0c      	ldr	r5, [pc, #48]	; (d72a4 <_Z22__fetch_global_Serial1v+0x34>)
   d7274:	6829      	ldr	r1, [r5, #0]
   d7276:	f011 0401 	ands.w	r4, r1, #1
   d727a:	d111      	bne.n	d72a0 <_Z22__fetch_global_Serial1v+0x30>
   d727c:	4628      	mov	r0, r5
   d727e:	f7fc ff10 	bl	d40a2 <__cxa_guard_acquire>
   d7282:	b168      	cbz	r0, d72a0 <_Z22__fetch_global_Serial1v+0x30>
   d7284:	4a08      	ldr	r2, [pc, #32]	; (d72a8 <_Z22__fetch_global_Serial1v+0x38>)
   d7286:	4b09      	ldr	r3, [pc, #36]	; (d72ac <_Z22__fetch_global_Serial1v+0x3c>)
   d7288:	4809      	ldr	r0, [pc, #36]	; (d72b0 <_Z22__fetch_global_Serial1v+0x40>)
   d728a:	4621      	mov	r1, r4
   d728c:	f7ff ffd6 	bl	d723c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7290:	4628      	mov	r0, r5
   d7292:	f7fc ff0b 	bl	d40ac <__cxa_guard_release>
   d7296:	4a07      	ldr	r2, [pc, #28]	; (d72b4 <_Z22__fetch_global_Serial1v+0x44>)
   d7298:	4907      	ldr	r1, [pc, #28]	; (d72b8 <_Z22__fetch_global_Serial1v+0x48>)
   d729a:	4805      	ldr	r0, [pc, #20]	; (d72b0 <_Z22__fetch_global_Serial1v+0x40>)
   d729c:	f000 fa20 	bl	d76e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d72a0:	4803      	ldr	r0, [pc, #12]	; (d72b0 <_Z22__fetch_global_Serial1v+0x40>)
   d72a2:	bd38      	pop	{r3, r4, r5, pc}
   d72a4:	2003e66c 	.word	0x2003e66c
   d72a8:	2003e670 	.word	0x2003e670
   d72ac:	2003e5e8 	.word	0x2003e5e8
   d72b0:	2003e5d4 	.word	0x2003e5d4
   d72b4:	2003e358 	.word	0x2003e358
   d72b8:	000d71b9 	.word	0x000d71b9

000d72bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72bc:	7441      	strb	r1, [r0, #17]
   d72be:	4770      	bx	lr

000d72c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d72c0:	4770      	bx	lr

000d72c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d72c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d72c4:	2100      	movs	r1, #0
   d72c6:	7c00      	ldrb	r0, [r0, #16]
   d72c8:	f7fd fe8c 	bl	d4fe4 <HAL_USB_USART_Receive_Data>
}
   d72cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72d0:	bf28      	it	cs
   d72d2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d72d6:	bd08      	pop	{r3, pc}

000d72d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d72d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d72da:	2101      	movs	r1, #1
   d72dc:	7c00      	ldrb	r0, [r0, #16]
   d72de:	f7fd fe81 	bl	d4fe4 <HAL_USB_USART_Receive_Data>
}
   d72e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72e6:	bf28      	it	cs
   d72e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d72ec:	bd08      	pop	{r3, pc}

000d72ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d72ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d72f0:	7c00      	ldrb	r0, [r0, #16]
   d72f2:	f7fd fe6f 	bl	d4fd4 <HAL_USB_USART_Available_Data_For_Write>
}
   d72f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72fa:	bd08      	pop	{r3, pc}

000d72fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d72fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d72fe:	7c00      	ldrb	r0, [r0, #16]
   d7300:	f7fd fe60 	bl	d4fc4 <HAL_USB_USART_Available_Data>
}
   d7304:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7308:	bd08      	pop	{r3, pc}

000d730a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d730a:	7c00      	ldrb	r0, [r0, #16]
   d730c:	f7fd be7a 	b.w	d5004 <HAL_USB_USART_Flush_Data>

000d7310 <_ZN9USBSerialD0Ev>:
   d7310:	b510      	push	{r4, lr}
   d7312:	2114      	movs	r1, #20
   d7314:	4604      	mov	r4, r0
   d7316:	f000 f9e8 	bl	d76ea <_ZdlPvj>
   d731a:	4620      	mov	r0, r4
   d731c:	bd10      	pop	{r4, pc}

000d731e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d731e:	b538      	push	{r3, r4, r5, lr}
   d7320:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7322:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7324:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7326:	f7fd fe55 	bl	d4fd4 <HAL_USB_USART_Available_Data_For_Write>
   d732a:	2800      	cmp	r0, #0
   d732c:	dc01      	bgt.n	d7332 <_ZN9USBSerial5writeEh+0x14>
   d732e:	7c60      	ldrb	r0, [r4, #17]
   d7330:	b128      	cbz	r0, d733e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7332:	4629      	mov	r1, r5
   d7334:	7c20      	ldrb	r0, [r4, #16]
   d7336:	f7fd fe5d 	bl	d4ff4 <HAL_USB_USART_Send_Data>
   d733a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d733e:	bd38      	pop	{r3, r4, r5, pc}

000d7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7340:	b510      	push	{r4, lr}
   d7342:	4604      	mov	r4, r0
   d7344:	2300      	movs	r3, #0
   d7346:	6063      	str	r3, [r4, #4]
   d7348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d734c:	60a3      	str	r3, [r4, #8]
   d734e:	4b05      	ldr	r3, [pc, #20]	; (d7364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7350:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7352:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7354:	4608      	mov	r0, r1
{
  _serial = serial;
   d7356:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7358:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d735a:	4611      	mov	r1, r2
   d735c:	f7fd fe22 	bl	d4fa4 <HAL_USB_USART_Init>
}
   d7360:	4620      	mov	r0, r4
   d7362:	bd10      	pop	{r4, pc}
   d7364:	000d8d30 	.word	0x000d8d30

000d7368 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7368:	2200      	movs	r2, #0
   d736a:	7c00      	ldrb	r0, [r0, #16]
   d736c:	f7fd be22 	b.w	d4fb4 <HAL_USB_USART_Begin>

000d7370 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7370:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7372:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7374:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7376:	2100      	movs	r1, #0
   d7378:	f001 f9c1 	bl	d86fe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d737c:	4620      	mov	r0, r4
   d737e:	bd10      	pop	{r4, pc}

000d7380 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7380:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7382:	4d0e      	ldr	r5, [pc, #56]	; (d73bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7384:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7386:	a801      	add	r0, sp, #4
   d7388:	f7ff fff2 	bl	d7370 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d738c:	6829      	ldr	r1, [r5, #0]
   d738e:	f011 0401 	ands.w	r4, r1, #1
   d7392:	d110      	bne.n	d73b6 <_Z16_fetch_usbserialv+0x36>
   d7394:	4628      	mov	r0, r5
   d7396:	f7fc fe84 	bl	d40a2 <__cxa_guard_acquire>
   d739a:	b160      	cbz	r0, d73b6 <_Z16_fetch_usbserialv+0x36>
   d739c:	aa01      	add	r2, sp, #4
   d739e:	4621      	mov	r1, r4
   d73a0:	4807      	ldr	r0, [pc, #28]	; (d73c0 <_Z16_fetch_usbserialv+0x40>)
   d73a2:	f7ff ffcd 	bl	d7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d73a6:	4628      	mov	r0, r5
   d73a8:	f7fc fe80 	bl	d40ac <__cxa_guard_release>
   d73ac:	4a05      	ldr	r2, [pc, #20]	; (d73c4 <_Z16_fetch_usbserialv+0x44>)
   d73ae:	4906      	ldr	r1, [pc, #24]	; (d73c8 <_Z16_fetch_usbserialv+0x48>)
   d73b0:	4803      	ldr	r0, [pc, #12]	; (d73c0 <_Z16_fetch_usbserialv+0x40>)
   d73b2:	f000 f995 	bl	d76e0 <__aeabi_atexit>
	return _usbserial;
}
   d73b6:	4802      	ldr	r0, [pc, #8]	; (d73c0 <_Z16_fetch_usbserialv+0x40>)
   d73b8:	b007      	add	sp, #28
   d73ba:	bd30      	pop	{r4, r5, pc}
   d73bc:	2003e6f4 	.word	0x2003e6f4
   d73c0:	2003e6f8 	.word	0x2003e6f8
   d73c4:	2003e358 	.word	0x2003e358
   d73c8:	000d72c1 	.word	0x000d72c1

000d73cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d73cc:	2200      	movs	r2, #0
   d73ce:	4611      	mov	r1, r2
   d73d0:	6840      	ldr	r0, [r0, #4]
   d73d2:	f7fd bead 	b.w	d5130 <network_ready>

000d73d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d73d6:	2200      	movs	r2, #0
   d73d8:	4611      	mov	r1, r2
   d73da:	6840      	ldr	r0, [r0, #4]
   d73dc:	f7fd bec8 	b.w	d5170 <network_listening>

000d73e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d73e0:	2200      	movs	r2, #0
   d73e2:	4611      	mov	r1, r2
   d73e4:	6840      	ldr	r0, [r0, #4]
   d73e6:	f7fd bed3 	b.w	d5190 <network_get_listen_timeout>

000d73ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d73ea:	2200      	movs	r2, #0
   d73ec:	6840      	ldr	r0, [r0, #4]
   d73ee:	f7fd bec7 	b.w	d5180 <network_set_listen_timeout>

000d73f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d73f2:	2200      	movs	r2, #0
   d73f4:	f081 0101 	eor.w	r1, r1, #1
   d73f8:	6840      	ldr	r0, [r0, #4]
   d73fa:	f7fd beb1 	b.w	d5160 <network_listen>

000d73fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d73fe:	2300      	movs	r3, #0
   d7400:	461a      	mov	r2, r3
   d7402:	4619      	mov	r1, r3
   d7404:	6840      	ldr	r0, [r0, #4]
   d7406:	f7fd bea3 	b.w	d5150 <network_off>

000d740a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d740a:	2300      	movs	r3, #0
   d740c:	461a      	mov	r2, r3
   d740e:	4619      	mov	r1, r3
   d7410:	6840      	ldr	r0, [r0, #4]
   d7412:	f7fd be95 	b.w	d5140 <network_on>

000d7416 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7416:	2200      	movs	r2, #0
   d7418:	4611      	mov	r1, r2
   d741a:	6840      	ldr	r0, [r0, #4]
   d741c:	f7fd be78 	b.w	d5110 <network_connecting>

000d7420 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7420:	2200      	movs	r2, #0
   d7422:	2102      	movs	r1, #2
   d7424:	6840      	ldr	r0, [r0, #4]
   d7426:	f7fd be7b 	b.w	d5120 <network_disconnect>

000d742a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d742a:	2300      	movs	r3, #0
   d742c:	461a      	mov	r2, r3
   d742e:	6840      	ldr	r0, [r0, #4]
   d7430:	f7fd be66 	b.w	d5100 <network_connect>

000d7434 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7434:	4b02      	ldr	r3, [pc, #8]	; (d7440 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7436:	2204      	movs	r2, #4
   d7438:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d743a:	4a02      	ldr	r2, [pc, #8]	; (d7444 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d743c:	601a      	str	r2, [r3, #0]
   d743e:	4770      	bx	lr
   d7440:	2003e70c 	.word	0x2003e70c
   d7444:	000d8d60 	.word	0x000d8d60

000d7448 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7448:	b510      	push	{r4, lr}
   d744a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d744c:	f001 f9b1 	bl	d87b2 <strlen>
   d7450:	3801      	subs	r0, #1
   d7452:	1823      	adds	r3, r4, r0
   d7454:	4620      	mov	r0, r4
	while(i<j){
   d7456:	4298      	cmp	r0, r3
   d7458:	d206      	bcs.n	d7468 <_Z11str_reversePc+0x20>
		c = *i;
   d745a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d745c:	7819      	ldrb	r1, [r3, #0]
   d745e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7462:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d7466:	e7f6      	b.n	d7456 <_Z11str_reversePc+0xe>
   d7468:	bd10      	pop	{r4, pc}

000d746a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d746a:	b570      	push	{r4, r5, r6, lr}
   d746c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d746e:	1e91      	subs	r1, r2, #2
   d7470:	2922      	cmp	r1, #34	; 0x22
   d7472:	d820      	bhi.n	d74b6 <ultoa+0x4c>
   d7474:	4625      	mov	r5, r4
   d7476:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7478:	b910      	cbnz	r0, d7480 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d747a:	4423      	add	r3, r4
            *ptr++ = '0';
   d747c:	2230      	movs	r2, #48	; 0x30
   d747e:	e00e      	b.n	d749e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7480:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d7484:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7488:	b2c1      	uxtb	r1, r0
   d748a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d748e:	2809      	cmp	r0, #9
                *ptr += '0';
   d7490:	bf94      	ite	ls
   d7492:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7494:	3157      	addhi	r1, #87	; 0x57
   d7496:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d749a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d749c:	e7eb      	b.n	d7476 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d749e:	4299      	cmp	r1, r3
   d74a0:	d202      	bcs.n	d74a8 <ultoa+0x3e>
            *ptr++ = '0';
   d74a2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d74a6:	e7fa      	b.n	d749e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d74a8:	2300      	movs	r3, #0
	str_reverse(buffer);
   d74aa:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d74ac:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d74ae:	f7ff ffcb 	bl	d7448 <_Z11str_reversePc>
	return buffer;
   d74b2:	4620      	mov	r0, r4
   d74b4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d74b6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d74b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d74bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d74bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d74be:	4b0c      	ldr	r3, [pc, #48]	; (d74f0 <serialEventRun+0x34>)
   d74c0:	b133      	cbz	r3, d74d0 <serialEventRun+0x14>
   d74c2:	f7ff ff5d 	bl	d7380 <_Z16_fetch_usbserialv>
   d74c6:	6803      	ldr	r3, [r0, #0]
   d74c8:	691b      	ldr	r3, [r3, #16]
   d74ca:	4798      	blx	r3
   d74cc:	2800      	cmp	r0, #0
   d74ce:	dc09      	bgt.n	d74e4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d74d0:	4b08      	ldr	r3, [pc, #32]	; (d74f4 <serialEventRun+0x38>)
   d74d2:	b163      	cbz	r3, d74ee <serialEventRun+0x32>
   d74d4:	f7ff fecc 	bl	d7270 <_Z22__fetch_global_Serial1v>
   d74d8:	6803      	ldr	r3, [r0, #0]
   d74da:	691b      	ldr	r3, [r3, #16]
   d74dc:	4798      	blx	r3
   d74de:	2800      	cmp	r0, #0
   d74e0:	dc03      	bgt.n	d74ea <serialEventRun+0x2e>
   d74e2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d74e4:	f3af 8000 	nop.w
   d74e8:	e7f2      	b.n	d74d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d74ea:	f3af 8000 	nop.w
   d74ee:	bd08      	pop	{r3, pc}
	...

000d74f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d74f8:	b508      	push	{r3, lr}
	serialEventRun();
   d74fa:	f7ff ffdf 	bl	d74bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d74fe:	f7fd fc69 	bl	d4dd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7502:	4b01      	ldr	r3, [pc, #4]	; (d7508 <_post_loop+0x10>)
   d7504:	6018      	str	r0, [r3, #0]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	2003e718 	.word	0x2003e718

000d750c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d750c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d750e:	2300      	movs	r3, #0
   d7510:	9300      	str	r3, [sp, #0]
   d7512:	461a      	mov	r2, r3
   d7514:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7518:	f7fd fdc0 	bl	d509c <system_ctrl_set_result>
}
   d751c:	b003      	add	sp, #12
   d751e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7524 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7524:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7526:	8843      	ldrh	r3, [r0, #2]
   d7528:	2b0a      	cmp	r3, #10
   d752a:	d008      	beq.n	d753e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d752c:	2b50      	cmp	r3, #80	; 0x50
   d752e:	d109      	bne.n	d7544 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7530:	4b09      	ldr	r3, [pc, #36]	; (d7558 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7532:	681b      	ldr	r3, [r3, #0]
   d7534:	b13b      	cbz	r3, d7546 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7536:	b003      	add	sp, #12
   d7538:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d753c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d753e:	f7ff ffe5 	bl	d750c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7542:	e006      	b.n	d7552 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7544:	2300      	movs	r3, #0
   d7546:	9300      	str	r3, [sp, #0]
   d7548:	461a      	mov	r2, r3
   d754a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d754e:	f7fd fda5 	bl	d509c <system_ctrl_set_result>
        break;
    }
}
   d7552:	b003      	add	sp, #12
   d7554:	f85d fb04 	ldr.w	pc, [sp], #4
   d7558:	2003e714 	.word	0x2003e714

000d755c <module_user_init_hook>:

void module_user_init_hook()
{
   d755c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d755e:	f7fd fc29 	bl	d4db4 <HAL_RNG_GetRandomNumber>
   d7562:	4604      	mov	r4, r0
    srand(seed);
   d7564:	f001 f8e2 	bl	d872c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7568:	4b07      	ldr	r3, [pc, #28]	; (d7588 <module_user_init_hook+0x2c>)
   d756a:	b113      	cbz	r3, d7572 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d756c:	4620      	mov	r0, r4
   d756e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7572:	2100      	movs	r1, #0
   d7574:	4804      	ldr	r0, [pc, #16]	; (d7588 <module_user_init_hook+0x2c>)
   d7576:	f7fd fdbb 	bl	d50f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d757a:	2100      	movs	r1, #0
   d757c:	4803      	ldr	r0, [pc, #12]	; (d758c <module_user_init_hook+0x30>)
}
   d757e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7582:	f7fd bd81 	b.w	d5088 <system_ctrl_set_app_request_handler>
   d7586:	bf00      	nop
   d7588:	00000000 	.word	0x00000000
   d758c:	000d7525 	.word	0x000d7525

000d7590 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7590:	b510      	push	{r4, lr}
   d7592:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7594:	480f      	ldr	r0, [pc, #60]	; (d75d4 <pinAvailable+0x44>)
   d7596:	f7ff fcf9 	bl	d6f8c <_ZN8SPIClass9isEnabledEv>
   d759a:	b128      	cbz	r0, d75a8 <pinAvailable+0x18>
   d759c:	f1a4 030b 	sub.w	r3, r4, #11
   d75a0:	2b02      	cmp	r3, #2
   d75a2:	d801      	bhi.n	d75a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d75a4:	2000      	movs	r0, #0
   d75a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d75a8:	f000 f858 	bl	d765c <_Z19__fetch_global_Wirev>
   d75ac:	f7ff fa48 	bl	d6a40 <_ZN7TwoWire9isEnabledEv>
   d75b0:	b108      	cbz	r0, d75b6 <pinAvailable+0x26>
   d75b2:	2c01      	cmp	r4, #1
   d75b4:	d9f6      	bls.n	d75a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d75b6:	f7ff fe5b 	bl	d7270 <_Z22__fetch_global_Serial1v>
   d75ba:	f7ff fe55 	bl	d7268 <_ZN11USARTSerial9isEnabledEv>
   d75be:	b118      	cbz	r0, d75c8 <pinAvailable+0x38>
   d75c0:	f1a4 0309 	sub.w	r3, r4, #9
   d75c4:	2b01      	cmp	r3, #1
   d75c6:	d9ed      	bls.n	d75a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d75c8:	2c23      	cmp	r4, #35	; 0x23
   d75ca:	bf8c      	ite	hi
   d75cc:	2000      	movhi	r0, #0
   d75ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d75d0:	bd10      	pop	{r4, pc}
   d75d2:	bf00      	nop
   d75d4:	2003e734 	.word	0x2003e734

000d75d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d75d8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d75da:	b538      	push	{r3, r4, r5, lr}
   d75dc:	4604      	mov	r4, r0
   d75de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d75e0:	d80a      	bhi.n	d75f8 <pinMode+0x20>
   d75e2:	29ff      	cmp	r1, #255	; 0xff
   d75e4:	d008      	beq.n	d75f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d75e6:	f7ff ffd3 	bl	d7590 <pinAvailable>
   d75ea:	b128      	cbz	r0, d75f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d75ec:	4629      	mov	r1, r5
   d75ee:	4620      	mov	r0, r4
}
   d75f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d75f4:	f7fd bc06 	b.w	d4e04 <HAL_Pin_Mode>
   d75f8:	bd38      	pop	{r3, r4, r5, pc}

000d75fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d75fa:	b538      	push	{r3, r4, r5, lr}
   d75fc:	4604      	mov	r4, r0
   d75fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7600:	f7fd fc08 	bl	d4e14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7604:	28ff      	cmp	r0, #255	; 0xff
   d7606:	d010      	beq.n	d762a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7608:	2806      	cmp	r0, #6
   d760a:	d804      	bhi.n	d7616 <digitalWrite+0x1c>
   d760c:	234d      	movs	r3, #77	; 0x4d
   d760e:	fa23 f000 	lsr.w	r0, r3, r0
   d7612:	07c3      	lsls	r3, r0, #31
   d7614:	d409      	bmi.n	d762a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7616:	4620      	mov	r0, r4
   d7618:	f7ff ffba 	bl	d7590 <pinAvailable>
   d761c:	b128      	cbz	r0, d762a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d761e:	4629      	mov	r1, r5
   d7620:	4620      	mov	r0, r4
}
   d7622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7626:	f7fd bbfd 	b.w	d4e24 <HAL_GPIO_Write>
   d762a:	bd38      	pop	{r3, r4, r5, pc}

000d762c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d762c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d762e:	b510      	push	{r4, lr}
   d7630:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7632:	bf9c      	itt	ls
   d7634:	340e      	addls	r4, #14
   d7636:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7638:	4620      	mov	r0, r4
   d763a:	f7ff ffa9 	bl	d7590 <pinAvailable>
   d763e:	b150      	cbz	r0, d7656 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7640:	2103      	movs	r1, #3
   d7642:	4620      	mov	r0, r4
   d7644:	f7fd fbd6 	bl	d4df4 <HAL_Validate_Pin_Function>
   d7648:	2803      	cmp	r0, #3
   d764a:	d104      	bne.n	d7656 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d764c:	4620      	mov	r0, r4
}
   d764e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7652:	f7fd bbff 	b.w	d4e54 <HAL_ADC_Read>
}
   d7656:	2000      	movs	r0, #0
   d7658:	bd10      	pop	{r4, pc}
	...

000d765c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d765c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d765e:	4d0b      	ldr	r5, [pc, #44]	; (d768c <_Z19__fetch_global_Wirev+0x30>)
   d7660:	6829      	ldr	r1, [r5, #0]
   d7662:	f011 0401 	ands.w	r4, r1, #1
   d7666:	d10f      	bne.n	d7688 <_Z19__fetch_global_Wirev+0x2c>
   d7668:	4628      	mov	r0, r5
   d766a:	f7fc fd1a 	bl	d40a2 <__cxa_guard_acquire>
   d766e:	b158      	cbz	r0, d7688 <_Z19__fetch_global_Wirev+0x2c>
   d7670:	4621      	mov	r1, r4
   d7672:	4807      	ldr	r0, [pc, #28]	; (d7690 <_Z19__fetch_global_Wirev+0x34>)
   d7674:	f7ff f9d2 	bl	d6a1c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7678:	4628      	mov	r0, r5
   d767a:	f7fc fd17 	bl	d40ac <__cxa_guard_release>
   d767e:	4a05      	ldr	r2, [pc, #20]	; (d7694 <_Z19__fetch_global_Wirev+0x38>)
   d7680:	4905      	ldr	r1, [pc, #20]	; (d7698 <_Z19__fetch_global_Wirev+0x3c>)
   d7682:	4803      	ldr	r0, [pc, #12]	; (d7690 <_Z19__fetch_global_Wirev+0x34>)
   d7684:	f000 f82c 	bl	d76e0 <__aeabi_atexit>
	return wire;
}
   d7688:	4801      	ldr	r0, [pc, #4]	; (d7690 <_Z19__fetch_global_Wirev+0x34>)
   d768a:	bd38      	pop	{r3, r4, r5, pc}
   d768c:	2003e71c 	.word	0x2003e71c
   d7690:	2003e720 	.word	0x2003e720
   d7694:	2003e358 	.word	0x2003e358
   d7698:	000d69c5 	.word	0x000d69c5

000d769c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d769c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d769e:	4c0c      	ldr	r4, [pc, #48]	; (d76d0 <_GLOBAL__sub_I_SPI+0x34>)
   d76a0:	4e0c      	ldr	r6, [pc, #48]	; (d76d4 <_GLOBAL__sub_I_SPI+0x38>)
   d76a2:	4d0d      	ldr	r5, [pc, #52]	; (d76d8 <_GLOBAL__sub_I_SPI+0x3c>)
   d76a4:	2100      	movs	r1, #0
   d76a6:	4620      	mov	r0, r4
   d76a8:	f7ff fc5c 	bl	d6f64 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d76ae:	4c0b      	ldr	r4, [pc, #44]	; (d76dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d76b0:	4632      	mov	r2, r6
   d76b2:	4629      	mov	r1, r5
   d76b4:	f000 f814 	bl	d76e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d76b8:	2101      	movs	r1, #1
   d76ba:	4620      	mov	r0, r4
   d76bc:	f7ff fc52 	bl	d6f64 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76c0:	4632      	mov	r2, r6
   d76c2:	4629      	mov	r1, r5
   d76c4:	4620      	mov	r0, r4
   d76c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d76ca:	f000 b809 	b.w	d76e0 <__aeabi_atexit>
   d76ce:	bf00      	nop
   d76d0:	2003e734 	.word	0x2003e734
   d76d4:	2003e358 	.word	0x2003e358
   d76d8:	000d6f55 	.word	0x000d6f55
   d76dc:	2003e744 	.word	0x2003e744

000d76e0 <__aeabi_atexit>:
   d76e0:	460b      	mov	r3, r1
   d76e2:	4601      	mov	r1, r0
   d76e4:	4618      	mov	r0, r3
   d76e6:	f000 bfc7 	b.w	d8678 <__cxa_atexit>

000d76ea <_ZdlPvj>:
   d76ea:	f7fc bcd6 	b.w	d409a <_ZdlPv>

000d76ee <_ZSt25__throw_bad_function_callv>:
   d76ee:	b508      	push	{r3, lr}
   d76f0:	f7fd fd76 	bl	d51e0 <abort>

000d76f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d76f4:	4b24      	ldr	r3, [pc, #144]	; (d7788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d76f6:	681a      	ldr	r2, [r3, #0]
   d76f8:	07d0      	lsls	r0, r2, #31
   d76fa:	bf5c      	itt	pl
   d76fc:	2201      	movpl	r2, #1
   d76fe:	601a      	strpl	r2, [r3, #0]
   d7700:	4b22      	ldr	r3, [pc, #136]	; (d778c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7702:	681a      	ldr	r2, [r3, #0]
   d7704:	07d1      	lsls	r1, r2, #31
   d7706:	bf5c      	itt	pl
   d7708:	2201      	movpl	r2, #1
   d770a:	601a      	strpl	r2, [r3, #0]
   d770c:	4b20      	ldr	r3, [pc, #128]	; (d7790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d770e:	681a      	ldr	r2, [r3, #0]
   d7710:	07d2      	lsls	r2, r2, #31
   d7712:	bf5c      	itt	pl
   d7714:	2201      	movpl	r2, #1
   d7716:	601a      	strpl	r2, [r3, #0]
   d7718:	4b1e      	ldr	r3, [pc, #120]	; (d7794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d771a:	681a      	ldr	r2, [r3, #0]
   d771c:	07d0      	lsls	r0, r2, #31
   d771e:	bf5c      	itt	pl
   d7720:	2201      	movpl	r2, #1
   d7722:	601a      	strpl	r2, [r3, #0]
   d7724:	4b1c      	ldr	r3, [pc, #112]	; (d7798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7726:	681a      	ldr	r2, [r3, #0]
   d7728:	07d1      	lsls	r1, r2, #31
   d772a:	bf5c      	itt	pl
   d772c:	2201      	movpl	r2, #1
   d772e:	601a      	strpl	r2, [r3, #0]
   d7730:	4b1a      	ldr	r3, [pc, #104]	; (d779c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7732:	681a      	ldr	r2, [r3, #0]
   d7734:	07d2      	lsls	r2, r2, #31
   d7736:	bf5c      	itt	pl
   d7738:	2201      	movpl	r2, #1
   d773a:	601a      	strpl	r2, [r3, #0]
   d773c:	4b18      	ldr	r3, [pc, #96]	; (d77a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d773e:	681a      	ldr	r2, [r3, #0]
   d7740:	07d0      	lsls	r0, r2, #31
   d7742:	bf5c      	itt	pl
   d7744:	2201      	movpl	r2, #1
   d7746:	601a      	strpl	r2, [r3, #0]
   d7748:	4b16      	ldr	r3, [pc, #88]	; (d77a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d774a:	681a      	ldr	r2, [r3, #0]
   d774c:	07d1      	lsls	r1, r2, #31
   d774e:	bf5c      	itt	pl
   d7750:	2201      	movpl	r2, #1
   d7752:	601a      	strpl	r2, [r3, #0]
   d7754:	4b14      	ldr	r3, [pc, #80]	; (d77a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7756:	681a      	ldr	r2, [r3, #0]
   d7758:	07d2      	lsls	r2, r2, #31
   d775a:	bf5c      	itt	pl
   d775c:	2201      	movpl	r2, #1
   d775e:	601a      	strpl	r2, [r3, #0]
   d7760:	4b12      	ldr	r3, [pc, #72]	; (d77ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7762:	681a      	ldr	r2, [r3, #0]
   d7764:	07d0      	lsls	r0, r2, #31
   d7766:	bf5c      	itt	pl
   d7768:	2201      	movpl	r2, #1
   d776a:	601a      	strpl	r2, [r3, #0]
   d776c:	4b10      	ldr	r3, [pc, #64]	; (d77b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d776e:	681a      	ldr	r2, [r3, #0]
   d7770:	07d1      	lsls	r1, r2, #31
   d7772:	bf5c      	itt	pl
   d7774:	2201      	movpl	r2, #1
   d7776:	601a      	strpl	r2, [r3, #0]
   d7778:	4b0e      	ldr	r3, [pc, #56]	; (d77b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d777a:	681a      	ldr	r2, [r3, #0]
   d777c:	07d2      	lsls	r2, r2, #31
   d777e:	bf5c      	itt	pl
   d7780:	2201      	movpl	r2, #1
   d7782:	601a      	strpl	r2, [r3, #0]
   d7784:	4770      	bx	lr
   d7786:	bf00      	nop
   d7788:	2003e780 	.word	0x2003e780
   d778c:	2003e77c 	.word	0x2003e77c
   d7790:	2003e778 	.word	0x2003e778
   d7794:	2003e774 	.word	0x2003e774
   d7798:	2003e770 	.word	0x2003e770
   d779c:	2003e76c 	.word	0x2003e76c
   d77a0:	2003e768 	.word	0x2003e768
   d77a4:	2003e764 	.word	0x2003e764
   d77a8:	2003e760 	.word	0x2003e760
   d77ac:	2003e75c 	.word	0x2003e75c
   d77b0:	2003e758 	.word	0x2003e758
   d77b4:	2003e754 	.word	0x2003e754

000d77b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77b8:	4b18      	ldr	r3, [pc, #96]	; (d781c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77ba:	681a      	ldr	r2, [r3, #0]
   d77bc:	07d1      	lsls	r1, r2, #31
   d77be:	bf5c      	itt	pl
   d77c0:	2201      	movpl	r2, #1
   d77c2:	601a      	strpl	r2, [r3, #0]
   d77c4:	4b16      	ldr	r3, [pc, #88]	; (d7820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77c6:	681a      	ldr	r2, [r3, #0]
   d77c8:	07d2      	lsls	r2, r2, #31
   d77ca:	bf5c      	itt	pl
   d77cc:	2201      	movpl	r2, #1
   d77ce:	601a      	strpl	r2, [r3, #0]
   d77d0:	4b14      	ldr	r3, [pc, #80]	; (d7824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d77d2:	681a      	ldr	r2, [r3, #0]
   d77d4:	07d0      	lsls	r0, r2, #31
   d77d6:	bf5c      	itt	pl
   d77d8:	2201      	movpl	r2, #1
   d77da:	601a      	strpl	r2, [r3, #0]
   d77dc:	4b12      	ldr	r3, [pc, #72]	; (d7828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d77de:	681a      	ldr	r2, [r3, #0]
   d77e0:	07d1      	lsls	r1, r2, #31
   d77e2:	bf5c      	itt	pl
   d77e4:	2201      	movpl	r2, #1
   d77e6:	601a      	strpl	r2, [r3, #0]
   d77e8:	4b10      	ldr	r3, [pc, #64]	; (d782c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d77ea:	681a      	ldr	r2, [r3, #0]
   d77ec:	07d2      	lsls	r2, r2, #31
   d77ee:	bf5c      	itt	pl
   d77f0:	2201      	movpl	r2, #1
   d77f2:	601a      	strpl	r2, [r3, #0]
   d77f4:	4b0e      	ldr	r3, [pc, #56]	; (d7830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d77f6:	681a      	ldr	r2, [r3, #0]
   d77f8:	07d0      	lsls	r0, r2, #31
   d77fa:	bf5c      	itt	pl
   d77fc:	2201      	movpl	r2, #1
   d77fe:	601a      	strpl	r2, [r3, #0]
   d7800:	4b0c      	ldr	r3, [pc, #48]	; (d7834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7802:	681a      	ldr	r2, [r3, #0]
   d7804:	07d1      	lsls	r1, r2, #31
   d7806:	bf5c      	itt	pl
   d7808:	2201      	movpl	r2, #1
   d780a:	601a      	strpl	r2, [r3, #0]
   d780c:	4b0a      	ldr	r3, [pc, #40]	; (d7838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d780e:	681a      	ldr	r2, [r3, #0]
   d7810:	07d2      	lsls	r2, r2, #31
   d7812:	bf5c      	itt	pl
   d7814:	2201      	movpl	r2, #1
   d7816:	601a      	strpl	r2, [r3, #0]
   d7818:	4770      	bx	lr
   d781a:	bf00      	nop
   d781c:	2003e7a0 	.word	0x2003e7a0
   d7820:	2003e79c 	.word	0x2003e79c
   d7824:	2003e798 	.word	0x2003e798
   d7828:	2003e794 	.word	0x2003e794
   d782c:	2003e790 	.word	0x2003e790
   d7830:	2003e78c 	.word	0x2003e78c
   d7834:	2003e788 	.word	0x2003e788
   d7838:	2003e784 	.word	0x2003e784

000d783c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d783c:	4b18      	ldr	r3, [pc, #96]	; (d78a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d783e:	681a      	ldr	r2, [r3, #0]
   d7840:	07d1      	lsls	r1, r2, #31
   d7842:	bf5c      	itt	pl
   d7844:	2201      	movpl	r2, #1
   d7846:	601a      	strpl	r2, [r3, #0]
   d7848:	4b16      	ldr	r3, [pc, #88]	; (d78a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d784a:	681a      	ldr	r2, [r3, #0]
   d784c:	07d2      	lsls	r2, r2, #31
   d784e:	bf5c      	itt	pl
   d7850:	2201      	movpl	r2, #1
   d7852:	601a      	strpl	r2, [r3, #0]
   d7854:	4b14      	ldr	r3, [pc, #80]	; (d78a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7856:	681a      	ldr	r2, [r3, #0]
   d7858:	07d0      	lsls	r0, r2, #31
   d785a:	bf5c      	itt	pl
   d785c:	2201      	movpl	r2, #1
   d785e:	601a      	strpl	r2, [r3, #0]
   d7860:	4b12      	ldr	r3, [pc, #72]	; (d78ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7862:	681a      	ldr	r2, [r3, #0]
   d7864:	07d1      	lsls	r1, r2, #31
   d7866:	bf5c      	itt	pl
   d7868:	2201      	movpl	r2, #1
   d786a:	601a      	strpl	r2, [r3, #0]
   d786c:	4b10      	ldr	r3, [pc, #64]	; (d78b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d786e:	681a      	ldr	r2, [r3, #0]
   d7870:	07d2      	lsls	r2, r2, #31
   d7872:	bf5c      	itt	pl
   d7874:	2201      	movpl	r2, #1
   d7876:	601a      	strpl	r2, [r3, #0]
   d7878:	4b0e      	ldr	r3, [pc, #56]	; (d78b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d787a:	681a      	ldr	r2, [r3, #0]
   d787c:	07d0      	lsls	r0, r2, #31
   d787e:	bf5c      	itt	pl
   d7880:	2201      	movpl	r2, #1
   d7882:	601a      	strpl	r2, [r3, #0]
   d7884:	4b0c      	ldr	r3, [pc, #48]	; (d78b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7886:	681a      	ldr	r2, [r3, #0]
   d7888:	07d1      	lsls	r1, r2, #31
   d788a:	bf5c      	itt	pl
   d788c:	2201      	movpl	r2, #1
   d788e:	601a      	strpl	r2, [r3, #0]
   d7890:	4b0a      	ldr	r3, [pc, #40]	; (d78bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7892:	681a      	ldr	r2, [r3, #0]
   d7894:	07d2      	lsls	r2, r2, #31
   d7896:	bf5c      	itt	pl
   d7898:	2201      	movpl	r2, #1
   d789a:	601a      	strpl	r2, [r3, #0]
   d789c:	4770      	bx	lr
   d789e:	bf00      	nop
   d78a0:	2003e7c0 	.word	0x2003e7c0
   d78a4:	2003e7bc 	.word	0x2003e7bc
   d78a8:	2003e7b8 	.word	0x2003e7b8
   d78ac:	2003e7b4 	.word	0x2003e7b4
   d78b0:	2003e7b0 	.word	0x2003e7b0
   d78b4:	2003e7ac 	.word	0x2003e7ac
   d78b8:	2003e7a8 	.word	0x2003e7a8
   d78bc:	2003e7a4 	.word	0x2003e7a4

000d78c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d78c0:	4b24      	ldr	r3, [pc, #144]	; (d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d78c2:	681a      	ldr	r2, [r3, #0]
   d78c4:	07d0      	lsls	r0, r2, #31
   d78c6:	bf5c      	itt	pl
   d78c8:	2201      	movpl	r2, #1
   d78ca:	601a      	strpl	r2, [r3, #0]
   d78cc:	4b22      	ldr	r3, [pc, #136]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d78ce:	681a      	ldr	r2, [r3, #0]
   d78d0:	07d1      	lsls	r1, r2, #31
   d78d2:	bf5c      	itt	pl
   d78d4:	2201      	movpl	r2, #1
   d78d6:	601a      	strpl	r2, [r3, #0]
   d78d8:	4b20      	ldr	r3, [pc, #128]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d78da:	681a      	ldr	r2, [r3, #0]
   d78dc:	07d2      	lsls	r2, r2, #31
   d78de:	bf5c      	itt	pl
   d78e0:	2201      	movpl	r2, #1
   d78e2:	601a      	strpl	r2, [r3, #0]
   d78e4:	4b1e      	ldr	r3, [pc, #120]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d78e6:	681a      	ldr	r2, [r3, #0]
   d78e8:	07d0      	lsls	r0, r2, #31
   d78ea:	bf5c      	itt	pl
   d78ec:	2201      	movpl	r2, #1
   d78ee:	601a      	strpl	r2, [r3, #0]
   d78f0:	4b1c      	ldr	r3, [pc, #112]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d78f2:	681a      	ldr	r2, [r3, #0]
   d78f4:	07d1      	lsls	r1, r2, #31
   d78f6:	bf5c      	itt	pl
   d78f8:	2201      	movpl	r2, #1
   d78fa:	601a      	strpl	r2, [r3, #0]
   d78fc:	4b1a      	ldr	r3, [pc, #104]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d2      	lsls	r2, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b18      	ldr	r3, [pc, #96]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d0      	lsls	r0, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b16      	ldr	r3, [pc, #88]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d1      	lsls	r1, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b14      	ldr	r3, [pc, #80]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d2      	lsls	r2, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4b12      	ldr	r3, [pc, #72]	; (d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d0      	lsls	r0, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b10      	ldr	r3, [pc, #64]	; (d797c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d1      	lsls	r1, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4b0e      	ldr	r3, [pc, #56]	; (d7980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7946:	681a      	ldr	r2, [r3, #0]
   d7948:	07d2      	lsls	r2, r2, #31
   d794a:	bf5c      	itt	pl
   d794c:	2201      	movpl	r2, #1
   d794e:	601a      	strpl	r2, [r3, #0]
   d7950:	4770      	bx	lr
   d7952:	bf00      	nop
   d7954:	2003e7f0 	.word	0x2003e7f0
   d7958:	2003e7ec 	.word	0x2003e7ec
   d795c:	2003e7e8 	.word	0x2003e7e8
   d7960:	2003e7e4 	.word	0x2003e7e4
   d7964:	2003e7e0 	.word	0x2003e7e0
   d7968:	2003e7dc 	.word	0x2003e7dc
   d796c:	2003e7d8 	.word	0x2003e7d8
   d7970:	2003e7d4 	.word	0x2003e7d4
   d7974:	2003e7d0 	.word	0x2003e7d0
   d7978:	2003e7cc 	.word	0x2003e7cc
   d797c:	2003e7c8 	.word	0x2003e7c8
   d7980:	2003e7c4 	.word	0x2003e7c4

000d7984 <__aeabi_drsub>:
   d7984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7988:	e002      	b.n	d7990 <__adddf3>
   d798a:	bf00      	nop

000d798c <__aeabi_dsub>:
   d798c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7990 <__adddf3>:
   d7990:	b530      	push	{r4, r5, lr}
   d7992:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7996:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d799a:	ea94 0f05 	teq	r4, r5
   d799e:	bf08      	it	eq
   d79a0:	ea90 0f02 	teqeq	r0, r2
   d79a4:	bf1f      	itttt	ne
   d79a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d79aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d79ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d79b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d79b6:	f000 80e2 	beq.w	d7b7e <__adddf3+0x1ee>
   d79ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d79be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d79c2:	bfb8      	it	lt
   d79c4:	426d      	neglt	r5, r5
   d79c6:	dd0c      	ble.n	d79e2 <__adddf3+0x52>
   d79c8:	442c      	add	r4, r5
   d79ca:	ea80 0202 	eor.w	r2, r0, r2
   d79ce:	ea81 0303 	eor.w	r3, r1, r3
   d79d2:	ea82 0000 	eor.w	r0, r2, r0
   d79d6:	ea83 0101 	eor.w	r1, r3, r1
   d79da:	ea80 0202 	eor.w	r2, r0, r2
   d79de:	ea81 0303 	eor.w	r3, r1, r3
   d79e2:	2d36      	cmp	r5, #54	; 0x36
   d79e4:	bf88      	it	hi
   d79e6:	bd30      	pophi	{r4, r5, pc}
   d79e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d79ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d79f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d79f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d79f8:	d002      	beq.n	d7a00 <__adddf3+0x70>
   d79fa:	4240      	negs	r0, r0
   d79fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a0c:	d002      	beq.n	d7a14 <__adddf3+0x84>
   d7a0e:	4252      	negs	r2, r2
   d7a10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a14:	ea94 0f05 	teq	r4, r5
   d7a18:	f000 80a7 	beq.w	d7b6a <__adddf3+0x1da>
   d7a1c:	f1a4 0401 	sub.w	r4, r4, #1
   d7a20:	f1d5 0e20 	rsbs	lr, r5, #32
   d7a24:	db0d      	blt.n	d7a42 <__adddf3+0xb2>
   d7a26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7a2a:	fa22 f205 	lsr.w	r2, r2, r5
   d7a2e:	1880      	adds	r0, r0, r2
   d7a30:	f141 0100 	adc.w	r1, r1, #0
   d7a34:	fa03 f20e 	lsl.w	r2, r3, lr
   d7a38:	1880      	adds	r0, r0, r2
   d7a3a:	fa43 f305 	asr.w	r3, r3, r5
   d7a3e:	4159      	adcs	r1, r3
   d7a40:	e00e      	b.n	d7a60 <__adddf3+0xd0>
   d7a42:	f1a5 0520 	sub.w	r5, r5, #32
   d7a46:	f10e 0e20 	add.w	lr, lr, #32
   d7a4a:	2a01      	cmp	r2, #1
   d7a4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7a50:	bf28      	it	cs
   d7a52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7a56:	fa43 f305 	asr.w	r3, r3, r5
   d7a5a:	18c0      	adds	r0, r0, r3
   d7a5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7a60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a64:	d507      	bpl.n	d7a76 <__adddf3+0xe6>
   d7a66:	f04f 0e00 	mov.w	lr, #0
   d7a6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7a6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7a72:	eb6e 0101 	sbc.w	r1, lr, r1
   d7a76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7a7a:	d31b      	bcc.n	d7ab4 <__adddf3+0x124>
   d7a7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7a80:	d30c      	bcc.n	d7a9c <__adddf3+0x10c>
   d7a82:	0849      	lsrs	r1, r1, #1
   d7a84:	ea5f 0030 	movs.w	r0, r0, rrx
   d7a88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7a8c:	f104 0401 	add.w	r4, r4, #1
   d7a90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7a94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7a98:	f080 809a 	bcs.w	d7bd0 <__adddf3+0x240>
   d7a9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7aa0:	bf08      	it	eq
   d7aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7aa6:	f150 0000 	adcs.w	r0, r0, #0
   d7aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7aae:	ea41 0105 	orr.w	r1, r1, r5
   d7ab2:	bd30      	pop	{r4, r5, pc}
   d7ab4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ab8:	4140      	adcs	r0, r0
   d7aba:	eb41 0101 	adc.w	r1, r1, r1
   d7abe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ac2:	f1a4 0401 	sub.w	r4, r4, #1
   d7ac6:	d1e9      	bne.n	d7a9c <__adddf3+0x10c>
   d7ac8:	f091 0f00 	teq	r1, #0
   d7acc:	bf04      	itt	eq
   d7ace:	4601      	moveq	r1, r0
   d7ad0:	2000      	moveq	r0, #0
   d7ad2:	fab1 f381 	clz	r3, r1
   d7ad6:	bf08      	it	eq
   d7ad8:	3320      	addeq	r3, #32
   d7ada:	f1a3 030b 	sub.w	r3, r3, #11
   d7ade:	f1b3 0220 	subs.w	r2, r3, #32
   d7ae2:	da0c      	bge.n	d7afe <__adddf3+0x16e>
   d7ae4:	320c      	adds	r2, #12
   d7ae6:	dd08      	ble.n	d7afa <__adddf3+0x16a>
   d7ae8:	f102 0c14 	add.w	ip, r2, #20
   d7aec:	f1c2 020c 	rsb	r2, r2, #12
   d7af0:	fa01 f00c 	lsl.w	r0, r1, ip
   d7af4:	fa21 f102 	lsr.w	r1, r1, r2
   d7af8:	e00c      	b.n	d7b14 <__adddf3+0x184>
   d7afa:	f102 0214 	add.w	r2, r2, #20
   d7afe:	bfd8      	it	le
   d7b00:	f1c2 0c20 	rsble	ip, r2, #32
   d7b04:	fa01 f102 	lsl.w	r1, r1, r2
   d7b08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b0c:	bfdc      	itt	le
   d7b0e:	ea41 010c 	orrle.w	r1, r1, ip
   d7b12:	4090      	lslle	r0, r2
   d7b14:	1ae4      	subs	r4, r4, r3
   d7b16:	bfa2      	ittt	ge
   d7b18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b1c:	4329      	orrge	r1, r5
   d7b1e:	bd30      	popge	{r4, r5, pc}
   d7b20:	ea6f 0404 	mvn.w	r4, r4
   d7b24:	3c1f      	subs	r4, #31
   d7b26:	da1c      	bge.n	d7b62 <__adddf3+0x1d2>
   d7b28:	340c      	adds	r4, #12
   d7b2a:	dc0e      	bgt.n	d7b4a <__adddf3+0x1ba>
   d7b2c:	f104 0414 	add.w	r4, r4, #20
   d7b30:	f1c4 0220 	rsb	r2, r4, #32
   d7b34:	fa20 f004 	lsr.w	r0, r0, r4
   d7b38:	fa01 f302 	lsl.w	r3, r1, r2
   d7b3c:	ea40 0003 	orr.w	r0, r0, r3
   d7b40:	fa21 f304 	lsr.w	r3, r1, r4
   d7b44:	ea45 0103 	orr.w	r1, r5, r3
   d7b48:	bd30      	pop	{r4, r5, pc}
   d7b4a:	f1c4 040c 	rsb	r4, r4, #12
   d7b4e:	f1c4 0220 	rsb	r2, r4, #32
   d7b52:	fa20 f002 	lsr.w	r0, r0, r2
   d7b56:	fa01 f304 	lsl.w	r3, r1, r4
   d7b5a:	ea40 0003 	orr.w	r0, r0, r3
   d7b5e:	4629      	mov	r1, r5
   d7b60:	bd30      	pop	{r4, r5, pc}
   d7b62:	fa21 f004 	lsr.w	r0, r1, r4
   d7b66:	4629      	mov	r1, r5
   d7b68:	bd30      	pop	{r4, r5, pc}
   d7b6a:	f094 0f00 	teq	r4, #0
   d7b6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7b72:	bf06      	itte	eq
   d7b74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7b78:	3401      	addeq	r4, #1
   d7b7a:	3d01      	subne	r5, #1
   d7b7c:	e74e      	b.n	d7a1c <__adddf3+0x8c>
   d7b7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b82:	bf18      	it	ne
   d7b84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b88:	d029      	beq.n	d7bde <__adddf3+0x24e>
   d7b8a:	ea94 0f05 	teq	r4, r5
   d7b8e:	bf08      	it	eq
   d7b90:	ea90 0f02 	teqeq	r0, r2
   d7b94:	d005      	beq.n	d7ba2 <__adddf3+0x212>
   d7b96:	ea54 0c00 	orrs.w	ip, r4, r0
   d7b9a:	bf04      	itt	eq
   d7b9c:	4619      	moveq	r1, r3
   d7b9e:	4610      	moveq	r0, r2
   d7ba0:	bd30      	pop	{r4, r5, pc}
   d7ba2:	ea91 0f03 	teq	r1, r3
   d7ba6:	bf1e      	ittt	ne
   d7ba8:	2100      	movne	r1, #0
   d7baa:	2000      	movne	r0, #0
   d7bac:	bd30      	popne	{r4, r5, pc}
   d7bae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7bb2:	d105      	bne.n	d7bc0 <__adddf3+0x230>
   d7bb4:	0040      	lsls	r0, r0, #1
   d7bb6:	4149      	adcs	r1, r1
   d7bb8:	bf28      	it	cs
   d7bba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7bbe:	bd30      	pop	{r4, r5, pc}
   d7bc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7bc4:	bf3c      	itt	cc
   d7bc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7bca:	bd30      	popcc	{r4, r5, pc}
   d7bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bd8:	f04f 0000 	mov.w	r0, #0
   d7bdc:	bd30      	pop	{r4, r5, pc}
   d7bde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7be2:	bf1a      	itte	ne
   d7be4:	4619      	movne	r1, r3
   d7be6:	4610      	movne	r0, r2
   d7be8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7bec:	bf1c      	itt	ne
   d7bee:	460b      	movne	r3, r1
   d7bf0:	4602      	movne	r2, r0
   d7bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7bf6:	bf06      	itte	eq
   d7bf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7bfc:	ea91 0f03 	teqeq	r1, r3
   d7c00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7c04:	bd30      	pop	{r4, r5, pc}
   d7c06:	bf00      	nop

000d7c08 <__aeabi_ui2d>:
   d7c08:	f090 0f00 	teq	r0, #0
   d7c0c:	bf04      	itt	eq
   d7c0e:	2100      	moveq	r1, #0
   d7c10:	4770      	bxeq	lr
   d7c12:	b530      	push	{r4, r5, lr}
   d7c14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c1c:	f04f 0500 	mov.w	r5, #0
   d7c20:	f04f 0100 	mov.w	r1, #0
   d7c24:	e750      	b.n	d7ac8 <__adddf3+0x138>
   d7c26:	bf00      	nop

000d7c28 <__aeabi_i2d>:
   d7c28:	f090 0f00 	teq	r0, #0
   d7c2c:	bf04      	itt	eq
   d7c2e:	2100      	moveq	r1, #0
   d7c30:	4770      	bxeq	lr
   d7c32:	b530      	push	{r4, r5, lr}
   d7c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7c40:	bf48      	it	mi
   d7c42:	4240      	negmi	r0, r0
   d7c44:	f04f 0100 	mov.w	r1, #0
   d7c48:	e73e      	b.n	d7ac8 <__adddf3+0x138>
   d7c4a:	bf00      	nop

000d7c4c <__aeabi_f2d>:
   d7c4c:	0042      	lsls	r2, r0, #1
   d7c4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7c52:	ea4f 0131 	mov.w	r1, r1, rrx
   d7c56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7c5a:	bf1f      	itttt	ne
   d7c5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7c60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7c68:	4770      	bxne	lr
   d7c6a:	f092 0f00 	teq	r2, #0
   d7c6e:	bf14      	ite	ne
   d7c70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c74:	4770      	bxeq	lr
   d7c76:	b530      	push	{r4, r5, lr}
   d7c78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7c84:	e720      	b.n	d7ac8 <__adddf3+0x138>
   d7c86:	bf00      	nop

000d7c88 <__aeabi_ul2d>:
   d7c88:	ea50 0201 	orrs.w	r2, r0, r1
   d7c8c:	bf08      	it	eq
   d7c8e:	4770      	bxeq	lr
   d7c90:	b530      	push	{r4, r5, lr}
   d7c92:	f04f 0500 	mov.w	r5, #0
   d7c96:	e00a      	b.n	d7cae <__aeabi_l2d+0x16>

000d7c98 <__aeabi_l2d>:
   d7c98:	ea50 0201 	orrs.w	r2, r0, r1
   d7c9c:	bf08      	it	eq
   d7c9e:	4770      	bxeq	lr
   d7ca0:	b530      	push	{r4, r5, lr}
   d7ca2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7ca6:	d502      	bpl.n	d7cae <__aeabi_l2d+0x16>
   d7ca8:	4240      	negs	r0, r0
   d7caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7cae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7cb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7cb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7cba:	f43f aedc 	beq.w	d7a76 <__adddf3+0xe6>
   d7cbe:	f04f 0203 	mov.w	r2, #3
   d7cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cc6:	bf18      	it	ne
   d7cc8:	3203      	addne	r2, #3
   d7cca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cce:	bf18      	it	ne
   d7cd0:	3203      	addne	r2, #3
   d7cd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7cd6:	f1c2 0320 	rsb	r3, r2, #32
   d7cda:	fa00 fc03 	lsl.w	ip, r0, r3
   d7cde:	fa20 f002 	lsr.w	r0, r0, r2
   d7ce2:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ce6:	ea40 000e 	orr.w	r0, r0, lr
   d7cea:	fa21 f102 	lsr.w	r1, r1, r2
   d7cee:	4414      	add	r4, r2
   d7cf0:	e6c1      	b.n	d7a76 <__adddf3+0xe6>
   d7cf2:	bf00      	nop

000d7cf4 <__aeabi_dmul>:
   d7cf4:	b570      	push	{r4, r5, r6, lr}
   d7cf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7cfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7cfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7d02:	bf1d      	ittte	ne
   d7d04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7d08:	ea94 0f0c 	teqne	r4, ip
   d7d0c:	ea95 0f0c 	teqne	r5, ip
   d7d10:	f000 f8de 	bleq	d7ed0 <__aeabi_dmul+0x1dc>
   d7d14:	442c      	add	r4, r5
   d7d16:	ea81 0603 	eor.w	r6, r1, r3
   d7d1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7d1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7d22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7d26:	bf18      	it	ne
   d7d28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7d34:	d038      	beq.n	d7da8 <__aeabi_dmul+0xb4>
   d7d36:	fba0 ce02 	umull	ip, lr, r0, r2
   d7d3a:	f04f 0500 	mov.w	r5, #0
   d7d3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7d42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7d46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7d4a:	f04f 0600 	mov.w	r6, #0
   d7d4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7d52:	f09c 0f00 	teq	ip, #0
   d7d56:	bf18      	it	ne
   d7d58:	f04e 0e01 	orrne.w	lr, lr, #1
   d7d5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7d60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7d68:	d204      	bcs.n	d7d74 <__aeabi_dmul+0x80>
   d7d6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7d6e:	416d      	adcs	r5, r5
   d7d70:	eb46 0606 	adc.w	r6, r6, r6
   d7d74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7d78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7d7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7d80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7d84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7d88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7d8c:	bf88      	it	hi
   d7d8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d92:	d81e      	bhi.n	d7dd2 <__aeabi_dmul+0xde>
   d7d94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7d98:	bf08      	it	eq
   d7d9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7d9e:	f150 0000 	adcs.w	r0, r0, #0
   d7da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7da6:	bd70      	pop	{r4, r5, r6, pc}
   d7da8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7dac:	ea46 0101 	orr.w	r1, r6, r1
   d7db0:	ea40 0002 	orr.w	r0, r0, r2
   d7db4:	ea81 0103 	eor.w	r1, r1, r3
   d7db8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7dbc:	bfc2      	ittt	gt
   d7dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7dc6:	bd70      	popgt	{r4, r5, r6, pc}
   d7dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7dcc:	f04f 0e00 	mov.w	lr, #0
   d7dd0:	3c01      	subs	r4, #1
   d7dd2:	f300 80ab 	bgt.w	d7f2c <__aeabi_dmul+0x238>
   d7dd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7dda:	bfde      	ittt	le
   d7ddc:	2000      	movle	r0, #0
   d7dde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7de2:	bd70      	pople	{r4, r5, r6, pc}
   d7de4:	f1c4 0400 	rsb	r4, r4, #0
   d7de8:	3c20      	subs	r4, #32
   d7dea:	da35      	bge.n	d7e58 <__aeabi_dmul+0x164>
   d7dec:	340c      	adds	r4, #12
   d7dee:	dc1b      	bgt.n	d7e28 <__aeabi_dmul+0x134>
   d7df0:	f104 0414 	add.w	r4, r4, #20
   d7df4:	f1c4 0520 	rsb	r5, r4, #32
   d7df8:	fa00 f305 	lsl.w	r3, r0, r5
   d7dfc:	fa20 f004 	lsr.w	r0, r0, r4
   d7e00:	fa01 f205 	lsl.w	r2, r1, r5
   d7e04:	ea40 0002 	orr.w	r0, r0, r2
   d7e08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e14:	fa21 f604 	lsr.w	r6, r1, r4
   d7e18:	eb42 0106 	adc.w	r1, r2, r6
   d7e1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e20:	bf08      	it	eq
   d7e22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e26:	bd70      	pop	{r4, r5, r6, pc}
   d7e28:	f1c4 040c 	rsb	r4, r4, #12
   d7e2c:	f1c4 0520 	rsb	r5, r4, #32
   d7e30:	fa00 f304 	lsl.w	r3, r0, r4
   d7e34:	fa20 f005 	lsr.w	r0, r0, r5
   d7e38:	fa01 f204 	lsl.w	r2, r1, r4
   d7e3c:	ea40 0002 	orr.w	r0, r0, r2
   d7e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e48:	f141 0100 	adc.w	r1, r1, #0
   d7e4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e50:	bf08      	it	eq
   d7e52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e56:	bd70      	pop	{r4, r5, r6, pc}
   d7e58:	f1c4 0520 	rsb	r5, r4, #32
   d7e5c:	fa00 f205 	lsl.w	r2, r0, r5
   d7e60:	ea4e 0e02 	orr.w	lr, lr, r2
   d7e64:	fa20 f304 	lsr.w	r3, r0, r4
   d7e68:	fa01 f205 	lsl.w	r2, r1, r5
   d7e6c:	ea43 0302 	orr.w	r3, r3, r2
   d7e70:	fa21 f004 	lsr.w	r0, r1, r4
   d7e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e78:	fa21 f204 	lsr.w	r2, r1, r4
   d7e7c:	ea20 0002 	bic.w	r0, r0, r2
   d7e80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7e84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e88:	bf08      	it	eq
   d7e8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e8e:	bd70      	pop	{r4, r5, r6, pc}
   d7e90:	f094 0f00 	teq	r4, #0
   d7e94:	d10f      	bne.n	d7eb6 <__aeabi_dmul+0x1c2>
   d7e96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7e9a:	0040      	lsls	r0, r0, #1
   d7e9c:	eb41 0101 	adc.w	r1, r1, r1
   d7ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ea4:	bf08      	it	eq
   d7ea6:	3c01      	subeq	r4, #1
   d7ea8:	d0f7      	beq.n	d7e9a <__aeabi_dmul+0x1a6>
   d7eaa:	ea41 0106 	orr.w	r1, r1, r6
   d7eae:	f095 0f00 	teq	r5, #0
   d7eb2:	bf18      	it	ne
   d7eb4:	4770      	bxne	lr
   d7eb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7eba:	0052      	lsls	r2, r2, #1
   d7ebc:	eb43 0303 	adc.w	r3, r3, r3
   d7ec0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ec4:	bf08      	it	eq
   d7ec6:	3d01      	subeq	r5, #1
   d7ec8:	d0f7      	beq.n	d7eba <__aeabi_dmul+0x1c6>
   d7eca:	ea43 0306 	orr.w	r3, r3, r6
   d7ece:	4770      	bx	lr
   d7ed0:	ea94 0f0c 	teq	r4, ip
   d7ed4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ed8:	bf18      	it	ne
   d7eda:	ea95 0f0c 	teqne	r5, ip
   d7ede:	d00c      	beq.n	d7efa <__aeabi_dmul+0x206>
   d7ee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ee4:	bf18      	it	ne
   d7ee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7eea:	d1d1      	bne.n	d7e90 <__aeabi_dmul+0x19c>
   d7eec:	ea81 0103 	eor.w	r1, r1, r3
   d7ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ef4:	f04f 0000 	mov.w	r0, #0
   d7ef8:	bd70      	pop	{r4, r5, r6, pc}
   d7efa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7efe:	bf06      	itte	eq
   d7f00:	4610      	moveq	r0, r2
   d7f02:	4619      	moveq	r1, r3
   d7f04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f08:	d019      	beq.n	d7f3e <__aeabi_dmul+0x24a>
   d7f0a:	ea94 0f0c 	teq	r4, ip
   d7f0e:	d102      	bne.n	d7f16 <__aeabi_dmul+0x222>
   d7f10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f14:	d113      	bne.n	d7f3e <__aeabi_dmul+0x24a>
   d7f16:	ea95 0f0c 	teq	r5, ip
   d7f1a:	d105      	bne.n	d7f28 <__aeabi_dmul+0x234>
   d7f1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7f20:	bf1c      	itt	ne
   d7f22:	4610      	movne	r0, r2
   d7f24:	4619      	movne	r1, r3
   d7f26:	d10a      	bne.n	d7f3e <__aeabi_dmul+0x24a>
   d7f28:	ea81 0103 	eor.w	r1, r1, r3
   d7f2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f38:	f04f 0000 	mov.w	r0, #0
   d7f3c:	bd70      	pop	{r4, r5, r6, pc}
   d7f3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7f46:	bd70      	pop	{r4, r5, r6, pc}

000d7f48 <__aeabi_ddiv>:
   d7f48:	b570      	push	{r4, r5, r6, lr}
   d7f4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f56:	bf1d      	ittte	ne
   d7f58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f5c:	ea94 0f0c 	teqne	r4, ip
   d7f60:	ea95 0f0c 	teqne	r5, ip
   d7f64:	f000 f8a7 	bleq	d80b6 <__aeabi_ddiv+0x16e>
   d7f68:	eba4 0405 	sub.w	r4, r4, r5
   d7f6c:	ea81 0e03 	eor.w	lr, r1, r3
   d7f70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f78:	f000 8088 	beq.w	d808c <__aeabi_ddiv+0x144>
   d7f7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7f84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7f88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7f8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7f90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7f94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7f98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7f9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7fa0:	429d      	cmp	r5, r3
   d7fa2:	bf08      	it	eq
   d7fa4:	4296      	cmpeq	r6, r2
   d7fa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7faa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7fae:	d202      	bcs.n	d7fb6 <__aeabi_ddiv+0x6e>
   d7fb0:	085b      	lsrs	r3, r3, #1
   d7fb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fb6:	1ab6      	subs	r6, r6, r2
   d7fb8:	eb65 0503 	sbc.w	r5, r5, r3
   d7fbc:	085b      	lsrs	r3, r3, #1
   d7fbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7fc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7fca:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fd2:	bf22      	ittt	cs
   d7fd4:	1ab6      	subcs	r6, r6, r2
   d7fd6:	4675      	movcs	r5, lr
   d7fd8:	ea40 000c 	orrcs.w	r0, r0, ip
   d7fdc:	085b      	lsrs	r3, r3, #1
   d7fde:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fe2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fea:	bf22      	ittt	cs
   d7fec:	1ab6      	subcs	r6, r6, r2
   d7fee:	4675      	movcs	r5, lr
   d7ff0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ff4:	085b      	lsrs	r3, r3, #1
   d7ff6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ffa:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ffe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8002:	bf22      	ittt	cs
   d8004:	1ab6      	subcs	r6, r6, r2
   d8006:	4675      	movcs	r5, lr
   d8008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d800c:	085b      	lsrs	r3, r3, #1
   d800e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8012:	ebb6 0e02 	subs.w	lr, r6, r2
   d8016:	eb75 0e03 	sbcs.w	lr, r5, r3
   d801a:	bf22      	ittt	cs
   d801c:	1ab6      	subcs	r6, r6, r2
   d801e:	4675      	movcs	r5, lr
   d8020:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8024:	ea55 0e06 	orrs.w	lr, r5, r6
   d8028:	d018      	beq.n	d805c <__aeabi_ddiv+0x114>
   d802a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d802e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8032:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8036:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d803a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d803e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8042:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8046:	d1c0      	bne.n	d7fca <__aeabi_ddiv+0x82>
   d8048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d804c:	d10b      	bne.n	d8066 <__aeabi_ddiv+0x11e>
   d804e:	ea41 0100 	orr.w	r1, r1, r0
   d8052:	f04f 0000 	mov.w	r0, #0
   d8056:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d805a:	e7b6      	b.n	d7fca <__aeabi_ddiv+0x82>
   d805c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8060:	bf04      	itt	eq
   d8062:	4301      	orreq	r1, r0
   d8064:	2000      	moveq	r0, #0
   d8066:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d806a:	bf88      	it	hi
   d806c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8070:	f63f aeaf 	bhi.w	d7dd2 <__aeabi_dmul+0xde>
   d8074:	ebb5 0c03 	subs.w	ip, r5, r3
   d8078:	bf04      	itt	eq
   d807a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d807e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8082:	f150 0000 	adcs.w	r0, r0, #0
   d8086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d808a:	bd70      	pop	{r4, r5, r6, pc}
   d808c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8090:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8094:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8098:	bfc2      	ittt	gt
   d809a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d809e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d80a2:	bd70      	popgt	{r4, r5, r6, pc}
   d80a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80a8:	f04f 0e00 	mov.w	lr, #0
   d80ac:	3c01      	subs	r4, #1
   d80ae:	e690      	b.n	d7dd2 <__aeabi_dmul+0xde>
   d80b0:	ea45 0e06 	orr.w	lr, r5, r6
   d80b4:	e68d      	b.n	d7dd2 <__aeabi_dmul+0xde>
   d80b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80ba:	ea94 0f0c 	teq	r4, ip
   d80be:	bf08      	it	eq
   d80c0:	ea95 0f0c 	teqeq	r5, ip
   d80c4:	f43f af3b 	beq.w	d7f3e <__aeabi_dmul+0x24a>
   d80c8:	ea94 0f0c 	teq	r4, ip
   d80cc:	d10a      	bne.n	d80e4 <__aeabi_ddiv+0x19c>
   d80ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d80d2:	f47f af34 	bne.w	d7f3e <__aeabi_dmul+0x24a>
   d80d6:	ea95 0f0c 	teq	r5, ip
   d80da:	f47f af25 	bne.w	d7f28 <__aeabi_dmul+0x234>
   d80de:	4610      	mov	r0, r2
   d80e0:	4619      	mov	r1, r3
   d80e2:	e72c      	b.n	d7f3e <__aeabi_dmul+0x24a>
   d80e4:	ea95 0f0c 	teq	r5, ip
   d80e8:	d106      	bne.n	d80f8 <__aeabi_ddiv+0x1b0>
   d80ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d80ee:	f43f aefd 	beq.w	d7eec <__aeabi_dmul+0x1f8>
   d80f2:	4610      	mov	r0, r2
   d80f4:	4619      	mov	r1, r3
   d80f6:	e722      	b.n	d7f3e <__aeabi_dmul+0x24a>
   d80f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80fc:	bf18      	it	ne
   d80fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8102:	f47f aec5 	bne.w	d7e90 <__aeabi_dmul+0x19c>
   d8106:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d810a:	f47f af0d 	bne.w	d7f28 <__aeabi_dmul+0x234>
   d810e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8112:	f47f aeeb 	bne.w	d7eec <__aeabi_dmul+0x1f8>
   d8116:	e712      	b.n	d7f3e <__aeabi_dmul+0x24a>

000d8118 <__gedf2>:
   d8118:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d811c:	e006      	b.n	d812c <__cmpdf2+0x4>
   d811e:	bf00      	nop

000d8120 <__ledf2>:
   d8120:	f04f 0c01 	mov.w	ip, #1
   d8124:	e002      	b.n	d812c <__cmpdf2+0x4>
   d8126:	bf00      	nop

000d8128 <__cmpdf2>:
   d8128:	f04f 0c01 	mov.w	ip, #1
   d812c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8130:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d813c:	bf18      	it	ne
   d813e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8142:	d01b      	beq.n	d817c <__cmpdf2+0x54>
   d8144:	b001      	add	sp, #4
   d8146:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d814a:	bf0c      	ite	eq
   d814c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8150:	ea91 0f03 	teqne	r1, r3
   d8154:	bf02      	ittt	eq
   d8156:	ea90 0f02 	teqeq	r0, r2
   d815a:	2000      	moveq	r0, #0
   d815c:	4770      	bxeq	lr
   d815e:	f110 0f00 	cmn.w	r0, #0
   d8162:	ea91 0f03 	teq	r1, r3
   d8166:	bf58      	it	pl
   d8168:	4299      	cmppl	r1, r3
   d816a:	bf08      	it	eq
   d816c:	4290      	cmpeq	r0, r2
   d816e:	bf2c      	ite	cs
   d8170:	17d8      	asrcs	r0, r3, #31
   d8172:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8176:	f040 0001 	orr.w	r0, r0, #1
   d817a:	4770      	bx	lr
   d817c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8184:	d102      	bne.n	d818c <__cmpdf2+0x64>
   d8186:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d818a:	d107      	bne.n	d819c <__cmpdf2+0x74>
   d818c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8190:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8194:	d1d6      	bne.n	d8144 <__cmpdf2+0x1c>
   d8196:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d819a:	d0d3      	beq.n	d8144 <__cmpdf2+0x1c>
   d819c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d81a0:	4770      	bx	lr
   d81a2:	bf00      	nop

000d81a4 <__aeabi_cdrcmple>:
   d81a4:	4684      	mov	ip, r0
   d81a6:	4610      	mov	r0, r2
   d81a8:	4662      	mov	r2, ip
   d81aa:	468c      	mov	ip, r1
   d81ac:	4619      	mov	r1, r3
   d81ae:	4663      	mov	r3, ip
   d81b0:	e000      	b.n	d81b4 <__aeabi_cdcmpeq>
   d81b2:	bf00      	nop

000d81b4 <__aeabi_cdcmpeq>:
   d81b4:	b501      	push	{r0, lr}
   d81b6:	f7ff ffb7 	bl	d8128 <__cmpdf2>
   d81ba:	2800      	cmp	r0, #0
   d81bc:	bf48      	it	mi
   d81be:	f110 0f00 	cmnmi.w	r0, #0
   d81c2:	bd01      	pop	{r0, pc}

000d81c4 <__aeabi_dcmpeq>:
   d81c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81c8:	f7ff fff4 	bl	d81b4 <__aeabi_cdcmpeq>
   d81cc:	bf0c      	ite	eq
   d81ce:	2001      	moveq	r0, #1
   d81d0:	2000      	movne	r0, #0
   d81d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d81d6:	bf00      	nop

000d81d8 <__aeabi_dcmplt>:
   d81d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81dc:	f7ff ffea 	bl	d81b4 <__aeabi_cdcmpeq>
   d81e0:	bf34      	ite	cc
   d81e2:	2001      	movcc	r0, #1
   d81e4:	2000      	movcs	r0, #0
   d81e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d81ea:	bf00      	nop

000d81ec <__aeabi_dcmple>:
   d81ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81f0:	f7ff ffe0 	bl	d81b4 <__aeabi_cdcmpeq>
   d81f4:	bf94      	ite	ls
   d81f6:	2001      	movls	r0, #1
   d81f8:	2000      	movhi	r0, #0
   d81fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d81fe:	bf00      	nop

000d8200 <__aeabi_dcmpge>:
   d8200:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8204:	f7ff ffce 	bl	d81a4 <__aeabi_cdrcmple>
   d8208:	bf94      	ite	ls
   d820a:	2001      	movls	r0, #1
   d820c:	2000      	movhi	r0, #0
   d820e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8212:	bf00      	nop

000d8214 <__aeabi_dcmpgt>:
   d8214:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8218:	f7ff ffc4 	bl	d81a4 <__aeabi_cdrcmple>
   d821c:	bf34      	ite	cc
   d821e:	2001      	movcc	r0, #1
   d8220:	2000      	movcs	r0, #0
   d8222:	f85d fb08 	ldr.w	pc, [sp], #8
   d8226:	bf00      	nop

000d8228 <__aeabi_d2uiz>:
   d8228:	004a      	lsls	r2, r1, #1
   d822a:	d211      	bcs.n	d8250 <__aeabi_d2uiz+0x28>
   d822c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8230:	d211      	bcs.n	d8256 <__aeabi_d2uiz+0x2e>
   d8232:	d50d      	bpl.n	d8250 <__aeabi_d2uiz+0x28>
   d8234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d823c:	d40e      	bmi.n	d825c <__aeabi_d2uiz+0x34>
   d823e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d824a:	fa23 f002 	lsr.w	r0, r3, r2
   d824e:	4770      	bx	lr
   d8250:	f04f 0000 	mov.w	r0, #0
   d8254:	4770      	bx	lr
   d8256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d825a:	d102      	bne.n	d8262 <__aeabi_d2uiz+0x3a>
   d825c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8260:	4770      	bx	lr
   d8262:	f04f 0000 	mov.w	r0, #0
   d8266:	4770      	bx	lr

000d8268 <__aeabi_d2f>:
   d8268:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d826c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8270:	bf24      	itt	cs
   d8272:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8276:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d827a:	d90d      	bls.n	d8298 <__aeabi_d2f+0x30>
   d827c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8280:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8284:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8288:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d828c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8290:	bf08      	it	eq
   d8292:	f020 0001 	biceq.w	r0, r0, #1
   d8296:	4770      	bx	lr
   d8298:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d829c:	d121      	bne.n	d82e2 <__aeabi_d2f+0x7a>
   d829e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d82a2:	bfbc      	itt	lt
   d82a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d82a8:	4770      	bxlt	lr
   d82aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d82b2:	f1c2 0218 	rsb	r2, r2, #24
   d82b6:	f1c2 0c20 	rsb	ip, r2, #32
   d82ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d82be:	fa20 f002 	lsr.w	r0, r0, r2
   d82c2:	bf18      	it	ne
   d82c4:	f040 0001 	orrne.w	r0, r0, #1
   d82c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d82cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d82d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d82d4:	ea40 000c 	orr.w	r0, r0, ip
   d82d8:	fa23 f302 	lsr.w	r3, r3, r2
   d82dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d82e0:	e7cc      	b.n	d827c <__aeabi_d2f+0x14>
   d82e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d82e6:	d107      	bne.n	d82f8 <__aeabi_d2f+0x90>
   d82e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d82ec:	bf1e      	ittt	ne
   d82ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d82f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d82f6:	4770      	bxne	lr
   d82f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d82fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8300:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8304:	4770      	bx	lr
   d8306:	bf00      	nop

000d8308 <__aeabi_uldivmod>:
   d8308:	b953      	cbnz	r3, d8320 <__aeabi_uldivmod+0x18>
   d830a:	b94a      	cbnz	r2, d8320 <__aeabi_uldivmod+0x18>
   d830c:	2900      	cmp	r1, #0
   d830e:	bf08      	it	eq
   d8310:	2800      	cmpeq	r0, #0
   d8312:	bf1c      	itt	ne
   d8314:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d8318:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d831c:	f000 b9a2 	b.w	d8664 <__aeabi_idiv0>
   d8320:	f1ad 0c08 	sub.w	ip, sp, #8
   d8324:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8328:	f000 f82a 	bl	d8380 <__udivmoddi4>
   d832c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8334:	b004      	add	sp, #16
   d8336:	4770      	bx	lr

000d8338 <__aeabi_d2ulz>:
   d8338:	b5d0      	push	{r4, r6, r7, lr}
   d833a:	2200      	movs	r2, #0
   d833c:	4b0e      	ldr	r3, [pc, #56]	; (d8378 <__aeabi_d2ulz+0x40>)
   d833e:	4606      	mov	r6, r0
   d8340:	460f      	mov	r7, r1
   d8342:	f7ff fcd7 	bl	d7cf4 <__aeabi_dmul>
   d8346:	f7ff ff6f 	bl	d8228 <__aeabi_d2uiz>
   d834a:	4604      	mov	r4, r0
   d834c:	f7ff fc5c 	bl	d7c08 <__aeabi_ui2d>
   d8350:	2200      	movs	r2, #0
   d8352:	4b0a      	ldr	r3, [pc, #40]	; (d837c <__aeabi_d2ulz+0x44>)
   d8354:	f7ff fcce 	bl	d7cf4 <__aeabi_dmul>
   d8358:	4602      	mov	r2, r0
   d835a:	460b      	mov	r3, r1
   d835c:	4630      	mov	r0, r6
   d835e:	4639      	mov	r1, r7
   d8360:	f7ff fb14 	bl	d798c <__aeabi_dsub>
   d8364:	f7ff ff60 	bl	d8228 <__aeabi_d2uiz>
   d8368:	4623      	mov	r3, r4
   d836a:	2200      	movs	r2, #0
   d836c:	ea42 0200 	orr.w	r2, r2, r0
   d8370:	4610      	mov	r0, r2
   d8372:	4619      	mov	r1, r3
   d8374:	bdd0      	pop	{r4, r6, r7, pc}
   d8376:	bf00      	nop
   d8378:	3df00000 	.word	0x3df00000
   d837c:	41f00000 	.word	0x41f00000

000d8380 <__udivmoddi4>:
   d8380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8384:	468c      	mov	ip, r1
   d8386:	460e      	mov	r6, r1
   d8388:	4604      	mov	r4, r0
   d838a:	9d08      	ldr	r5, [sp, #32]
   d838c:	2b00      	cmp	r3, #0
   d838e:	d150      	bne.n	d8432 <__udivmoddi4+0xb2>
   d8390:	428a      	cmp	r2, r1
   d8392:	4617      	mov	r7, r2
   d8394:	d96c      	bls.n	d8470 <__udivmoddi4+0xf0>
   d8396:	fab2 fe82 	clz	lr, r2
   d839a:	f1be 0f00 	cmp.w	lr, #0
   d839e:	d00b      	beq.n	d83b8 <__udivmoddi4+0x38>
   d83a0:	f1ce 0420 	rsb	r4, lr, #32
   d83a4:	fa20 f404 	lsr.w	r4, r0, r4
   d83a8:	fa01 f60e 	lsl.w	r6, r1, lr
   d83ac:	ea44 0c06 	orr.w	ip, r4, r6
   d83b0:	fa02 f70e 	lsl.w	r7, r2, lr
   d83b4:	fa00 f40e 	lsl.w	r4, r0, lr
   d83b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d83bc:	0c22      	lsrs	r2, r4, #16
   d83be:	fbbc f0f9 	udiv	r0, ip, r9
   d83c2:	fa1f f887 	uxth.w	r8, r7
   d83c6:	fb09 c610 	mls	r6, r9, r0, ip
   d83ca:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d83ce:	fb00 f308 	mul.w	r3, r0, r8
   d83d2:	42b3      	cmp	r3, r6
   d83d4:	d909      	bls.n	d83ea <__udivmoddi4+0x6a>
   d83d6:	19f6      	adds	r6, r6, r7
   d83d8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d83dc:	f080 8122 	bcs.w	d8624 <__udivmoddi4+0x2a4>
   d83e0:	42b3      	cmp	r3, r6
   d83e2:	f240 811f 	bls.w	d8624 <__udivmoddi4+0x2a4>
   d83e6:	3802      	subs	r0, #2
   d83e8:	443e      	add	r6, r7
   d83ea:	1af6      	subs	r6, r6, r3
   d83ec:	b2a2      	uxth	r2, r4
   d83ee:	fbb6 f3f9 	udiv	r3, r6, r9
   d83f2:	fb09 6613 	mls	r6, r9, r3, r6
   d83f6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d83fa:	fb03 f808 	mul.w	r8, r3, r8
   d83fe:	45a0      	cmp	r8, r4
   d8400:	d909      	bls.n	d8416 <__udivmoddi4+0x96>
   d8402:	19e4      	adds	r4, r4, r7
   d8404:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d8408:	f080 810a 	bcs.w	d8620 <__udivmoddi4+0x2a0>
   d840c:	45a0      	cmp	r8, r4
   d840e:	f240 8107 	bls.w	d8620 <__udivmoddi4+0x2a0>
   d8412:	3b02      	subs	r3, #2
   d8414:	443c      	add	r4, r7
   d8416:	ebc8 0404 	rsb	r4, r8, r4
   d841a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d841e:	2100      	movs	r1, #0
   d8420:	2d00      	cmp	r5, #0
   d8422:	d062      	beq.n	d84ea <__udivmoddi4+0x16a>
   d8424:	fa24 f40e 	lsr.w	r4, r4, lr
   d8428:	2300      	movs	r3, #0
   d842a:	602c      	str	r4, [r5, #0]
   d842c:	606b      	str	r3, [r5, #4]
   d842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8432:	428b      	cmp	r3, r1
   d8434:	d907      	bls.n	d8446 <__udivmoddi4+0xc6>
   d8436:	2d00      	cmp	r5, #0
   d8438:	d055      	beq.n	d84e6 <__udivmoddi4+0x166>
   d843a:	2100      	movs	r1, #0
   d843c:	e885 0041 	stmia.w	r5, {r0, r6}
   d8440:	4608      	mov	r0, r1
   d8442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8446:	fab3 f183 	clz	r1, r3
   d844a:	2900      	cmp	r1, #0
   d844c:	f040 8090 	bne.w	d8570 <__udivmoddi4+0x1f0>
   d8450:	42b3      	cmp	r3, r6
   d8452:	d302      	bcc.n	d845a <__udivmoddi4+0xda>
   d8454:	4282      	cmp	r2, r0
   d8456:	f200 80f8 	bhi.w	d864a <__udivmoddi4+0x2ca>
   d845a:	1a84      	subs	r4, r0, r2
   d845c:	eb66 0603 	sbc.w	r6, r6, r3
   d8460:	2001      	movs	r0, #1
   d8462:	46b4      	mov	ip, r6
   d8464:	2d00      	cmp	r5, #0
   d8466:	d040      	beq.n	d84ea <__udivmoddi4+0x16a>
   d8468:	e885 1010 	stmia.w	r5, {r4, ip}
   d846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8470:	b912      	cbnz	r2, d8478 <__udivmoddi4+0xf8>
   d8472:	2701      	movs	r7, #1
   d8474:	fbb7 f7f2 	udiv	r7, r7, r2
   d8478:	fab7 fe87 	clz	lr, r7
   d847c:	f1be 0f00 	cmp.w	lr, #0
   d8480:	d135      	bne.n	d84ee <__udivmoddi4+0x16e>
   d8482:	1bf3      	subs	r3, r6, r7
   d8484:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8488:	fa1f fc87 	uxth.w	ip, r7
   d848c:	2101      	movs	r1, #1
   d848e:	fbb3 f0f8 	udiv	r0, r3, r8
   d8492:	0c22      	lsrs	r2, r4, #16
   d8494:	fb08 3610 	mls	r6, r8, r0, r3
   d8498:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d849c:	fb0c f300 	mul.w	r3, ip, r0
   d84a0:	42b3      	cmp	r3, r6
   d84a2:	d907      	bls.n	d84b4 <__udivmoddi4+0x134>
   d84a4:	19f6      	adds	r6, r6, r7
   d84a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d84aa:	d202      	bcs.n	d84b2 <__udivmoddi4+0x132>
   d84ac:	42b3      	cmp	r3, r6
   d84ae:	f200 80ce 	bhi.w	d864e <__udivmoddi4+0x2ce>
   d84b2:	4610      	mov	r0, r2
   d84b4:	1af6      	subs	r6, r6, r3
   d84b6:	b2a2      	uxth	r2, r4
   d84b8:	fbb6 f3f8 	udiv	r3, r6, r8
   d84bc:	fb08 6613 	mls	r6, r8, r3, r6
   d84c0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d84c4:	fb0c fc03 	mul.w	ip, ip, r3
   d84c8:	45a4      	cmp	ip, r4
   d84ca:	d907      	bls.n	d84dc <__udivmoddi4+0x15c>
   d84cc:	19e4      	adds	r4, r4, r7
   d84ce:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d84d2:	d202      	bcs.n	d84da <__udivmoddi4+0x15a>
   d84d4:	45a4      	cmp	ip, r4
   d84d6:	f200 80b5 	bhi.w	d8644 <__udivmoddi4+0x2c4>
   d84da:	4613      	mov	r3, r2
   d84dc:	ebcc 0404 	rsb	r4, ip, r4
   d84e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d84e4:	e79c      	b.n	d8420 <__udivmoddi4+0xa0>
   d84e6:	4629      	mov	r1, r5
   d84e8:	4628      	mov	r0, r5
   d84ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84ee:	f1ce 0120 	rsb	r1, lr, #32
   d84f2:	fa06 f30e 	lsl.w	r3, r6, lr
   d84f6:	fa07 f70e 	lsl.w	r7, r7, lr
   d84fa:	fa20 f901 	lsr.w	r9, r0, r1
   d84fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8502:	40ce      	lsrs	r6, r1
   d8504:	ea49 0903 	orr.w	r9, r9, r3
   d8508:	fbb6 faf8 	udiv	sl, r6, r8
   d850c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d8510:	fb08 661a 	mls	r6, r8, sl, r6
   d8514:	fa1f fc87 	uxth.w	ip, r7
   d8518:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d851c:	fb0a f20c 	mul.w	r2, sl, ip
   d8520:	429a      	cmp	r2, r3
   d8522:	fa00 f40e 	lsl.w	r4, r0, lr
   d8526:	d90a      	bls.n	d853e <__udivmoddi4+0x1be>
   d8528:	19db      	adds	r3, r3, r7
   d852a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d852e:	f080 8087 	bcs.w	d8640 <__udivmoddi4+0x2c0>
   d8532:	429a      	cmp	r2, r3
   d8534:	f240 8084 	bls.w	d8640 <__udivmoddi4+0x2c0>
   d8538:	f1aa 0a02 	sub.w	sl, sl, #2
   d853c:	443b      	add	r3, r7
   d853e:	1a9b      	subs	r3, r3, r2
   d8540:	fa1f f989 	uxth.w	r9, r9
   d8544:	fbb3 f1f8 	udiv	r1, r3, r8
   d8548:	fb08 3311 	mls	r3, r8, r1, r3
   d854c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d8550:	fb01 f60c 	mul.w	r6, r1, ip
   d8554:	429e      	cmp	r6, r3
   d8556:	d907      	bls.n	d8568 <__udivmoddi4+0x1e8>
   d8558:	19db      	adds	r3, r3, r7
   d855a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d855e:	d26b      	bcs.n	d8638 <__udivmoddi4+0x2b8>
   d8560:	429e      	cmp	r6, r3
   d8562:	d969      	bls.n	d8638 <__udivmoddi4+0x2b8>
   d8564:	3902      	subs	r1, #2
   d8566:	443b      	add	r3, r7
   d8568:	1b9b      	subs	r3, r3, r6
   d856a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d856e:	e78e      	b.n	d848e <__udivmoddi4+0x10e>
   d8570:	f1c1 0e20 	rsb	lr, r1, #32
   d8574:	fa22 f40e 	lsr.w	r4, r2, lr
   d8578:	408b      	lsls	r3, r1
   d857a:	4323      	orrs	r3, r4
   d857c:	fa20 f70e 	lsr.w	r7, r0, lr
   d8580:	fa06 f401 	lsl.w	r4, r6, r1
   d8584:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8588:	fa26 f60e 	lsr.w	r6, r6, lr
   d858c:	433c      	orrs	r4, r7
   d858e:	fbb6 f9fc 	udiv	r9, r6, ip
   d8592:	0c27      	lsrs	r7, r4, #16
   d8594:	fb0c 6619 	mls	r6, ip, r9, r6
   d8598:	fa1f f883 	uxth.w	r8, r3
   d859c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d85a0:	fb09 f708 	mul.w	r7, r9, r8
   d85a4:	42b7      	cmp	r7, r6
   d85a6:	fa02 f201 	lsl.w	r2, r2, r1
   d85aa:	fa00 fa01 	lsl.w	sl, r0, r1
   d85ae:	d908      	bls.n	d85c2 <__udivmoddi4+0x242>
   d85b0:	18f6      	adds	r6, r6, r3
   d85b2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d85b6:	d241      	bcs.n	d863c <__udivmoddi4+0x2bc>
   d85b8:	42b7      	cmp	r7, r6
   d85ba:	d93f      	bls.n	d863c <__udivmoddi4+0x2bc>
   d85bc:	f1a9 0902 	sub.w	r9, r9, #2
   d85c0:	441e      	add	r6, r3
   d85c2:	1bf6      	subs	r6, r6, r7
   d85c4:	b2a0      	uxth	r0, r4
   d85c6:	fbb6 f4fc 	udiv	r4, r6, ip
   d85ca:	fb0c 6614 	mls	r6, ip, r4, r6
   d85ce:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d85d2:	fb04 f808 	mul.w	r8, r4, r8
   d85d6:	45b8      	cmp	r8, r7
   d85d8:	d907      	bls.n	d85ea <__udivmoddi4+0x26a>
   d85da:	18ff      	adds	r7, r7, r3
   d85dc:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d85e0:	d228      	bcs.n	d8634 <__udivmoddi4+0x2b4>
   d85e2:	45b8      	cmp	r8, r7
   d85e4:	d926      	bls.n	d8634 <__udivmoddi4+0x2b4>
   d85e6:	3c02      	subs	r4, #2
   d85e8:	441f      	add	r7, r3
   d85ea:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d85ee:	ebc8 0707 	rsb	r7, r8, r7
   d85f2:	fba0 8902 	umull	r8, r9, r0, r2
   d85f6:	454f      	cmp	r7, r9
   d85f8:	4644      	mov	r4, r8
   d85fa:	464e      	mov	r6, r9
   d85fc:	d314      	bcc.n	d8628 <__udivmoddi4+0x2a8>
   d85fe:	d029      	beq.n	d8654 <__udivmoddi4+0x2d4>
   d8600:	b365      	cbz	r5, d865c <__udivmoddi4+0x2dc>
   d8602:	ebba 0304 	subs.w	r3, sl, r4
   d8606:	eb67 0706 	sbc.w	r7, r7, r6
   d860a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d860e:	40cb      	lsrs	r3, r1
   d8610:	40cf      	lsrs	r7, r1
   d8612:	ea4e 0303 	orr.w	r3, lr, r3
   d8616:	e885 0088 	stmia.w	r5, {r3, r7}
   d861a:	2100      	movs	r1, #0
   d861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8620:	4613      	mov	r3, r2
   d8622:	e6f8      	b.n	d8416 <__udivmoddi4+0x96>
   d8624:	4610      	mov	r0, r2
   d8626:	e6e0      	b.n	d83ea <__udivmoddi4+0x6a>
   d8628:	ebb8 0402 	subs.w	r4, r8, r2
   d862c:	eb69 0603 	sbc.w	r6, r9, r3
   d8630:	3801      	subs	r0, #1
   d8632:	e7e5      	b.n	d8600 <__udivmoddi4+0x280>
   d8634:	4604      	mov	r4, r0
   d8636:	e7d8      	b.n	d85ea <__udivmoddi4+0x26a>
   d8638:	4611      	mov	r1, r2
   d863a:	e795      	b.n	d8568 <__udivmoddi4+0x1e8>
   d863c:	4681      	mov	r9, r0
   d863e:	e7c0      	b.n	d85c2 <__udivmoddi4+0x242>
   d8640:	468a      	mov	sl, r1
   d8642:	e77c      	b.n	d853e <__udivmoddi4+0x1be>
   d8644:	3b02      	subs	r3, #2
   d8646:	443c      	add	r4, r7
   d8648:	e748      	b.n	d84dc <__udivmoddi4+0x15c>
   d864a:	4608      	mov	r0, r1
   d864c:	e70a      	b.n	d8464 <__udivmoddi4+0xe4>
   d864e:	3802      	subs	r0, #2
   d8650:	443e      	add	r6, r7
   d8652:	e72f      	b.n	d84b4 <__udivmoddi4+0x134>
   d8654:	45c2      	cmp	sl, r8
   d8656:	d3e7      	bcc.n	d8628 <__udivmoddi4+0x2a8>
   d8658:	463e      	mov	r6, r7
   d865a:	e7d1      	b.n	d8600 <__udivmoddi4+0x280>
   d865c:	4629      	mov	r1, r5
   d865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8662:	bf00      	nop

000d8664 <__aeabi_idiv0>:
   d8664:	4770      	bx	lr
   d8666:	bf00      	nop

000d8668 <calloc>:
   d8668:	4b02      	ldr	r3, [pc, #8]	; (d8674 <calloc+0xc>)
   d866a:	460a      	mov	r2, r1
   d866c:	4601      	mov	r1, r0
   d866e:	6818      	ldr	r0, [r3, #0]
   d8670:	f000 b84d 	b.w	d870e <_calloc_r>
   d8674:	2003e350 	.word	0x2003e350

000d8678 <__cxa_atexit>:
   d8678:	b510      	push	{r4, lr}
   d867a:	4c05      	ldr	r4, [pc, #20]	; (d8690 <__cxa_atexit+0x18>)
   d867c:	4613      	mov	r3, r2
   d867e:	b12c      	cbz	r4, d868c <__cxa_atexit+0x14>
   d8680:	460a      	mov	r2, r1
   d8682:	4601      	mov	r1, r0
   d8684:	2002      	movs	r0, #2
   d8686:	f3af 8000 	nop.w
   d868a:	bd10      	pop	{r4, pc}
   d868c:	4620      	mov	r0, r4
   d868e:	bd10      	pop	{r4, pc}
   d8690:	00000000 	.word	0x00000000

000d8694 <memcmp>:
   d8694:	b510      	push	{r4, lr}
   d8696:	3901      	subs	r1, #1
   d8698:	4402      	add	r2, r0
   d869a:	4290      	cmp	r0, r2
   d869c:	d007      	beq.n	d86ae <memcmp+0x1a>
   d869e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d86a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d86a6:	42a3      	cmp	r3, r4
   d86a8:	d0f7      	beq.n	d869a <memcmp+0x6>
   d86aa:	1b18      	subs	r0, r3, r4
   d86ac:	bd10      	pop	{r4, pc}
   d86ae:	2000      	movs	r0, #0
   d86b0:	bd10      	pop	{r4, pc}

000d86b2 <memcpy>:
   d86b2:	b510      	push	{r4, lr}
   d86b4:	1e43      	subs	r3, r0, #1
   d86b6:	440a      	add	r2, r1
   d86b8:	4291      	cmp	r1, r2
   d86ba:	d004      	beq.n	d86c6 <memcpy+0x14>
   d86bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86c0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d86c4:	e7f8      	b.n	d86b8 <memcpy+0x6>
   d86c6:	bd10      	pop	{r4, pc}

000d86c8 <memmove>:
   d86c8:	4288      	cmp	r0, r1
   d86ca:	b510      	push	{r4, lr}
   d86cc:	eb01 0302 	add.w	r3, r1, r2
   d86d0:	d801      	bhi.n	d86d6 <memmove+0xe>
   d86d2:	1e42      	subs	r2, r0, #1
   d86d4:	e00b      	b.n	d86ee <memmove+0x26>
   d86d6:	4298      	cmp	r0, r3
   d86d8:	d2fb      	bcs.n	d86d2 <memmove+0xa>
   d86da:	1881      	adds	r1, r0, r2
   d86dc:	1ad2      	subs	r2, r2, r3
   d86de:	42d3      	cmn	r3, r2
   d86e0:	d004      	beq.n	d86ec <memmove+0x24>
   d86e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d86e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d86ea:	e7f8      	b.n	d86de <memmove+0x16>
   d86ec:	bd10      	pop	{r4, pc}
   d86ee:	4299      	cmp	r1, r3
   d86f0:	d004      	beq.n	d86fc <memmove+0x34>
   d86f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86f6:	f802 4f01 	strb.w	r4, [r2, #1]!
   d86fa:	e7f8      	b.n	d86ee <memmove+0x26>
   d86fc:	bd10      	pop	{r4, pc}

000d86fe <memset>:
   d86fe:	4402      	add	r2, r0
   d8700:	4603      	mov	r3, r0
   d8702:	4293      	cmp	r3, r2
   d8704:	d002      	beq.n	d870c <memset+0xe>
   d8706:	f803 1b01 	strb.w	r1, [r3], #1
   d870a:	e7fa      	b.n	d8702 <memset+0x4>
   d870c:	4770      	bx	lr

000d870e <_calloc_r>:
   d870e:	b538      	push	{r3, r4, r5, lr}
   d8710:	fb02 f401 	mul.w	r4, r2, r1
   d8714:	4621      	mov	r1, r4
   d8716:	f7fc fd6b 	bl	d51f0 <_malloc_r>
   d871a:	4605      	mov	r5, r0
   d871c:	b118      	cbz	r0, d8726 <_calloc_r+0x18>
   d871e:	4622      	mov	r2, r4
   d8720:	2100      	movs	r1, #0
   d8722:	f7ff ffec 	bl	d86fe <memset>
   d8726:	4628      	mov	r0, r5
   d8728:	bd38      	pop	{r3, r4, r5, pc}
	...

000d872c <srand>:
   d872c:	b538      	push	{r3, r4, r5, lr}
   d872e:	4b12      	ldr	r3, [pc, #72]	; (d8778 <srand+0x4c>)
   d8730:	681c      	ldr	r4, [r3, #0]
   d8732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8734:	4605      	mov	r5, r0
   d8736:	b9d3      	cbnz	r3, d876e <srand+0x42>
   d8738:	2018      	movs	r0, #24
   d873a:	f7fc fd31 	bl	d51a0 <malloc>
   d873e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8742:	63a0      	str	r0, [r4, #56]	; 0x38
   d8744:	8003      	strh	r3, [r0, #0]
   d8746:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d874a:	8043      	strh	r3, [r0, #2]
   d874c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8750:	8083      	strh	r3, [r0, #4]
   d8752:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8756:	80c3      	strh	r3, [r0, #6]
   d8758:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d875c:	8103      	strh	r3, [r0, #8]
   d875e:	2305      	movs	r3, #5
   d8760:	8143      	strh	r3, [r0, #10]
   d8762:	230b      	movs	r3, #11
   d8764:	8183      	strh	r3, [r0, #12]
   d8766:	2201      	movs	r2, #1
   d8768:	2300      	movs	r3, #0
   d876a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d876e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8770:	2200      	movs	r2, #0
   d8772:	611d      	str	r5, [r3, #16]
   d8774:	615a      	str	r2, [r3, #20]
   d8776:	bd38      	pop	{r3, r4, r5, pc}
   d8778:	2003e350 	.word	0x2003e350

000d877c <strdup>:
   d877c:	4b02      	ldr	r3, [pc, #8]	; (d8788 <strdup+0xc>)
   d877e:	4601      	mov	r1, r0
   d8780:	6818      	ldr	r0, [r3, #0]
   d8782:	f000 b803 	b.w	d878c <_strdup_r>
   d8786:	bf00      	nop
   d8788:	2003e350 	.word	0x2003e350

000d878c <_strdup_r>:
   d878c:	b570      	push	{r4, r5, r6, lr}
   d878e:	4606      	mov	r6, r0
   d8790:	4608      	mov	r0, r1
   d8792:	460c      	mov	r4, r1
   d8794:	f000 f80d 	bl	d87b2 <strlen>
   d8798:	1c45      	adds	r5, r0, #1
   d879a:	4629      	mov	r1, r5
   d879c:	4630      	mov	r0, r6
   d879e:	f7fc fd27 	bl	d51f0 <_malloc_r>
   d87a2:	4606      	mov	r6, r0
   d87a4:	b118      	cbz	r0, d87ae <_strdup_r+0x22>
   d87a6:	462a      	mov	r2, r5
   d87a8:	4621      	mov	r1, r4
   d87aa:	f7ff ff82 	bl	d86b2 <memcpy>
   d87ae:	4630      	mov	r0, r6
   d87b0:	bd70      	pop	{r4, r5, r6, pc}

000d87b2 <strlen>:
   d87b2:	4603      	mov	r3, r0
   d87b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d87b8:	2a00      	cmp	r2, #0
   d87ba:	d1fb      	bne.n	d87b4 <strlen+0x2>
   d87bc:	1a18      	subs	r0, r3, r0
   d87be:	3801      	subs	r0, #1
   d87c0:	4770      	bx	lr

000d87c2 <strnlen>:
   d87c2:	b510      	push	{r4, lr}
   d87c4:	4603      	mov	r3, r0
   d87c6:	4401      	add	r1, r0
   d87c8:	428b      	cmp	r3, r1
   d87ca:	d004      	beq.n	d87d6 <strnlen+0x14>
   d87cc:	781a      	ldrb	r2, [r3, #0]
   d87ce:	1c5c      	adds	r4, r3, #1
   d87d0:	b10a      	cbz	r2, d87d6 <strnlen+0x14>
   d87d2:	4623      	mov	r3, r4
   d87d4:	e7f8      	b.n	d87c8 <strnlen+0x6>
   d87d6:	1a18      	subs	r0, r3, r0
   d87d8:	bd10      	pop	{r4, pc}

000d87da <link_code_end>:
	...

000d87dc <dynalib_user>:
   d87dc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d87ec:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   d87fc:	0079 6f74 6767 656c 654c 0064 6554 706d     y.toggleLed.Temp
   d880c:	203a 6625 4800 6d75 6469 7469 3a79 2520     : %f.Humidity: %
   d881c:	0066 696c 6867 2d74 656d 6574 2f72 656c     f.light-meter/le
   d882c:	6576 006c 6335 6231 6139 6430 622d 6235     vel.5c1b9a0d-b5b
   d883c:	2d65 6134 3034 382d 3766 2d61 3636 3362     e-4a40-8f7a-66b3
   d884c:	6436 6130 3135 3637 6600 6364 3466 3361     6d0a5176.fdcf4a3
   d885c:	2d66 6633 6465 342d 6465 2d32 3438 3665     f-3fed-4ed2-84e6
   d886c:	302d 6234 6262 6139 3065 6434 0034 6162     -04bbb9ae04d4.ba
   d887c:	5374 6174 6574 6300 3963 6337 3032 2d63     tState.cc97c20c-
   d888c:	3835 3232 342d 3038 2d30 6461 3565 312d     5822-4800-ade5-1
   d889c:	3666 3136 3264 3331 6533 0065 6f70 6577     f661d2133ee.powe
   d88ac:	5372 756f 6372 0065 3264 3262 6236 3366     rSource.d2b26bf3
   d88bc:	392d 3937 2d32 3234 6366 392d 3865 2d61     -9792-42fc-9e8a-
   d88cc:	3134 3666 3031 6437 3066 6334 6200 7461     41f6107df04c.bat
   d88dc:	654c 6576 006c 0000                         Level...

000d88e4 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d88ec:	52cd 000d 52d3 000d 5f41 000d 52fd 000d     .R...R..A_...R..
   d88fc:	52cf 000d                                   .R..

000d8900 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8908:	52c7 000d 52e1 000d 6049 000d 5301 000d     .R...R..I`...S..
   d8918:	52c9 000d                                   .R..

000d891c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8924:	52c1 000d 52ef 000d 5a2b 000d 5305 000d     .R...R..+Z...S..
   d8934:	52c3 000d                                   .R..

000d8938 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8938:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d8948:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d8958:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d8968:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d8978:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d8988:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d8998:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d89a8:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d89b8:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d89c8:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d89d8:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d89e8:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d89f8:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d8a08:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d8a18:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d8a28:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d8a38:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d8a48:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d8a58:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d8a68:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d8a78:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d8a88:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d8a98:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d8aa8:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d8ab8:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d8ac8:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d8ad8:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d8ae8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8af0:	6335 000d 633b 000d 6391 000d 6349 000d     5c..;c...c..Ic..
   d8b00:	6337 000d                                   7c..

000d8b04 <_ZTVN5spark13EthernetClassE>:
	...
   d8b0c:	69a7 000d 699d 000d 6993 000d 6989 000d     .i...i...i...i..
   d8b1c:	697d 000d 6971 000d 6965 000d 695d 000d     }i..qi..ei..]i..
   d8b2c:	6953 000d 6949 000d 6d11 000d               Si..Ii...m..

000d8b38 <_ZTV7TwoWire>:
	...
   d8b40:	69c5 000d 6a0f 000d 69e7 000d 69c7 000d     .i...j...i...i..
   d8b50:	69ef 000d 69f7 000d 69ff 000d 6a07 000d     .i...i...i...j..

000d8b60 <_ZTV9IPAddress>:
	...
   d8b68:	6a61 000d 6a51 000d 6a53 000d 6e6c 6600     aj..Qj..Sj..ln.f
   d8b78:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d8b88:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d8b98:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d8ba8:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d8bb8:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d8bc8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d8bd8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d8be8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d8bf8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d8c08:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d8c18:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d8c28:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d8c38:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d8c48:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d8c54 <_ZTVN5spark9MeshClassE>:
	...
   d8c5c:	6ba3 000d 6b99 000d 6b8f 000d 6b85 000d     .k...k...k...k..
   d8c6c:	6b79 000d 6b6d 000d 6b61 000d 6b59 000d     yk..mk..ak..Yk..
   d8c7c:	6b4f 000d 6b45 000d 6d11 000d               Ok..Ek...m..

000d8c88 <_ZTVN5spark12NetworkClassE>:
	...
   d8c90:	6ca9 000d 6cb3 000d 6cbd 000d 6cc7 000d     .l...l...l...l..
   d8ca0:	6cd1 000d 6cdd 000d 6ce9 000d 6cf5 000d     .l...l...l...l..
   d8cb0:	6cfd 000d 6d07 000d 6d11 000d               .l...m...m..

000d8cbc <_ZTV8SPIClass>:
	...
   d8cc4:	6f55 000d 6f57 000d 005a 2b25 3330 3a64     Uo..Wo..Z.%+03d:
   d8cd4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d8ce4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d8cf4:	0000 0000                                   ....

000d8cf8 <_ZTV11USARTSerial>:
	...
   d8d00:	71b9 000d 7209 000d 7217 000d 6df1 000d     .q...r...r...m..
   d8d10:	71cd 000d 71ef 000d 71db 000d 7203 000d     .q...q...q...r..
   d8d20:	71bb 000d 71bf 000d                         .q...q..

000d8d28 <_ZTV9USBSerial>:
	...
   d8d30:	72c1 000d 7311 000d 731f 000d 6df1 000d     .r...s...s...m..
   d8d40:	72fd 000d 72c3 000d 72d9 000d 730b 000d     .r...r...r...s..
   d8d50:	72ef 000d 72bd 000d                         .r...r..

000d8d58 <_ZTVN5spark9WiFiClassE>:
	...
   d8d60:	742b 000d 7421 000d 7417 000d 73cd 000d     +t..!t...t...s..
   d8d70:	740b 000d 73ff 000d 73f3 000d 73eb 000d     .t...s...s...s..
   d8d80:	73e1 000d 73d7 000d 6d11 000d               .s...s...m..

000d8d8c <__sf_fake_stdin>:
	...

000d8dac <__sf_fake_stdout>:
	...

000d8dcc <__sf_fake_stderr>:
	...
   d8dec:	0043                                        C.

000d8dee <link_const_variable_data_end>:
	...

000d8df0 <link_constructors_location>:
   d8df0:	000d440d 	.word	0x000d440d
   d8df4:	000d458d 	.word	0x000d458d
   d8df8:	000d49cd 	.word	0x000d49cd
   d8dfc:	000d4c69 	.word	0x000d4c69
   d8e00:	000d6325 	.word	0x000d6325
   d8e04:	000d69b1 	.word	0x000d69b1
   d8e08:	000d6b35 	.word	0x000d6b35
   d8e0c:	000d6c59 	.word	0x000d6c59
   d8e10:	000d6ddd 	.word	0x000d6ddd
   d8e14:	000d6f39 	.word	0x000d6f39
   d8e18:	000d718d 	.word	0x000d718d
   d8e1c:	000d71a5 	.word	0x000d71a5
   d8e20:	000d7435 	.word	0x000d7435
   d8e24:	000d769d 	.word	0x000d769d
   d8e28:	000d76f5 	.word	0x000d76f5
   d8e2c:	000d77b9 	.word	0x000d77b9
   d8e30:	000d783d 	.word	0x000d783d
   d8e34:	000d78c1 	.word	0x000d78c1

000d8e38 <link_constructors_end>:
	...
