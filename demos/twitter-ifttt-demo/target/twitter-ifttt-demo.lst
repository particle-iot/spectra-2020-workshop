
/Users/bsatrom/Development/particle/workshops/thatconf-workshop-2019/demos/twitter-ifttt-demo/target/twitter-ifttt-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f28  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2f40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a2f44  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000598  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a2fac  080a2fac  00022fac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2fd4  080a2fd4  00022fd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a995d  00000000  00000000  00022fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f8c9  00000000  00000000  000cc935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012fdc  00000000  00000000  000dc1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e48  00000000  00000000  000ef1da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003110  00000000  00000000  000f1022  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002537d  00000000  00000000  000f4132  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022ade  00000000  00000000  001194af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4fcf  00000000  00000000  0013bf8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b6a0  00000000  00000000  001e0f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	38 2c 0a 08                                         8,..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd95 	bl	80a2b5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd9a 	bl	80a2b72 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2f44 	.word	0x080a2f44
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	20000900 	.word	0x20000900
 80a0058:	20000900 	.word	0x20000900

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fbab 	bl	80a17b8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2f04 	.word	0x080a2f04
 80a0084:	080a2f3c 	.word	0x080a2f3c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b850 	b.w	80a012c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f869 	bl	80a0164 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb51 	b.w	80a173c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bc17 	b.w	80a08cc <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bc1d 	b.w	80a08dc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z9toggleLed6String>:

  Particle.function("toggleLed", toggleLed);
}

int toggleLed(String args)
{
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
 80a00b6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80a00ba:	9300      	str	r3, [sp, #0]
 80a00bc:	2200      	movs	r2, #0
 80a00be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a00c2:	2100      	movs	r1, #0
 80a00c4:	4816      	ldr	r0, [pc, #88]	; (80a0120 <_Z9toggleLed6String+0x6c>)
 80a00c6:	f000 f9b7 	bl	80a0438 <_ZN12ChainableLED11setColorHSBEhfff>
 80a00ca:	4b16      	ldr	r3, [pc, #88]	; (80a0124 <_Z9toggleLed6String+0x70>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00cc:	2200      	movs	r2, #0
 80a00ce:	781b      	ldrb	r3, [r3, #0]
 80a00d0:	4915      	ldr	r1, [pc, #84]	; (80a0128 <_Z9toggleLed6String+0x74>)
 80a00d2:	f88d 3000 	strb.w	r3, [sp]
 80a00d6:	a802      	add	r0, sp, #8
 80a00d8:	233c      	movs	r3, #60	; 0x3c
 80a00da:	f000 fdbf 	bl	80a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00de:	9c03      	ldr	r4, [sp, #12]
 80a00e0:	b17c      	cbz	r4, 80a0102 <_Z9toggleLed6String+0x4e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00e2:	6863      	ldr	r3, [r4, #4]
 80a00e4:	3b01      	subs	r3, #1
 80a00e6:	6063      	str	r3, [r4, #4]
 80a00e8:	b95b      	cbnz	r3, 80a0102 <_Z9toggleLed6String+0x4e>
        {
          _M_dispose();
 80a00ea:	6823      	ldr	r3, [r4, #0]
 80a00ec:	4620      	mov	r0, r4
 80a00ee:	689b      	ldr	r3, [r3, #8]
 80a00f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00f2:	68a3      	ldr	r3, [r4, #8]
 80a00f4:	3b01      	subs	r3, #1
 80a00f6:	60a3      	str	r3, [r4, #8]
 80a00f8:	b91b      	cbnz	r3, 80a0102 <_Z9toggleLed6String+0x4e>
            _M_destroy();
 80a00fa:	6823      	ldr	r3, [r4, #0]
 80a00fc:	4620      	mov	r0, r4
 80a00fe:	68db      	ldr	r3, [r3, #12]
 80a0100:	4798      	blx	r3

  Particle.publish("led-on", NULL, PRIVATE);

  delay(1000);
 80a0102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0106:	f000 fc09 	bl	80a091c <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
 80a010a:	2300      	movs	r3, #0
 80a010c:	9300      	str	r3, [sp, #0]
 80a010e:	461a      	mov	r2, r3
 80a0110:	2100      	movs	r1, #0
 80a0112:	4803      	ldr	r0, [pc, #12]	; (80a0120 <_Z9toggleLed6String+0x6c>)
 80a0114:	f000 f990 	bl	80a0438 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
}
 80a0118:	2001      	movs	r0, #1
 80a011a:	b004      	add	sp, #16
 80a011c:	bd10      	pop	{r4, pc}
 80a011e:	bf00      	nop
 80a0120:	2000036c 	.word	0x2000036c
 80a0124:	20000374 	.word	0x20000374
 80a0128:	080a2c4c 	.word	0x080a2c4c

080a012c <setup>:
ChainableLED leds(A4, A5, 1);

int toggleLed(String args);

void setup()
{
 80a012c:	b513      	push	{r0, r1, r4, lr}
  leds.init();
 80a012e:	4c09      	ldr	r4, [pc, #36]	; (80a0154 <setup+0x28>)
 80a0130:	4620      	mov	r0, r4
 80a0132:	f000 f8e9 	bl	80a0308 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
 80a0136:	2300      	movs	r3, #0
 80a0138:	461a      	mov	r2, r3
 80a013a:	4620      	mov	r0, r4
 80a013c:	9300      	str	r3, [sp, #0]
 80a013e:	2100      	movs	r1, #0
 80a0140:	f000 f97a 	bl	80a0438 <_ZN12ChainableLED11setColorHSBEhfff>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0144:	4a04      	ldr	r2, [pc, #16]	; (80a0158 <setup+0x2c>)
 80a0146:	4905      	ldr	r1, [pc, #20]	; (80a015c <setup+0x30>)
 80a0148:	4805      	ldr	r0, [pc, #20]	; (80a0160 <setup+0x34>)

  Particle.function("toggleLed", toggleLed);
}
 80a014a:	b002      	add	sp, #8
 80a014c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0150:	f000 bc4b 	b.w	80a09ea <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0154:	2000036c 	.word	0x2000036c
 80a0158:	080a2c53 	.word	0x080a2c53
 80a015c:	080a00b5 	.word	0x080a00b5
 80a0160:	080a09bf 	.word	0x080a09bf

080a0164 <loop>:

  return 1;
}

void loop()
{
 80a0164:	4770      	bx	lr
	...

080a0168 <_GLOBAL__sub_I_leds>:
 80a0168:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a016a:	4b09      	ldr	r3, [pc, #36]	; (80a0190 <_GLOBAL__sub_I_leds+0x28>)
 * Date: 7/31/2019
 */
#include "Particle.h"
#include "Grove_ChainableLED.h"

ChainableLED leds(A4, A5, 1);
 80a016c:	4c09      	ldr	r4, [pc, #36]	; (80a0194 <_GLOBAL__sub_I_leds+0x2c>)
 80a016e:	2501      	movs	r5, #1
 80a0170:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0172:	f000 fa2d 	bl	80a05d0 <HAL_Pin_Map>
 80a0176:	462b      	mov	r3, r5
 80a0178:	220f      	movs	r2, #15
 80a017a:	210e      	movs	r1, #14
 80a017c:	4620      	mov	r0, r4
 80a017e:	f000 f80f 	bl	80a01a0 <_ZN12ChainableLEDC1Ehhh>
 80a0182:	4620      	mov	r0, r4
  return 1;
}

void loop()
{
 80a0184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * Date: 7/31/2019
 */
#include "Particle.h"
#include "Grove_ChainableLED.h"

ChainableLED leds(A4, A5, 1);
 80a0188:	4a03      	ldr	r2, [pc, #12]	; (80a0198 <_GLOBAL__sub_I_leds+0x30>)
 80a018a:	4904      	ldr	r1, [pc, #16]	; (80a019c <_GLOBAL__sub_I_leds+0x34>)
 80a018c:	f001 bbe8 	b.w	80a1960 <__aeabi_atexit>
 80a0190:	20000374 	.word	0x20000374
 80a0194:	2000036c 	.word	0x2000036c
 80a0198:	20000368 	.word	0x20000368
 80a019c:	080a01bb 	.word	0x080a01bb

080a01a0 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a01a0:	b510      	push	{r4, lr}
 80a01a2:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a01a4:	7001      	strb	r1, [r0, #0]
 80a01a6:	7042      	strb	r2, [r0, #1]
 80a01a8:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a01aa:	2101      	movs	r1, #1
 80a01ac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a01b0:	f002 fcbe 	bl	80a2b30 <calloc>
 80a01b4:	6060      	str	r0, [r4, #4]
}
 80a01b6:	4620      	mov	r0, r4
 80a01b8:	bd10      	pop	{r4, pc}

080a01ba <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
 80a01ba:	b510      	push	{r4, lr}
 80a01bc:	4604      	mov	r4, r0
{
    free(_led_state);
 80a01be:	6840      	ldr	r0, [r0, #4]
 80a01c0:	f000 fb8c 	bl	80a08dc <free>
}
 80a01c4:	4620      	mov	r0, r4
 80a01c6:	bd10      	pop	{r4, pc}

080a01c8 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a01c8:	b510      	push	{r4, lr}
 80a01ca:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a01cc:	2100      	movs	r1, #0
 80a01ce:	7800      	ldrb	r0, [r0, #0]
 80a01d0:	f001 fb53 	bl	80a187a <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a01d4:	2014      	movs	r0, #20
 80a01d6:	f000 f9eb 	bl	80a05b0 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a01da:	7820      	ldrb	r0, [r4, #0]
 80a01dc:	2101      	movs	r1, #1
 80a01de:	f001 fb4c 	bl	80a187a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a01e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a01e6:	2014      	movs	r0, #20
 80a01e8:	f000 b9e2 	b.w	80a05b0 <HAL_Delay_Microseconds>

080a01ec <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a01ec:	b570      	push	{r4, r5, r6, lr}
 80a01ee:	4606      	mov	r6, r0
 80a01f0:	460d      	mov	r5, r1
 80a01f2:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a01f4:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
 80a01f8:	bf14      	ite	ne
 80a01fa:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a01fc:	2100      	moveq	r1, #0
 80a01fe:	7870      	ldrb	r0, [r6, #1]
 80a0200:	f001 fb3b 	bl	80a187a <digitalWrite>
 80a0204:	3c01      	subs	r4, #1
        clk();
 80a0206:	4630      	mov	r0, r6
 80a0208:	f7ff ffde 	bl	80a01c8 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a020c:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a020e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
 80a0212:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a0214:	d1ee      	bne.n	80a01f4 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
 80a0216:	bd70      	pop	{r4, r5, r6, pc}

080a0218 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
 80a0218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a021a:	4616      	mov	r6, r2
 80a021c:	460d      	mov	r5, r1
 80a021e:	4604      	mov	r4, r0
 80a0220:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a0222:	f013 0f80 	tst.w	r3, #128	; 0x80
 80a0226:	bf14      	ite	ne
 80a0228:	21c0      	movne	r1, #192	; 0xc0
 80a022a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a022c:	065a      	lsls	r2, r3, #25
 80a022e:	bf58      	it	pl
 80a0230:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a0234:	0633      	lsls	r3, r6, #24
 80a0236:	bf58      	it	pl
 80a0238:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a023c:	0670      	lsls	r0, r6, #25
 80a023e:	bf58      	it	pl
 80a0240:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a0244:	062a      	lsls	r2, r5, #24
 80a0246:	bf58      	it	pl
 80a0248:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a024c:	066b      	lsls	r3, r5, #25
 80a024e:	bf58      	it	pl
 80a0250:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a0254:	4620      	mov	r0, r4
 80a0256:	f7ff ffc9 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a025a:	4639      	mov	r1, r7
 80a025c:	4620      	mov	r0, r4
 80a025e:	f7ff ffc5 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a0262:	4631      	mov	r1, r6
 80a0264:	4620      	mov	r0, r4
 80a0266:	f7ff ffc1 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a026a:	4629      	mov	r1, r5
 80a026c:	4620      	mov	r0, r4
}
 80a026e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
 80a0272:	f7ff bfbb 	b.w	80a01ec <_ZN12ChainableLED8sendByteEh>

080a0276 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a0276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a027a:	4604      	mov	r4, r0
 80a027c:	460e      	mov	r6, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a027e:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a0280:	4690      	mov	r8, r2
 80a0282:	4699      	mov	r9, r3
 80a0284:	f89d a020 	ldrb.w	sl, [sp, #32]
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a0288:	f7ff ffb0 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a028c:	2100      	movs	r1, #0
 80a028e:	4620      	mov	r0, r4
 80a0290:	f7ff ffac 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0294:	2100      	movs	r1, #0
 80a0296:	4620      	mov	r0, r4
 80a0298:	f7ff ffa8 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a029c:	2100      	movs	r1, #0
 80a029e:	4620      	mov	r0, r4
 80a02a0:	f7ff ffa4 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
 80a02a4:	2500      	movs	r5, #0
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
 80a02a6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a02aa:	78a2      	ldrb	r2, [r4, #2]
 80a02ac:	b2eb      	uxtb	r3, r5
 80a02ae:	429a      	cmp	r2, r3
 80a02b0:	d918      	bls.n	80a02e4 <_ZN12ChainableLED11setColorRGBEhhhh+0x6e>
    {
        if (i == led)
 80a02b2:	42b3      	cmp	r3, r6
 80a02b4:	d10a      	bne.n	80a02cc <_ZN12ChainableLED11setColorRGBEhhhh+0x56>
        {
            _led_state[i*3 + _CL_RED] = red;
 80a02b6:	6862      	ldr	r2, [r4, #4]
 80a02b8:	f802 8007 	strb.w	r8, [r2, r7]
            _led_state[i*3 + _CL_GREEN] = green;
 80a02bc:	6862      	ldr	r2, [r4, #4]
 80a02be:	443a      	add	r2, r7
 80a02c0:	f882 9001 	strb.w	r9, [r2, #1]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a02c4:	6862      	ldr	r2, [r4, #4]
 80a02c6:	443a      	add	r2, r7
 80a02c8:	f882 a002 	strb.w	sl, [r2, #2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a02cc:	6860      	ldr	r0, [r4, #4]
 80a02ce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80a02d2:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
 80a02d4:	7893      	ldrb	r3, [r2, #2]
 80a02d6:	5c41      	ldrb	r1, [r0, r1]
 80a02d8:	7852      	ldrb	r2, [r2, #1]
 80a02da:	4620      	mov	r0, r4
 80a02dc:	f7ff ff9c 	bl	80a0218 <_ZN12ChainableLED9sendColorEhhh>
 80a02e0:	3501      	adds	r5, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a02e2:	e7e2      	b.n	80a02aa <_ZN12ChainableLED11setColorRGBEhhhh+0x34>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	2100      	movs	r1, #0
 80a02e8:	f7ff ff80 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a02ec:	4620      	mov	r0, r4
 80a02ee:	2100      	movs	r1, #0
 80a02f0:	f7ff ff7c 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a02f4:	4620      	mov	r0, r4
 80a02f6:	2100      	movs	r1, #0
 80a02f8:	f7ff ff78 	bl	80a01ec <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a02fc:	4620      	mov	r0, r4
}
 80a02fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
 80a0302:	2100      	movs	r1, #0
 80a0304:	f7ff bf72 	b.w	80a01ec <_ZN12ChainableLED8sendByteEh>

080a0308 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
 80a0308:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a030a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
 80a030c:	2101      	movs	r1, #1
 80a030e:	7800      	ldrb	r0, [r0, #0]
 80a0310:	f001 faa2 	bl	80a1858 <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a0314:	2500      	movs	r5, #0
 80a0316:	2101      	movs	r1, #1
 80a0318:	7860      	ldrb	r0, [r4, #1]
 80a031a:	f001 fa9d 	bl	80a1858 <pinMode>

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
 80a031e:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a0320:	78a3      	ldrb	r3, [r4, #2]
 80a0322:	b2e9      	uxtb	r1, r5
 80a0324:	428b      	cmp	r3, r1
 80a0326:	f105 0501 	add.w	r5, r5, #1
 80a032a:	d906      	bls.n	80a033a <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
 80a032c:	2300      	movs	r3, #0
 80a032e:	9600      	str	r6, [sp, #0]
 80a0330:	461a      	mov	r2, r3
 80a0332:	4620      	mov	r0, r4
 80a0334:	f7ff ff9f 	bl	80a0276 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a0338:	e7f2      	b.n	80a0320 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
 80a033a:	b002      	add	sp, #8
 80a033c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0340 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
 80a0340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0344:	4604      	mov	r4, r0
 80a0346:	460e      	mov	r6, r1
    if (t < 0.0)
 80a0348:	4610      	mov	r0, r2
 80a034a:	2100      	movs	r1, #0
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
 80a034c:	4615      	mov	r5, r2
    if (t < 0.0)
 80a034e:	f002 fbc7 	bl	80a2ae0 <__aeabi_fcmplt>
 80a0352:	b128      	cbz	r0, 80a0360 <_Z7hue2rgbfff+0x20>
        t += 1.0;
 80a0354:	4628      	mov	r0, r5
 80a0356:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a035a:	f002 f91b 	bl	80a2594 <__addsf3>
 80a035e:	4605      	mov	r5, r0
    if(t > 1.0)
 80a0360:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0364:	4628      	mov	r0, r5
 80a0366:	f002 fbd9 	bl	80a2b1c <__aeabi_fcmpgt>
 80a036a:	b128      	cbz	r0, 80a0378 <_Z7hue2rgbfff+0x38>
        t -= 1.0;
 80a036c:	4628      	mov	r0, r5
 80a036e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0372:	f002 f90d 	bl	80a2590 <__aeabi_fsub>
 80a0376:	4605      	mov	r5, r0
    if(t < 1.0/6.0)
 80a0378:	4628      	mov	r0, r5
 80a037a:	f001 fda7 	bl	80a1ecc <__aeabi_f2d>
 80a037e:	a328      	add	r3, pc, #160	; (adr r3, 80a0420 <_Z7hue2rgbfff+0xe0>)
 80a0380:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0384:	4680      	mov	r8, r0
 80a0386:	4689      	mov	r9, r1
 80a0388:	f002 f866 	bl	80a2458 <__aeabi_dcmplt>
 80a038c:	b160      	cbz	r0, 80a03a8 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
 80a038e:	4621      	mov	r1, r4
 80a0390:	4630      	mov	r0, r6
 80a0392:	f002 f8fd 	bl	80a2590 <__aeabi_fsub>
 80a0396:	f001 fd99 	bl	80a1ecc <__aeabi_f2d>
 80a039a:	2200      	movs	r2, #0
 80a039c:	4b24      	ldr	r3, [pc, #144]	; (80a0430 <_Z7hue2rgbfff+0xf0>)
 80a039e:	f001 fde9 	bl	80a1f74 <__aeabi_dmul>
 80a03a2:	4642      	mov	r2, r8
 80a03a4:	464b      	mov	r3, r9
 80a03a6:	e024      	b.n	80a03f2 <_Z7hue2rgbfff+0xb2>
    if(t < 1.0/2.0)
 80a03a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a03ac:	4628      	mov	r0, r5
 80a03ae:	f002 fb97 	bl	80a2ae0 <__aeabi_fcmplt>
 80a03b2:	bb78      	cbnz	r0, 80a0414 <_Z7hue2rgbfff+0xd4>
        return q;
    if(t < 2.0/3.0)
 80a03b4:	a31c      	add	r3, pc, #112	; (adr r3, 80a0428 <_Z7hue2rgbfff+0xe8>)
 80a03b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03ba:	4640      	mov	r0, r8
 80a03bc:	4649      	mov	r1, r9
 80a03be:	f002 f84b 	bl	80a2458 <__aeabi_dcmplt>
 80a03c2:	b350      	cbz	r0, 80a041a <_Z7hue2rgbfff+0xda>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
 80a03c4:	4621      	mov	r1, r4
 80a03c6:	4630      	mov	r0, r6
 80a03c8:	f002 f8e2 	bl	80a2590 <__aeabi_fsub>
 80a03cc:	f001 fd7e 	bl	80a1ecc <__aeabi_f2d>
 80a03d0:	4642      	mov	r2, r8
 80a03d2:	4606      	mov	r6, r0
 80a03d4:	460f      	mov	r7, r1
 80a03d6:	a114      	add	r1, pc, #80	; (adr r1, 80a0428 <_Z7hue2rgbfff+0xe8>)
 80a03d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a03dc:	464b      	mov	r3, r9
 80a03de:	f001 fc15 	bl	80a1c0c <__aeabi_dsub>
 80a03e2:	4602      	mov	r2, r0
 80a03e4:	460b      	mov	r3, r1
 80a03e6:	4630      	mov	r0, r6
 80a03e8:	4639      	mov	r1, r7
 80a03ea:	f001 fdc3 	bl	80a1f74 <__aeabi_dmul>
 80a03ee:	4b10      	ldr	r3, [pc, #64]	; (80a0430 <_Z7hue2rgbfff+0xf0>)
 80a03f0:	2200      	movs	r2, #0
 80a03f2:	f001 fdbf 	bl	80a1f74 <__aeabi_dmul>
 80a03f6:	4606      	mov	r6, r0
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	460f      	mov	r7, r1
 80a03fc:	f001 fd66 	bl	80a1ecc <__aeabi_f2d>
 80a0400:	4602      	mov	r2, r0
 80a0402:	460b      	mov	r3, r1
 80a0404:	4630      	mov	r0, r6
 80a0406:	4639      	mov	r1, r7
 80a0408:	f001 fc02 	bl	80a1c10 <__adddf3>
 80a040c:	f002 f86c 	bl	80a24e8 <__aeabi_d2f>
 80a0410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
 80a0414:	4630      	mov	r0, r6
 80a0416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
 80a041a:	4620      	mov	r0, r4
}
 80a041c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0420:	55555555 	.word	0x55555555
 80a0424:	3fc55555 	.word	0x3fc55555
 80a0428:	55555555 	.word	0x55555555
 80a042c:	3fe55555 	.word	0x3fe55555
 80a0430:	40180000 	.word	0x40180000
 80a0434:	00000000 	.word	0x00000000

080a0438 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
 80a0438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a043c:	468a      	mov	sl, r1
 80a043e:	9001      	str	r0, [sp, #4]

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
 80a0440:	2100      	movs	r1, #0
 80a0442:	4618      	mov	r0, r3
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
 80a0444:	4615      	mov	r5, r2
 80a0446:	461c      	mov	r4, r3
 80a0448:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
 80a044c:	f002 fb3e 	bl	80a2acc <__aeabi_fcmpeq>
 80a0450:	2800      	cmp	r0, #0
 80a0452:	d164      	bne.n	80a051e <_ZN12ChainableLED11setColorHSBEhfff+0xe6>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a0454:	4658      	mov	r0, fp
 80a0456:	f001 fd39 	bl	80a1ecc <__aeabi_f2d>
 80a045a:	4680      	mov	r8, r0
 80a045c:	4689      	mov	r9, r1
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
 80a045e:	4658      	mov	r0, fp
 80a0460:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0464:	f002 fb3c 	bl	80a2ae0 <__aeabi_fcmplt>
 80a0468:	b168      	cbz	r0, 80a0486 <_ZN12ChainableLED11setColorHSBEhfff+0x4e>
 80a046a:	4620      	mov	r0, r4
 80a046c:	f001 fd2e 	bl	80a1ecc <__aeabi_f2d>
 80a0470:	2200      	movs	r2, #0
 80a0472:	4b45      	ldr	r3, [pc, #276]	; (80a0588 <_ZN12ChainableLED11setColorHSBEhfff+0x150>)
 80a0474:	f001 fbcc 	bl	80a1c10 <__adddf3>
 80a0478:	4642      	mov	r2, r8
 80a047a:	464b      	mov	r3, r9
 80a047c:	f001 fd7a 	bl	80a1f74 <__aeabi_dmul>
 80a0480:	f002 f832 	bl	80a24e8 <__aeabi_d2f>
 80a0484:	e00c      	b.n	80a04a0 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
 80a0486:	4659      	mov	r1, fp
 80a0488:	4620      	mov	r0, r4
 80a048a:	f002 f883 	bl	80a2594 <__addsf3>
 80a048e:	4659      	mov	r1, fp
 80a0490:	4606      	mov	r6, r0
 80a0492:	4620      	mov	r0, r4
 80a0494:	f002 f986 	bl	80a27a4 <__aeabi_fmul>
 80a0498:	4601      	mov	r1, r0
 80a049a:	4630      	mov	r0, r6
 80a049c:	f002 f878 	bl	80a2590 <__aeabi_fsub>
 80a04a0:	4604      	mov	r4, r0
 80a04a2:	4628      	mov	r0, r5
 80a04a4:	f001 fd12 	bl	80a1ecc <__aeabi_f2d>
        float p = 2.0 * brightness - q;
 80a04a8:	4642      	mov	r2, r8
 80a04aa:	464b      	mov	r3, r9
 80a04ac:	4606      	mov	r6, r0
 80a04ae:	460f      	mov	r7, r1
 80a04b0:	4640      	mov	r0, r8
 80a04b2:	4649      	mov	r1, r9
 80a04b4:	f001 fbac 	bl	80a1c10 <__adddf3>
 80a04b8:	4680      	mov	r8, r0
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	4689      	mov	r9, r1
 80a04be:	f001 fd05 	bl	80a1ecc <__aeabi_f2d>
 80a04c2:	4602      	mov	r2, r0
 80a04c4:	460b      	mov	r3, r1
 80a04c6:	4640      	mov	r0, r8
 80a04c8:	4649      	mov	r1, r9
 80a04ca:	f001 fb9f 	bl	80a1c0c <__aeabi_dsub>
 80a04ce:	f002 f80b 	bl	80a24e8 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
 80a04d2:	a329      	add	r3, pc, #164	; (adr r3, 80a0578 <_ZN12ChainableLED11setColorHSBEhfff+0x140>)
 80a04d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
 80a04d8:	4680      	mov	r8, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
 80a04da:	4639      	mov	r1, r7
 80a04dc:	4630      	mov	r0, r6
 80a04de:	f001 fb97 	bl	80a1c10 <__adddf3>
 80a04e2:	f002 f801 	bl	80a24e8 <__aeabi_d2f>
 80a04e6:	4621      	mov	r1, r4
 80a04e8:	4602      	mov	r2, r0
 80a04ea:	4640      	mov	r0, r8
 80a04ec:	f7ff ff28 	bl	80a0340 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
 80a04f0:	462a      	mov	r2, r5
 80a04f2:	4621      	mov	r1, r4
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
 80a04f4:	4683      	mov	fp, r0
        g = hue2rgb(p, q, hue);
 80a04f6:	4640      	mov	r0, r8
 80a04f8:	f7ff ff22 	bl	80a0340 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
 80a04fc:	a31e      	add	r3, pc, #120	; (adr r3, 80a0578 <_ZN12ChainableLED11setColorHSBEhfff+0x140>)
 80a04fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
 80a0502:	4605      	mov	r5, r0
        b = hue2rgb(p, q, hue - 1.0/3.0);
 80a0504:	4639      	mov	r1, r7
 80a0506:	4630      	mov	r0, r6
 80a0508:	f001 fb80 	bl	80a1c0c <__aeabi_dsub>
 80a050c:	f001 ffec 	bl	80a24e8 <__aeabi_d2f>
 80a0510:	4621      	mov	r1, r4
 80a0512:	4602      	mov	r2, r0
 80a0514:	4640      	mov	r0, r8
 80a0516:	f7ff ff13 	bl	80a0340 <_Z7hue2rgbfff>
 80a051a:	4604      	mov	r4, r0
 80a051c:	e001      	b.n	80a0522 <_ZN12ChainableLED11setColorHSBEhfff+0xea>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
 80a051e:	465c      	mov	r4, fp
 80a0520:	465d      	mov	r5, fp
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
 80a0522:	4628      	mov	r0, r5
 80a0524:	f001 fcd2 	bl	80a1ecc <__aeabi_f2d>
 80a0528:	a315      	add	r3, pc, #84	; (adr r3, 80a0580 <_ZN12ChainableLED11setColorHSBEhfff+0x148>)
 80a052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a052e:	f001 fd21 	bl	80a1f74 <__aeabi_dmul>
 80a0532:	f001 ffb9 	bl	80a24a8 <__aeabi_d2uiz>
 80a0536:	b2c6      	uxtb	r6, r0
 80a0538:	4658      	mov	r0, fp
 80a053a:	f001 fcc7 	bl	80a1ecc <__aeabi_f2d>
 80a053e:	a310      	add	r3, pc, #64	; (adr r3, 80a0580 <_ZN12ChainableLED11setColorHSBEhfff+0x148>)
 80a0540:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0544:	f001 fd16 	bl	80a1f74 <__aeabi_dmul>
 80a0548:	f001 ffae 	bl	80a24a8 <__aeabi_d2uiz>
 80a054c:	b2c5      	uxtb	r5, r0
 80a054e:	4620      	mov	r0, r4
 80a0550:	f001 fcbc 	bl	80a1ecc <__aeabi_f2d>
 80a0554:	a30a      	add	r3, pc, #40	; (adr r3, 80a0580 <_ZN12ChainableLED11setColorHSBEhfff+0x148>)
 80a0556:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a055a:	f001 fd0b 	bl	80a1f74 <__aeabi_dmul>
 80a055e:	f001 ffa3 	bl	80a24a8 <__aeabi_d2uiz>
 80a0562:	4633      	mov	r3, r6
 80a0564:	462a      	mov	r2, r5
 80a0566:	4651      	mov	r1, sl
 80a0568:	b2c0      	uxtb	r0, r0
 80a056a:	900c      	str	r0, [sp, #48]	; 0x30
 80a056c:	9801      	ldr	r0, [sp, #4]
}
 80a056e:	b003      	add	sp, #12
 80a0570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
 80a0574:	f7ff be7f 	b.w	80a0276 <_ZN12ChainableLED11setColorRGBEhhhh>
 80a0578:	55555555 	.word	0x55555555
 80a057c:	3fd55555 	.word	0x3fd55555
 80a0580:	00000000 	.word	0x00000000
 80a0584:	406fe000 	.word	0x406fe000
 80a0588:	3ff00000 	.word	0x3ff00000

080a058c <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
 80a058c:	f000 b820 	b.w	80a05d0 <HAL_Pin_Map>

080a0590 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <os_mutex_create+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601d0 	.word	0x080601d0

080a05a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_RNG_GetRandomNumber+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	685b      	ldr	r3, [r3, #4]
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	0806019c 	.word	0x0806019c

080a05b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_Delay_Microseconds+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	68db      	ldr	r3, [r3, #12]
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	0806019c 	.word	0x0806019c

080a05c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	695b      	ldr	r3, [r3, #20]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	0806019c 	.word	0x0806019c

080a05d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_Pin_Map+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	681b      	ldr	r3, [r3, #0]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601b0 	.word	0x080601b0

080a05e0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <HAL_Pin_Mode+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	689b      	ldr	r3, [r3, #8]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601b0 	.word	0x080601b0

080a05f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <HAL_Get_Pin_Mode+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	68db      	ldr	r3, [r3, #12]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601b0 	.word	0x080601b0

080a0600 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <HAL_GPIO_Write+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	691b      	ldr	r3, [r3, #16]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601b0 	.word	0x080601b0

080a0610 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <HAL_I2C_Write_Data+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601ac 	.word	0x080601ac

080a0620 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <HAL_I2C_Available_Data+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601ac 	.word	0x080601ac

080a0630 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <HAL_I2C_Read_Data+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601ac 	.word	0x080601ac

080a0640 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <HAL_I2C_Peek_Data+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601ac 	.word	0x080601ac

080a0650 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <HAL_I2C_Flush_Data+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601ac 	.word	0x080601ac

080a0660 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <HAL_I2C_Is_Enabled+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601ac 	.word	0x080601ac

080a0670 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b03      	ldr	r3, [pc, #12]	; (80a0680 <HAL_I2C_Init+0x10>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a067a:	9301      	str	r3, [sp, #4]
 80a067c:	bd08      	pop	{r3, pc}
 80a067e:	0000      	.short	0x0000
 80a0680:	080601ac 	.word	0x080601ac

080a0684 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <HAL_SPI_Init+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	69db      	ldr	r3, [r3, #28]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601b4 	.word	0x080601b4

080a0694 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_SPI_Is_Enabled+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	6a1b      	ldr	r3, [r3, #32]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601b4 	.word	0x080601b4

080a06a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_USART_Init+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	699b      	ldr	r3, [r3, #24]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601c4 	.word	0x080601c4

080a06b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_USART_Write_Data+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601c4 	.word	0x080601c4

080a06c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_USART_Available_Data+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601c4 	.word	0x080601c4

080a06d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_USART_Read_Data+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601c4 	.word	0x080601c4

080a06e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_USART_Peek_Data+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601c4 	.word	0x080601c4

080a06f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_USART_Flush_Data+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601c4 	.word	0x080601c4

080a0704 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_USART_Is_Enabled+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601c4 	.word	0x080601c4

080a0714 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601c4 	.word	0x080601c4

080a0724 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <HAL_USB_USART_Init+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	681b      	ldr	r3, [r3, #0]
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601d8 	.word	0x080601d8

080a0734 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <HAL_USB_USART_Available_Data+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	691b      	ldr	r3, [r3, #16]
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601d8 	.word	0x080601d8

080a0744 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	695b      	ldr	r3, [r3, #20]
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601d8 	.word	0x080601d8

080a0754 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <HAL_USB_USART_Receive_Data+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	699b      	ldr	r3, [r3, #24]
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601d8 	.word	0x080601d8

080a0764 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <HAL_USB_USART_Send_Data+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	69db      	ldr	r3, [r3, #28]
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601d8 	.word	0x080601d8

080a0774 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <HAL_USB_USART_Flush_Data+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	6a1b      	ldr	r3, [r3, #32]
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601d8 	.word	0x080601d8

080a0784 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <inet_gethostbyname+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601c0 	.word	0x080601c0

080a0794 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <set_system_mode+0xc>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	685b      	ldr	r3, [r3, #4]
 80a079c:	9301      	str	r3, [sp, #4]
 80a079e:	bd08      	pop	{r3, pc}
 80a07a0:	080601a4 	.word	0x080601a4

080a07a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <system_delay_ms+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	695b      	ldr	r3, [r3, #20]
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601a4 	.word	0x080601a4

080a07b4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <application_thread_current+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601a4 	.word	0x080601a4

080a07c4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <application_thread_invoke+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601a4 	.word	0x080601a4

080a07d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b03      	ldr	r3, [pc, #12]	; (80a07e4 <system_ctrl_set_app_request_handler+0x10>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07de:	9301      	str	r3, [sp, #4]
 80a07e0:	bd08      	pop	{r3, pc}
 80a07e2:	0000      	.short	0x0000
 80a07e4:	080601a4 	.word	0x080601a4

080a07e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b03      	ldr	r3, [pc, #12]	; (80a07f8 <system_ctrl_set_result+0x10>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a07f2:	9301      	str	r3, [sp, #4]
 80a07f4:	bd08      	pop	{r3, pc}
 80a07f6:	0000      	.short	0x0000
 80a07f8:	080601a4 	.word	0x080601a4

080a07fc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <spark_function+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	685b      	ldr	r3, [r3, #4]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601cc 	.word	0x080601cc

080a080c <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <spark_send_event+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6a1b      	ldr	r3, [r3, #32]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601cc 	.word	0x080601cc

080a081c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601cc 	.word	0x080601cc

080a082c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <network_connect+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	685b      	ldr	r3, [r3, #4]
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601c8 	.word	0x080601c8

080a083c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <network_connecting+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	689b      	ldr	r3, [r3, #8]
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601c8 	.word	0x080601c8

080a084c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <network_disconnect+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	68db      	ldr	r3, [r3, #12]
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	080601c8 	.word	0x080601c8

080a085c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <network_ready+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	691b      	ldr	r3, [r3, #16]
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	080601c8 	.word	0x080601c8

080a086c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <network_on+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	695b      	ldr	r3, [r3, #20]
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	080601c8 	.word	0x080601c8

080a087c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <network_off+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	699b      	ldr	r3, [r3, #24]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601c8 	.word	0x080601c8

080a088c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <network_listen+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	69db      	ldr	r3, [r3, #28]
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601c8 	.word	0x080601c8

080a089c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <network_listening+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	6a1b      	ldr	r3, [r3, #32]
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601c8 	.word	0x080601c8

080a08ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <network_set_listen_timeout+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	080601c8 	.word	0x080601c8

080a08bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b02      	ldr	r3, [pc, #8]	; (80a08c8 <network_get_listen_timeout+0xc>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08c4:	9301      	str	r3, [sp, #4]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	080601c8 	.word	0x080601c8

080a08cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08cc:	b508      	push	{r3, lr}
 80a08ce:	4b02      	ldr	r3, [pc, #8]	; (80a08d8 <malloc+0xc>)
 80a08d0:	681b      	ldr	r3, [r3, #0]
 80a08d2:	681b      	ldr	r3, [r3, #0]
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	bd08      	pop	{r3, pc}
 80a08d8:	080601a0 	.word	0x080601a0

080a08dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <free+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	685b      	ldr	r3, [r3, #4]
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601a0 	.word	0x080601a0

080a08ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <realloc+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	689b      	ldr	r3, [r3, #8]
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601a0 	.word	0x080601a0

080a08fc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <abort+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601a0 	.word	0x080601a0

080a090c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <_malloc_r+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601a0 	.word	0x080601a0

080a091c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a091c:	2100      	movs	r1, #0
 80a091e:	f7ff bf41 	b.w	80a07a4 <system_delay_ms>

080a0922 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0922:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0924:	6883      	ldr	r3, [r0, #8]
 80a0926:	4604      	mov	r4, r0
 80a0928:	b90b      	cbnz	r3, 80a092e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a092a:	f001 f820 	bl	80a196e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a092e:	68c3      	ldr	r3, [r0, #12]
 80a0930:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0932:	68a3      	ldr	r3, [r4, #8]
 80a0934:	b11b      	cbz	r3, 80a093e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0936:	2203      	movs	r2, #3
 80a0938:	4621      	mov	r1, r4
 80a093a:	4620      	mov	r0, r4
 80a093c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a093e:	4620      	mov	r0, r4
}
 80a0940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0944:	2110      	movs	r1, #16
 80a0946:	f001 b810 	b.w	80a196a <_ZdlPvj>

080a094a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a094a:	4770      	bx	lr

080a094c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a094c:	2000      	movs	r0, #0
 80a094e:	4770      	bx	lr

080a0950 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0950:	b510      	push	{r4, lr}
 80a0952:	4604      	mov	r4, r0
 80a0954:	2110      	movs	r1, #16
 80a0956:	f001 f808 	bl	80a196a <_ZdlPvj>
 80a095a:	4620      	mov	r0, r4
 80a095c:	bd10      	pop	{r4, pc}

080a095e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a095e:	b508      	push	{r3, lr}
      { delete this; }
 80a0960:	b108      	cbz	r0, 80a0966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0962:	f7ff fff5 	bl	80a0950 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0966:	bd08      	pop	{r3, pc}

080a0968 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0968:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a096a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a096c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a096e:	b113      	cbz	r3, 80a0976 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0970:	2203      	movs	r2, #3
 80a0972:	4601      	mov	r1, r0
 80a0974:	4798      	blx	r3
    }
 80a0976:	4620      	mov	r0, r4
 80a0978:	bd10      	pop	{r4, pc}

080a097a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a097a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a097c:	68c4      	ldr	r4, [r0, #12]
 80a097e:	b1ec      	cbz	r4, 80a09bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0980:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0982:	2b02      	cmp	r3, #2
 80a0984:	d102      	bne.n	80a098c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0986:	68e0      	ldr	r0, [r4, #12]
 80a0988:	f7ff ffa8 	bl	80a08dc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a098c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a098e:	b135      	cbz	r5, 80a099e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0990:	4628      	mov	r0, r5
 80a0992:	f7ff ffe9 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
 80a0996:	2110      	movs	r1, #16
 80a0998:	4628      	mov	r0, r5
 80a099a:	f000 ffe6 	bl	80a196a <_ZdlPvj>
 80a099e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a09a0:	b135      	cbz	r5, 80a09b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a09a2:	4628      	mov	r0, r5
 80a09a4:	f7ff ffe0 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
 80a09a8:	2110      	movs	r1, #16
 80a09aa:	4628      	mov	r0, r5
 80a09ac:	f000 ffdd 	bl	80a196a <_ZdlPvj>
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a09b6:	2114      	movs	r1, #20
 80a09b8:	f000 bfd7 	b.w	80a196a <_ZdlPvj>
 80a09bc:	bd38      	pop	{r3, r4, r5, pc}

080a09be <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a09be:	b510      	push	{r4, lr}
 80a09c0:	b088      	sub	sp, #32
 80a09c2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a09c4:	4668      	mov	r0, sp
 80a09c6:	f000 fc93 	bl	80a12f0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a09ca:	4669      	mov	r1, sp
 80a09cc:	a804      	add	r0, sp, #16
 80a09ce:	f000 fcb1 	bl	80a1334 <_ZN6StringC1ERKS_>
 80a09d2:	a804      	add	r0, sp, #16
 80a09d4:	47a0      	blx	r4
 80a09d6:	4604      	mov	r4, r0
 80a09d8:	a804      	add	r0, sp, #16
 80a09da:	f000 fc42 	bl	80a1262 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a09de:	4668      	mov	r0, sp
 80a09e0:	f000 fc3f 	bl	80a1262 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a09e4:	4620      	mov	r0, r4
 80a09e6:	b008      	add	sp, #32
 80a09e8:	bd10      	pop	{r4, pc}

080a09ea <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a09ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a09ec:	4607      	mov	r7, r0
 80a09ee:	460e      	mov	r6, r1
 80a09f0:	4615      	mov	r5, r2
 80a09f2:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a09f4:	2410      	movs	r4, #16
 80a09f6:	4622      	mov	r2, r4
 80a09f8:	2100      	movs	r1, #0
 80a09fa:	4668      	mov	r0, sp
 80a09fc:	f002 f8b9 	bl	80a2b72 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0a00:	2200      	movs	r2, #0
 80a0a02:	4669      	mov	r1, sp
 80a0a04:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a0a06:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a0a0a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0a0c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0a0e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0a10:	f7ff fef4 	bl	80a07fc <spark_function>
}
 80a0a14:	b005      	add	sp, #20
 80a0a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0a18:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0a1a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0a1c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0a1e:	b17c      	cbz	r4, 80a0a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0a20:	6863      	ldr	r3, [r4, #4]
 80a0a22:	3b01      	subs	r3, #1
 80a0a24:	6063      	str	r3, [r4, #4]
 80a0a26:	b95b      	cbnz	r3, 80a0a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0a28:	6823      	ldr	r3, [r4, #0]
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	689b      	ldr	r3, [r3, #8]
 80a0a2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0a30:	68a3      	ldr	r3, [r4, #8]
 80a0a32:	3b01      	subs	r3, #1
 80a0a34:	60a3      	str	r3, [r4, #8]
 80a0a36:	b91b      	cbnz	r3, 80a0a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0a38:	6823      	ldr	r3, [r4, #0]
 80a0a3a:	4620      	mov	r0, r4
 80a0a3c:	68db      	ldr	r3, [r3, #12]
 80a0a3e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0a40:	4628      	mov	r0, r5
 80a0a42:	bd38      	pop	{r3, r4, r5, pc}

080a0a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0a44:	b513      	push	{r0, r1, r4, lr}
 80a0a46:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0a48:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0a4c:	2300      	movs	r3, #0
 80a0a4e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0a50:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a52:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0a54:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0a56:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0a58:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0a5a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0a5c:	f7ff ffdc 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a60:	4620      	mov	r0, r4
 80a0a62:	b002      	add	sp, #8
 80a0a64:	bd10      	pop	{r4, pc}

080a0a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0a66:	680b      	ldr	r3, [r1, #0]
 80a0a68:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0a6a:	b113      	cbz	r3, 80a0a72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0a6c:	685a      	ldr	r2, [r3, #4]
 80a0a6e:	3201      	adds	r2, #1
 80a0a70:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0a72:	4770      	bx	lr

080a0a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a76:	460c      	mov	r4, r1
 80a0a78:	4606      	mov	r6, r0
 80a0a7a:	460f      	mov	r7, r1
 80a0a7c:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0a80:	ad02      	add	r5, sp, #8
 80a0a82:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0a86:	4621      	mov	r1, r4
 80a0a88:	a801      	add	r0, sp, #4
 80a0a8a:	f7ff ffec 	bl	80a0a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0a8e:	4629      	mov	r1, r5
 80a0a90:	4630      	mov	r0, r6
 80a0a92:	f7ff ffd7 	bl	80a0a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0a96:	a801      	add	r0, sp, #4
 80a0a98:	f7ff ffbe 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a9c:	4620      	mov	r0, r4
 80a0a9e:	f7ff ffbb 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0aa2:	4638      	mov	r0, r7
 80a0aa4:	2108      	movs	r1, #8
 80a0aa6:	f000 ff60 	bl	80a196a <_ZdlPvj>
        return p;
    }
 80a0aaa:	4630      	mov	r0, r6
 80a0aac:	b003      	add	sp, #12
 80a0aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0ab0:	b513      	push	{r0, r1, r4, lr}
 80a0ab2:	460b      	mov	r3, r1
 80a0ab4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ab6:	c803      	ldmia	r0, {r0, r1}
 80a0ab8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0ac0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ac4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0ac8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0acc:	b002      	add	sp, #8
 80a0ace:	bd10      	pop	{r4, pc}

080a0ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0ad0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0ad2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0ad4:	b90a      	cbnz	r2, 80a0ada <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0ad6:	f000 ff4a 	bl	80a196e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ada:	68c3      	ldr	r3, [r0, #12]
    }
 80a0adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ae0:	4718      	bx	r3

080a0ae2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0ae2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ae4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0ae6:	f100 0110 	add.w	r1, r0, #16
 80a0aea:	f7ff fff1 	bl	80a0ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0aee:	bd08      	pop	{r3, pc}

080a0af0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0af0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0af2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0af4:	b90a      	cbnz	r2, 80a0afa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0af6:	f000 ff3a 	bl	80a196e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0afa:	68c3      	ldr	r3, [r0, #12]
    }
 80a0afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b00:	4718      	bx	r3

080a0b02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0b02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0b04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0b06:	f100 0110 	add.w	r1, r0, #16
 80a0b0a:	f7ff fff1 	bl	80a0af0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0b0e:	bd08      	pop	{r3, pc}

080a0b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b12:	2300      	movs	r3, #0
 80a0b14:	6083      	str	r3, [r0, #8]
 80a0b16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b18:	4604      	mov	r4, r0
 80a0b1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0b1c:	b12b      	cbz	r3, 80a0b2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0b1e:	2202      	movs	r2, #2
 80a0b20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0b22:	68eb      	ldr	r3, [r5, #12]
 80a0b24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0b26:	68ab      	ldr	r3, [r5, #8]
 80a0b28:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b34:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0b38:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0b3a:	f04f 0002 	mov.w	r0, #2
 80a0b3e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b40:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b44:	808b      	strh	r3, [r1, #4]
 80a0b46:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b48:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0b4a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b4e:	600b      	str	r3, [r1, #0]
 80a0b50:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0b54:	4299      	cmp	r1, r3
 80a0b56:	d103      	bne.n	80a0b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0b58:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a0b5c:	2d00      	cmp	r5, #0
 80a0b5e:	d1f7      	bne.n	80a0b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0b60:	d002      	beq.n	80a0b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0b62:	f88d 1000 	strb.w	r1, [sp]
 80a0b66:	e06c      	b.n	80a0c42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0b68:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b6c:	bf1c      	itt	ne
 80a0b6e:	60e7      	strne	r7, [r4, #12]
 80a0b70:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0b72:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b76:	bf18      	it	ne
 80a0b78:	461f      	movne	r7, r3
 80a0b7a:	2301      	movs	r3, #1
 80a0b7c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0b7e:	f3bf 8f5f 	dmb	sy
 80a0b82:	f104 0308 	add.w	r3, r4, #8
 80a0b86:	2000      	movs	r0, #0
 80a0b88:	e853 6f00 	ldrex	r6, [r3]
 80a0b8c:	e843 0200 	strex	r2, r0, [r3]
 80a0b90:	2a00      	cmp	r2, #0
 80a0b92:	d1f9      	bne.n	80a0b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0b94:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0b98:	2e00      	cmp	r6, #0
 80a0b9a:	d052      	beq.n	80a0c42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0b9c:	f7ff fe0a 	bl	80a07b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0ba0:	b120      	cbz	r0, 80a0bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0ba2:	4629      	mov	r1, r5
 80a0ba4:	4630      	mov	r0, r6
 80a0ba6:	f7ff ff93 	bl	80a0ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0baa:	e043      	b.n	80a0c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0bac:	4631      	mov	r1, r6
 80a0bae:	4668      	mov	r0, sp
 80a0bb0:	f7ff ffae 	bl	80a0b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0bb4:	68e0      	ldr	r0, [r4, #12]
 80a0bb6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0bba:	b108      	cbz	r0, 80a0bc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a0bbc:	f002 f818 	bl	80a2bf0 <strdup>
 80a0bc0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0bc2:	2010      	movs	r0, #16
 80a0bc4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0bc8:	f7ff fa67 	bl	80a009a <_Znwj>
 80a0bcc:	4605      	mov	r5, r0
 80a0bce:	b330      	cbz	r0, 80a0c1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bd0:	f04f 0800 	mov.w	r8, #0
 80a0bd4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bd8:	2018      	movs	r0, #24
 80a0bda:	f7ff fa5e 	bl	80a009a <_Znwj>
 80a0bde:	4604      	mov	r4, r0
 80a0be0:	b1c0      	cbz	r0, 80a0c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0be2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0be6:	4601      	mov	r1, r0
 80a0be8:	4668      	mov	r0, sp
 80a0bea:	f7ff ff61 	bl	80a0ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bee:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0bf0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bf2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bf4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0bf6:	9202      	str	r2, [sp, #8]
 80a0bf8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bfa:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0bfc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0c00:	9203      	str	r2, [sp, #12]
 80a0c02:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c04:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0c08:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c0c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c0e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c12:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c14:	4b0e      	ldr	r3, [pc, #56]	; (80a0c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0c16:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c18:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0c1a:	4b0e      	ldr	r3, [pc, #56]	; (80a0c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a0c1c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0c1e:	9804      	ldr	r0, [sp, #16]
 80a0c20:	f7ff fe5c 	bl	80a08dc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c24:	4668      	mov	r0, sp
 80a0c26:	f7ff fe9f 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0c2a:	2200      	movs	r2, #0
 80a0c2c:	4629      	mov	r1, r5
 80a0c2e:	480a      	ldr	r0, [pc, #40]	; (80a0c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a0c30:	f7ff fdc8 	bl	80a07c4 <application_thread_invoke>
 80a0c34:	4630      	mov	r0, r6
 80a0c36:	f7ff fe97 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0c3a:	2110      	movs	r1, #16
 80a0c3c:	4630      	mov	r0, r6
 80a0c3e:	f000 fe94 	bl	80a196a <_ZdlPvj>
 80a0c42:	4638      	mov	r0, r7
 80a0c44:	f7ff fe4a 	bl	80a08dc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0c48:	b006      	add	sp, #24
 80a0c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0c4e:	bf00      	nop
 80a0c50:	080a0ae3 	.word	0x080a0ae3
 80a0c54:	080a0d45 	.word	0x080a0d45
 80a0c58:	080a0923 	.word	0x080a0923

080a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c60:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0c62:	ad07      	add	r5, sp, #28
 80a0c64:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0c68:	4606      	mov	r6, r0
 80a0c6a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0c6c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0c6e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0c70:	460f      	mov	r7, r1
 80a0c72:	4690      	mov	r8, r2
 80a0c74:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0c78:	f8c5 b004 	str.w	fp, [r5, #4]
 80a0c7c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0c80:	9307      	str	r3, [sp, #28]
 80a0c82:	f7ff fa0a 	bl	80a009a <_Znwj>
 80a0c86:	4604      	mov	r4, r0
 80a0c88:	b138      	cbz	r0, 80a0c9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0c8a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0c8e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0c92:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0c96:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0c9a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c9c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0c9e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0ca0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ca2:	f7ff f9fa 	bl	80a009a <_Znwj>
 80a0ca6:	b128      	cbz	r0, 80a0cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0ca8:	2301      	movs	r3, #1
 80a0caa:	6043      	str	r3, [r0, #4]
 80a0cac:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0cae:	4b23      	ldr	r3, [pc, #140]	; (80a0d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0cb0:	60c4      	str	r4, [r0, #12]
 80a0cb2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0cb4:	4b22      	ldr	r3, [pc, #136]	; (80a0d40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0cb6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0cb8:	2008      	movs	r0, #8
 80a0cba:	9308      	str	r3, [sp, #32]
 80a0cbc:	f7ff f9ed 	bl	80a009a <_Znwj>
 80a0cc0:	4604      	mov	r4, r0
 80a0cc2:	b128      	cbz	r0, 80a0cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0cc4:	9b03      	ldr	r3, [sp, #12]
 80a0cc6:	a904      	add	r1, sp, #16
 80a0cc8:	f840 3b04 	str.w	r3, [r0], #4
 80a0ccc:	f7ff fecb 	bl	80a0a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0cd0:	9500      	str	r5, [sp, #0]
 80a0cd2:	fa5f f38a 	uxtb.w	r3, sl
 80a0cd6:	464a      	mov	r2, r9
 80a0cd8:	4641      	mov	r1, r8
 80a0cda:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0cdc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0cde:	f7ff fd95 	bl	80a080c <spark_send_event>
 80a0ce2:	b9b8      	cbnz	r0, 80a0d14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0ce4:	9b03      	ldr	r3, [sp, #12]
 80a0ce6:	785b      	ldrb	r3, [r3, #1]
 80a0ce8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0cec:	b993      	cbnz	r3, 80a0d14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0cee:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0cf2:	a905      	add	r1, sp, #20
 80a0cf4:	a803      	add	r0, sp, #12
 80a0cf6:	9205      	str	r2, [sp, #20]
 80a0cf8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0cfc:	f7ff ff18 	bl	80a0b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0d00:	9805      	ldr	r0, [sp, #20]
 80a0d02:	f7ff fdeb 	bl	80a08dc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0d06:	a805      	add	r0, sp, #20
 80a0d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0d0a:	f7ff feb3 	bl	80a0a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d0e:	a806      	add	r0, sp, #24
 80a0d10:	f7ff fe82 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d14:	9b03      	ldr	r3, [sp, #12]
 80a0d16:	a904      	add	r1, sp, #16
 80a0d18:	a806      	add	r0, sp, #24
 80a0d1a:	9305      	str	r3, [sp, #20]
 80a0d1c:	f7ff fea3 	bl	80a0a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0d20:	a905      	add	r1, sp, #20
 80a0d22:	4630      	mov	r0, r6
 80a0d24:	f7ff fe8e 	bl	80a0a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d28:	a806      	add	r0, sp, #24
 80a0d2a:	f7ff fe75 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d2e:	a804      	add	r0, sp, #16
 80a0d30:	f7ff fe72 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0d34:	4630      	mov	r0, r6
 80a0d36:	b00b      	add	sp, #44	; 0x2c
 80a0d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0d3c:	080a2c68 	.word	0x080a2c68
 80a0d40:	080a0eb1 	.word	0x080a0eb1

080a0d44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0d44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0d4a:	d006      	beq.n	80a0d5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0d4c:	2a03      	cmp	r2, #3
 80a0d4e:	d017      	beq.n	80a0d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0d50:	2a01      	cmp	r2, #1
 80a0d52:	d121      	bne.n	80a0d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0d54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0d56:	6003      	str	r3, [r0, #0]
	      break;
 80a0d58:	e01e      	b.n	80a0d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0d5a:	2018      	movs	r0, #24
 80a0d5c:	680e      	ldr	r6, [r1, #0]
 80a0d5e:	f7ff f99c 	bl	80a009a <_Znwj>
 80a0d62:	4605      	mov	r5, r0
 80a0d64:	b150      	cbz	r0, 80a0d7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0d66:	4631      	mov	r1, r6
 80a0d68:	f7ff fed2 	bl	80a0b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0d6c:	6930      	ldr	r0, [r6, #16]
 80a0d6e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0d72:	b108      	cbz	r0, 80a0d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0d74:	f001 ff3c 	bl	80a2bf0 <strdup>
 80a0d78:	6128      	str	r0, [r5, #16]
 80a0d7a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0d7c:	6025      	str	r5, [r4, #0]
 80a0d7e:	e00b      	b.n	80a0d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0d80:	6804      	ldr	r4, [r0, #0]
 80a0d82:	b14c      	cbz	r4, 80a0d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0d84:	6920      	ldr	r0, [r4, #16]
 80a0d86:	f7ff fda9 	bl	80a08dc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d8a:	4620      	mov	r0, r4
 80a0d8c:	f7ff fdec 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0d90:	2118      	movs	r1, #24
 80a0d92:	4620      	mov	r0, r4
 80a0d94:	f000 fde9 	bl	80a196a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0d98:	2000      	movs	r0, #0
 80a0d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d9c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0d9c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d9e:	2300      	movs	r3, #0
 80a0da0:	6083      	str	r3, [r0, #8]
 80a0da2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0da4:	4604      	mov	r4, r0
 80a0da6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0da8:	b12b      	cbz	r3, 80a0db6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0daa:	2202      	movs	r2, #2
 80a0dac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0dae:	68eb      	ldr	r3, [r5, #12]
 80a0db0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0db2:	68ab      	ldr	r3, [r5, #8]
 80a0db4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	bd38      	pop	{r3, r4, r5, pc}

080a0dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dba:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0dbc:	b570      	push	{r4, r5, r6, lr}
 80a0dbe:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dc0:	d006      	beq.n	80a0dd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0dc2:	2a03      	cmp	r2, #3
 80a0dc4:	d011      	beq.n	80a0dea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0dc6:	2a01      	cmp	r2, #1
 80a0dc8:	d118      	bne.n	80a0dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0dca:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0dcc:	6003      	str	r3, [r0, #0]
	      break;
 80a0dce:	e015      	b.n	80a0dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0dd0:	2014      	movs	r0, #20
 80a0dd2:	680e      	ldr	r6, [r1, #0]
 80a0dd4:	f7ff f961 	bl	80a009a <_Znwj>
 80a0dd8:	4605      	mov	r5, r0
 80a0dda:	b120      	cbz	r0, 80a0de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0ddc:	4631      	mov	r1, r6
 80a0dde:	f7ff ffdd 	bl	80a0d9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0de2:	7c33      	ldrb	r3, [r6, #16]
 80a0de4:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0de6:	6025      	str	r5, [r4, #0]
 80a0de8:	e008      	b.n	80a0dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0dea:	6804      	ldr	r4, [r0, #0]
 80a0dec:	b134      	cbz	r4, 80a0dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	f7ff fdba 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0df4:	2114      	movs	r1, #20
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f000 fdb7 	bl	80a196a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0dfc:	2000      	movs	r0, #0
 80a0dfe:	bd70      	pop	{r4, r5, r6, pc}

080a0e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e02:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0e04:	f3bf 8f5f 	dmb	sy
 80a0e08:	b087      	sub	sp, #28
 80a0e0a:	2300      	movs	r3, #0
 80a0e0c:	e850 6f00 	ldrex	r6, [r0]
 80a0e10:	e840 3200 	strex	r2, r3, [r0]
 80a0e14:	2a00      	cmp	r2, #0
 80a0e16:	d1f9      	bne.n	80a0e0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0e18:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0e1c:	2e00      	cmp	r6, #0
 80a0e1e:	d03f      	beq.n	80a0ea0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0e20:	4618      	mov	r0, r3
 80a0e22:	f7ff fcc7 	bl	80a07b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0e26:	4607      	mov	r7, r0
 80a0e28:	b120      	cbz	r0, 80a0e34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0e2a:	4621      	mov	r1, r4
 80a0e2c:	4630      	mov	r0, r6
 80a0e2e:	f7ff fe5f 	bl	80a0af0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e32:	e02e      	b.n	80a0e92 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0e34:	4631      	mov	r1, r6
 80a0e36:	a801      	add	r0, sp, #4
 80a0e38:	f7ff ffb0 	bl	80a0d9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0e3c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0e3e:	2010      	movs	r0, #16
 80a0e40:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0e44:	f7ff f929 	bl	80a009a <_Znwj>
 80a0e48:	4605      	mov	r5, r0
 80a0e4a:	b1d0      	cbz	r0, 80a0e82 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e4c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e4e:	2014      	movs	r0, #20
 80a0e50:	f7ff f923 	bl	80a009a <_Znwj>
 80a0e54:	4604      	mov	r4, r0
 80a0e56:	b178      	cbz	r0, 80a0e78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e58:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0e5a:	4601      	mov	r1, r0
 80a0e5c:	a801      	add	r0, sp, #4
 80a0e5e:	f7ff fe27 	bl	80a0ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e62:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0e64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e68:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0e6a:	9203      	str	r2, [sp, #12]
 80a0e6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e6e:	60e3      	str	r3, [r4, #12]
 80a0e70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e74:	9204      	str	r2, [sp, #16]
 80a0e76:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e78:	4b0a      	ldr	r3, [pc, #40]	; (80a0ea4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e7a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0e7e:	4b0a      	ldr	r3, [pc, #40]	; (80a0ea8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0e80:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e82:	a801      	add	r0, sp, #4
 80a0e84:	f7ff fd70 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0e88:	2200      	movs	r2, #0
 80a0e8a:	4629      	mov	r1, r5
 80a0e8c:	4807      	ldr	r0, [pc, #28]	; (80a0eac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0e8e:	f7ff fc99 	bl	80a07c4 <application_thread_invoke>
 80a0e92:	4630      	mov	r0, r6
 80a0e94:	f7ff fd68 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0e98:	2110      	movs	r1, #16
 80a0e9a:	4630      	mov	r0, r6
 80a0e9c:	f000 fd65 	bl	80a196a <_ZdlPvj>
        }
    }
 80a0ea0:	b007      	add	sp, #28
 80a0ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ea4:	080a0b03 	.word	0x080a0b03
 80a0ea8:	080a0dbb 	.word	0x080a0dbb
 80a0eac:	080a0923 	.word	0x080a0923

080a0eb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0eb0:	b530      	push	{r4, r5, lr}
 80a0eb2:	4604      	mov	r4, r0
 80a0eb4:	b085      	sub	sp, #20
 80a0eb6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0eb8:	4668      	mov	r0, sp
 80a0eba:	4611      	mov	r1, r2
 80a0ebc:	f7ff fdda 	bl	80a0a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0ec0:	b17c      	cbz	r4, 80a0ee2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0ec2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0ec4:	4628      	mov	r0, r5
 80a0ec6:	b10d      	cbz	r5, 80a0ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0ec8:	f001 fe92 	bl	80a2bf0 <strdup>
 80a0ecc:	9002      	str	r0, [sp, #8]
 80a0ece:	a902      	add	r1, sp, #8
 80a0ed0:	4668      	mov	r0, sp
 80a0ed2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0ed6:	f7ff fe2b 	bl	80a0b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0eda:	9802      	ldr	r0, [sp, #8]
 80a0edc:	f7ff fcfe 	bl	80a08dc <free>
 80a0ee0:	e01d      	b.n	80a0f1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ee2:	f04f 0201 	mov.w	r2, #1
 80a0ee6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ee8:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0eec:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0ef0:	42a3      	cmp	r3, r4
 80a0ef2:	d103      	bne.n	80a0efc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0ef4:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0ef8:	2900      	cmp	r1, #0
 80a0efa:	d1f7      	bne.n	80a0eec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0efc:	d002      	beq.n	80a0f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0efe:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0f02:	e00c      	b.n	80a0f1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0f04:	f110 010c 	adds.w	r1, r0, #12
 80a0f08:	f04f 0301 	mov.w	r3, #1
 80a0f0c:	bf18      	it	ne
 80a0f0e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0f10:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0f14:	3004      	adds	r0, #4
 80a0f16:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0f1a:	f7ff ff71 	bl	80a0e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0f1e:	a801      	add	r0, sp, #4
 80a0f20:	f7ff fd7a 	bl	80a0a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0f24:	b005      	add	sp, #20
 80a0f26:	bd30      	pop	{r4, r5, pc}

080a0f28 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0f28:	4770      	bx	lr

080a0f2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f2c:	4606      	mov	r6, r0
 80a0f2e:	4615      	mov	r5, r2
 80a0f30:	460c      	mov	r4, r1
 80a0f32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f34:	42bc      	cmp	r4, r7
 80a0f36:	d006      	beq.n	80a0f46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0f38:	6833      	ldr	r3, [r6, #0]
 80a0f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0f3e:	689b      	ldr	r3, [r3, #8]
 80a0f40:	4630      	mov	r0, r6
 80a0f42:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f44:	e7f6      	b.n	80a0f34 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0f46:	4628      	mov	r0, r5
 80a0f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f4a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0f4a:	2200      	movs	r2, #0
 80a0f4c:	7c00      	ldrb	r0, [r0, #16]
 80a0f4e:	f7ff bb5f 	b.w	80a0610 <HAL_I2C_Write_Data>

080a0f52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0f52:	2100      	movs	r1, #0
 80a0f54:	7c00      	ldrb	r0, [r0, #16]
 80a0f56:	f7ff bb63 	b.w	80a0620 <HAL_I2C_Available_Data>

080a0f5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0f5a:	2100      	movs	r1, #0
 80a0f5c:	7c00      	ldrb	r0, [r0, #16]
 80a0f5e:	f7ff bb67 	b.w	80a0630 <HAL_I2C_Read_Data>

080a0f62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0f62:	2100      	movs	r1, #0
 80a0f64:	7c00      	ldrb	r0, [r0, #16]
 80a0f66:	f7ff bb6b 	b.w	80a0640 <HAL_I2C_Peek_Data>

080a0f6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0f6a:	2100      	movs	r1, #0
 80a0f6c:	7c00      	ldrb	r0, [r0, #16]
 80a0f6e:	f7ff bb6f 	b.w	80a0650 <HAL_I2C_Flush_Data>

080a0f72 <_ZN7TwoWireD0Ev>:
 80a0f72:	b510      	push	{r4, lr}
 80a0f74:	4604      	mov	r4, r0
 80a0f76:	2114      	movs	r1, #20
 80a0f78:	f000 fcf7 	bl	80a196a <_ZdlPvj>
 80a0f7c:	4620      	mov	r0, r4
 80a0f7e:	bd10      	pop	{r4, pc}

080a0f80 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0f80:	b510      	push	{r4, lr}
 80a0f82:	4604      	mov	r4, r0
 80a0f84:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f8a:	60a3      	str	r3, [r4, #8]
 80a0f8c:	4b04      	ldr	r3, [pc, #16]	; (80a0fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0f8e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0f90:	7420      	strb	r0, [r4, #16]
 80a0f92:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0f94:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0f96:	f7ff fb6b 	bl	80a0670 <HAL_I2C_Init>

}
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	bd10      	pop	{r4, pc}
 80a0f9e:	bf00      	nop
 80a0fa0:	080a2c84 	.word	0x080a2c84

080a0fa4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0fa4:	2100      	movs	r1, #0
 80a0fa6:	7c00      	ldrb	r0, [r0, #16]
 80a0fa8:	f7ff bb5a 	b.w	80a0660 <HAL_I2C_Is_Enabled>

080a0fac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0fac:	4770      	bx	lr

080a0fae <_ZN9IPAddressD0Ev>:
 80a0fae:	b510      	push	{r4, lr}
 80a0fb0:	4604      	mov	r4, r0
 80a0fb2:	2118      	movs	r1, #24
 80a0fb4:	f000 fcd9 	bl	80a196a <_ZdlPvj>
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	bd10      	pop	{r4, pc}

080a0fbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fbe:	460f      	mov	r7, r1
 80a0fc0:	f100 0608 	add.w	r6, r0, #8
 80a0fc4:	1d05      	adds	r5, r0, #4
 80a0fc6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0fc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0fcc:	220a      	movs	r2, #10
 80a0fce:	4638      	mov	r0, r7
 80a0fd0:	f000 f911 	bl	80a11f6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0fd4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0fd6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0fd8:	d007      	beq.n	80a0fea <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0fda:	2c00      	cmp	r4, #0
 80a0fdc:	d0f4      	beq.n	80a0fc8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0fde:	212e      	movs	r1, #46	; 0x2e
 80a0fe0:	4638      	mov	r0, r7
 80a0fe2:	f000 f8db 	bl	80a119c <_ZN5Print5printEc>
 80a0fe6:	4404      	add	r4, r0
 80a0fe8:	e7ee      	b.n	80a0fc8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0ff0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0ff0:	b510      	push	{r4, lr}
 80a0ff2:	4604      	mov	r4, r0
 80a0ff4:	4b04      	ldr	r3, [pc, #16]	; (80a1008 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0ff6:	2211      	movs	r2, #17
 80a0ff8:	f840 3b04 	str.w	r3, [r0], #4
 80a0ffc:	2100      	movs	r1, #0
 80a0ffe:	f001 fdb8 	bl	80a2b72 <memset>
{
    clear();
}
 80a1002:	4620      	mov	r0, r4
 80a1004:	bd10      	pop	{r4, pc}
 80a1006:	bf00      	nop
 80a1008:	080a2cac 	.word	0x080a2cac

080a100c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a100c:	4603      	mov	r3, r0
 80a100e:	4a07      	ldr	r2, [pc, #28]	; (80a102c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1010:	b510      	push	{r4, lr}
 80a1012:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1016:	f101 0210 	add.w	r2, r1, #16
 80a101a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a101e:	4291      	cmp	r1, r2
 80a1020:	f843 4b04 	str.w	r4, [r3], #4
 80a1024:	d1f9      	bne.n	80a101a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1026:	780a      	ldrb	r2, [r1, #0]
 80a1028:	701a      	strb	r2, [r3, #0]
}
 80a102a:	bd10      	pop	{r4, pc}
 80a102c:	080a2cac 	.word	0x080a2cac

080a1030 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1030:	4a02      	ldr	r2, [pc, #8]	; (80a103c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1032:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1034:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1036:	2204      	movs	r2, #4
 80a1038:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a103a:	4770      	bx	lr
 80a103c:	080a2cac 	.word	0x080a2cac

080a1040 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1040:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1042:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1046:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a104a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a104e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1052:	2304      	movs	r3, #4
 80a1054:	6041      	str	r1, [r0, #4]
 80a1056:	7503      	strb	r3, [r0, #20]
 80a1058:	bd10      	pop	{r4, pc}
	...

080a105c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a105c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a105e:	4d04      	ldr	r5, [pc, #16]	; (80a1070 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1060:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1062:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1066:	9500      	str	r5, [sp, #0]
 80a1068:	f7ff ffea 	bl	80a1040 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a106c:	b003      	add	sp, #12
 80a106e:	bd30      	pop	{r4, r5, pc}
 80a1070:	080a2cac 	.word	0x080a2cac

080a1074 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1074:	4a01      	ldr	r2, [pc, #4]	; (80a107c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1076:	4b02      	ldr	r3, [pc, #8]	; (80a1080 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1078:	601a      	str	r2, [r3, #0]
 80a107a:	4770      	bx	lr
 80a107c:	080a2d73 	.word	0x080a2d73
 80a1080:	20000378 	.word	0x20000378

080a1084 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1084:	2300      	movs	r3, #0
 80a1086:	461a      	mov	r2, r3
 80a1088:	6840      	ldr	r0, [r0, #4]
 80a108a:	f7ff bbcf 	b.w	80a082c <network_connect>

080a108e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a108e:	2200      	movs	r2, #0
 80a1090:	2102      	movs	r1, #2
 80a1092:	6840      	ldr	r0, [r0, #4]
 80a1094:	f7ff bbda 	b.w	80a084c <network_disconnect>

080a1098 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1098:	2200      	movs	r2, #0
 80a109a:	4611      	mov	r1, r2
 80a109c:	6840      	ldr	r0, [r0, #4]
 80a109e:	f7ff bbcd 	b.w	80a083c <network_connecting>

080a10a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a10a2:	2200      	movs	r2, #0
 80a10a4:	4611      	mov	r1, r2
 80a10a6:	6840      	ldr	r0, [r0, #4]
 80a10a8:	f7ff bbd8 	b.w	80a085c <network_ready>

080a10ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a10ac:	2300      	movs	r3, #0
 80a10ae:	461a      	mov	r2, r3
 80a10b0:	4619      	mov	r1, r3
 80a10b2:	6840      	ldr	r0, [r0, #4]
 80a10b4:	f7ff bbda 	b.w	80a086c <network_on>

080a10b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a10b8:	2300      	movs	r3, #0
 80a10ba:	461a      	mov	r2, r3
 80a10bc:	4619      	mov	r1, r3
 80a10be:	6840      	ldr	r0, [r0, #4]
 80a10c0:	f7ff bbdc 	b.w	80a087c <network_off>

080a10c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a10c4:	2200      	movs	r2, #0
 80a10c6:	f081 0101 	eor.w	r1, r1, #1
 80a10ca:	6840      	ldr	r0, [r0, #4]
 80a10cc:	f7ff bbde 	b.w	80a088c <network_listen>

080a10d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a10d0:	2200      	movs	r2, #0
 80a10d2:	6840      	ldr	r0, [r0, #4]
 80a10d4:	f7ff bbea 	b.w	80a08ac <network_set_listen_timeout>

080a10d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a10d8:	2200      	movs	r2, #0
 80a10da:	4611      	mov	r1, r2
 80a10dc:	6840      	ldr	r0, [r0, #4]
 80a10de:	f7ff bbed 	b.w	80a08bc <network_get_listen_timeout>

080a10e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a10e2:	2200      	movs	r2, #0
 80a10e4:	4611      	mov	r1, r2
 80a10e6:	6840      	ldr	r0, [r0, #4]
 80a10e8:	f7ff bbd8 	b.w	80a089c <network_listening>

080a10ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a10ec:	b570      	push	{r4, r5, r6, lr}
 80a10ee:	4616      	mov	r6, r2
 80a10f0:	b08e      	sub	sp, #56	; 0x38
 80a10f2:	4604      	mov	r4, r0
    IPAddress addr;
 80a10f4:	a808      	add	r0, sp, #32
 80a10f6:	f7ff ff7b 	bl	80a0ff0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a10fa:	2211      	movs	r2, #17
 80a10fc:	2100      	movs	r1, #0
 80a10fe:	a803      	add	r0, sp, #12
 80a1100:	f001 fd37 	bl	80a2b72 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1104:	4630      	mov	r0, r6
 80a1106:	f001 fd8e 	bl	80a2c26 <strlen>
 80a110a:	2500      	movs	r5, #0
 80a110c:	4b0a      	ldr	r3, [pc, #40]	; (80a1138 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a110e:	9500      	str	r5, [sp, #0]
 80a1110:	b281      	uxth	r1, r0
 80a1112:	685b      	ldr	r3, [r3, #4]
 80a1114:	aa03      	add	r2, sp, #12
 80a1116:	4630      	mov	r0, r6
 80a1118:	f7ff fb34 	bl	80a0784 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a111c:	b120      	cbz	r0, 80a1128 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a111e:	4629      	mov	r1, r5
 80a1120:	4620      	mov	r0, r4
 80a1122:	f7ff ff85 	bl	80a1030 <_ZN9IPAddressC1Em>
 80a1126:	e003      	b.n	80a1130 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1128:	a903      	add	r1, sp, #12
 80a112a:	4620      	mov	r0, r4
 80a112c:	f7ff ff6e 	bl	80a100c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1130:	4620      	mov	r0, r4
 80a1132:	b00e      	add	sp, #56	; 0x38
 80a1134:	bd70      	pop	{r4, r5, r6, pc}
 80a1136:	bf00      	nop
 80a1138:	200007fc 	.word	0x200007fc

080a113c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a113c:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a113e:	4a03      	ldr	r2, [pc, #12]	; (80a114c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1140:	601a      	str	r2, [r3, #0]
 80a1142:	2200      	movs	r2, #0
 80a1144:	605a      	str	r2, [r3, #4]
 80a1146:	4770      	bx	lr
 80a1148:	2000037c 	.word	0x2000037c
 80a114c:	080a2da4 	.word	0x080a2da4

080a1150 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1152:	4606      	mov	r6, r0
 80a1154:	460d      	mov	r5, r1
 80a1156:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1158:	2400      	movs	r4, #0
  while (size--) {
 80a115a:	42bd      	cmp	r5, r7
 80a115c:	d00c      	beq.n	80a1178 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a115e:	6833      	ldr	r3, [r6, #0]
 80a1160:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1164:	689b      	ldr	r3, [r3, #8]
 80a1166:	4630      	mov	r0, r6
 80a1168:	4798      	blx	r3
     if (chunk>=0)
 80a116a:	2800      	cmp	r0, #0
 80a116c:	db01      	blt.n	80a1172 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a116e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1170:	e7f3      	b.n	80a115a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1172:	2c00      	cmp	r4, #0
 80a1174:	bf08      	it	eq
 80a1176:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1178:	4620      	mov	r0, r4
 80a117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a117c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a117c:	b570      	push	{r4, r5, r6, lr}
 80a117e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1180:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1182:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1184:	b149      	cbz	r1, 80a119a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1186:	f001 fd4e 	bl	80a2c26 <strlen>
 80a118a:	682b      	ldr	r3, [r5, #0]
 80a118c:	4602      	mov	r2, r0
 80a118e:	4621      	mov	r1, r4
 80a1190:	4628      	mov	r0, r5
    }
 80a1192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1196:	68db      	ldr	r3, [r3, #12]
 80a1198:	4718      	bx	r3
    }
 80a119a:	bd70      	pop	{r4, r5, r6, pc}

080a119c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a119c:	6803      	ldr	r3, [r0, #0]
 80a119e:	689b      	ldr	r3, [r3, #8]
 80a11a0:	4718      	bx	r3

080a11a2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a11a2:	2a01      	cmp	r2, #1
 80a11a4:	bf98      	it	ls
 80a11a6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a11a8:	b530      	push	{r4, r5, lr}
 80a11aa:	460b      	mov	r3, r1
 80a11ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a11ae:	2100      	movs	r1, #0
 80a11b0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a11b4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a11b8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a11bc:	fb05 3312 	mls	r3, r5, r2, r3
 80a11c0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a11c2:	2b09      	cmp	r3, #9
 80a11c4:	bf94      	ite	ls
 80a11c6:	3330      	addls	r3, #48	; 0x30
 80a11c8:	3337      	addhi	r3, #55	; 0x37
 80a11ca:	b2db      	uxtb	r3, r3
 80a11cc:	4621      	mov	r1, r4
 80a11ce:	f804 3901 	strb.w	r3, [r4], #-1
 80a11d2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a11d4:	2d00      	cmp	r5, #0
 80a11d6:	d1ef      	bne.n	80a11b8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a11d8:	f7ff ffd0 	bl	80a117c <_ZN5Print5writeEPKc>
}
 80a11dc:	b00b      	add	sp, #44	; 0x2c
 80a11de:	bd30      	pop	{r4, r5, pc}

080a11e0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a11e0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a11e2:	b922      	cbnz	r2, 80a11ee <_ZN5Print5printEmi+0xe>
 80a11e4:	6803      	ldr	r3, [r0, #0]
 80a11e6:	b2c9      	uxtb	r1, r1
 80a11e8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a11ea:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a11ec:	4718      	bx	r3
  else return printNumber(n, base);
 80a11ee:	b2d2      	uxtb	r2, r2
}
 80a11f0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11f2:	f7ff bfd6 	b.w	80a11a2 <_ZN5Print11printNumberEmh>

080a11f6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a11f6:	f7ff bff3 	b.w	80a11e0 <_ZN5Print5printEmi>

080a11fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a11fa:	b510      	push	{r4, lr}
 80a11fc:	4604      	mov	r4, r0
 80a11fe:	f7ff fbb3 	bl	80a0968 <_ZNSt14_Function_baseD1Ev>
 80a1202:	4620      	mov	r0, r4
 80a1204:	bd10      	pop	{r4, pc}
	...

080a1208 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1208:	4803      	ldr	r0, [pc, #12]	; (80a1218 <_GLOBAL__sub_I_RGB+0x10>)
 80a120a:	2300      	movs	r3, #0
 80a120c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a120e:	4a03      	ldr	r2, [pc, #12]	; (80a121c <_GLOBAL__sub_I_RGB+0x14>)
 80a1210:	4903      	ldr	r1, [pc, #12]	; (80a1220 <_GLOBAL__sub_I_RGB+0x18>)
 80a1212:	f000 bba5 	b.w	80a1960 <__aeabi_atexit>
 80a1216:	bf00      	nop
 80a1218:	20000384 	.word	0x20000384
 80a121c:	20000368 	.word	0x20000368
 80a1220:	080a11fb 	.word	0x080a11fb

080a1224 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1224:	4770      	bx	lr

080a1226 <_ZN8SPIClassD0Ev>:
 80a1226:	b510      	push	{r4, lr}
 80a1228:	4604      	mov	r4, r0
 80a122a:	2110      	movs	r1, #16
 80a122c:	f000 fb9d 	bl	80a196a <_ZdlPvj>
 80a1230:	4620      	mov	r0, r4
 80a1232:	bd10      	pop	{r4, pc}

080a1234 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1234:	b570      	push	{r4, r5, r6, lr}
 80a1236:	4604      	mov	r4, r0
 80a1238:	460e      	mov	r6, r1
 80a123a:	4b07      	ldr	r3, [pc, #28]	; (80a1258 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a123c:	2500      	movs	r5, #0
 80a123e:	6003      	str	r3, [r0, #0]
 80a1240:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1244:	f7ff f9a4 	bl	80a0590 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1248:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a124a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a124c:	f7ff fa1a 	bl	80a0684 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1250:	60a5      	str	r5, [r4, #8]
}
 80a1252:	4620      	mov	r0, r4
 80a1254:	bd70      	pop	{r4, r5, r6, pc}
 80a1256:	bf00      	nop
 80a1258:	080a2dd8 	.word	0x080a2dd8

080a125c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a125c:	7900      	ldrb	r0, [r0, #4]
 80a125e:	f7ff ba19 	b.w	80a0694 <HAL_SPI_Is_Enabled>

080a1262 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1262:	b510      	push	{r4, lr}
 80a1264:	4604      	mov	r4, r0
{
	free(buffer);
 80a1266:	6800      	ldr	r0, [r0, #0]
 80a1268:	f7ff fb38 	bl	80a08dc <free>
}
 80a126c:	4620      	mov	r0, r4
 80a126e:	bd10      	pop	{r4, pc}

080a1270 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1270:	b510      	push	{r4, lr}
 80a1272:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1274:	6800      	ldr	r0, [r0, #0]
 80a1276:	b108      	cbz	r0, 80a127c <_ZN6String10invalidateEv+0xc>
 80a1278:	f7ff fb30 	bl	80a08dc <free>
	buffer = NULL;
 80a127c:	2300      	movs	r3, #0
 80a127e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1280:	60a3      	str	r3, [r4, #8]
 80a1282:	6063      	str	r3, [r4, #4]
 80a1284:	bd10      	pop	{r4, pc}

080a1286 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1286:	b538      	push	{r3, r4, r5, lr}
 80a1288:	4604      	mov	r4, r0
 80a128a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a128c:	6800      	ldr	r0, [r0, #0]
 80a128e:	3101      	adds	r1, #1
 80a1290:	f7ff fb2c 	bl	80a08ec <realloc>
	if (newbuffer) {
 80a1294:	b110      	cbz	r0, 80a129c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1296:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a129a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a129c:	bd38      	pop	{r3, r4, r5, pc}

080a129e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a129e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a12a0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a12a2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a12a4:	b113      	cbz	r3, 80a12ac <_ZN6String7reserveEj+0xe>
 80a12a6:	6843      	ldr	r3, [r0, #4]
 80a12a8:	428b      	cmp	r3, r1
 80a12aa:	d207      	bcs.n	80a12bc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a12ac:	4620      	mov	r0, r4
 80a12ae:	f7ff ffea 	bl	80a1286 <_ZN6String12changeBufferEj>
 80a12b2:	b120      	cbz	r0, 80a12be <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a12b4:	68a3      	ldr	r3, [r4, #8]
 80a12b6:	b90b      	cbnz	r3, 80a12bc <_ZN6String7reserveEj+0x1e>
 80a12b8:	6822      	ldr	r2, [r4, #0]
 80a12ba:	7013      	strb	r3, [r2, #0]
 80a12bc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a12be:	bd10      	pop	{r4, pc}

080a12c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a12c0:	b570      	push	{r4, r5, r6, lr}
 80a12c2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a12c4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a12c6:	4604      	mov	r4, r0
 80a12c8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a12ca:	f7ff ffe8 	bl	80a129e <_ZN6String7reserveEj>
 80a12ce:	b918      	cbnz	r0, 80a12d8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	f7ff ffcd 	bl	80a1270 <_ZN6String10invalidateEv>
		return *this;
 80a12d6:	e009      	b.n	80a12ec <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a12d8:	462a      	mov	r2, r5
 80a12da:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a12dc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a12de:	6820      	ldr	r0, [r4, #0]
 80a12e0:	f001 fc3c 	bl	80a2b5c <memcpy>
	buffer[len] = 0;
 80a12e4:	6822      	ldr	r2, [r4, #0]
 80a12e6:	68a3      	ldr	r3, [r4, #8]
 80a12e8:	2100      	movs	r1, #0
 80a12ea:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a12ec:	4620      	mov	r0, r4
 80a12ee:	bd70      	pop	{r4, r5, r6, pc}

080a12f0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a12f0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a12f2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a12f4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a12f6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a12f8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a12fa:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a12fc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a12fe:	460d      	mov	r5, r1
 80a1300:	b139      	cbz	r1, 80a1312 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1302:	4608      	mov	r0, r1
 80a1304:	f001 fc8f 	bl	80a2c26 <strlen>
 80a1308:	4629      	mov	r1, r5
 80a130a:	4602      	mov	r2, r0
 80a130c:	4620      	mov	r0, r4
 80a130e:	f7ff ffd7 	bl	80a12c0 <_ZN6String4copyEPKcj>
}
 80a1312:	4620      	mov	r0, r4
 80a1314:	bd38      	pop	{r3, r4, r5, pc}

080a1316 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1316:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1318:	b510      	push	{r4, lr}
 80a131a:	460b      	mov	r3, r1
 80a131c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a131e:	d007      	beq.n	80a1330 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1320:	6809      	ldr	r1, [r1, #0]
 80a1322:	b119      	cbz	r1, 80a132c <_ZN6StringaSERKS_+0x16>
 80a1324:	689a      	ldr	r2, [r3, #8]
 80a1326:	f7ff ffcb 	bl	80a12c0 <_ZN6String4copyEPKcj>
 80a132a:	e001      	b.n	80a1330 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a132c:	f7ff ffa0 	bl	80a1270 <_ZN6String10invalidateEv>

	return *this;
}
 80a1330:	4620      	mov	r0, r4
 80a1332:	bd10      	pop	{r4, pc}

080a1334 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1334:	b510      	push	{r4, lr}
 80a1336:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1338:	2300      	movs	r3, #0
 80a133a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a133c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a133e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1340:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1342:	f7ff ffe8 	bl	80a1316 <_ZN6StringaSERKS_>
}
 80a1346:	4620      	mov	r0, r4
 80a1348:	bd10      	pop	{r4, pc}
	...

080a134c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a134c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1350:	4b03      	ldr	r3, [pc, #12]	; (80a1360 <_GLOBAL__sub_I_System+0x14>)
 80a1352:	2000      	movs	r0, #0
 80a1354:	7018      	strb	r0, [r3, #0]
 80a1356:	8058      	strh	r0, [r3, #2]
 80a1358:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a135a:	f7ff ba1b 	b.w	80a0794 <set_system_mode>
 80a135e:	bf00      	nop
 80a1360:	20000394 	.word	0x20000394

080a1364 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1364:	4b02      	ldr	r3, [pc, #8]	; (80a1370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1366:	681a      	ldr	r2, [r3, #0]
 80a1368:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a136a:	601a      	str	r2, [r3, #0]
 80a136c:	4770      	bx	lr
 80a136e:	bf00      	nop
 80a1370:	20000300 	.word	0x20000300
 80a1374:	2000039c 	.word	0x2000039c

080a1378 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1378:	4770      	bx	lr

080a137a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a137a:	7441      	strb	r1, [r0, #17]
 80a137c:	4770      	bx	lr

080a137e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a137e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1380:	7c00      	ldrb	r0, [r0, #16]
 80a1382:	f7ff f9c7 	bl	80a0714 <HAL_USART_Available_Data_For_Write>
}
 80a1386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a138a:	bd08      	pop	{r3, pc}

080a138c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a138c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a138e:	7c00      	ldrb	r0, [r0, #16]
 80a1390:	f7ff f998 	bl	80a06c4 <HAL_USART_Available_Data>
}
 80a1394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1398:	bd08      	pop	{r3, pc}

080a139a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a139a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a139c:	7c00      	ldrb	r0, [r0, #16]
 80a139e:	f7ff f9a1 	bl	80a06e4 <HAL_USART_Peek_Data>
}
 80a13a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13a6:	bf28      	it	cs
 80a13a8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a13ac:	bd08      	pop	{r3, pc}

080a13ae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a13ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a13b0:	7c00      	ldrb	r0, [r0, #16]
 80a13b2:	f7ff f98f 	bl	80a06d4 <HAL_USART_Read_Data>
}
 80a13b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13ba:	bf28      	it	cs
 80a13bc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a13c0:	bd08      	pop	{r3, pc}

080a13c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a13c2:	7c00      	ldrb	r0, [r0, #16]
 80a13c4:	f7ff b996 	b.w	80a06f4 <HAL_USART_Flush_Data>

080a13c8 <_ZN11USARTSerialD0Ev>:
 80a13c8:	b510      	push	{r4, lr}
 80a13ca:	4604      	mov	r4, r0
 80a13cc:	2114      	movs	r1, #20
 80a13ce:	f000 facc 	bl	80a196a <_ZdlPvj>
 80a13d2:	4620      	mov	r0, r4
 80a13d4:	bd10      	pop	{r4, pc}

080a13d6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a13d6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a13d8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a13da:	4604      	mov	r4, r0
 80a13dc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a13de:	b925      	cbnz	r5, 80a13ea <_ZN11USARTSerial5writeEh+0x14>
 80a13e0:	7c00      	ldrb	r0, [r0, #16]
 80a13e2:	f7ff f997 	bl	80a0714 <HAL_USART_Available_Data_For_Write>
 80a13e6:	2800      	cmp	r0, #0
 80a13e8:	dd05      	ble.n	80a13f6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13ea:	4631      	mov	r1, r6
 80a13ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a13ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13f2:	f7ff b95f 	b.w	80a06b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a13f6:	4628      	mov	r0, r5
 80a13f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a13fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13fc:	b510      	push	{r4, lr}
 80a13fe:	4604      	mov	r4, r0
 80a1400:	4608      	mov	r0, r1
 80a1402:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1404:	2200      	movs	r2, #0
 80a1406:	6062      	str	r2, [r4, #4]
 80a1408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a140c:	60a2      	str	r2, [r4, #8]
 80a140e:	4a05      	ldr	r2, [pc, #20]	; (80a1424 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1410:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1412:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1414:	2201      	movs	r2, #1
 80a1416:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1418:	461a      	mov	r2, r3
 80a141a:	f7ff f943 	bl	80a06a4 <HAL_USART_Init>
}
 80a141e:	4620      	mov	r0, r4
 80a1420:	bd10      	pop	{r4, pc}
 80a1422:	bf00      	nop
 80a1424:	080a2e14 	.word	0x080a2e14

080a1428 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1428:	7c00      	ldrb	r0, [r0, #16]
 80a142a:	f7ff b96b 	b.w	80a0704 <HAL_USART_Is_Enabled>
	...

080a1430 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1430:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1432:	4d0c      	ldr	r5, [pc, #48]	; (80a1464 <_Z22__fetch_global_Serial1v+0x34>)
 80a1434:	6829      	ldr	r1, [r5, #0]
 80a1436:	f011 0401 	ands.w	r4, r1, #1
 80a143a:	d111      	bne.n	80a1460 <_Z22__fetch_global_Serial1v+0x30>
 80a143c:	4628      	mov	r0, r5
 80a143e:	f7fe fe30 	bl	80a00a2 <__cxa_guard_acquire>
 80a1442:	b168      	cbz	r0, 80a1460 <_Z22__fetch_global_Serial1v+0x30>
 80a1444:	4a08      	ldr	r2, [pc, #32]	; (80a1468 <_Z22__fetch_global_Serial1v+0x38>)
 80a1446:	4621      	mov	r1, r4
 80a1448:	4b08      	ldr	r3, [pc, #32]	; (80a146c <_Z22__fetch_global_Serial1v+0x3c>)
 80a144a:	4809      	ldr	r0, [pc, #36]	; (80a1470 <_Z22__fetch_global_Serial1v+0x40>)
 80a144c:	f7ff ffd6 	bl	80a13fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1450:	4628      	mov	r0, r5
 80a1452:	f7fe fe2b 	bl	80a00ac <__cxa_guard_release>
 80a1456:	4a07      	ldr	r2, [pc, #28]	; (80a1474 <_Z22__fetch_global_Serial1v+0x44>)
 80a1458:	4907      	ldr	r1, [pc, #28]	; (80a1478 <_Z22__fetch_global_Serial1v+0x48>)
 80a145a:	4805      	ldr	r0, [pc, #20]	; (80a1470 <_Z22__fetch_global_Serial1v+0x40>)
 80a145c:	f000 fa80 	bl	80a1960 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1460:	4803      	ldr	r0, [pc, #12]	; (80a1470 <_Z22__fetch_global_Serial1v+0x40>)
 80a1462:	bd38      	pop	{r3, r4, r5, pc}
 80a1464:	20000438 	.word	0x20000438
 80a1468:	2000043c 	.word	0x2000043c
 80a146c:	200003b4 	.word	0x200003b4
 80a1470:	200003a0 	.word	0x200003a0
 80a1474:	20000368 	.word	0x20000368
 80a1478:	080a1379 	.word	0x080a1379

080a147c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a147c:	7441      	strb	r1, [r0, #17]
 80a147e:	4770      	bx	lr

080a1480 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1480:	4770      	bx	lr

080a1482 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1482:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1484:	2100      	movs	r1, #0
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff f964 	bl	80a0754 <HAL_USB_USART_Receive_Data>
}
 80a148c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1490:	bf28      	it	cs
 80a1492:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1496:	bd08      	pop	{r3, pc}

080a1498 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1498:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a149a:	2101      	movs	r1, #1
 80a149c:	7c00      	ldrb	r0, [r0, #16]
 80a149e:	f7ff f959 	bl	80a0754 <HAL_USB_USART_Receive_Data>
}
 80a14a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a14a6:	bf28      	it	cs
 80a14a8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a14ac:	bd08      	pop	{r3, pc}

080a14ae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a14ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a14b0:	7c00      	ldrb	r0, [r0, #16]
 80a14b2:	f7ff f947 	bl	80a0744 <HAL_USB_USART_Available_Data_For_Write>
}
 80a14b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14ba:	bd08      	pop	{r3, pc}

080a14bc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a14bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a14be:	7c00      	ldrb	r0, [r0, #16]
 80a14c0:	f7ff f938 	bl	80a0734 <HAL_USB_USART_Available_Data>
}
 80a14c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14c8:	bd08      	pop	{r3, pc}

080a14ca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a14ca:	7c00      	ldrb	r0, [r0, #16]
 80a14cc:	f7ff b952 	b.w	80a0774 <HAL_USB_USART_Flush_Data>

080a14d0 <_ZN9USBSerialD0Ev>:
 80a14d0:	b510      	push	{r4, lr}
 80a14d2:	4604      	mov	r4, r0
 80a14d4:	2114      	movs	r1, #20
 80a14d6:	f000 fa48 	bl	80a196a <_ZdlPvj>
 80a14da:	4620      	mov	r0, r4
 80a14dc:	bd10      	pop	{r4, pc}

080a14de <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a14de:	b538      	push	{r3, r4, r5, lr}
 80a14e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14e2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a14e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14e6:	f7ff f92d 	bl	80a0744 <HAL_USB_USART_Available_Data_For_Write>
 80a14ea:	2800      	cmp	r0, #0
 80a14ec:	dc01      	bgt.n	80a14f2 <_ZN9USBSerial5writeEh+0x14>
 80a14ee:	7c60      	ldrb	r0, [r4, #17]
 80a14f0:	b128      	cbz	r0, 80a14fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a14f2:	4629      	mov	r1, r5
 80a14f4:	7c20      	ldrb	r0, [r4, #16]
 80a14f6:	f7ff f935 	bl	80a0764 <HAL_USB_USART_Send_Data>
 80a14fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a14fe:	bd38      	pop	{r3, r4, r5, pc}

080a1500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1500:	b510      	push	{r4, lr}
 80a1502:	4604      	mov	r4, r0
 80a1504:	2300      	movs	r3, #0
 80a1506:	6063      	str	r3, [r4, #4]
 80a1508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a150c:	60a3      	str	r3, [r4, #8]
 80a150e:	4b05      	ldr	r3, [pc, #20]	; (80a1524 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1510:	4608      	mov	r0, r1
 80a1512:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1514:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1516:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1518:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a151a:	4611      	mov	r1, r2
 80a151c:	f7ff f902 	bl	80a0724 <HAL_USB_USART_Init>
}
 80a1520:	4620      	mov	r0, r4
 80a1522:	bd10      	pop	{r4, pc}
 80a1524:	080a2e44 	.word	0x080a2e44

080a1528 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1528:	b510      	push	{r4, lr}
 80a152a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a152c:	2214      	movs	r2, #20
 80a152e:	2100      	movs	r1, #0
 80a1530:	f001 fb1f 	bl	80a2b72 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1534:	4b05      	ldr	r3, [pc, #20]	; (80a154c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1536:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1538:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a153a:	4b05      	ldr	r3, [pc, #20]	; (80a1550 <_Z19acquireSerialBufferv+0x28>)
 80a153c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a153e:	f240 1301 	movw	r3, #257	; 0x101
 80a1542:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1544:	2381      	movs	r3, #129	; 0x81
 80a1546:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1548:	bd10      	pop	{r4, pc}
 80a154a:	bf00      	nop
 80a154c:	20000545 	.word	0x20000545
 80a1550:	200004c4 	.word	0x200004c4

080a1554 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1554:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1556:	4d0e      	ldr	r5, [pc, #56]	; (80a1590 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1558:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a155a:	a801      	add	r0, sp, #4
 80a155c:	f7ff ffe4 	bl	80a1528 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1560:	6829      	ldr	r1, [r5, #0]
 80a1562:	f011 0401 	ands.w	r4, r1, #1
 80a1566:	d110      	bne.n	80a158a <_Z16_fetch_usbserialv+0x36>
 80a1568:	4628      	mov	r0, r5
 80a156a:	f7fe fd9a 	bl	80a00a2 <__cxa_guard_acquire>
 80a156e:	b160      	cbz	r0, 80a158a <_Z16_fetch_usbserialv+0x36>
 80a1570:	aa01      	add	r2, sp, #4
 80a1572:	4621      	mov	r1, r4
 80a1574:	4807      	ldr	r0, [pc, #28]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a1576:	f7ff ffc3 	bl	80a1500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a157a:	4628      	mov	r0, r5
 80a157c:	f7fe fd96 	bl	80a00ac <__cxa_guard_release>
 80a1580:	4a05      	ldr	r2, [pc, #20]	; (80a1598 <_Z16_fetch_usbserialv+0x44>)
 80a1582:	4906      	ldr	r1, [pc, #24]	; (80a159c <_Z16_fetch_usbserialv+0x48>)
 80a1584:	4803      	ldr	r0, [pc, #12]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a1586:	f000 f9eb 	bl	80a1960 <__aeabi_atexit>
	return _usbserial;
}
 80a158a:	4802      	ldr	r0, [pc, #8]	; (80a1594 <_Z16_fetch_usbserialv+0x40>)
 80a158c:	b007      	add	sp, #28
 80a158e:	bd30      	pop	{r4, r5, pc}
 80a1590:	200004c0 	.word	0x200004c0
 80a1594:	20000648 	.word	0x20000648
 80a1598:	20000368 	.word	0x20000368
 80a159c:	080a1481 	.word	0x080a1481

080a15a0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a15a0:	b510      	push	{r4, lr}
 80a15a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15a4:	2214      	movs	r2, #20
 80a15a6:	2100      	movs	r1, #0
 80a15a8:	f001 fae3 	bl	80a2b72 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a15ac:	4b05      	ldr	r3, [pc, #20]	; (80a15c4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a15ae:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a15b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a15b2:	4b05      	ldr	r3, [pc, #20]	; (80a15c8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a15b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15b6:	f240 1301 	movw	r3, #257	; 0x101
 80a15ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15bc:	2381      	movs	r3, #129	; 0x81
 80a15be:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a15c0:	bd10      	pop	{r4, pc}
 80a15c2:	bf00      	nop
 80a15c4:	200006f8 	.word	0x200006f8
 80a15c8:	20000660 	.word	0x20000660

080a15cc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15ce:	4c0e      	ldr	r4, [pc, #56]	; (80a1608 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a15d0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15d2:	a801      	add	r0, sp, #4
 80a15d4:	f7ff ffe4 	bl	80a15a0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15d8:	6823      	ldr	r3, [r4, #0]
 80a15da:	07db      	lsls	r3, r3, #31
 80a15dc:	d410      	bmi.n	80a1600 <_Z17_fetch_usbserial1v+0x34>
 80a15de:	4620      	mov	r0, r4
 80a15e0:	f7fe fd5f 	bl	80a00a2 <__cxa_guard_acquire>
 80a15e4:	b160      	cbz	r0, 80a1600 <_Z17_fetch_usbserial1v+0x34>
 80a15e6:	aa01      	add	r2, sp, #4
 80a15e8:	2101      	movs	r1, #1
 80a15ea:	4808      	ldr	r0, [pc, #32]	; (80a160c <_Z17_fetch_usbserial1v+0x40>)
 80a15ec:	f7ff ff88 	bl	80a1500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15f0:	4620      	mov	r0, r4
 80a15f2:	f7fe fd5b 	bl	80a00ac <__cxa_guard_release>
 80a15f6:	4a06      	ldr	r2, [pc, #24]	; (80a1610 <_Z17_fetch_usbserial1v+0x44>)
 80a15f8:	4906      	ldr	r1, [pc, #24]	; (80a1614 <_Z17_fetch_usbserial1v+0x48>)
 80a15fa:	4804      	ldr	r0, [pc, #16]	; (80a160c <_Z17_fetch_usbserial1v+0x40>)
 80a15fc:	f000 f9b0 	bl	80a1960 <__aeabi_atexit>
  return _usbserial1;
}
 80a1600:	4802      	ldr	r0, [pc, #8]	; (80a160c <_Z17_fetch_usbserial1v+0x40>)
 80a1602:	b006      	add	sp, #24
 80a1604:	bd10      	pop	{r4, pc}
 80a1606:	bf00      	nop
 80a1608:	2000065c 	.word	0x2000065c
 80a160c:	200006e4 	.word	0x200006e4
 80a1610:	20000368 	.word	0x20000368
 80a1614:	080a1481 	.word	0x080a1481

080a1618 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1618:	2200      	movs	r2, #0
 80a161a:	4611      	mov	r1, r2
 80a161c:	6840      	ldr	r0, [r0, #4]
 80a161e:	f7ff b91d 	b.w	80a085c <network_ready>

080a1622 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1622:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1624:	4616      	mov	r6, r2
 80a1626:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1628:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a162a:	460f      	mov	r7, r1
 80a162c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a162e:	2100      	movs	r1, #0
 80a1630:	a803      	add	r0, sp, #12
 80a1632:	f001 fa9e 	bl	80a2b72 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1636:	4630      	mov	r0, r6
 80a1638:	f001 faf5 	bl	80a2c26 <strlen>
 80a163c:	2500      	movs	r5, #0
 80a163e:	9500      	str	r5, [sp, #0]
 80a1640:	b281      	uxth	r1, r0
 80a1642:	687b      	ldr	r3, [r7, #4]
 80a1644:	aa03      	add	r2, sp, #12
 80a1646:	4630      	mov	r0, r6
 80a1648:	f7ff f89c 	bl	80a0784 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a164c:	b120      	cbz	r0, 80a1658 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a164e:	4629      	mov	r1, r5
 80a1650:	4620      	mov	r0, r4
 80a1652:	f7ff fced 	bl	80a1030 <_ZN9IPAddressC1Em>
 80a1656:	e003      	b.n	80a1660 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1658:	a903      	add	r1, sp, #12
 80a165a:	4620      	mov	r0, r4
 80a165c:	f7ff fcd6 	bl	80a100c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1660:	4620      	mov	r0, r4
 80a1662:	b009      	add	sp, #36	; 0x24
 80a1664:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1666 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1666:	2200      	movs	r2, #0
 80a1668:	4611      	mov	r1, r2
 80a166a:	6840      	ldr	r0, [r0, #4]
 80a166c:	f7ff b916 	b.w	80a089c <network_listening>

080a1670 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1670:	2200      	movs	r2, #0
 80a1672:	4611      	mov	r1, r2
 80a1674:	6840      	ldr	r0, [r0, #4]
 80a1676:	f7ff b921 	b.w	80a08bc <network_get_listen_timeout>

080a167a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a167a:	2200      	movs	r2, #0
 80a167c:	6840      	ldr	r0, [r0, #4]
 80a167e:	f7ff b915 	b.w	80a08ac <network_set_listen_timeout>

080a1682 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1682:	2200      	movs	r2, #0
 80a1684:	f081 0101 	eor.w	r1, r1, #1
 80a1688:	6840      	ldr	r0, [r0, #4]
 80a168a:	f7ff b8ff 	b.w	80a088c <network_listen>

080a168e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a168e:	2300      	movs	r3, #0
 80a1690:	461a      	mov	r2, r3
 80a1692:	4619      	mov	r1, r3
 80a1694:	6840      	ldr	r0, [r0, #4]
 80a1696:	f7ff b8f1 	b.w	80a087c <network_off>

080a169a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a169a:	2300      	movs	r3, #0
 80a169c:	461a      	mov	r2, r3
 80a169e:	4619      	mov	r1, r3
 80a16a0:	6840      	ldr	r0, [r0, #4]
 80a16a2:	f7ff b8e3 	b.w	80a086c <network_on>

080a16a6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a16a6:	2200      	movs	r2, #0
 80a16a8:	4611      	mov	r1, r2
 80a16aa:	6840      	ldr	r0, [r0, #4]
 80a16ac:	f7ff b8c6 	b.w	80a083c <network_connecting>

080a16b0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a16b0:	2200      	movs	r2, #0
 80a16b2:	2102      	movs	r1, #2
 80a16b4:	6840      	ldr	r0, [r0, #4]
 80a16b6:	f7ff b8c9 	b.w	80a084c <network_disconnect>

080a16ba <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a16ba:	2300      	movs	r3, #0
 80a16bc:	461a      	mov	r2, r3
 80a16be:	6840      	ldr	r0, [r0, #4]
 80a16c0:	f7ff b8b4 	b.w	80a082c <network_connect>

080a16c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a16c4:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a16c6:	2204      	movs	r2, #4
 80a16c8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a16ca:	4a02      	ldr	r2, [pc, #8]	; (80a16d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a16cc:	601a      	str	r2, [r3, #0]
 80a16ce:	4770      	bx	lr
 80a16d0:	200007fc 	.word	0x200007fc
 80a16d4:	080a2e74 	.word	0x080a2e74

080a16d8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a16d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a16da:	4b14      	ldr	r3, [pc, #80]	; (80a172c <serialEventRun+0x54>)
 80a16dc:	b133      	cbz	r3, 80a16ec <serialEventRun+0x14>
 80a16de:	f7ff ff39 	bl	80a1554 <_Z16_fetch_usbserialv>
 80a16e2:	6803      	ldr	r3, [r0, #0]
 80a16e4:	691b      	ldr	r3, [r3, #16]
 80a16e6:	4798      	blx	r3
 80a16e8:	2800      	cmp	r0, #0
 80a16ea:	dc16      	bgt.n	80a171a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a16ec:	4b10      	ldr	r3, [pc, #64]	; (80a1730 <serialEventRun+0x58>)
 80a16ee:	b133      	cbz	r3, 80a16fe <serialEventRun+0x26>
 80a16f0:	f7ff fe9e 	bl	80a1430 <_Z22__fetch_global_Serial1v>
 80a16f4:	6803      	ldr	r3, [r0, #0]
 80a16f6:	691b      	ldr	r3, [r3, #16]
 80a16f8:	4798      	blx	r3
 80a16fa:	2800      	cmp	r0, #0
 80a16fc:	dc10      	bgt.n	80a1720 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a16fe:	4b0d      	ldr	r3, [pc, #52]	; (80a1734 <serialEventRun+0x5c>)
 80a1700:	b10b      	cbz	r3, 80a1706 <serialEventRun+0x2e>
 80a1702:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1706:	4b0c      	ldr	r3, [pc, #48]	; (80a1738 <serialEventRun+0x60>)
 80a1708:	b17b      	cbz	r3, 80a172a <serialEventRun+0x52>
 80a170a:	f7ff ff5f 	bl	80a15cc <_Z17_fetch_usbserial1v>
 80a170e:	6803      	ldr	r3, [r0, #0]
 80a1710:	691b      	ldr	r3, [r3, #16]
 80a1712:	4798      	blx	r3
 80a1714:	2800      	cmp	r0, #0
 80a1716:	dc06      	bgt.n	80a1726 <serialEventRun+0x4e>
 80a1718:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a171a:	f3af 8000 	nop.w
 80a171e:	e7e5      	b.n	80a16ec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1720:	f3af 8000 	nop.w
 80a1724:	e7eb      	b.n	80a16fe <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1726:	f3af 8000 	nop.w
 80a172a:	bd08      	pop	{r3, pc}
	...

080a173c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a173c:	b508      	push	{r3, lr}
	serialEventRun();
 80a173e:	f7ff ffcb 	bl	80a16d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1742:	f7fe ff3d 	bl	80a05c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1746:	4b01      	ldr	r3, [pc, #4]	; (80a174c <_post_loop+0x10>)
 80a1748:	6018      	str	r0, [r3, #0]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	2000080c 	.word	0x2000080c

080a1750 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1750:	4802      	ldr	r0, [pc, #8]	; (80a175c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1752:	4a03      	ldr	r2, [pc, #12]	; (80a1760 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1754:	4903      	ldr	r1, [pc, #12]	; (80a1764 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1756:	1a12      	subs	r2, r2, r0
 80a1758:	f001 ba00 	b.w	80a2b5c <memcpy>
 80a175c:	40024000 	.word	0x40024000
 80a1760:	40024004 	.word	0x40024004
 80a1764:	080a2f40 	.word	0x080a2f40

080a1768 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1768:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a176a:	2300      	movs	r3, #0
 80a176c:	9300      	str	r3, [sp, #0]
 80a176e:	461a      	mov	r2, r3
 80a1770:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1774:	f7ff f838 	bl	80a07e8 <system_ctrl_set_result>
}
 80a1778:	b003      	add	sp, #12
 80a177a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1780 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1780:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1782:	8843      	ldrh	r3, [r0, #2]
 80a1784:	2b0a      	cmp	r3, #10
 80a1786:	d008      	beq.n	80a179a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1788:	2b50      	cmp	r3, #80	; 0x50
 80a178a:	d109      	bne.n	80a17a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a178c:	4b09      	ldr	r3, [pc, #36]	; (80a17b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a178e:	681b      	ldr	r3, [r3, #0]
 80a1790:	b13b      	cbz	r3, 80a17a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1792:	b003      	add	sp, #12
 80a1794:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1798:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a179a:	f7ff ffe5 	bl	80a1768 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a179e:	e006      	b.n	80a17ae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a17a0:	2300      	movs	r3, #0
 80a17a2:	9300      	str	r3, [sp, #0]
 80a17a4:	461a      	mov	r2, r3
 80a17a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a17aa:	f7ff f81d 	bl	80a07e8 <system_ctrl_set_result>
        break;
    }
}
 80a17ae:	b003      	add	sp, #12
 80a17b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a17b4:	20000804 	.word	0x20000804

080a17b8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a17b8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a17ba:	4c10      	ldr	r4, [pc, #64]	; (80a17fc <module_user_init_hook+0x44>)
 80a17bc:	4d10      	ldr	r5, [pc, #64]	; (80a1800 <module_user_init_hook+0x48>)
 80a17be:	6823      	ldr	r3, [r4, #0]
 80a17c0:	42ab      	cmp	r3, r5
 80a17c2:	4b10      	ldr	r3, [pc, #64]	; (80a1804 <module_user_init_hook+0x4c>)
 80a17c4:	bf0c      	ite	eq
 80a17c6:	2201      	moveq	r2, #1
 80a17c8:	2200      	movne	r2, #0
 80a17ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a17cc:	d002      	beq.n	80a17d4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a17ce:	f7ff ffbf 	bl	80a1750 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a17d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17d4:	f7fe fee4 	bl	80a05a0 <HAL_RNG_GetRandomNumber>
 80a17d8:	4604      	mov	r4, r0
    srand(seed);
 80a17da:	f001 f9e1 	bl	80a2ba0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a17de:	4b0a      	ldr	r3, [pc, #40]	; (80a1808 <module_user_init_hook+0x50>)
 80a17e0:	b113      	cbz	r3, 80a17e8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a17e2:	4620      	mov	r0, r4
 80a17e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a17e8:	2100      	movs	r1, #0
 80a17ea:	4807      	ldr	r0, [pc, #28]	; (80a1808 <module_user_init_hook+0x50>)
 80a17ec:	f7ff f816 	bl	80a081c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a17f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a17f4:	2100      	movs	r1, #0
 80a17f6:	4805      	ldr	r0, [pc, #20]	; (80a180c <module_user_init_hook+0x54>)
 80a17f8:	f7fe bfec 	b.w	80a07d4 <system_ctrl_set_app_request_handler>
 80a17fc:	40024000 	.word	0x40024000
 80a1800:	9a271c1e 	.word	0x9a271c1e
 80a1804:	20000808 	.word	0x20000808
 80a1808:	00000000 	.word	0x00000000
 80a180c:	080a1781 	.word	0x080a1781

080a1810 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1810:	b510      	push	{r4, lr}
 80a1812:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1814:	480f      	ldr	r0, [pc, #60]	; (80a1854 <pinAvailable+0x44>)
 80a1816:	f7ff fd21 	bl	80a125c <_ZN8SPIClass9isEnabledEv>
 80a181a:	b128      	cbz	r0, 80a1828 <pinAvailable+0x18>
 80a181c:	f1a4 030d 	sub.w	r3, r4, #13
 80a1820:	2b02      	cmp	r3, #2
 80a1822:	d801      	bhi.n	80a1828 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1824:	2000      	movs	r0, #0
 80a1826:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1828:	f000 f840 	bl	80a18ac <_Z19__fetch_global_Wirev>
 80a182c:	f7ff fbba 	bl	80a0fa4 <_ZN7TwoWire9isEnabledEv>
 80a1830:	b108      	cbz	r0, 80a1836 <pinAvailable+0x26>
 80a1832:	2c01      	cmp	r4, #1
 80a1834:	d9f6      	bls.n	80a1824 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1836:	f7ff fdfb 	bl	80a1430 <_Z22__fetch_global_Serial1v>
 80a183a:	f7ff fdf5 	bl	80a1428 <_ZN11USARTSerial9isEnabledEv>
 80a183e:	b118      	cbz	r0, 80a1848 <pinAvailable+0x38>
 80a1840:	f1a4 0312 	sub.w	r3, r4, #18
 80a1844:	2b01      	cmp	r3, #1
 80a1846:	d9ed      	bls.n	80a1824 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1848:	2c17      	cmp	r4, #23
 80a184a:	bf8c      	ite	hi
 80a184c:	2000      	movhi	r0, #0
 80a184e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1850:	bd10      	pop	{r4, pc}
 80a1852:	bf00      	nop
 80a1854:	20000840 	.word	0x20000840

080a1858 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1858:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a185a:	b538      	push	{r3, r4, r5, lr}
 80a185c:	4604      	mov	r4, r0
 80a185e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1860:	d80a      	bhi.n	80a1878 <pinMode+0x20>
 80a1862:	29ff      	cmp	r1, #255	; 0xff
 80a1864:	d008      	beq.n	80a1878 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1866:	f7ff ffd3 	bl	80a1810 <pinAvailable>
 80a186a:	b128      	cbz	r0, 80a1878 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a186c:	4629      	mov	r1, r5
 80a186e:	4620      	mov	r0, r4
}
 80a1870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1874:	f7fe beb4 	b.w	80a05e0 <HAL_Pin_Mode>
 80a1878:	bd38      	pop	{r3, r4, r5, pc}

080a187a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a187a:	b538      	push	{r3, r4, r5, lr}
 80a187c:	4604      	mov	r4, r0
 80a187e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1880:	f7fe feb6 	bl	80a05f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1884:	28ff      	cmp	r0, #255	; 0xff
 80a1886:	d010      	beq.n	80a18aa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1888:	2806      	cmp	r0, #6
 80a188a:	d804      	bhi.n	80a1896 <digitalWrite+0x1c>
 80a188c:	234d      	movs	r3, #77	; 0x4d
 80a188e:	fa23 f000 	lsr.w	r0, r3, r0
 80a1892:	07c3      	lsls	r3, r0, #31
 80a1894:	d409      	bmi.n	80a18aa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1896:	4620      	mov	r0, r4
 80a1898:	f7ff ffba 	bl	80a1810 <pinAvailable>
 80a189c:	b128      	cbz	r0, 80a18aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a189e:	4629      	mov	r1, r5
 80a18a0:	4620      	mov	r0, r4
}
 80a18a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a18a6:	f7fe beab 	b.w	80a0600 <HAL_GPIO_Write>
 80a18aa:	bd38      	pop	{r3, r4, r5, pc}

080a18ac <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a18ac:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a18ae:	4d0b      	ldr	r5, [pc, #44]	; (80a18dc <_Z19__fetch_global_Wirev+0x30>)
 80a18b0:	6829      	ldr	r1, [r5, #0]
 80a18b2:	f011 0401 	ands.w	r4, r1, #1
 80a18b6:	d10f      	bne.n	80a18d8 <_Z19__fetch_global_Wirev+0x2c>
 80a18b8:	4628      	mov	r0, r5
 80a18ba:	f7fe fbf2 	bl	80a00a2 <__cxa_guard_acquire>
 80a18be:	b158      	cbz	r0, 80a18d8 <_Z19__fetch_global_Wirev+0x2c>
 80a18c0:	4621      	mov	r1, r4
 80a18c2:	4807      	ldr	r0, [pc, #28]	; (80a18e0 <_Z19__fetch_global_Wirev+0x34>)
 80a18c4:	f7ff fb5c 	bl	80a0f80 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a18c8:	4628      	mov	r0, r5
 80a18ca:	f7fe fbef 	bl	80a00ac <__cxa_guard_release>
 80a18ce:	4a05      	ldr	r2, [pc, #20]	; (80a18e4 <_Z19__fetch_global_Wirev+0x38>)
 80a18d0:	4905      	ldr	r1, [pc, #20]	; (80a18e8 <_Z19__fetch_global_Wirev+0x3c>)
 80a18d2:	4803      	ldr	r0, [pc, #12]	; (80a18e0 <_Z19__fetch_global_Wirev+0x34>)
 80a18d4:	f000 f844 	bl	80a1960 <__aeabi_atexit>
	return wire;
}
 80a18d8:	4801      	ldr	r0, [pc, #4]	; (80a18e0 <_Z19__fetch_global_Wirev+0x34>)
 80a18da:	bd38      	pop	{r3, r4, r5, pc}
 80a18dc:	20000810 	.word	0x20000810
 80a18e0:	20000814 	.word	0x20000814
 80a18e4:	20000368 	.word	0x20000368
 80a18e8:	080a0f29 	.word	0x080a0f29

080a18ec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a18ec:	b513      	push	{r0, r1, r4, lr}
 80a18ee:	4c08      	ldr	r4, [pc, #32]	; (80a1910 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a18f0:	2300      	movs	r3, #0
 80a18f2:	461a      	mov	r2, r3
 80a18f4:	4619      	mov	r1, r3
 80a18f6:	9300      	str	r3, [sp, #0]
 80a18f8:	4620      	mov	r0, r4
 80a18fa:	f7ff fbaf 	bl	80a105c <_ZN9IPAddressC1Ehhhh>
 80a18fe:	4620      	mov	r0, r4
 80a1900:	4a04      	ldr	r2, [pc, #16]	; (80a1914 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1902:	4905      	ldr	r1, [pc, #20]	; (80a1918 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1904:	b002      	add	sp, #8
 80a1906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a190a:	f000 b829 	b.w	80a1960 <__aeabi_atexit>
 80a190e:	bf00      	nop
 80a1910:	20000828 	.word	0x20000828
 80a1914:	20000368 	.word	0x20000368
 80a1918:	080a0fad 	.word	0x080a0fad

080a191c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a191c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a191e:	4c0c      	ldr	r4, [pc, #48]	; (80a1950 <_GLOBAL__sub_I_SPI+0x34>)
 80a1920:	4e0c      	ldr	r6, [pc, #48]	; (80a1954 <_GLOBAL__sub_I_SPI+0x38>)
 80a1922:	4d0d      	ldr	r5, [pc, #52]	; (80a1958 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1924:	2100      	movs	r1, #0
 80a1926:	4620      	mov	r0, r4
 80a1928:	f7ff fc84 	bl	80a1234 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a192c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a192e:	4c0b      	ldr	r4, [pc, #44]	; (80a195c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1930:	4632      	mov	r2, r6
 80a1932:	4629      	mov	r1, r5
 80a1934:	f000 f814 	bl	80a1960 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1938:	2101      	movs	r1, #1
 80a193a:	4620      	mov	r0, r4
 80a193c:	f7ff fc7a 	bl	80a1234 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1940:	4632      	mov	r2, r6
 80a1942:	4629      	mov	r1, r5
 80a1944:	4620      	mov	r0, r4
 80a1946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a194a:	f000 b809 	b.w	80a1960 <__aeabi_atexit>
 80a194e:	bf00      	nop
 80a1950:	20000840 	.word	0x20000840
 80a1954:	20000368 	.word	0x20000368
 80a1958:	080a1225 	.word	0x080a1225
 80a195c:	20000850 	.word	0x20000850

080a1960 <__aeabi_atexit>:
 80a1960:	460b      	mov	r3, r1
 80a1962:	4601      	mov	r1, r0
 80a1964:	4618      	mov	r0, r3
 80a1966:	f001 b8eb 	b.w	80a2b40 <__cxa_atexit>

080a196a <_ZdlPvj>:
 80a196a:	f7fe bb98 	b.w	80a009e <_ZdlPv>

080a196e <_ZSt25__throw_bad_function_callv>:
 80a196e:	b508      	push	{r3, lr}
 80a1970:	f7fe ffc4 	bl	80a08fc <abort>

080a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1974:	4b24      	ldr	r3, [pc, #144]	; (80a1a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d0      	lsls	r0, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4b22      	ldr	r3, [pc, #136]	; (80a1a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d1      	lsls	r1, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b20      	ldr	r3, [pc, #128]	; (80a1a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d2      	lsls	r2, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b1e      	ldr	r3, [pc, #120]	; (80a1a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d0      	lsls	r0, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4b1c      	ldr	r3, [pc, #112]	; (80a1a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a19a6:	681a      	ldr	r2, [r3, #0]
 80a19a8:	07d1      	lsls	r1, r2, #31
 80a19aa:	bf5c      	itt	pl
 80a19ac:	2201      	movpl	r2, #1
 80a19ae:	601a      	strpl	r2, [r3, #0]
 80a19b0:	4b1a      	ldr	r3, [pc, #104]	; (80a1a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a19b2:	681a      	ldr	r2, [r3, #0]
 80a19b4:	07d2      	lsls	r2, r2, #31
 80a19b6:	bf5c      	itt	pl
 80a19b8:	2201      	movpl	r2, #1
 80a19ba:	601a      	strpl	r2, [r3, #0]
 80a19bc:	4b18      	ldr	r3, [pc, #96]	; (80a1a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a19be:	681a      	ldr	r2, [r3, #0]
 80a19c0:	07d0      	lsls	r0, r2, #31
 80a19c2:	bf5c      	itt	pl
 80a19c4:	2201      	movpl	r2, #1
 80a19c6:	601a      	strpl	r2, [r3, #0]
 80a19c8:	4b16      	ldr	r3, [pc, #88]	; (80a1a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d1      	lsls	r1, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4b14      	ldr	r3, [pc, #80]	; (80a1a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a19d6:	681a      	ldr	r2, [r3, #0]
 80a19d8:	07d2      	lsls	r2, r2, #31
 80a19da:	bf5c      	itt	pl
 80a19dc:	2201      	movpl	r2, #1
 80a19de:	601a      	strpl	r2, [r3, #0]
 80a19e0:	4b12      	ldr	r3, [pc, #72]	; (80a1a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a19e2:	681a      	ldr	r2, [r3, #0]
 80a19e4:	07d0      	lsls	r0, r2, #31
 80a19e6:	bf5c      	itt	pl
 80a19e8:	2201      	movpl	r2, #1
 80a19ea:	601a      	strpl	r2, [r3, #0]
 80a19ec:	4b10      	ldr	r3, [pc, #64]	; (80a1a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a19ee:	681a      	ldr	r2, [r3, #0]
 80a19f0:	07d1      	lsls	r1, r2, #31
 80a19f2:	bf5c      	itt	pl
 80a19f4:	2201      	movpl	r2, #1
 80a19f6:	601a      	strpl	r2, [r3, #0]
 80a19f8:	4b0e      	ldr	r3, [pc, #56]	; (80a1a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a19fa:	681a      	ldr	r2, [r3, #0]
 80a19fc:	07d2      	lsls	r2, r2, #31
 80a19fe:	bf5c      	itt	pl
 80a1a00:	2201      	movpl	r2, #1
 80a1a02:	601a      	strpl	r2, [r3, #0]
 80a1a04:	4770      	bx	lr
 80a1a06:	bf00      	nop
 80a1a08:	2000088c 	.word	0x2000088c
 80a1a0c:	20000888 	.word	0x20000888
 80a1a10:	20000884 	.word	0x20000884
 80a1a14:	20000880 	.word	0x20000880
 80a1a18:	2000087c 	.word	0x2000087c
 80a1a1c:	20000878 	.word	0x20000878
 80a1a20:	20000874 	.word	0x20000874
 80a1a24:	20000870 	.word	0x20000870
 80a1a28:	2000086c 	.word	0x2000086c
 80a1a2c:	20000868 	.word	0x20000868
 80a1a30:	20000864 	.word	0x20000864
 80a1a34:	20000860 	.word	0x20000860

080a1a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a38:	4b18      	ldr	r3, [pc, #96]	; (80a1a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a3a:	681a      	ldr	r2, [r3, #0]
 80a1a3c:	07d1      	lsls	r1, r2, #31
 80a1a3e:	bf5c      	itt	pl
 80a1a40:	2201      	movpl	r2, #1
 80a1a42:	601a      	strpl	r2, [r3, #0]
 80a1a44:	4b16      	ldr	r3, [pc, #88]	; (80a1aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a46:	681a      	ldr	r2, [r3, #0]
 80a1a48:	07d2      	lsls	r2, r2, #31
 80a1a4a:	bf5c      	itt	pl
 80a1a4c:	2201      	movpl	r2, #1
 80a1a4e:	601a      	strpl	r2, [r3, #0]
 80a1a50:	4b14      	ldr	r3, [pc, #80]	; (80a1aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a52:	681a      	ldr	r2, [r3, #0]
 80a1a54:	07d0      	lsls	r0, r2, #31
 80a1a56:	bf5c      	itt	pl
 80a1a58:	2201      	movpl	r2, #1
 80a1a5a:	601a      	strpl	r2, [r3, #0]
 80a1a5c:	4b12      	ldr	r3, [pc, #72]	; (80a1aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a5e:	681a      	ldr	r2, [r3, #0]
 80a1a60:	07d1      	lsls	r1, r2, #31
 80a1a62:	bf5c      	itt	pl
 80a1a64:	2201      	movpl	r2, #1
 80a1a66:	601a      	strpl	r2, [r3, #0]
 80a1a68:	4b10      	ldr	r3, [pc, #64]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a6a:	681a      	ldr	r2, [r3, #0]
 80a1a6c:	07d2      	lsls	r2, r2, #31
 80a1a6e:	bf5c      	itt	pl
 80a1a70:	2201      	movpl	r2, #1
 80a1a72:	601a      	strpl	r2, [r3, #0]
 80a1a74:	4b0e      	ldr	r3, [pc, #56]	; (80a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a76:	681a      	ldr	r2, [r3, #0]
 80a1a78:	07d0      	lsls	r0, r2, #31
 80a1a7a:	bf5c      	itt	pl
 80a1a7c:	2201      	movpl	r2, #1
 80a1a7e:	601a      	strpl	r2, [r3, #0]
 80a1a80:	4b0c      	ldr	r3, [pc, #48]	; (80a1ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a82:	681a      	ldr	r2, [r3, #0]
 80a1a84:	07d1      	lsls	r1, r2, #31
 80a1a86:	bf5c      	itt	pl
 80a1a88:	2201      	movpl	r2, #1
 80a1a8a:	601a      	strpl	r2, [r3, #0]
 80a1a8c:	4b0a      	ldr	r3, [pc, #40]	; (80a1ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a8e:	681a      	ldr	r2, [r3, #0]
 80a1a90:	07d2      	lsls	r2, r2, #31
 80a1a92:	bf5c      	itt	pl
 80a1a94:	2201      	movpl	r2, #1
 80a1a96:	601a      	strpl	r2, [r3, #0]
 80a1a98:	4770      	bx	lr
 80a1a9a:	bf00      	nop
 80a1a9c:	200008ac 	.word	0x200008ac
 80a1aa0:	200008a8 	.word	0x200008a8
 80a1aa4:	200008a4 	.word	0x200008a4
 80a1aa8:	200008a0 	.word	0x200008a0
 80a1aac:	2000089c 	.word	0x2000089c
 80a1ab0:	20000898 	.word	0x20000898
 80a1ab4:	20000894 	.word	0x20000894
 80a1ab8:	20000890 	.word	0x20000890

080a1abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1abc:	4b18      	ldr	r3, [pc, #96]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1abe:	681a      	ldr	r2, [r3, #0]
 80a1ac0:	07d1      	lsls	r1, r2, #31
 80a1ac2:	bf5c      	itt	pl
 80a1ac4:	2201      	movpl	r2, #1
 80a1ac6:	601a      	strpl	r2, [r3, #0]
 80a1ac8:	4b16      	ldr	r3, [pc, #88]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1aca:	681a      	ldr	r2, [r3, #0]
 80a1acc:	07d2      	lsls	r2, r2, #31
 80a1ace:	bf5c      	itt	pl
 80a1ad0:	2201      	movpl	r2, #1
 80a1ad2:	601a      	strpl	r2, [r3, #0]
 80a1ad4:	4b14      	ldr	r3, [pc, #80]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1ad6:	681a      	ldr	r2, [r3, #0]
 80a1ad8:	07d0      	lsls	r0, r2, #31
 80a1ada:	bf5c      	itt	pl
 80a1adc:	2201      	movpl	r2, #1
 80a1ade:	601a      	strpl	r2, [r3, #0]
 80a1ae0:	4b12      	ldr	r3, [pc, #72]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1ae2:	681a      	ldr	r2, [r3, #0]
 80a1ae4:	07d1      	lsls	r1, r2, #31
 80a1ae6:	bf5c      	itt	pl
 80a1ae8:	2201      	movpl	r2, #1
 80a1aea:	601a      	strpl	r2, [r3, #0]
 80a1aec:	4b10      	ldr	r3, [pc, #64]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1aee:	681a      	ldr	r2, [r3, #0]
 80a1af0:	07d2      	lsls	r2, r2, #31
 80a1af2:	bf5c      	itt	pl
 80a1af4:	2201      	movpl	r2, #1
 80a1af6:	601a      	strpl	r2, [r3, #0]
 80a1af8:	4b0e      	ldr	r3, [pc, #56]	; (80a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1afa:	681a      	ldr	r2, [r3, #0]
 80a1afc:	07d0      	lsls	r0, r2, #31
 80a1afe:	bf5c      	itt	pl
 80a1b00:	2201      	movpl	r2, #1
 80a1b02:	601a      	strpl	r2, [r3, #0]
 80a1b04:	4b0c      	ldr	r3, [pc, #48]	; (80a1b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1b06:	681a      	ldr	r2, [r3, #0]
 80a1b08:	07d1      	lsls	r1, r2, #31
 80a1b0a:	bf5c      	itt	pl
 80a1b0c:	2201      	movpl	r2, #1
 80a1b0e:	601a      	strpl	r2, [r3, #0]
 80a1b10:	4b0a      	ldr	r3, [pc, #40]	; (80a1b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1b12:	681a      	ldr	r2, [r3, #0]
 80a1b14:	07d2      	lsls	r2, r2, #31
 80a1b16:	bf5c      	itt	pl
 80a1b18:	2201      	movpl	r2, #1
 80a1b1a:	601a      	strpl	r2, [r3, #0]
 80a1b1c:	4770      	bx	lr
 80a1b1e:	bf00      	nop
 80a1b20:	200008cc 	.word	0x200008cc
 80a1b24:	200008c8 	.word	0x200008c8
 80a1b28:	200008c4 	.word	0x200008c4
 80a1b2c:	200008c0 	.word	0x200008c0
 80a1b30:	200008bc 	.word	0x200008bc
 80a1b34:	200008b8 	.word	0x200008b8
 80a1b38:	200008b4 	.word	0x200008b4
 80a1b3c:	200008b0 	.word	0x200008b0

080a1b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b40:	4b24      	ldr	r3, [pc, #144]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b42:	681a      	ldr	r2, [r3, #0]
 80a1b44:	07d0      	lsls	r0, r2, #31
 80a1b46:	bf5c      	itt	pl
 80a1b48:	2201      	movpl	r2, #1
 80a1b4a:	601a      	strpl	r2, [r3, #0]
 80a1b4c:	4b22      	ldr	r3, [pc, #136]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b4e:	681a      	ldr	r2, [r3, #0]
 80a1b50:	07d1      	lsls	r1, r2, #31
 80a1b52:	bf5c      	itt	pl
 80a1b54:	2201      	movpl	r2, #1
 80a1b56:	601a      	strpl	r2, [r3, #0]
 80a1b58:	4b20      	ldr	r3, [pc, #128]	; (80a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b5a:	681a      	ldr	r2, [r3, #0]
 80a1b5c:	07d2      	lsls	r2, r2, #31
 80a1b5e:	bf5c      	itt	pl
 80a1b60:	2201      	movpl	r2, #1
 80a1b62:	601a      	strpl	r2, [r3, #0]
 80a1b64:	4b1e      	ldr	r3, [pc, #120]	; (80a1be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b66:	681a      	ldr	r2, [r3, #0]
 80a1b68:	07d0      	lsls	r0, r2, #31
 80a1b6a:	bf5c      	itt	pl
 80a1b6c:	2201      	movpl	r2, #1
 80a1b6e:	601a      	strpl	r2, [r3, #0]
 80a1b70:	4b1c      	ldr	r3, [pc, #112]	; (80a1be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b72:	681a      	ldr	r2, [r3, #0]
 80a1b74:	07d1      	lsls	r1, r2, #31
 80a1b76:	bf5c      	itt	pl
 80a1b78:	2201      	movpl	r2, #1
 80a1b7a:	601a      	strpl	r2, [r3, #0]
 80a1b7c:	4b1a      	ldr	r3, [pc, #104]	; (80a1be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b7e:	681a      	ldr	r2, [r3, #0]
 80a1b80:	07d2      	lsls	r2, r2, #31
 80a1b82:	bf5c      	itt	pl
 80a1b84:	2201      	movpl	r2, #1
 80a1b86:	601a      	strpl	r2, [r3, #0]
 80a1b88:	4b18      	ldr	r3, [pc, #96]	; (80a1bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b8a:	681a      	ldr	r2, [r3, #0]
 80a1b8c:	07d0      	lsls	r0, r2, #31
 80a1b8e:	bf5c      	itt	pl
 80a1b90:	2201      	movpl	r2, #1
 80a1b92:	601a      	strpl	r2, [r3, #0]
 80a1b94:	4b16      	ldr	r3, [pc, #88]	; (80a1bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b96:	681a      	ldr	r2, [r3, #0]
 80a1b98:	07d1      	lsls	r1, r2, #31
 80a1b9a:	bf5c      	itt	pl
 80a1b9c:	2201      	movpl	r2, #1
 80a1b9e:	601a      	strpl	r2, [r3, #0]
 80a1ba0:	4b14      	ldr	r3, [pc, #80]	; (80a1bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1ba2:	681a      	ldr	r2, [r3, #0]
 80a1ba4:	07d2      	lsls	r2, r2, #31
 80a1ba6:	bf5c      	itt	pl
 80a1ba8:	2201      	movpl	r2, #1
 80a1baa:	601a      	strpl	r2, [r3, #0]
 80a1bac:	4b12      	ldr	r3, [pc, #72]	; (80a1bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1bae:	681a      	ldr	r2, [r3, #0]
 80a1bb0:	07d0      	lsls	r0, r2, #31
 80a1bb2:	bf5c      	itt	pl
 80a1bb4:	2201      	movpl	r2, #1
 80a1bb6:	601a      	strpl	r2, [r3, #0]
 80a1bb8:	4b10      	ldr	r3, [pc, #64]	; (80a1bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1bba:	681a      	ldr	r2, [r3, #0]
 80a1bbc:	07d1      	lsls	r1, r2, #31
 80a1bbe:	bf5c      	itt	pl
 80a1bc0:	2201      	movpl	r2, #1
 80a1bc2:	601a      	strpl	r2, [r3, #0]
 80a1bc4:	4b0e      	ldr	r3, [pc, #56]	; (80a1c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1bc6:	681a      	ldr	r2, [r3, #0]
 80a1bc8:	07d2      	lsls	r2, r2, #31
 80a1bca:	bf5c      	itt	pl
 80a1bcc:	2201      	movpl	r2, #1
 80a1bce:	601a      	strpl	r2, [r3, #0]
 80a1bd0:	4770      	bx	lr
 80a1bd2:	bf00      	nop
 80a1bd4:	200008fc 	.word	0x200008fc
 80a1bd8:	200008f8 	.word	0x200008f8
 80a1bdc:	200008f4 	.word	0x200008f4
 80a1be0:	200008f0 	.word	0x200008f0
 80a1be4:	200008ec 	.word	0x200008ec
 80a1be8:	200008e8 	.word	0x200008e8
 80a1bec:	200008e4 	.word	0x200008e4
 80a1bf0:	200008e0 	.word	0x200008e0
 80a1bf4:	200008dc 	.word	0x200008dc
 80a1bf8:	200008d8 	.word	0x200008d8
 80a1bfc:	200008d4 	.word	0x200008d4
 80a1c00:	200008d0 	.word	0x200008d0

080a1c04 <__aeabi_drsub>:
 80a1c04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1c08:	e002      	b.n	80a1c10 <__adddf3>
 80a1c0a:	bf00      	nop

080a1c0c <__aeabi_dsub>:
 80a1c0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1c10 <__adddf3>:
 80a1c10:	b530      	push	{r4, r5, lr}
 80a1c12:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1c16:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1c1a:	ea94 0f05 	teq	r4, r5
 80a1c1e:	bf08      	it	eq
 80a1c20:	ea90 0f02 	teqeq	r0, r2
 80a1c24:	bf1f      	itttt	ne
 80a1c26:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1c2a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1c2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1c32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c36:	f000 80e2 	beq.w	80a1dfe <__adddf3+0x1ee>
 80a1c3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1c3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1c42:	bfb8      	it	lt
 80a1c44:	426d      	neglt	r5, r5
 80a1c46:	dd0c      	ble.n	80a1c62 <__adddf3+0x52>
 80a1c48:	442c      	add	r4, r5
 80a1c4a:	ea80 0202 	eor.w	r2, r0, r2
 80a1c4e:	ea81 0303 	eor.w	r3, r1, r3
 80a1c52:	ea82 0000 	eor.w	r0, r2, r0
 80a1c56:	ea83 0101 	eor.w	r1, r3, r1
 80a1c5a:	ea80 0202 	eor.w	r2, r0, r2
 80a1c5e:	ea81 0303 	eor.w	r3, r1, r3
 80a1c62:	2d36      	cmp	r5, #54	; 0x36
 80a1c64:	bf88      	it	hi
 80a1c66:	bd30      	pophi	{r4, r5, pc}
 80a1c68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1c70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1c74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1c78:	d002      	beq.n	80a1c80 <__adddf3+0x70>
 80a1c7a:	4240      	negs	r0, r0
 80a1c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c84:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c8c:	d002      	beq.n	80a1c94 <__adddf3+0x84>
 80a1c8e:	4252      	negs	r2, r2
 80a1c90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c94:	ea94 0f05 	teq	r4, r5
 80a1c98:	f000 80a7 	beq.w	80a1dea <__adddf3+0x1da>
 80a1c9c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1ca0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1ca4:	db0d      	blt.n	80a1cc2 <__adddf3+0xb2>
 80a1ca6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1caa:	fa22 f205 	lsr.w	r2, r2, r5
 80a1cae:	1880      	adds	r0, r0, r2
 80a1cb0:	f141 0100 	adc.w	r1, r1, #0
 80a1cb4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1cb8:	1880      	adds	r0, r0, r2
 80a1cba:	fa43 f305 	asr.w	r3, r3, r5
 80a1cbe:	4159      	adcs	r1, r3
 80a1cc0:	e00e      	b.n	80a1ce0 <__adddf3+0xd0>
 80a1cc2:	f1a5 0520 	sub.w	r5, r5, #32
 80a1cc6:	f10e 0e20 	add.w	lr, lr, #32
 80a1cca:	2a01      	cmp	r2, #1
 80a1ccc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1cd0:	bf28      	it	cs
 80a1cd2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1cd6:	fa43 f305 	asr.w	r3, r3, r5
 80a1cda:	18c0      	adds	r0, r0, r3
 80a1cdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1ce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ce4:	d507      	bpl.n	80a1cf6 <__adddf3+0xe6>
 80a1ce6:	f04f 0e00 	mov.w	lr, #0
 80a1cea:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1cee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1cf2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1cf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1cfa:	d31b      	bcc.n	80a1d34 <__adddf3+0x124>
 80a1cfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1d00:	d30c      	bcc.n	80a1d1c <__adddf3+0x10c>
 80a1d02:	0849      	lsrs	r1, r1, #1
 80a1d04:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1d08:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1d0c:	f104 0401 	add.w	r4, r4, #1
 80a1d10:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1d14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1d18:	f080 809a 	bcs.w	80a1e50 <__adddf3+0x240>
 80a1d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1d20:	bf08      	it	eq
 80a1d22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1d26:	f150 0000 	adcs.w	r0, r0, #0
 80a1d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1d2e:	ea41 0105 	orr.w	r1, r1, r5
 80a1d32:	bd30      	pop	{r4, r5, pc}
 80a1d34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1d38:	4140      	adcs	r0, r0
 80a1d3a:	eb41 0101 	adc.w	r1, r1, r1
 80a1d3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1d42:	f1a4 0401 	sub.w	r4, r4, #1
 80a1d46:	d1e9      	bne.n	80a1d1c <__adddf3+0x10c>
 80a1d48:	f091 0f00 	teq	r1, #0
 80a1d4c:	bf04      	itt	eq
 80a1d4e:	4601      	moveq	r1, r0
 80a1d50:	2000      	moveq	r0, #0
 80a1d52:	fab1 f381 	clz	r3, r1
 80a1d56:	bf08      	it	eq
 80a1d58:	3320      	addeq	r3, #32
 80a1d5a:	f1a3 030b 	sub.w	r3, r3, #11
 80a1d5e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1d62:	da0c      	bge.n	80a1d7e <__adddf3+0x16e>
 80a1d64:	320c      	adds	r2, #12
 80a1d66:	dd08      	ble.n	80a1d7a <__adddf3+0x16a>
 80a1d68:	f102 0c14 	add.w	ip, r2, #20
 80a1d6c:	f1c2 020c 	rsb	r2, r2, #12
 80a1d70:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1d74:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d78:	e00c      	b.n	80a1d94 <__adddf3+0x184>
 80a1d7a:	f102 0214 	add.w	r2, r2, #20
 80a1d7e:	bfd8      	it	le
 80a1d80:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d84:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d88:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d8c:	bfdc      	itt	le
 80a1d8e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d92:	4090      	lslle	r0, r2
 80a1d94:	1ae4      	subs	r4, r4, r3
 80a1d96:	bfa2      	ittt	ge
 80a1d98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d9c:	4329      	orrge	r1, r5
 80a1d9e:	bd30      	popge	{r4, r5, pc}
 80a1da0:	ea6f 0404 	mvn.w	r4, r4
 80a1da4:	3c1f      	subs	r4, #31
 80a1da6:	da1c      	bge.n	80a1de2 <__adddf3+0x1d2>
 80a1da8:	340c      	adds	r4, #12
 80a1daa:	dc0e      	bgt.n	80a1dca <__adddf3+0x1ba>
 80a1dac:	f104 0414 	add.w	r4, r4, #20
 80a1db0:	f1c4 0220 	rsb	r2, r4, #32
 80a1db4:	fa20 f004 	lsr.w	r0, r0, r4
 80a1db8:	fa01 f302 	lsl.w	r3, r1, r2
 80a1dbc:	ea40 0003 	orr.w	r0, r0, r3
 80a1dc0:	fa21 f304 	lsr.w	r3, r1, r4
 80a1dc4:	ea45 0103 	orr.w	r1, r5, r3
 80a1dc8:	bd30      	pop	{r4, r5, pc}
 80a1dca:	f1c4 040c 	rsb	r4, r4, #12
 80a1dce:	f1c4 0220 	rsb	r2, r4, #32
 80a1dd2:	fa20 f002 	lsr.w	r0, r0, r2
 80a1dd6:	fa01 f304 	lsl.w	r3, r1, r4
 80a1dda:	ea40 0003 	orr.w	r0, r0, r3
 80a1dde:	4629      	mov	r1, r5
 80a1de0:	bd30      	pop	{r4, r5, pc}
 80a1de2:	fa21 f004 	lsr.w	r0, r1, r4
 80a1de6:	4629      	mov	r1, r5
 80a1de8:	bd30      	pop	{r4, r5, pc}
 80a1dea:	f094 0f00 	teq	r4, #0
 80a1dee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1df2:	bf06      	itte	eq
 80a1df4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1df8:	3401      	addeq	r4, #1
 80a1dfa:	3d01      	subne	r5, #1
 80a1dfc:	e74e      	b.n	80a1c9c <__adddf3+0x8c>
 80a1dfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e02:	bf18      	it	ne
 80a1e04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1e08:	d029      	beq.n	80a1e5e <__adddf3+0x24e>
 80a1e0a:	ea94 0f05 	teq	r4, r5
 80a1e0e:	bf08      	it	eq
 80a1e10:	ea90 0f02 	teqeq	r0, r2
 80a1e14:	d005      	beq.n	80a1e22 <__adddf3+0x212>
 80a1e16:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1e1a:	bf04      	itt	eq
 80a1e1c:	4619      	moveq	r1, r3
 80a1e1e:	4610      	moveq	r0, r2
 80a1e20:	bd30      	pop	{r4, r5, pc}
 80a1e22:	ea91 0f03 	teq	r1, r3
 80a1e26:	bf1e      	ittt	ne
 80a1e28:	2100      	movne	r1, #0
 80a1e2a:	2000      	movne	r0, #0
 80a1e2c:	bd30      	popne	{r4, r5, pc}
 80a1e2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1e32:	d105      	bne.n	80a1e40 <__adddf3+0x230>
 80a1e34:	0040      	lsls	r0, r0, #1
 80a1e36:	4149      	adcs	r1, r1
 80a1e38:	bf28      	it	cs
 80a1e3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1e3e:	bd30      	pop	{r4, r5, pc}
 80a1e40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1e44:	bf3c      	itt	cc
 80a1e46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1e4a:	bd30      	popcc	{r4, r5, pc}
 80a1e4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1e54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e58:	f04f 0000 	mov.w	r0, #0
 80a1e5c:	bd30      	pop	{r4, r5, pc}
 80a1e5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e62:	bf1a      	itte	ne
 80a1e64:	4619      	movne	r1, r3
 80a1e66:	4610      	movne	r0, r2
 80a1e68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1e6c:	bf1c      	itt	ne
 80a1e6e:	460b      	movne	r3, r1
 80a1e70:	4602      	movne	r2, r0
 80a1e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1e76:	bf06      	itte	eq
 80a1e78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1e7c:	ea91 0f03 	teqeq	r1, r3
 80a1e80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e84:	bd30      	pop	{r4, r5, pc}
 80a1e86:	bf00      	nop

080a1e88 <__aeabi_ui2d>:
 80a1e88:	f090 0f00 	teq	r0, #0
 80a1e8c:	bf04      	itt	eq
 80a1e8e:	2100      	moveq	r1, #0
 80a1e90:	4770      	bxeq	lr
 80a1e92:	b530      	push	{r4, r5, lr}
 80a1e94:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e98:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e9c:	f04f 0500 	mov.w	r5, #0
 80a1ea0:	f04f 0100 	mov.w	r1, #0
 80a1ea4:	e750      	b.n	80a1d48 <__adddf3+0x138>
 80a1ea6:	bf00      	nop

080a1ea8 <__aeabi_i2d>:
 80a1ea8:	f090 0f00 	teq	r0, #0
 80a1eac:	bf04      	itt	eq
 80a1eae:	2100      	moveq	r1, #0
 80a1eb0:	4770      	bxeq	lr
 80a1eb2:	b530      	push	{r4, r5, lr}
 80a1eb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1eb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ebc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1ec0:	bf48      	it	mi
 80a1ec2:	4240      	negmi	r0, r0
 80a1ec4:	f04f 0100 	mov.w	r1, #0
 80a1ec8:	e73e      	b.n	80a1d48 <__adddf3+0x138>
 80a1eca:	bf00      	nop

080a1ecc <__aeabi_f2d>:
 80a1ecc:	0042      	lsls	r2, r0, #1
 80a1ece:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1ed2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1ed6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1eda:	bf1f      	itttt	ne
 80a1edc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1ee0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ee4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1ee8:	4770      	bxne	lr
 80a1eea:	f092 0f00 	teq	r2, #0
 80a1eee:	bf14      	ite	ne
 80a1ef0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ef4:	4770      	bxeq	lr
 80a1ef6:	b530      	push	{r4, r5, lr}
 80a1ef8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1f04:	e720      	b.n	80a1d48 <__adddf3+0x138>
 80a1f06:	bf00      	nop

080a1f08 <__aeabi_ul2d>:
 80a1f08:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f0c:	bf08      	it	eq
 80a1f0e:	4770      	bxeq	lr
 80a1f10:	b530      	push	{r4, r5, lr}
 80a1f12:	f04f 0500 	mov.w	r5, #0
 80a1f16:	e00a      	b.n	80a1f2e <__aeabi_l2d+0x16>

080a1f18 <__aeabi_l2d>:
 80a1f18:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f1c:	bf08      	it	eq
 80a1f1e:	4770      	bxeq	lr
 80a1f20:	b530      	push	{r4, r5, lr}
 80a1f22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1f26:	d502      	bpl.n	80a1f2e <__aeabi_l2d+0x16>
 80a1f28:	4240      	negs	r0, r0
 80a1f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1f32:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1f36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1f3a:	f43f aedc 	beq.w	80a1cf6 <__adddf3+0xe6>
 80a1f3e:	f04f 0203 	mov.w	r2, #3
 80a1f42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f46:	bf18      	it	ne
 80a1f48:	3203      	addne	r2, #3
 80a1f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f4e:	bf18      	it	ne
 80a1f50:	3203      	addne	r2, #3
 80a1f52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1f56:	f1c2 0320 	rsb	r3, r2, #32
 80a1f5a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1f5e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f62:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1f66:	ea40 000e 	orr.w	r0, r0, lr
 80a1f6a:	fa21 f102 	lsr.w	r1, r1, r2
 80a1f6e:	4414      	add	r4, r2
 80a1f70:	e6c1      	b.n	80a1cf6 <__adddf3+0xe6>
 80a1f72:	bf00      	nop

080a1f74 <__aeabi_dmul>:
 80a1f74:	b570      	push	{r4, r5, r6, lr}
 80a1f76:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f82:	bf1d      	ittte	ne
 80a1f84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1f88:	ea94 0f0c 	teqne	r4, ip
 80a1f8c:	ea95 0f0c 	teqne	r5, ip
 80a1f90:	f000 f8de 	bleq	80a2150 <__aeabi_dmul+0x1dc>
 80a1f94:	442c      	add	r4, r5
 80a1f96:	ea81 0603 	eor.w	r6, r1, r3
 80a1f9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1f9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1fa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1fa6:	bf18      	it	ne
 80a1fa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1fb4:	d038      	beq.n	80a2028 <__aeabi_dmul+0xb4>
 80a1fb6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1fba:	f04f 0500 	mov.w	r5, #0
 80a1fbe:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1fc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1fc6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1fca:	f04f 0600 	mov.w	r6, #0
 80a1fce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1fd2:	f09c 0f00 	teq	ip, #0
 80a1fd6:	bf18      	it	ne
 80a1fd8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1fdc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1fe0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1fe4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1fe8:	d204      	bcs.n	80a1ff4 <__aeabi_dmul+0x80>
 80a1fea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1fee:	416d      	adcs	r5, r5
 80a1ff0:	eb46 0606 	adc.w	r6, r6, r6
 80a1ff4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1ff8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1ffc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2000:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2004:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2008:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a200c:	bf88      	it	hi
 80a200e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2012:	d81e      	bhi.n	80a2052 <__aeabi_dmul+0xde>
 80a2014:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2018:	bf08      	it	eq
 80a201a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a201e:	f150 0000 	adcs.w	r0, r0, #0
 80a2022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2026:	bd70      	pop	{r4, r5, r6, pc}
 80a2028:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a202c:	ea46 0101 	orr.w	r1, r6, r1
 80a2030:	ea40 0002 	orr.w	r0, r0, r2
 80a2034:	ea81 0103 	eor.w	r1, r1, r3
 80a2038:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a203c:	bfc2      	ittt	gt
 80a203e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2046:	bd70      	popgt	{r4, r5, r6, pc}
 80a2048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a204c:	f04f 0e00 	mov.w	lr, #0
 80a2050:	3c01      	subs	r4, #1
 80a2052:	f300 80ab 	bgt.w	80a21ac <__aeabi_dmul+0x238>
 80a2056:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a205a:	bfde      	ittt	le
 80a205c:	2000      	movle	r0, #0
 80a205e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2062:	bd70      	pople	{r4, r5, r6, pc}
 80a2064:	f1c4 0400 	rsb	r4, r4, #0
 80a2068:	3c20      	subs	r4, #32
 80a206a:	da35      	bge.n	80a20d8 <__aeabi_dmul+0x164>
 80a206c:	340c      	adds	r4, #12
 80a206e:	dc1b      	bgt.n	80a20a8 <__aeabi_dmul+0x134>
 80a2070:	f104 0414 	add.w	r4, r4, #20
 80a2074:	f1c4 0520 	rsb	r5, r4, #32
 80a2078:	fa00 f305 	lsl.w	r3, r0, r5
 80a207c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2080:	fa01 f205 	lsl.w	r2, r1, r5
 80a2084:	ea40 0002 	orr.w	r0, r0, r2
 80a2088:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a208c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2094:	fa21 f604 	lsr.w	r6, r1, r4
 80a2098:	eb42 0106 	adc.w	r1, r2, r6
 80a209c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20a0:	bf08      	it	eq
 80a20a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a20a6:	bd70      	pop	{r4, r5, r6, pc}
 80a20a8:	f1c4 040c 	rsb	r4, r4, #12
 80a20ac:	f1c4 0520 	rsb	r5, r4, #32
 80a20b0:	fa00 f304 	lsl.w	r3, r0, r4
 80a20b4:	fa20 f005 	lsr.w	r0, r0, r5
 80a20b8:	fa01 f204 	lsl.w	r2, r1, r4
 80a20bc:	ea40 0002 	orr.w	r0, r0, r2
 80a20c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a20c8:	f141 0100 	adc.w	r1, r1, #0
 80a20cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20d0:	bf08      	it	eq
 80a20d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a20d6:	bd70      	pop	{r4, r5, r6, pc}
 80a20d8:	f1c4 0520 	rsb	r5, r4, #32
 80a20dc:	fa00 f205 	lsl.w	r2, r0, r5
 80a20e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a20e4:	fa20 f304 	lsr.w	r3, r0, r4
 80a20e8:	fa01 f205 	lsl.w	r2, r1, r5
 80a20ec:	ea43 0302 	orr.w	r3, r3, r2
 80a20f0:	fa21 f004 	lsr.w	r0, r1, r4
 80a20f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20f8:	fa21 f204 	lsr.w	r2, r1, r4
 80a20fc:	ea20 0002 	bic.w	r0, r0, r2
 80a2100:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2108:	bf08      	it	eq
 80a210a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a210e:	bd70      	pop	{r4, r5, r6, pc}
 80a2110:	f094 0f00 	teq	r4, #0
 80a2114:	d10f      	bne.n	80a2136 <__aeabi_dmul+0x1c2>
 80a2116:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a211a:	0040      	lsls	r0, r0, #1
 80a211c:	eb41 0101 	adc.w	r1, r1, r1
 80a2120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2124:	bf08      	it	eq
 80a2126:	3c01      	subeq	r4, #1
 80a2128:	d0f7      	beq.n	80a211a <__aeabi_dmul+0x1a6>
 80a212a:	ea41 0106 	orr.w	r1, r1, r6
 80a212e:	f095 0f00 	teq	r5, #0
 80a2132:	bf18      	it	ne
 80a2134:	4770      	bxne	lr
 80a2136:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a213a:	0052      	lsls	r2, r2, #1
 80a213c:	eb43 0303 	adc.w	r3, r3, r3
 80a2140:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2144:	bf08      	it	eq
 80a2146:	3d01      	subeq	r5, #1
 80a2148:	d0f7      	beq.n	80a213a <__aeabi_dmul+0x1c6>
 80a214a:	ea43 0306 	orr.w	r3, r3, r6
 80a214e:	4770      	bx	lr
 80a2150:	ea94 0f0c 	teq	r4, ip
 80a2154:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2158:	bf18      	it	ne
 80a215a:	ea95 0f0c 	teqne	r5, ip
 80a215e:	d00c      	beq.n	80a217a <__aeabi_dmul+0x206>
 80a2160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2164:	bf18      	it	ne
 80a2166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a216a:	d1d1      	bne.n	80a2110 <__aeabi_dmul+0x19c>
 80a216c:	ea81 0103 	eor.w	r1, r1, r3
 80a2170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2174:	f04f 0000 	mov.w	r0, #0
 80a2178:	bd70      	pop	{r4, r5, r6, pc}
 80a217a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a217e:	bf06      	itte	eq
 80a2180:	4610      	moveq	r0, r2
 80a2182:	4619      	moveq	r1, r3
 80a2184:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2188:	d019      	beq.n	80a21be <__aeabi_dmul+0x24a>
 80a218a:	ea94 0f0c 	teq	r4, ip
 80a218e:	d102      	bne.n	80a2196 <__aeabi_dmul+0x222>
 80a2190:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2194:	d113      	bne.n	80a21be <__aeabi_dmul+0x24a>
 80a2196:	ea95 0f0c 	teq	r5, ip
 80a219a:	d105      	bne.n	80a21a8 <__aeabi_dmul+0x234>
 80a219c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a21a0:	bf1c      	itt	ne
 80a21a2:	4610      	movne	r0, r2
 80a21a4:	4619      	movne	r1, r3
 80a21a6:	d10a      	bne.n	80a21be <__aeabi_dmul+0x24a>
 80a21a8:	ea81 0103 	eor.w	r1, r1, r3
 80a21ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a21b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a21b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a21b8:	f04f 0000 	mov.w	r0, #0
 80a21bc:	bd70      	pop	{r4, r5, r6, pc}
 80a21be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a21c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a21c6:	bd70      	pop	{r4, r5, r6, pc}

080a21c8 <__aeabi_ddiv>:
 80a21c8:	b570      	push	{r4, r5, r6, lr}
 80a21ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a21ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a21d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a21d6:	bf1d      	ittte	ne
 80a21d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a21dc:	ea94 0f0c 	teqne	r4, ip
 80a21e0:	ea95 0f0c 	teqne	r5, ip
 80a21e4:	f000 f8a7 	bleq	80a2336 <__aeabi_ddiv+0x16e>
 80a21e8:	eba4 0405 	sub.w	r4, r4, r5
 80a21ec:	ea81 0e03 	eor.w	lr, r1, r3
 80a21f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21f8:	f000 8088 	beq.w	80a230c <__aeabi_ddiv+0x144>
 80a21fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2200:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2204:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2208:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a220c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2210:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2214:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2218:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a221c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2220:	429d      	cmp	r5, r3
 80a2222:	bf08      	it	eq
 80a2224:	4296      	cmpeq	r6, r2
 80a2226:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a222a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a222e:	d202      	bcs.n	80a2236 <__aeabi_ddiv+0x6e>
 80a2230:	085b      	lsrs	r3, r3, #1
 80a2232:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2236:	1ab6      	subs	r6, r6, r2
 80a2238:	eb65 0503 	sbc.w	r5, r5, r3
 80a223c:	085b      	lsrs	r3, r3, #1
 80a223e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2242:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2246:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a224a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a224e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2252:	bf22      	ittt	cs
 80a2254:	1ab6      	subcs	r6, r6, r2
 80a2256:	4675      	movcs	r5, lr
 80a2258:	ea40 000c 	orrcs.w	r0, r0, ip
 80a225c:	085b      	lsrs	r3, r3, #1
 80a225e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2262:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2266:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a226a:	bf22      	ittt	cs
 80a226c:	1ab6      	subcs	r6, r6, r2
 80a226e:	4675      	movcs	r5, lr
 80a2270:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2274:	085b      	lsrs	r3, r3, #1
 80a2276:	ea4f 0232 	mov.w	r2, r2, rrx
 80a227a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a227e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2282:	bf22      	ittt	cs
 80a2284:	1ab6      	subcs	r6, r6, r2
 80a2286:	4675      	movcs	r5, lr
 80a2288:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a228c:	085b      	lsrs	r3, r3, #1
 80a228e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2292:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2296:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a229a:	bf22      	ittt	cs
 80a229c:	1ab6      	subcs	r6, r6, r2
 80a229e:	4675      	movcs	r5, lr
 80a22a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a22a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a22a8:	d018      	beq.n	80a22dc <__aeabi_ddiv+0x114>
 80a22aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a22ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a22b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a22b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a22ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a22be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a22c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a22c6:	d1c0      	bne.n	80a224a <__aeabi_ddiv+0x82>
 80a22c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a22cc:	d10b      	bne.n	80a22e6 <__aeabi_ddiv+0x11e>
 80a22ce:	ea41 0100 	orr.w	r1, r1, r0
 80a22d2:	f04f 0000 	mov.w	r0, #0
 80a22d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a22da:	e7b6      	b.n	80a224a <__aeabi_ddiv+0x82>
 80a22dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a22e0:	bf04      	itt	eq
 80a22e2:	4301      	orreq	r1, r0
 80a22e4:	2000      	moveq	r0, #0
 80a22e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a22ea:	bf88      	it	hi
 80a22ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a22f0:	f63f aeaf 	bhi.w	80a2052 <__aeabi_dmul+0xde>
 80a22f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a22f8:	bf04      	itt	eq
 80a22fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a22fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2302:	f150 0000 	adcs.w	r0, r0, #0
 80a2306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a230a:	bd70      	pop	{r4, r5, r6, pc}
 80a230c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2310:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2314:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2318:	bfc2      	ittt	gt
 80a231a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a231e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2322:	bd70      	popgt	{r4, r5, r6, pc}
 80a2324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2328:	f04f 0e00 	mov.w	lr, #0
 80a232c:	3c01      	subs	r4, #1
 80a232e:	e690      	b.n	80a2052 <__aeabi_dmul+0xde>
 80a2330:	ea45 0e06 	orr.w	lr, r5, r6
 80a2334:	e68d      	b.n	80a2052 <__aeabi_dmul+0xde>
 80a2336:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a233a:	ea94 0f0c 	teq	r4, ip
 80a233e:	bf08      	it	eq
 80a2340:	ea95 0f0c 	teqeq	r5, ip
 80a2344:	f43f af3b 	beq.w	80a21be <__aeabi_dmul+0x24a>
 80a2348:	ea94 0f0c 	teq	r4, ip
 80a234c:	d10a      	bne.n	80a2364 <__aeabi_ddiv+0x19c>
 80a234e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2352:	f47f af34 	bne.w	80a21be <__aeabi_dmul+0x24a>
 80a2356:	ea95 0f0c 	teq	r5, ip
 80a235a:	f47f af25 	bne.w	80a21a8 <__aeabi_dmul+0x234>
 80a235e:	4610      	mov	r0, r2
 80a2360:	4619      	mov	r1, r3
 80a2362:	e72c      	b.n	80a21be <__aeabi_dmul+0x24a>
 80a2364:	ea95 0f0c 	teq	r5, ip
 80a2368:	d106      	bne.n	80a2378 <__aeabi_ddiv+0x1b0>
 80a236a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a236e:	f43f aefd 	beq.w	80a216c <__aeabi_dmul+0x1f8>
 80a2372:	4610      	mov	r0, r2
 80a2374:	4619      	mov	r1, r3
 80a2376:	e722      	b.n	80a21be <__aeabi_dmul+0x24a>
 80a2378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a237c:	bf18      	it	ne
 80a237e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2382:	f47f aec5 	bne.w	80a2110 <__aeabi_dmul+0x19c>
 80a2386:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a238a:	f47f af0d 	bne.w	80a21a8 <__aeabi_dmul+0x234>
 80a238e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2392:	f47f aeeb 	bne.w	80a216c <__aeabi_dmul+0x1f8>
 80a2396:	e712      	b.n	80a21be <__aeabi_dmul+0x24a>

080a2398 <__gedf2>:
 80a2398:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a239c:	e006      	b.n	80a23ac <__cmpdf2+0x4>
 80a239e:	bf00      	nop

080a23a0 <__ledf2>:
 80a23a0:	f04f 0c01 	mov.w	ip, #1
 80a23a4:	e002      	b.n	80a23ac <__cmpdf2+0x4>
 80a23a6:	bf00      	nop

080a23a8 <__cmpdf2>:
 80a23a8:	f04f 0c01 	mov.w	ip, #1
 80a23ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a23b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a23b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a23b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a23bc:	bf18      	it	ne
 80a23be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a23c2:	d01b      	beq.n	80a23fc <__cmpdf2+0x54>
 80a23c4:	b001      	add	sp, #4
 80a23c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a23ca:	bf0c      	ite	eq
 80a23cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a23d0:	ea91 0f03 	teqne	r1, r3
 80a23d4:	bf02      	ittt	eq
 80a23d6:	ea90 0f02 	teqeq	r0, r2
 80a23da:	2000      	moveq	r0, #0
 80a23dc:	4770      	bxeq	lr
 80a23de:	f110 0f00 	cmn.w	r0, #0
 80a23e2:	ea91 0f03 	teq	r1, r3
 80a23e6:	bf58      	it	pl
 80a23e8:	4299      	cmppl	r1, r3
 80a23ea:	bf08      	it	eq
 80a23ec:	4290      	cmpeq	r0, r2
 80a23ee:	bf2c      	ite	cs
 80a23f0:	17d8      	asrcs	r0, r3, #31
 80a23f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a23f6:	f040 0001 	orr.w	r0, r0, #1
 80a23fa:	4770      	bx	lr
 80a23fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2404:	d102      	bne.n	80a240c <__cmpdf2+0x64>
 80a2406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a240a:	d107      	bne.n	80a241c <__cmpdf2+0x74>
 80a240c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2414:	d1d6      	bne.n	80a23c4 <__cmpdf2+0x1c>
 80a2416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a241a:	d0d3      	beq.n	80a23c4 <__cmpdf2+0x1c>
 80a241c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2420:	4770      	bx	lr
 80a2422:	bf00      	nop

080a2424 <__aeabi_cdrcmple>:
 80a2424:	4684      	mov	ip, r0
 80a2426:	4610      	mov	r0, r2
 80a2428:	4662      	mov	r2, ip
 80a242a:	468c      	mov	ip, r1
 80a242c:	4619      	mov	r1, r3
 80a242e:	4663      	mov	r3, ip
 80a2430:	e000      	b.n	80a2434 <__aeabi_cdcmpeq>
 80a2432:	bf00      	nop

080a2434 <__aeabi_cdcmpeq>:
 80a2434:	b501      	push	{r0, lr}
 80a2436:	f7ff ffb7 	bl	80a23a8 <__cmpdf2>
 80a243a:	2800      	cmp	r0, #0
 80a243c:	bf48      	it	mi
 80a243e:	f110 0f00 	cmnmi.w	r0, #0
 80a2442:	bd01      	pop	{r0, pc}

080a2444 <__aeabi_dcmpeq>:
 80a2444:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2448:	f7ff fff4 	bl	80a2434 <__aeabi_cdcmpeq>
 80a244c:	bf0c      	ite	eq
 80a244e:	2001      	moveq	r0, #1
 80a2450:	2000      	movne	r0, #0
 80a2452:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2456:	bf00      	nop

080a2458 <__aeabi_dcmplt>:
 80a2458:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a245c:	f7ff ffea 	bl	80a2434 <__aeabi_cdcmpeq>
 80a2460:	bf34      	ite	cc
 80a2462:	2001      	movcc	r0, #1
 80a2464:	2000      	movcs	r0, #0
 80a2466:	f85d fb08 	ldr.w	pc, [sp], #8
 80a246a:	bf00      	nop

080a246c <__aeabi_dcmple>:
 80a246c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2470:	f7ff ffe0 	bl	80a2434 <__aeabi_cdcmpeq>
 80a2474:	bf94      	ite	ls
 80a2476:	2001      	movls	r0, #1
 80a2478:	2000      	movhi	r0, #0
 80a247a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a247e:	bf00      	nop

080a2480 <__aeabi_dcmpge>:
 80a2480:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2484:	f7ff ffce 	bl	80a2424 <__aeabi_cdrcmple>
 80a2488:	bf94      	ite	ls
 80a248a:	2001      	movls	r0, #1
 80a248c:	2000      	movhi	r0, #0
 80a248e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2492:	bf00      	nop

080a2494 <__aeabi_dcmpgt>:
 80a2494:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2498:	f7ff ffc4 	bl	80a2424 <__aeabi_cdrcmple>
 80a249c:	bf34      	ite	cc
 80a249e:	2001      	movcc	r0, #1
 80a24a0:	2000      	movcs	r0, #0
 80a24a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a24a6:	bf00      	nop

080a24a8 <__aeabi_d2uiz>:
 80a24a8:	004a      	lsls	r2, r1, #1
 80a24aa:	d211      	bcs.n	80a24d0 <__aeabi_d2uiz+0x28>
 80a24ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a24b0:	d211      	bcs.n	80a24d6 <__aeabi_d2uiz+0x2e>
 80a24b2:	d50d      	bpl.n	80a24d0 <__aeabi_d2uiz+0x28>
 80a24b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a24b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a24bc:	d40e      	bmi.n	80a24dc <__aeabi_d2uiz+0x34>
 80a24be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a24c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a24c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a24ca:	fa23 f002 	lsr.w	r0, r3, r2
 80a24ce:	4770      	bx	lr
 80a24d0:	f04f 0000 	mov.w	r0, #0
 80a24d4:	4770      	bx	lr
 80a24d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a24da:	d102      	bne.n	80a24e2 <__aeabi_d2uiz+0x3a>
 80a24dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a24e0:	4770      	bx	lr
 80a24e2:	f04f 0000 	mov.w	r0, #0
 80a24e6:	4770      	bx	lr

080a24e8 <__aeabi_d2f>:
 80a24e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a24ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a24f0:	bf24      	itt	cs
 80a24f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a24f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a24fa:	d90d      	bls.n	80a2518 <__aeabi_d2f+0x30>
 80a24fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2500:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2504:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2508:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a250c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2510:	bf08      	it	eq
 80a2512:	f020 0001 	biceq.w	r0, r0, #1
 80a2516:	4770      	bx	lr
 80a2518:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a251c:	d121      	bne.n	80a2562 <__aeabi_d2f+0x7a>
 80a251e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2522:	bfbc      	itt	lt
 80a2524:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2528:	4770      	bxlt	lr
 80a252a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a252e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2532:	f1c2 0218 	rsb	r2, r2, #24
 80a2536:	f1c2 0c20 	rsb	ip, r2, #32
 80a253a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a253e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2542:	bf18      	it	ne
 80a2544:	f040 0001 	orrne.w	r0, r0, #1
 80a2548:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a254c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2550:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2554:	ea40 000c 	orr.w	r0, r0, ip
 80a2558:	fa23 f302 	lsr.w	r3, r3, r2
 80a255c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2560:	e7cc      	b.n	80a24fc <__aeabi_d2f+0x14>
 80a2562:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2566:	d107      	bne.n	80a2578 <__aeabi_d2f+0x90>
 80a2568:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a256c:	bf1e      	ittt	ne
 80a256e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2572:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2576:	4770      	bxne	lr
 80a2578:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a257c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2580:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2584:	4770      	bx	lr
 80a2586:	bf00      	nop

080a2588 <__aeabi_frsub>:
 80a2588:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a258c:	e002      	b.n	80a2594 <__addsf3>
 80a258e:	bf00      	nop

080a2590 <__aeabi_fsub>:
 80a2590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2594 <__addsf3>:
 80a2594:	0042      	lsls	r2, r0, #1
 80a2596:	bf1f      	itttt	ne
 80a2598:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a259c:	ea92 0f03 	teqne	r2, r3
 80a25a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a25a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a25a8:	d06a      	beq.n	80a2680 <__addsf3+0xec>
 80a25aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a25ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a25b2:	bfc1      	itttt	gt
 80a25b4:	18d2      	addgt	r2, r2, r3
 80a25b6:	4041      	eorgt	r1, r0
 80a25b8:	4048      	eorgt	r0, r1
 80a25ba:	4041      	eorgt	r1, r0
 80a25bc:	bfb8      	it	lt
 80a25be:	425b      	neglt	r3, r3
 80a25c0:	2b19      	cmp	r3, #25
 80a25c2:	bf88      	it	hi
 80a25c4:	4770      	bxhi	lr
 80a25c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a25ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a25ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a25d2:	bf18      	it	ne
 80a25d4:	4240      	negne	r0, r0
 80a25d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a25da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a25de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a25e2:	bf18      	it	ne
 80a25e4:	4249      	negne	r1, r1
 80a25e6:	ea92 0f03 	teq	r2, r3
 80a25ea:	d03f      	beq.n	80a266c <__addsf3+0xd8>
 80a25ec:	f1a2 0201 	sub.w	r2, r2, #1
 80a25f0:	fa41 fc03 	asr.w	ip, r1, r3
 80a25f4:	eb10 000c 	adds.w	r0, r0, ip
 80a25f8:	f1c3 0320 	rsb	r3, r3, #32
 80a25fc:	fa01 f103 	lsl.w	r1, r1, r3
 80a2600:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2604:	d502      	bpl.n	80a260c <__addsf3+0x78>
 80a2606:	4249      	negs	r1, r1
 80a2608:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a260c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2610:	d313      	bcc.n	80a263a <__addsf3+0xa6>
 80a2612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2616:	d306      	bcc.n	80a2626 <__addsf3+0x92>
 80a2618:	0840      	lsrs	r0, r0, #1
 80a261a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a261e:	f102 0201 	add.w	r2, r2, #1
 80a2622:	2afe      	cmp	r2, #254	; 0xfe
 80a2624:	d251      	bcs.n	80a26ca <__addsf3+0x136>
 80a2626:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a262a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a262e:	bf08      	it	eq
 80a2630:	f020 0001 	biceq.w	r0, r0, #1
 80a2634:	ea40 0003 	orr.w	r0, r0, r3
 80a2638:	4770      	bx	lr
 80a263a:	0049      	lsls	r1, r1, #1
 80a263c:	eb40 0000 	adc.w	r0, r0, r0
 80a2640:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2644:	f1a2 0201 	sub.w	r2, r2, #1
 80a2648:	d1ed      	bne.n	80a2626 <__addsf3+0x92>
 80a264a:	fab0 fc80 	clz	ip, r0
 80a264e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2652:	ebb2 020c 	subs.w	r2, r2, ip
 80a2656:	fa00 f00c 	lsl.w	r0, r0, ip
 80a265a:	bfaa      	itet	ge
 80a265c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2660:	4252      	neglt	r2, r2
 80a2662:	4318      	orrge	r0, r3
 80a2664:	bfbc      	itt	lt
 80a2666:	40d0      	lsrlt	r0, r2
 80a2668:	4318      	orrlt	r0, r3
 80a266a:	4770      	bx	lr
 80a266c:	f092 0f00 	teq	r2, #0
 80a2670:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2674:	bf06      	itte	eq
 80a2676:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a267a:	3201      	addeq	r2, #1
 80a267c:	3b01      	subne	r3, #1
 80a267e:	e7b5      	b.n	80a25ec <__addsf3+0x58>
 80a2680:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2684:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2688:	bf18      	it	ne
 80a268a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a268e:	d021      	beq.n	80a26d4 <__addsf3+0x140>
 80a2690:	ea92 0f03 	teq	r2, r3
 80a2694:	d004      	beq.n	80a26a0 <__addsf3+0x10c>
 80a2696:	f092 0f00 	teq	r2, #0
 80a269a:	bf08      	it	eq
 80a269c:	4608      	moveq	r0, r1
 80a269e:	4770      	bx	lr
 80a26a0:	ea90 0f01 	teq	r0, r1
 80a26a4:	bf1c      	itt	ne
 80a26a6:	2000      	movne	r0, #0
 80a26a8:	4770      	bxne	lr
 80a26aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a26ae:	d104      	bne.n	80a26ba <__addsf3+0x126>
 80a26b0:	0040      	lsls	r0, r0, #1
 80a26b2:	bf28      	it	cs
 80a26b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a26b8:	4770      	bx	lr
 80a26ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a26be:	bf3c      	itt	cc
 80a26c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a26c4:	4770      	bxcc	lr
 80a26c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a26ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a26ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26d2:	4770      	bx	lr
 80a26d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a26d8:	bf16      	itet	ne
 80a26da:	4608      	movne	r0, r1
 80a26dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a26e0:	4601      	movne	r1, r0
 80a26e2:	0242      	lsls	r2, r0, #9
 80a26e4:	bf06      	itte	eq
 80a26e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a26ea:	ea90 0f01 	teqeq	r0, r1
 80a26ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a26f2:	4770      	bx	lr

080a26f4 <__aeabi_ui2f>:
 80a26f4:	f04f 0300 	mov.w	r3, #0
 80a26f8:	e004      	b.n	80a2704 <__aeabi_i2f+0x8>
 80a26fa:	bf00      	nop

080a26fc <__aeabi_i2f>:
 80a26fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2700:	bf48      	it	mi
 80a2702:	4240      	negmi	r0, r0
 80a2704:	ea5f 0c00 	movs.w	ip, r0
 80a2708:	bf08      	it	eq
 80a270a:	4770      	bxeq	lr
 80a270c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2710:	4601      	mov	r1, r0
 80a2712:	f04f 0000 	mov.w	r0, #0
 80a2716:	e01c      	b.n	80a2752 <__aeabi_l2f+0x2a>

080a2718 <__aeabi_ul2f>:
 80a2718:	ea50 0201 	orrs.w	r2, r0, r1
 80a271c:	bf08      	it	eq
 80a271e:	4770      	bxeq	lr
 80a2720:	f04f 0300 	mov.w	r3, #0
 80a2724:	e00a      	b.n	80a273c <__aeabi_l2f+0x14>
 80a2726:	bf00      	nop

080a2728 <__aeabi_l2f>:
 80a2728:	ea50 0201 	orrs.w	r2, r0, r1
 80a272c:	bf08      	it	eq
 80a272e:	4770      	bxeq	lr
 80a2730:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2734:	d502      	bpl.n	80a273c <__aeabi_l2f+0x14>
 80a2736:	4240      	negs	r0, r0
 80a2738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a273c:	ea5f 0c01 	movs.w	ip, r1
 80a2740:	bf02      	ittt	eq
 80a2742:	4684      	moveq	ip, r0
 80a2744:	4601      	moveq	r1, r0
 80a2746:	2000      	moveq	r0, #0
 80a2748:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a274c:	bf08      	it	eq
 80a274e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2752:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2756:	fabc f28c 	clz	r2, ip
 80a275a:	3a08      	subs	r2, #8
 80a275c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2760:	db10      	blt.n	80a2784 <__aeabi_l2f+0x5c>
 80a2762:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2766:	4463      	add	r3, ip
 80a2768:	fa00 fc02 	lsl.w	ip, r0, r2
 80a276c:	f1c2 0220 	rsb	r2, r2, #32
 80a2770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2774:	fa20 f202 	lsr.w	r2, r0, r2
 80a2778:	eb43 0002 	adc.w	r0, r3, r2
 80a277c:	bf08      	it	eq
 80a277e:	f020 0001 	biceq.w	r0, r0, #1
 80a2782:	4770      	bx	lr
 80a2784:	f102 0220 	add.w	r2, r2, #32
 80a2788:	fa01 fc02 	lsl.w	ip, r1, r2
 80a278c:	f1c2 0220 	rsb	r2, r2, #32
 80a2790:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2794:	fa21 f202 	lsr.w	r2, r1, r2
 80a2798:	eb43 0002 	adc.w	r0, r3, r2
 80a279c:	bf08      	it	eq
 80a279e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a27a2:	4770      	bx	lr

080a27a4 <__aeabi_fmul>:
 80a27a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a27a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a27ac:	bf1e      	ittt	ne
 80a27ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a27b2:	ea92 0f0c 	teqne	r2, ip
 80a27b6:	ea93 0f0c 	teqne	r3, ip
 80a27ba:	d06f      	beq.n	80a289c <__aeabi_fmul+0xf8>
 80a27bc:	441a      	add	r2, r3
 80a27be:	ea80 0c01 	eor.w	ip, r0, r1
 80a27c2:	0240      	lsls	r0, r0, #9
 80a27c4:	bf18      	it	ne
 80a27c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a27ca:	d01e      	beq.n	80a280a <__aeabi_fmul+0x66>
 80a27cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a27d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a27d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a27d8:	fba0 3101 	umull	r3, r1, r0, r1
 80a27dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a27e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a27e4:	bf3e      	ittt	cc
 80a27e6:	0049      	lslcc	r1, r1, #1
 80a27e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a27ec:	005b      	lslcc	r3, r3, #1
 80a27ee:	ea40 0001 	orr.w	r0, r0, r1
 80a27f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a27f6:	2afd      	cmp	r2, #253	; 0xfd
 80a27f8:	d81d      	bhi.n	80a2836 <__aeabi_fmul+0x92>
 80a27fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a27fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2802:	bf08      	it	eq
 80a2804:	f020 0001 	biceq.w	r0, r0, #1
 80a2808:	4770      	bx	lr
 80a280a:	f090 0f00 	teq	r0, #0
 80a280e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2812:	bf08      	it	eq
 80a2814:	0249      	lsleq	r1, r1, #9
 80a2816:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a281a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a281e:	3a7f      	subs	r2, #127	; 0x7f
 80a2820:	bfc2      	ittt	gt
 80a2822:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2826:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a282a:	4770      	bxgt	lr
 80a282c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2830:	f04f 0300 	mov.w	r3, #0
 80a2834:	3a01      	subs	r2, #1
 80a2836:	dc5d      	bgt.n	80a28f4 <__aeabi_fmul+0x150>
 80a2838:	f112 0f19 	cmn.w	r2, #25
 80a283c:	bfdc      	itt	le
 80a283e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2842:	4770      	bxle	lr
 80a2844:	f1c2 0200 	rsb	r2, r2, #0
 80a2848:	0041      	lsls	r1, r0, #1
 80a284a:	fa21 f102 	lsr.w	r1, r1, r2
 80a284e:	f1c2 0220 	rsb	r2, r2, #32
 80a2852:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2856:	ea5f 0031 	movs.w	r0, r1, rrx
 80a285a:	f140 0000 	adc.w	r0, r0, #0
 80a285e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2862:	bf08      	it	eq
 80a2864:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2868:	4770      	bx	lr
 80a286a:	f092 0f00 	teq	r2, #0
 80a286e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2872:	bf02      	ittt	eq
 80a2874:	0040      	lsleq	r0, r0, #1
 80a2876:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a287a:	3a01      	subeq	r2, #1
 80a287c:	d0f9      	beq.n	80a2872 <__aeabi_fmul+0xce>
 80a287e:	ea40 000c 	orr.w	r0, r0, ip
 80a2882:	f093 0f00 	teq	r3, #0
 80a2886:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a288a:	bf02      	ittt	eq
 80a288c:	0049      	lsleq	r1, r1, #1
 80a288e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2892:	3b01      	subeq	r3, #1
 80a2894:	d0f9      	beq.n	80a288a <__aeabi_fmul+0xe6>
 80a2896:	ea41 010c 	orr.w	r1, r1, ip
 80a289a:	e78f      	b.n	80a27bc <__aeabi_fmul+0x18>
 80a289c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a28a0:	ea92 0f0c 	teq	r2, ip
 80a28a4:	bf18      	it	ne
 80a28a6:	ea93 0f0c 	teqne	r3, ip
 80a28aa:	d00a      	beq.n	80a28c2 <__aeabi_fmul+0x11e>
 80a28ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a28b0:	bf18      	it	ne
 80a28b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a28b6:	d1d8      	bne.n	80a286a <__aeabi_fmul+0xc6>
 80a28b8:	ea80 0001 	eor.w	r0, r0, r1
 80a28bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a28c0:	4770      	bx	lr
 80a28c2:	f090 0f00 	teq	r0, #0
 80a28c6:	bf17      	itett	ne
 80a28c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a28cc:	4608      	moveq	r0, r1
 80a28ce:	f091 0f00 	teqne	r1, #0
 80a28d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a28d6:	d014      	beq.n	80a2902 <__aeabi_fmul+0x15e>
 80a28d8:	ea92 0f0c 	teq	r2, ip
 80a28dc:	d101      	bne.n	80a28e2 <__aeabi_fmul+0x13e>
 80a28de:	0242      	lsls	r2, r0, #9
 80a28e0:	d10f      	bne.n	80a2902 <__aeabi_fmul+0x15e>
 80a28e2:	ea93 0f0c 	teq	r3, ip
 80a28e6:	d103      	bne.n	80a28f0 <__aeabi_fmul+0x14c>
 80a28e8:	024b      	lsls	r3, r1, #9
 80a28ea:	bf18      	it	ne
 80a28ec:	4608      	movne	r0, r1
 80a28ee:	d108      	bne.n	80a2902 <__aeabi_fmul+0x15e>
 80a28f0:	ea80 0001 	eor.w	r0, r0, r1
 80a28f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a28f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a28fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2900:	4770      	bx	lr
 80a2902:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2906:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a290a:	4770      	bx	lr

080a290c <__aeabi_fdiv>:
 80a290c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2910:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2914:	bf1e      	ittt	ne
 80a2916:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a291a:	ea92 0f0c 	teqne	r2, ip
 80a291e:	ea93 0f0c 	teqne	r3, ip
 80a2922:	d069      	beq.n	80a29f8 <__aeabi_fdiv+0xec>
 80a2924:	eba2 0203 	sub.w	r2, r2, r3
 80a2928:	ea80 0c01 	eor.w	ip, r0, r1
 80a292c:	0249      	lsls	r1, r1, #9
 80a292e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2932:	d037      	beq.n	80a29a4 <__aeabi_fdiv+0x98>
 80a2934:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2938:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a293c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2940:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2944:	428b      	cmp	r3, r1
 80a2946:	bf38      	it	cc
 80a2948:	005b      	lslcc	r3, r3, #1
 80a294a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a294e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2952:	428b      	cmp	r3, r1
 80a2954:	bf24      	itt	cs
 80a2956:	1a5b      	subcs	r3, r3, r1
 80a2958:	ea40 000c 	orrcs.w	r0, r0, ip
 80a295c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2960:	bf24      	itt	cs
 80a2962:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2966:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a296a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a296e:	bf24      	itt	cs
 80a2970:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2978:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a297c:	bf24      	itt	cs
 80a297e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2982:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2986:	011b      	lsls	r3, r3, #4
 80a2988:	bf18      	it	ne
 80a298a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a298e:	d1e0      	bne.n	80a2952 <__aeabi_fdiv+0x46>
 80a2990:	2afd      	cmp	r2, #253	; 0xfd
 80a2992:	f63f af50 	bhi.w	80a2836 <__aeabi_fmul+0x92>
 80a2996:	428b      	cmp	r3, r1
 80a2998:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a299c:	bf08      	it	eq
 80a299e:	f020 0001 	biceq.w	r0, r0, #1
 80a29a2:	4770      	bx	lr
 80a29a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a29a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a29ac:	327f      	adds	r2, #127	; 0x7f
 80a29ae:	bfc2      	ittt	gt
 80a29b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a29b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a29b8:	4770      	bxgt	lr
 80a29ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29be:	f04f 0300 	mov.w	r3, #0
 80a29c2:	3a01      	subs	r2, #1
 80a29c4:	e737      	b.n	80a2836 <__aeabi_fmul+0x92>
 80a29c6:	f092 0f00 	teq	r2, #0
 80a29ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a29ce:	bf02      	ittt	eq
 80a29d0:	0040      	lsleq	r0, r0, #1
 80a29d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a29d6:	3a01      	subeq	r2, #1
 80a29d8:	d0f9      	beq.n	80a29ce <__aeabi_fdiv+0xc2>
 80a29da:	ea40 000c 	orr.w	r0, r0, ip
 80a29de:	f093 0f00 	teq	r3, #0
 80a29e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a29e6:	bf02      	ittt	eq
 80a29e8:	0049      	lsleq	r1, r1, #1
 80a29ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a29ee:	3b01      	subeq	r3, #1
 80a29f0:	d0f9      	beq.n	80a29e6 <__aeabi_fdiv+0xda>
 80a29f2:	ea41 010c 	orr.w	r1, r1, ip
 80a29f6:	e795      	b.n	80a2924 <__aeabi_fdiv+0x18>
 80a29f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a29fc:	ea92 0f0c 	teq	r2, ip
 80a2a00:	d108      	bne.n	80a2a14 <__aeabi_fdiv+0x108>
 80a2a02:	0242      	lsls	r2, r0, #9
 80a2a04:	f47f af7d 	bne.w	80a2902 <__aeabi_fmul+0x15e>
 80a2a08:	ea93 0f0c 	teq	r3, ip
 80a2a0c:	f47f af70 	bne.w	80a28f0 <__aeabi_fmul+0x14c>
 80a2a10:	4608      	mov	r0, r1
 80a2a12:	e776      	b.n	80a2902 <__aeabi_fmul+0x15e>
 80a2a14:	ea93 0f0c 	teq	r3, ip
 80a2a18:	d104      	bne.n	80a2a24 <__aeabi_fdiv+0x118>
 80a2a1a:	024b      	lsls	r3, r1, #9
 80a2a1c:	f43f af4c 	beq.w	80a28b8 <__aeabi_fmul+0x114>
 80a2a20:	4608      	mov	r0, r1
 80a2a22:	e76e      	b.n	80a2902 <__aeabi_fmul+0x15e>
 80a2a24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2a28:	bf18      	it	ne
 80a2a2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2a2e:	d1ca      	bne.n	80a29c6 <__aeabi_fdiv+0xba>
 80a2a30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2a34:	f47f af5c 	bne.w	80a28f0 <__aeabi_fmul+0x14c>
 80a2a38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2a3c:	f47f af3c 	bne.w	80a28b8 <__aeabi_fmul+0x114>
 80a2a40:	e75f      	b.n	80a2902 <__aeabi_fmul+0x15e>
 80a2a42:	bf00      	nop

080a2a44 <__gesf2>:
 80a2a44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2a48:	e006      	b.n	80a2a58 <__cmpsf2+0x4>
 80a2a4a:	bf00      	nop

080a2a4c <__lesf2>:
 80a2a4c:	f04f 0c01 	mov.w	ip, #1
 80a2a50:	e002      	b.n	80a2a58 <__cmpsf2+0x4>
 80a2a52:	bf00      	nop

080a2a54 <__cmpsf2>:
 80a2a54:	f04f 0c01 	mov.w	ip, #1
 80a2a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2a5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2a64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2a68:	bf18      	it	ne
 80a2a6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2a6e:	d011      	beq.n	80a2a94 <__cmpsf2+0x40>
 80a2a70:	b001      	add	sp, #4
 80a2a72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2a76:	bf18      	it	ne
 80a2a78:	ea90 0f01 	teqne	r0, r1
 80a2a7c:	bf58      	it	pl
 80a2a7e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2a82:	bf88      	it	hi
 80a2a84:	17c8      	asrhi	r0, r1, #31
 80a2a86:	bf38      	it	cc
 80a2a88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2a8c:	bf18      	it	ne
 80a2a8e:	f040 0001 	orrne.w	r0, r0, #1
 80a2a92:	4770      	bx	lr
 80a2a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2a98:	d102      	bne.n	80a2aa0 <__cmpsf2+0x4c>
 80a2a9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2a9e:	d105      	bne.n	80a2aac <__cmpsf2+0x58>
 80a2aa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2aa4:	d1e4      	bne.n	80a2a70 <__cmpsf2+0x1c>
 80a2aa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2aaa:	d0e1      	beq.n	80a2a70 <__cmpsf2+0x1c>
 80a2aac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2ab0:	4770      	bx	lr
 80a2ab2:	bf00      	nop

080a2ab4 <__aeabi_cfrcmple>:
 80a2ab4:	4684      	mov	ip, r0
 80a2ab6:	4608      	mov	r0, r1
 80a2ab8:	4661      	mov	r1, ip
 80a2aba:	e7ff      	b.n	80a2abc <__aeabi_cfcmpeq>

080a2abc <__aeabi_cfcmpeq>:
 80a2abc:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2abe:	f7ff ffc9 	bl	80a2a54 <__cmpsf2>
 80a2ac2:	2800      	cmp	r0, #0
 80a2ac4:	bf48      	it	mi
 80a2ac6:	f110 0f00 	cmnmi.w	r0, #0
 80a2aca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2acc <__aeabi_fcmpeq>:
 80a2acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ad0:	f7ff fff4 	bl	80a2abc <__aeabi_cfcmpeq>
 80a2ad4:	bf0c      	ite	eq
 80a2ad6:	2001      	moveq	r0, #1
 80a2ad8:	2000      	movne	r0, #0
 80a2ada:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ade:	bf00      	nop

080a2ae0 <__aeabi_fcmplt>:
 80a2ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ae4:	f7ff ffea 	bl	80a2abc <__aeabi_cfcmpeq>
 80a2ae8:	bf34      	ite	cc
 80a2aea:	2001      	movcc	r0, #1
 80a2aec:	2000      	movcs	r0, #0
 80a2aee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2af2:	bf00      	nop

080a2af4 <__aeabi_fcmple>:
 80a2af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2af8:	f7ff ffe0 	bl	80a2abc <__aeabi_cfcmpeq>
 80a2afc:	bf94      	ite	ls
 80a2afe:	2001      	movls	r0, #1
 80a2b00:	2000      	movhi	r0, #0
 80a2b02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b06:	bf00      	nop

080a2b08 <__aeabi_fcmpge>:
 80a2b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b0c:	f7ff ffd2 	bl	80a2ab4 <__aeabi_cfrcmple>
 80a2b10:	bf94      	ite	ls
 80a2b12:	2001      	movls	r0, #1
 80a2b14:	2000      	movhi	r0, #0
 80a2b16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b1a:	bf00      	nop

080a2b1c <__aeabi_fcmpgt>:
 80a2b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b20:	f7ff ffc8 	bl	80a2ab4 <__aeabi_cfrcmple>
 80a2b24:	bf34      	ite	cc
 80a2b26:	2001      	movcc	r0, #1
 80a2b28:	2000      	movcs	r0, #0
 80a2b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b2e:	bf00      	nop

080a2b30 <calloc>:
 80a2b30:	4b02      	ldr	r3, [pc, #8]	; (80a2b3c <calloc+0xc>)
 80a2b32:	460a      	mov	r2, r1
 80a2b34:	4601      	mov	r1, r0
 80a2b36:	6818      	ldr	r0, [r3, #0]
 80a2b38:	f000 b823 	b.w	80a2b82 <_calloc_r>
 80a2b3c:	20000364 	.word	0x20000364

080a2b40 <__cxa_atexit>:
 80a2b40:	b510      	push	{r4, lr}
 80a2b42:	4c05      	ldr	r4, [pc, #20]	; (80a2b58 <__cxa_atexit+0x18>)
 80a2b44:	4613      	mov	r3, r2
 80a2b46:	b12c      	cbz	r4, 80a2b54 <__cxa_atexit+0x14>
 80a2b48:	460a      	mov	r2, r1
 80a2b4a:	4601      	mov	r1, r0
 80a2b4c:	2002      	movs	r0, #2
 80a2b4e:	f3af 8000 	nop.w
 80a2b52:	bd10      	pop	{r4, pc}
 80a2b54:	4620      	mov	r0, r4
 80a2b56:	bd10      	pop	{r4, pc}
 80a2b58:	00000000 	.word	0x00000000

080a2b5c <memcpy>:
 80a2b5c:	b510      	push	{r4, lr}
 80a2b5e:	1e43      	subs	r3, r0, #1
 80a2b60:	440a      	add	r2, r1
 80a2b62:	4291      	cmp	r1, r2
 80a2b64:	d004      	beq.n	80a2b70 <memcpy+0x14>
 80a2b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b6e:	e7f8      	b.n	80a2b62 <memcpy+0x6>
 80a2b70:	bd10      	pop	{r4, pc}

080a2b72 <memset>:
 80a2b72:	4603      	mov	r3, r0
 80a2b74:	4402      	add	r2, r0
 80a2b76:	4293      	cmp	r3, r2
 80a2b78:	d002      	beq.n	80a2b80 <memset+0xe>
 80a2b7a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b7e:	e7fa      	b.n	80a2b76 <memset+0x4>
 80a2b80:	4770      	bx	lr

080a2b82 <_calloc_r>:
 80a2b82:	b538      	push	{r3, r4, r5, lr}
 80a2b84:	fb02 f401 	mul.w	r4, r2, r1
 80a2b88:	4621      	mov	r1, r4
 80a2b8a:	f7fd febf 	bl	80a090c <_malloc_r>
 80a2b8e:	4605      	mov	r5, r0
 80a2b90:	b118      	cbz	r0, 80a2b9a <_calloc_r+0x18>
 80a2b92:	4622      	mov	r2, r4
 80a2b94:	2100      	movs	r1, #0
 80a2b96:	f7ff ffec 	bl	80a2b72 <memset>
 80a2b9a:	4628      	mov	r0, r5
 80a2b9c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2ba0 <srand>:
 80a2ba0:	b538      	push	{r3, r4, r5, lr}
 80a2ba2:	4b12      	ldr	r3, [pc, #72]	; (80a2bec <srand+0x4c>)
 80a2ba4:	4605      	mov	r5, r0
 80a2ba6:	681c      	ldr	r4, [r3, #0]
 80a2ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2baa:	b9d3      	cbnz	r3, 80a2be2 <srand+0x42>
 80a2bac:	2018      	movs	r0, #24
 80a2bae:	f7fd fe8d 	bl	80a08cc <malloc>
 80a2bb2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2bb6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2bb8:	8003      	strh	r3, [r0, #0]
 80a2bba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2bbe:	8043      	strh	r3, [r0, #2]
 80a2bc0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2bc4:	8083      	strh	r3, [r0, #4]
 80a2bc6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2bca:	80c3      	strh	r3, [r0, #6]
 80a2bcc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2bd0:	8103      	strh	r3, [r0, #8]
 80a2bd2:	2305      	movs	r3, #5
 80a2bd4:	8143      	strh	r3, [r0, #10]
 80a2bd6:	230b      	movs	r3, #11
 80a2bd8:	8183      	strh	r3, [r0, #12]
 80a2bda:	2201      	movs	r2, #1
 80a2bdc:	2300      	movs	r3, #0
 80a2bde:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2be4:	2200      	movs	r2, #0
 80a2be6:	611d      	str	r5, [r3, #16]
 80a2be8:	615a      	str	r2, [r3, #20]
 80a2bea:	bd38      	pop	{r3, r4, r5, pc}
 80a2bec:	20000364 	.word	0x20000364

080a2bf0 <strdup>:
 80a2bf0:	4b02      	ldr	r3, [pc, #8]	; (80a2bfc <strdup+0xc>)
 80a2bf2:	4601      	mov	r1, r0
 80a2bf4:	6818      	ldr	r0, [r3, #0]
 80a2bf6:	f000 b803 	b.w	80a2c00 <_strdup_r>
 80a2bfa:	bf00      	nop
 80a2bfc:	20000364 	.word	0x20000364

080a2c00 <_strdup_r>:
 80a2c00:	b570      	push	{r4, r5, r6, lr}
 80a2c02:	4606      	mov	r6, r0
 80a2c04:	4608      	mov	r0, r1
 80a2c06:	460c      	mov	r4, r1
 80a2c08:	f000 f80d 	bl	80a2c26 <strlen>
 80a2c0c:	1c45      	adds	r5, r0, #1
 80a2c0e:	4629      	mov	r1, r5
 80a2c10:	4630      	mov	r0, r6
 80a2c12:	f7fd fe7b 	bl	80a090c <_malloc_r>
 80a2c16:	4606      	mov	r6, r0
 80a2c18:	b118      	cbz	r0, 80a2c22 <_strdup_r+0x22>
 80a2c1a:	462a      	mov	r2, r5
 80a2c1c:	4621      	mov	r1, r4
 80a2c1e:	f7ff ff9d 	bl	80a2b5c <memcpy>
 80a2c22:	4630      	mov	r0, r6
 80a2c24:	bd70      	pop	{r4, r5, r6, pc}

080a2c26 <strlen>:
 80a2c26:	4603      	mov	r3, r0
 80a2c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c2c:	2a00      	cmp	r2, #0
 80a2c2e:	d1fb      	bne.n	80a2c28 <strlen+0x2>
 80a2c30:	1a18      	subs	r0, r3, r0
 80a2c32:	3801      	subs	r0, #1
 80a2c34:	4770      	bx	lr

080a2c36 <link_code_end>:
	...

080a2c38 <dynalib_user>:
 80a2c38:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2c48:	0000 0000 656c 2d64 6e6f 7400 676f 6c67     ....led-on.toggl
 80a2c58:	4c65 6465 0000 0000                         eLed....

080a2c60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2c68:	094b 080a 0951 080a 097b 080a 095f 080a     K...Q...{..._...
 80a2c78:	094d 080a                                   M...

080a2c7c <_ZTV7TwoWire>:
	...
 80a2c84:	0f29 080a 0f73 080a 0f4b 080a 0f2b 080a     )...s...K...+...
 80a2c94:	0f53 080a 0f5b 080a 0f63 080a 0f6b 080a     S...[...c...k...

080a2ca4 <_ZTV9IPAddress>:
	...
 80a2cac:	0fbd 080a 0fad 080a 0faf 080a 0066 6e6c     ............f.ln
 80a2cbc:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a2ccc:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a2cdc:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a2cec:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a2cfc:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a2d0c:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a2d1c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a2d2c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a2d3c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a2d4c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a2d5c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a2d6c:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a2d7c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2d8c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2d9c <_ZTVN5spark12NetworkClassE>:
	...
 80a2da4:	1085 080a 108f 080a 1099 080a 10a3 080a     ................
 80a2db4:	10ad 080a 10b9 080a 10c5 080a 10d1 080a     ................
 80a2dc4:	10d9 080a 10e3 080a 10ed 080a               ............

080a2dd0 <_ZTV8SPIClass>:
	...
 80a2dd8:	1225 080a 1227 080a 005a 2b25 3330 3a64     %...'...Z.%+03d:
 80a2de8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2df8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2e08:	0000 0000                                   ....

080a2e0c <_ZTV11USARTSerial>:
	...
 80a2e14:	1379 080a 13c9 080a 13d7 080a 1151 080a     y...........Q...
 80a2e24:	138d 080a 13af 080a 139b 080a 13c3 080a     ................
 80a2e34:	137b 080a 137f 080a                         {.......

080a2e3c <_ZTV9USBSerial>:
	...
 80a2e44:	1481 080a 14d1 080a 14df 080a 1151 080a     ............Q...
 80a2e54:	14bd 080a 1483 080a 1499 080a 14cb 080a     ................
 80a2e64:	14af 080a 147d 080a                         ....}...

080a2e6c <_ZTVN5spark9WiFiClassE>:
	...
 80a2e74:	16bb 080a 16b1 080a 16a7 080a 1619 080a     ................
 80a2e84:	169b 080a 168f 080a 1683 080a 167b 080a     ............{...
 80a2e94:	1671 080a 1667 080a 1623 080a               q...g...#...

080a2ea0 <__sf_fake_stdin>:
	...

080a2ec0 <__sf_fake_stdout>:
	...

080a2ee0 <__sf_fake_stderr>:
	...
 80a2f00:	0043                                        C.

080a2f02 <link_const_variable_data_end>:
	...

080a2f04 <link_constructors_location>:
 80a2f04:	080a0169 	.word	0x080a0169
 80a2f08:	080a058d 	.word	0x080a058d
 80a2f0c:	080a1075 	.word	0x080a1075
 80a2f10:	080a113d 	.word	0x080a113d
 80a2f14:	080a1209 	.word	0x080a1209
 80a2f18:	080a134d 	.word	0x080a134d
 80a2f1c:	080a1365 	.word	0x080a1365
 80a2f20:	080a16c5 	.word	0x080a16c5
 80a2f24:	080a18ed 	.word	0x080a18ed
 80a2f28:	080a191d 	.word	0x080a191d
 80a2f2c:	080a1975 	.word	0x080a1975
 80a2f30:	080a1a39 	.word	0x080a1a39
 80a2f34:	080a1abd 	.word	0x080a1abd
 80a2f38:	080a1b41 	.word	0x080a1b41

080a2f3c <link_constructors_end>:
 80a2f3c:	00000000 	.word	0x00000000
